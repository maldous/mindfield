.PHONY: *
.DEFAULT_GOAL := help
.ONESHELL:
SHELL := bash
KUBECTL ?= microk8s kubectl
HELM    := microk8s helm3

define METALLB_YAML
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: lan-pool
  namespace: metallb-system
spec:
  addresses:
  - 192.168.1.129-192.168.1.254
---
apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  name: lan-adv
  namespace: metallb-system
spec:
  ipAddressPools:
  - lan-pool
endef
export METALLB_YAML

# Load environment variables
ifneq (,$(wildcard .env))
	include .env
	export
endif

# Include version definitions
include versions.mk
REG ?= localhost:32000
TAG ?= $(shell git rev-parse --short HEAD)
DOMAIN ?= aldous.info

# =============================================================================
# HELP
# =============================================================================
help: ## Show this help message
	@echo 'Usage: make <target>'
	@echo ''
	@echo 'Targets:'
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# =============================================================================
# PHASE 0: SECURITY & FOUNDATION (IMMEDIATE)
# =============================================================================
phase0: phase0-security phase0-cluster phase0-validate ## Complete Phase 0: Security & Foundation

phase0-security: ## CRITICAL: Rotate credentials and setup SOPS
	@echo "üö® Phase 0: Security Fixes"
	@if [ -f "1/services/pgbouncer/databases.ini" ]; then \
		echo "ERROR: databases.ini still contains plaintext credentials!"; \
		echo "Please rotate all credentials and remove this file."; \
		exit 1; \
	fi
	@if [ -f "1/services/pgbouncer/userlist.txt" ]; then \
		echo "ERROR: userlist.txt still contains MD5 hashes!"; \
		echo "Please remove this file and implement SCRAM-SHA-256."; \
		exit 1; \
	fi
	@echo "‚úÖ Security validation passed"

phase0-cluster: ## Setup MicroK8s with required addons
	@echo "üèóÔ∏è Phase 0: Cluster Setup"
	microk8s status --wait-ready
	microk8s enable dns storage metallb registry
	@echo "Configuring MetalLB IP pool..."
	@echo "$$METALLB_YAML" | $(KUBECTL) apply -f -
	@echo "‚úÖ MicroK8s cluster ready"

phase0-validate: ## Validate Phase 0 deliverables
	@echo "üîç Phase 0: Validation"
	@echo "Checking MicroK8s addons..."
	microk8s status | grep -E "dns|storage|metallb|registry"
	@echo "Checking MetalLB configuration..."
	$(KUBECTL) get ipaddresspool -n metallb-system default-addresspool
	@echo "‚úÖ Phase 0 validation complete"

# =============================================================================
# PHASE 1: CORE INFRASTRUCTURE
# =============================================================================
phase1: phase1-prereqs phase1-postgres phase1-kong phase1-validate ## Complete Phase 1: Core Infrastructure

phase1-prereqs: ## Install Gateway API CRDs and cert-manager
	@echo "üîß Phase 1: Prerequisites"
	@echo "Installing Gateway API CRDs..."
	$(KUBECTL) apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/$(GATEWAY_API_VERSION)/standard-install.yaml
	@echo "Adding Helm repositories..."
	$(HELM) repo add kong https://charts.konghq.com
	$(HELM) repo add bitnami https://charts.bitnami.com/bitnami
	$(HELM) repo add jetstack https://charts.jetstack.io
	$(HELM) repo add external-secrets https://charts.external-secrets.io
	$(HELM) repo update
	@echo "Installing cert-manager..."
	$(HELM) upgrade --install cert-manager jetstack/cert-manager \
		--namespace cert-manager --create-namespace \
		--version $(CERT_MANAGER_CHART_VERSION) \
		--set installCRDs=true
	@echo "Installing External Secrets Operator..."
	$(HELM) upgrade --install external-secrets external-secrets/external-secrets \
		--namespace external-secrets-system --create-namespace \
		--version $(ESO_CHART_VERSION)
	@echo "Applying ESO ClusterSecretStore..."
	$(KUBECTL) apply -f k8s/security/eso-store.yaml
	@echo "‚úÖ Prerequisites installed"

phase1-postgres: ## Deploy PostgreSQL with Bitnami Helm
	@echo "üóÑÔ∏è Phase 1: PostgreSQL"
	$(KUBECTL) create namespace data --dry-run=client -o yaml | $(KUBECTL) apply -f -
	$(KUBECTL) label namespace data name=data --overwrite
	$(HELM) upgrade --install postgresql bitnami/postgresql \
		--namespace data \
		--version $(POSTGRES_CHART_VERSION) \
		--set auth.postgresPassword="$(POSTGRES_PASSWORD)" \
		--set auth.database="$(NAME)" \
		--set primary.persistence.size=50Gi \
		--set primary.persistence.storageClass=microk8s-hostpath
	@echo "‚úÖ PostgreSQL deployed"

phase1-kong: ## Deploy Kong Ingress Controller (DB-less)
	@echo "ü¶ç Phase 1: Kong Gateway"
	$(KUBECTL) create namespace gateway --dry-run=client -o yaml | $(KUBECTL) apply -f -
	$(KUBECTL) label namespace gateway name=gateway --overwrite
	$(KUBECTL) label namespace cert-manager name=cert-manager --overwrite
	$(HELM) upgrade --install kong kong/kong \
		--namespace gateway \
		--version $(KONG_CHART_VERSION) \
		--set ingressController.enabled=true \
		--set ingressController.ingressClass=kong \
		--set gateway.enabled=true \
		--set proxy.type=LoadBalancer \
		--set proxy.annotations."metallb\.universe\.tf/address-pool"=default-addresspool \
		--set env.KONG_DATABASE=off
	@echo "‚úÖ Kong Gateway deployed"

phase1-validate: ## Validate Phase 1 deliverables
	@echo "üîç Phase 1: Validation"
	@echo "Checking Gateway API CRDs..."
	$(KUBECTL) get crd gateways.gateway.networking.k8s.io
	@echo "Checking cert-manager..."
	$(KUBECTL) get pods -n cert-manager
	@echo "Checking PostgreSQL..."
	$(KUBECTL) get pods -n data -l app.kubernetes.io/name=postgresql
	@echo "Checking Kong Gateway..."
	$(KUBECTL) get pods -n gateway -l app.kubernetes.io/name=kong
	@echo "Checking LoadBalancer IP..."
	$(KUBECTL) get svc -n gateway kong-kong-proxy
	@echo "‚úÖ Phase 1 validation complete"

# =============================================================================
# PHASE 2: IDENTITY & SECURITY
# =============================================================================
phase2: phase2-keycloak phase2-policies phase2-validate ## Complete Phase 2: Identity & Security

phase2-keycloak: ## Deploy Keycloak behind Kong
	@echo "üîê Phase 2: Keycloak"
	$(KUBECTL) create namespace auth --dry-run=client -o yaml | $(KUBECTL) apply -f -
	$(KUBECTL) label namespace auth name=auth --overwrite
	$(HELM) repo add bitnami https://charts.bitnami.com/bitnami
	$(HELM) repo update
	@echo "Creating Keycloak database user..."
	$(KUBECTL) exec -n data postgresql-0 -- psql -U postgres -c "CREATE USER keycloak WITH PASSWORD '$(KC_DB_PASSWORD)'; CREATE DATABASE keycloak OWNER keycloak;" || true
	$(HELM) upgrade --install keycloak bitnami/keycloak \
		--namespace auth \
		--version $(KEYCLOAK_CHART_VERSION) \
		--set postgresql.enabled=false \
		--set externalDatabase.host=postgresql.data.svc.cluster.local \
		--set externalDatabase.user=keycloak \
		--set externalDatabase.password="$(KC_DB_PASSWORD)" \
		--set externalDatabase.database=keycloak \
		--set auth.adminUser=admin \
		--set auth.adminPassword="$(KC_BOOTSTRAP_ADMIN_PASSWORD)" \
		--set proxy=edge \
		--set proxyAddressForwarding=true
	@echo "‚úÖ Keycloak deployed"

phase2-policies: ## Implement NetworkPolicies and Pod Security Standards
	@echo "üõ°Ô∏è Phase 2: Security Policies"
	@echo "Applying Pod Security Standards..."
	$(KUBECTL) label namespace data pod-security.kubernetes.io/enforce=restricted --overwrite
	$(KUBECTL) label namespace auth pod-security.kubernetes.io/enforce=restricted --overwrite
	$(KUBECTL) label namespace gateway pod-security.kubernetes.io/enforce=baseline --overwrite
	@echo "Applying NetworkPolicies..."
	$(KUBECTL) apply -f k8s/security/
	@echo "Applying DNS policies..."
	$(KUBECTL) apply -f k8s/security/dns-policies.yaml
	@echo "Applying Kong plugins..."
	$(KUBECTL) apply -f k8s/gateway/kong-plugins.yaml
	@echo "Applying OIDC secrets..."
	$(KUBECTL) apply -f k8s/gateway/oidc-secrets.yaml
	@echo "Deploying Redis for rate limiting..."
	$(KUBECTL) apply -f k8s/gateway/redis.yaml
	@echo "Applying Gateway and HTTPRoutes..."
	$(KUBECTL) apply -f k8s/gateway/gateway.yaml
	$(KUBECTL) apply -f k8s/gateway/httproutes/
	@echo "‚úÖ Security policies applied"

phase2-validate: ## Validate Phase 2 deliverables
	@echo "üîç Phase 2: Validation"
	@echo "Checking Keycloak..."
	$(KUBECTL) get pods -n auth -l app.kubernetes.io/name=keycloak
	@echo "Checking Pod Security Standards..."
	$(KUBECTL) get namespace data -o jsonpath='{.metadata.labels}'
	@echo "Checking NetworkPolicies..."
	$(KUBECTL) get networkpolicy --all-namespaces
	@echo "Checking Kong plugins..."
	$(KUBECTL) get kongclusterplugin
	@echo "‚úÖ Phase 2 validation complete"

# =============================================================================
# PHASE 3: OBSERVABILITY
# =============================================================================
phase3: phase3-prometheus phase3-loki phase3-tempo phase3-validate ## Complete Phase 3: Observability

phase3-prometheus: ## Deploy kube-prometheus-stack
	@echo "üìä Phase 3: Prometheus Stack"
	$(KUBECTL) create namespace observability --dry-run=client -o yaml | $(KUBECTL) apply -f -
	$(KUBECTL) label namespace observability name=observability --overwrite
	$(HELM) repo add prometheus-community https://prometheus-community.github.io/helm-charts
	$(HELM) repo update
	$(HELM) upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
		--namespace observability \
		--version $(KPS_CHART_VERSION) \
		--set grafana.adminPassword="$(GRAFANA_DEFAULT_PASSWORD)" \
		--set grafana.persistence.enabled=true \
		--set grafana.persistence.size=10Gi \
		--set prometheus.prometheusSpec.retention=7d \
		--set prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.storageClassName=microk8s-hostpath \
		--set prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.resources.requests.storage=50Gi
	@echo "‚úÖ Prometheus stack deployed"

phase3-loki: ## Deploy Loki (v3.x)
	@echo "üìù Phase 3: Loki"
	$(HELM) repo add grafana https://grafana.github.io/helm-charts
	$(HELM) repo update
	$(HELM) upgrade --install loki grafana/loki \
		--namespace observability \
		--version $(LOKI_CHART_VERSION) \
		--set deploymentMode=SingleBinary \
		--set loki.commonConfig.replication_factor=1 \
		--set loki.storage.type=filesystem \
		--set singleBinary.persistence.enabled=true \
		--set singleBinary.persistence.size=50Gi \
		--set singleBinary.persistence.storageClass=microk8s-hostpath
	@echo "‚úÖ Loki deployed"

phase3-tempo: ## Deploy Tempo
	@echo "üîç Phase 3: Tempo"
	$(HELM) upgrade --install tempo grafana/tempo \
		--namespace observability \
		--version $(TEMPO_CHART_VERSION) \
		--set tempo.storage.trace.backend=local \
		--set tempo.storage.trace.local.path=/var/tempo/traces \
		--set persistence.enabled=true \
		--set persistence.size=50Gi \
		--set persistence.storageClass=microk8s-hostpath
	@echo "‚úÖ Tempo deployed"

phase3-validate: ## Validate Phase 3 deliverables
	@echo "üîç Phase 3: Validation"
	@echo "Checking Prometheus..."
	$(KUBECTL) get pods -n observability -l app.kubernetes.io/name=prometheus
	@echo "Checking Grafana..."
	$(KUBECTL) get pods -n observability -l app.kubernetes.io/name=grafana
	@echo "Checking Loki..."
	$(KUBECTL) get pods -n observability -l app.kubernetes.io/name=loki
	@echo "Checking Tempo..."
	$(KUBECTL) get pods -n observability -l app.kubernetes.io/name=tempo
	@echo "‚úÖ Phase 3 validation complete"

# =============================================================================
# PHASE 4: APPLICATIONS
# =============================================================================
phase4: phase4-temporal phase4-validate ## Complete Phase 4: Applications

phase4-temporal: ## Deploy Temporal (replace Cadence)
	@echo "‚è∞ Phase 4: Temporal"
	$(KUBECTL) create namespace temporal --dry-run=client -o yaml | $(KUBECTL) apply -f -
	$(KUBECTL) label namespace temporal name=temporal --overwrite
	$(HELM) repo add temporalio https://temporalio.github.io/helm-charts
	$(HELM) repo update
	@echo "Creating Temporal database users..."
	$(KUBECTL) exec -n data postgresql-0 -- psql -U postgres -c "CREATE USER temporal WITH PASSWORD '$(TEMPORAL_DB_PASSWORD)'; CREATE DATABASE temporal OWNER temporal;" || true
	$(KUBECTL) exec -n data postgresql-0 -- psql -U postgres -c "CREATE USER temporal_visibility WITH PASSWORD '$(TEMPORAL_VIS_DB_PASSWORD)'; CREATE DATABASE temporal_visibility OWNER temporal_visibility;" || true
	@echo "Rendering Temporal values with environment variables..."
	envsubst < k8s/configs/temporal-values.yaml > /tmp/temporal-values.rendered.yaml
	$(HELM) upgrade --install temporal temporalio/temporal \
		--namespace temporal \
		--version $(TEMPORAL_CHART_VERSION) \
		--values /tmp/temporal-values.rendered.yaml
	@echo "‚úÖ Temporal deployed"

phase4-validate: ## Validate Phase 4 deliverables
	@echo "üîç Phase 4: Validation"
	@echo "Checking Temporal..."
	$(KUBECTL) get pods -n temporal -l app.kubernetes.io/name=temporal
	@echo "‚úÖ Phase 4 validation complete"

# =============================================================================
# PHASE 5: GITOPS & AUTOMATION
# =============================================================================
phase5: phase5-flux phase5-velero phase5-validate ## Complete Phase 5: GitOps & Automation

phase5-flux: ## Bootstrap Flux
	@echo "üîÑ Phase 5: Flux GitOps"
	@echo "Installing Flux CLI..."
	curl -s https://fluxcd.io/install.sh | sudo bash
	@echo "Bootstrapping Flux..."
	@if [ -z "$(GITHUB_USER)" ] || [ -z "$(GITHUB_REPO)" ]; then \
		echo "Please set GITHUB_USER and GITHUB_REPO environment variables"; \
		exit 1; \
	fi
	flux bootstrap git \
		--url=https://github.com/$(GITHUB_USER)/$(GITHUB_REPO) \
		--branch=main \
		--path=./flux/clusters/local
	@echo "‚úÖ Flux bootstrapped"

phase5-velero: ## Implement Velero backups
	@echo "üíæ Phase 5: Velero Backups"
	$(HELM) repo add vmware-tanzu https://vmware-tanzu.github.io/helm-charts
	$(HELM) repo update
	$(HELM) upgrade --install velero vmware-tanzu/velero \
		--namespace velero --create-namespace \
		--version $(VELERO_CHART_VERSION) \
		--set configuration.backupStorageLocation[0].name=default \
		--set configuration.backupStorageLocation[0].provider=aws \
		--set configuration.backupStorageLocation[0].bucket=$(BACKUP_BUCKET) \
		--set configuration.backupStorageLocation[0].config.region=$(AWS_REGION) \
		--set configuration.backupStorageLocation[0].config.s3ForcePathStyle=true \
		--set configuration.backupStorageLocation[0].config.s3Url=$(MINIO_ENDPOINT)
	@echo "‚úÖ Velero deployed"

phase5-validate: ## Validate Phase 5 deliverables
	@echo "üîç Phase 5: Validation"
	@echo "Checking Flux..."
	flux get all || echo "Flux not configured"
	@echo "Checking Velero..."
	$(KUBECTL) get pods -n velero -l app.kubernetes.io/name=velero
	@echo "Applying backup schedules..."
	$(KUBECTL) apply -f k8s/velero/backup-schedule.yaml
	@echo "Testing backup/restore..."
	velero backup create test-backup --include-namespaces default --wait || echo "Backup test failed"
	velero restore create test-restore --from-backup test-backup --wait || echo "Restore test failed"
	@echo "Applying GitOps manifests..."
	envsubst < flux/clusters/local/observability-source.yaml | $(KUBECTL) apply -f -
	@echo "‚úÖ Phase 5 validation complete"

# =============================================================================
# PHASE 6: CLEANUP
# =============================================================================
phase6: phase6-cleanup phase6-validate ## Complete Phase 6: Cleanup

phase6-cleanup: ## Remove Docker Compose files and old infrastructure
	@echo "üßπ Phase 6: Cleanup"
	@echo "Archiving old infrastructure..."
	mkdir -p archive/$(shell date +%Y%m%d)
	mv docker/ archive/$(shell date +%Y%m%d)/ 2>/dev/null || true
	mv 1/ archive/$(shell date +%Y%m%d)/ 2>/dev/null || true
	mv 0/ archive/$(shell date +%Y%m%d)/ 2>/dev/null || true
	@echo "‚úÖ Cleanup complete"

phase6-validate: ## Validate Phase 6 deliverables
	@echo "üîç Phase 6: Validation"
	@echo "Checking archived files..."
	ls -la archive/ 2>/dev/null || echo "No archive directory found"
	@echo "‚úÖ Phase 6 validation complete"

# =============================================================================
# UTILITIES
# =============================================================================
status: ## Show cluster status
	@echo "üìä Cluster Status"
	@echo "MicroK8s Status:"
	microk8s status
	@echo "\nNamespaces:"
	$(KUBECTL) get namespaces
	@echo "\nPods by namespace:"
	$(KUBECTL) get pods --all-namespaces
	@echo "\nServices with external IPs:"
	$(KUBECTL) get svc --all-namespaces -o wide | grep -E "LoadBalancer|NodePort"

clean: ## Clean up failed deployments
	@echo "üßΩ Cleaning up..."
	$(HELM) list --all-namespaces --failed -q | xargs -r $(HELM) delete
	$(KUBECTL) get pods --all-namespaces --field-selector=status.phase=Failed -o name | xargs -r $(KUBECTL) delete

reset: ## Reset entire cluster (DANGEROUS)
	@echo "‚ö†Ô∏è  This will destroy the entire cluster!"
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		microk8s reset; \
	else \
		echo "Cancelled."; \
	fi

# =============================================================================
# TESTING
# =============================================================================
test-phase0: phase0-validate ## Test Phase 0 deliverables
test-phase1: phase1-validate ## Test Phase 1 deliverables
test-phase2: phase2-validate ## Test Phase 2 deliverables
test-phase3: phase3-validate ## Test Phase 3 deliverables
test-phase4: phase4-validate ## Test Phase 4 deliverables
test-phase5: phase5-validate ## Test Phase 5 deliverables
test-phase6: phase6-validate ## Test Phase 6 deliverables

test-all: test-phase0 test-phase1 test-phase2 test-phase3 test-phase4 test-phase5 test-phase6 ## Test all phases

# =============================================================================
# COMPLETE MIGRATION
# =============================================================================
migrate: phase0 phase1 phase2 phase3 phase4 phase5 phase6 ## Complete full migration
	@echo "üéâ Migration complete!"
	@echo "Your Kubernetes cluster is ready with:"
	@echo "- Core infrastructure (PostgreSQL, Kong Gateway)"
	@echo "- Identity & Security (Keycloak, NetworkPolicies)"
	@echo "- Observability (Prometheus, Loki, Tempo)"
	@echo "- Applications (Temporal)"
	@echo "- GitOps & Automation (Flux, Velero)"
	@echo "- Cleanup completed"
	@echo "\nNext steps:"
	@echo "1. Configure DNS to point to Kong LoadBalancer IP"
	@echo "2. Setup monitoring dashboards"
	@echo "3. Test application deployments"
	@echo "4. Configure backup schedules"
