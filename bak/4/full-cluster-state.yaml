apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: e1a0664421be144e7bab5e39d73ba85efbbf6d2f124c3ed4e24e6418df124886
      cni.projectcalico.org/podIP: 10.1.24.2/32
      cni.projectcalico.org/podIPs: 10.1.24.2/32
    creationTimestamp: "2025-07-31T03:05:13Z"
    generateName: rook-ceph-operator-79df5fd9d5-
    labels:
      app: rook-ceph-operator
      helm.sh/chart: rook-ceph-v1.17.6
      pod-template-hash: 79df5fd9d5
    name: rook-ceph-operator-79df5fd9d5-mjlb4
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: rook-ceph-operator-79df5fd9d5
      uid: 71d04c68-5f70-4785-9e74-4fc1fa64ce95
    resourceVersion: "7645"
    uid: c39c250b-5877-4102-91d4-0d8816d9b4f5
  spec:
    containers:
    - args:
      - ceph
      - operator
      env:
      - name: ROOK_CURRENT_NAMESPACE_ONLY
        value: "false"
      - name: ROOK_HOSTPATH_REQUIRES_PRIVILEGED
        value: "false"
      - name: ROOK_DISABLE_DEVICE_HOTPLUG
        value: "false"
      - name: ROOK_DISCOVER_DEVICES_INTERVAL
        value: 60m
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: docker.io/rook/ceph:v1.17.6
      imagePullPolicy: IfNotPresent
      name: rook-ceph-operator
      resources:
        limits:
          memory: 512Mi
        requests:
          cpu: 200m
          memory: 128Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        runAsGroup: 2016
        runAsNonRoot: true
        runAsUser: 2016
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/rook
        name: rook-config
      - mountPath: /etc/ceph
        name: default-config-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-f4zsv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: foo
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: rook-ceph-system
    serviceAccountName: rook-ceph-system
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 5
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: rook-config
    - emptyDir: {}
      name: default-config-dir
    - name: kube-api-access-f4zsv
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:05:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:05:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:05:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:05:13Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://73431699c91ef277c345ac07ac56193631eba2fa64cfca45904f0e85cbf930c8
      image: docker.io/rook/ceph:v1.17.6
      imageID: docker.io/rook/ceph@sha256:4ce4a273490031d8d3512101c78998d6f0e68191dc1e33df868ccb7163e468f6
      lastState: {}
      name: rook-ceph-operator
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:05:29Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.2
    podIPs:
    - ip: 10.1.24.2
    qosClass: Burstable
    startTime: "2025-07-31T03:05:13Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-07-31T03:08:22Z"
    generateName: csi-rbdplugin-
    labels:
      app: csi-rbdplugin
      contains: csi-rbdplugin-metrics
      controller-revision-hash: 5759f96fff
      pod-template-generation: "1"
    name: csi-rbdplugin-l6r8t
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-rbdplugin
      uid: 38d6c572-e17a-47c2-b984-b7d966faebb2
    resourceVersion: "8080"
    uid: ae90f4d1-f87b-44dd-9621-4443f5dec67f
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - foo
    containers:
    - args:
      - --v=0
      - --csi-address=/csi/csi.sock
      - --kubelet-registration-path=/var/lib/kubelet/plugins/rook-ceph.rbd.csi.ceph.com/csi.sock
      env:
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imagePullPolicy: IfNotPresent
      name: driver-registrar
      resources:
        limits:
          memory: 256Mi
        requests:
          cpu: 50m
          memory: 128Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: plugin-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c2qxh
        readOnly: true
    - args:
      - --nodeid=$(NODE_ID)
      - --endpoint=$(CSI_ENDPOINT)
      - --v=0
      - --type=rbd
      - --nodeserver=true
      - --drivername=rook-ceph.rbd.csi.ceph.com
      - --pidlimit=-1
      - --stagingpath=/var/lib/kubelet/plugins/kubernetes.io/csi/
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: NODE_ID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      image: quay.io/cephcsi/cephcsi:v3.14.1
      imagePullPolicy: IfNotPresent
      name: csi-rbdplugin
      resources:
        limits:
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 512Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
          drop:
          - ALL
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: plugin-dir
      - mountPath: /var/lib/kubelet/pods
        mountPropagation: Bidirectional
        name: pods-mount-dir
      - mountPath: /var/lib/kubelet/plugins
        mountPropagation: Bidirectional
        name: plugin-mount-dir
      - mountPath: /dev
        name: host-dev
      - mountPath: /sys
        name: host-sys
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /etc/ceph-csi-config/
        name: ceph-csi-configs
      - mountPath: /tmp/csi/keys
        name: keys-tmp-dir
      - mountPath: /run/mount
        name: host-run-mount
      - mountPath: /run/secrets/tokens
        name: oidc-token
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c2qxh
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: foo
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: rook-csi-rbd-plugin-sa
    serviceAccountName: rook-csi-rbd-plugin-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins/rook-ceph.rbd.csi.ceph.com
        type: DirectoryOrCreate
      name: plugin-dir
    - hostPath:
        path: /var/lib/kubelet/plugins
        type: Directory
      name: plugin-mount-dir
    - hostPath:
        path: /var/lib/kubelet/plugins_registry/
        type: Directory
      name: registration-dir
    - hostPath:
        path: /var/lib/kubelet/pods
        type: Directory
      name: pods-mount-dir
    - hostPath:
        path: /dev
        type: ""
      name: host-dev
    - hostPath:
        path: /sys
        type: ""
      name: host-sys
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: ceph-csi-configs
      projected:
        defaultMode: 420
        sources:
        - configMap:
            items:
            - key: csi-cluster-config-json
              path: config.json
            name: rook-ceph-csi-config
        - configMap:
            items:
            - key: csi-mapping-config-json
              path: cluster-mapping.json
            name: rook-ceph-csi-mapping-config
    - emptyDir:
        medium: Memory
      name: keys-tmp-dir
    - hostPath:
        path: /run/mount
        type: ""
      name: host-run-mount
    - name: oidc-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: ceph-csi-kms
            expirationSeconds: 3600
            path: oidc-token
    - name: kube-api-access-c2qxh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:08:22Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:09:15Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:09:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:08:22Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://50764d9dd3db5d038c9f85604d608dad27cf64c173d87ced0586a138b616b506
      image: quay.io/cephcsi/cephcsi:v3.14.1
      imageID: quay.io/cephcsi/cephcsi@sha256:6b3421b357e5fce6d9b25e3173890c60cb293c2f0ee48f3d804ee68314636747
      lastState: {}
      name: csi-rbdplugin
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:14Z"
    - containerID: containerd://e99857e6e5c801cb40cf918ef82f05e708af1006c460634389b326590d3fd6e0
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imageID: registry.k8s.io/sig-storage/csi-node-driver-registrar@sha256:d7138bcc3aa5f267403d45ad4292c95397e421ea17a0035888850f424c7de25d
      lastState:
        terminated:
          containerID: containerd://f597b8b8f520406f065e9e06755ec7285f701652623c0ea289c3d47e8c4e6d11
          exitCode: 1
          finishedAt: "2025-07-31T03:08:57Z"
          reason: Error
          startedAt: "2025-07-31T03:08:27Z"
      name: driver-registrar
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:14Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 192.168.1.26
    podIPs:
    - ip: 192.168.1.26
    qosClass: Burstable
    startTime: "2025-07-31T03:08:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-07-31T03:08:22Z"
    generateName: csi-cephfsplugin-
    labels:
      app: csi-cephfsplugin
      contains: csi-cephfsplugin-metrics
      controller-revision-hash: 68bd84ddbb
      pod-template-generation: "1"
    name: csi-cephfsplugin-fsmt4
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-cephfsplugin
      uid: 011009ad-180b-4943-a286-797669dc535f
    resourceVersion: "8090"
    uid: ee072f2e-1f56-4380-84fa-e225468d9f95
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - foo
    containers:
    - args:
      - --v=0
      - --csi-address=/csi/csi.sock
      - --kubelet-registration-path=/var/lib/kubelet/plugins/rook-ceph.cephfs.csi.ceph.com/csi.sock
      env:
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imagePullPolicy: IfNotPresent
      name: driver-registrar
      resources:
        limits:
          memory: 256Mi
        requests:
          cpu: 50m
          memory: 128Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: plugin-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d79pc
        readOnly: true
    - args:
      - --nodeid=$(NODE_ID)
      - --type=cephfs
      - --endpoint=$(CSI_ENDPOINT)
      - --v=0
      - --nodeserver=true
      - --drivername=rook-ceph.cephfs.csi.ceph.com
      - --pidlimit=-1
      - --forcecephkernelclient=true
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: NODE_ID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      image: quay.io/cephcsi/cephcsi:v3.14.1
      imagePullPolicy: IfNotPresent
      name: csi-cephfsplugin
      resources:
        limits:
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 512Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
          drop:
          - ALL
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: plugin-dir
      - mountPath: /csi/mountinfo
        name: ceph-csi-mountinfo
      - mountPath: /var/lib/kubelet/plugins
        mountPropagation: Bidirectional
        name: csi-plugins-dir
      - mountPath: /var/lib/kubelet/pods
        mountPropagation: Bidirectional
        name: pods-mount-dir
      - mountPath: /sys
        name: host-sys
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /dev
        name: host-dev
      - mountPath: /etc/ceph-csi-config/
        name: ceph-csi-config
      - mountPath: /tmp/csi/keys
        name: keys-tmp-dir
      - mountPath: /run/mount
        name: host-run-mount
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d79pc
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    nodeName: foo
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: rook-csi-cephfs-plugin-sa
    serviceAccountName: rook-csi-cephfs-plugin-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins/rook-ceph.cephfs.csi.ceph.com/mountinfo
        type: DirectoryOrCreate
      name: ceph-csi-mountinfo
    - hostPath:
        path: /var/lib/kubelet/plugins/rook-ceph.cephfs.csi.ceph.com/
        type: DirectoryOrCreate
      name: plugin-dir
    - hostPath:
        path: /var/lib/kubelet/plugins
        type: Directory
      name: csi-plugins-dir
    - hostPath:
        path: /var/lib/kubelet/plugins_registry/
        type: Directory
      name: registration-dir
    - hostPath:
        path: /var/lib/kubelet/pods
        type: Directory
      name: pods-mount-dir
    - hostPath:
        path: /sys
        type: ""
      name: host-sys
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /dev
        type: ""
      name: host-dev
    - configMap:
        defaultMode: 420
        items:
        - key: csi-cluster-config-json
          path: config.json
        name: rook-ceph-csi-config
      name: ceph-csi-config
    - emptyDir:
        medium: Memory
      name: keys-tmp-dir
    - hostPath:
        path: /run/mount
        type: ""
      name: host-run-mount
    - name: kube-api-access-d79pc
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:08:22Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:09:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:09:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:08:22Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f0b795a1643c473dd2467f9a9a8013f57070e0d52947ec5f2b6e59f6368e899c
      image: quay.io/cephcsi/cephcsi:v3.14.1
      imageID: quay.io/cephcsi/cephcsi@sha256:6b3421b357e5fce6d9b25e3173890c60cb293c2f0ee48f3d804ee68314636747
      lastState: {}
      name: csi-cephfsplugin
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:14Z"
    - containerID: containerd://0bdfa8c48336ebb8972ddfd9ab404d7406d914889b8d9a9c35f0260defd20733
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imageID: registry.k8s.io/sig-storage/csi-node-driver-registrar@sha256:d7138bcc3aa5f267403d45ad4292c95397e421ea17a0035888850f424c7de25d
      lastState:
        terminated:
          containerID: containerd://02290afc0b803aa1edbb79125ec0043fe5614da5f2620aa85889b2e00505cf72
          exitCode: 1
          finishedAt: "2025-07-31T03:08:58Z"
          reason: Error
          startedAt: "2025-07-31T03:08:28Z"
      name: driver-registrar
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:15Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 192.168.1.26
    podIPs:
    - ip: 192.168.1.26
    qosClass: Burstable
    startTime: "2025-07-31T03:08:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 77c084bdc225d15ce1e96abb22fbc4f6a05454a3437dbad96c1e03ec1e522014
      cni.projectcalico.org/podIP: 10.1.24.4/32
      cni.projectcalico.org/podIPs: 10.1.24.4/32
    creationTimestamp: "2025-07-31T03:08:22Z"
    generateName: csi-rbdplugin-provisioner-d88479984-
    labels:
      app: csi-rbdplugin-provisioner
      contains: csi-rbdplugin-metrics
      pod-template-hash: d88479984
    name: csi-rbdplugin-provisioner-d88479984-225pk
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: csi-rbdplugin-provisioner-d88479984
      uid: 862ef5b5-b12b-4d2b-9931-0e54c41ccceb
    resourceVersion: "8150"
    uid: 24a5e683-2c25-4d1d-aaa4-8338cbc642e2
  spec:
    affinity:
      nodeAffinity: {}
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - csi-rbdplugin-provisioner
          topologyKey: kubernetes.io/hostname
    containers:
    - args:
      - --csi-address=$(ADDRESS)
      - --v=0
      - --timeout=2m30s
      - --retry-interval-start=500ms
      - --leader-election=true
      - --leader-election-namespace=rook-ceph
      - --leader-election-lease-duration=2m17s
      - --leader-election-renew-deadline=1m47s
      - --leader-election-retry-period=26s
      - --default-fstype=ext4
      - --extra-create-metadata=true
      - --prevent-volume-mode-conversion=true
      - --feature-gates=HonorPVReclaimPolicy=true
      - --feature-gates=Topology=false
      env:
      - name: ADDRESS
        value: unix:///csi/csi-provisioner.sock
      image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
      imagePullPolicy: IfNotPresent
      name: csi-provisioner
      resources:
        limits:
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rzlzc
        readOnly: true
    - args:
      - --csi-address=$(ADDRESS)
      - --v=0
      - --timeout=2m30s
      - --leader-election=true
      - --leader-election-namespace=rook-ceph
      - --leader-election-lease-duration=2m17s
      - --leader-election-renew-deadline=1m47s
      - --leader-election-retry-period=26s
      - --handle-volume-inuse-error=false
      - --feature-gates=RecoverVolumeExpansionFailure=true
      env:
      - name: ADDRESS
        value: unix:///csi/csi-provisioner.sock
      image: registry.k8s.io/sig-storage/csi-resizer:v1.13.2
      imagePullPolicy: IfNotPresent
      name: csi-resizer
      resources:
        limits:
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rzlzc
        readOnly: true
    - args:
      - --v=0
      - --timeout=2m30s
      - --csi-address=$(ADDRESS)
      - --leader-election=true
      - --leader-election-namespace=rook-ceph
      - --leader-election-lease-duration=2m17s
      - --leader-election-renew-deadline=1m47s
      - --leader-election-retry-period=26s
      - --default-fstype=ext4
      env:
      - name: ADDRESS
        value: /csi/csi-provisioner.sock
      image: registry.k8s.io/sig-storage/csi-attacher:v4.8.1
      imagePullPolicy: IfNotPresent
      name: csi-attacher
      resources:
        limits:
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rzlzc
        readOnly: true
    - args:
      - --csi-address=$(ADDRESS)
      - --v=0
      - --timeout=2m30s
      - --leader-election=true
      - --leader-election-namespace=rook-ceph
      - --leader-election-lease-duration=2m17s
      - --leader-election-renew-deadline=1m47s
      - --leader-election-retry-period=26s
      - --extra-create-metadata=true
      env:
      - name: ADDRESS
        value: unix:///csi/csi-provisioner.sock
      image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.1
      imagePullPolicy: IfNotPresent
      name: csi-snapshotter
      resources:
        limits:
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rzlzc
        readOnly: true
    - args:
      - --nodeid=$(NODE_ID)
      - --endpoint=$(CSI_ENDPOINT)
      - --v=0
      - --type=rbd
      - --controllerserver=true
      - --drivername=rook-ceph.rbd.csi.ceph.com
      - --pidlimit=-1
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: NODE_ID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CSI_ENDPOINT
        value: unix:///csi/csi-provisioner.sock
      image: quay.io/cephcsi/cephcsi:v3.14.1
      imagePullPolicy: IfNotPresent
      name: csi-rbdplugin
      resources:
        limits:
          memory: 1Gi
        requests:
          memory: 512Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /dev
        name: host-dev
      - mountPath: /sys
        name: host-sys
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /etc/ceph-csi-config/
        name: ceph-csi-configs
      - mountPath: /tmp/csi/keys
        name: keys-tmp-dir
      - mountPath: /run/secrets/tokens
        name: oidc-token
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rzlzc
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: foo
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: rook-csi-rbd-provisioner-sa
    serviceAccountName: rook-csi-rbd-provisioner-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /dev
        type: ""
      name: host-dev
    - hostPath:
        path: /sys
        type: ""
      name: host-sys
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - emptyDir:
        medium: Memory
      name: socket-dir
    - name: ceph-csi-configs
      projected:
        defaultMode: 420
        sources:
        - configMap:
            items:
            - key: csi-cluster-config-json
              path: config.json
            name: rook-ceph-csi-config
        - configMap:
            items:
            - key: csi-mapping-config-json
              path: cluster-mapping.json
            name: rook-ceph-csi-mapping-config
    - emptyDir:
        medium: Memory
      name: keys-tmp-dir
    - name: oidc-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: ceph-csi-kms
            expirationSeconds: 3600
            path: oidc-token
    - name: kube-api-access-rzlzc
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:08:22Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:09:25Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:09:25Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:08:22Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://3e315a692bb5152b4997ba71f7d36c59bf92d8117707411c055745f3706f2a37
      image: registry.k8s.io/sig-storage/csi-attacher:v4.8.1
      imageID: registry.k8s.io/sig-storage/csi-attacher@sha256:69888dba58159c8bc0d7c092b9fb97900c9ca8710d088b0b7ea7bd9052df86f6
      lastState: {}
      name: csi-attacher
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:24Z"
    - containerID: containerd://448bd00f1c2a541941d55ef6c6f2dba0393b18d12eacc1a5268c6a78cdbcf6bf
      image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
      imageID: registry.k8s.io/sig-storage/csi-provisioner@sha256:d5e46da8aff7d73d6f00c761dae94472bcda6e78f4f17b3802dc89d44de0111b
      lastState:
        terminated:
          containerID: containerd://40cf9a70ba9ad10700a18f73a52b5bbd099a2815009a9ce6adfcc9e56ba01e60
          exitCode: 1
          finishedAt: "2025-07-31T03:09:08Z"
          reason: Error
          startedAt: "2025-07-31T03:08:38Z"
      name: csi-provisioner
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:24Z"
    - containerID: containerd://b89ea269b6c96ef7cb454dfeb777a6084fe5b8e5e441b8c7fe6d7900460ade25
      image: quay.io/cephcsi/cephcsi:v3.14.1
      imageID: quay.io/cephcsi/cephcsi@sha256:6b3421b357e5fce6d9b25e3173890c60cb293c2f0ee48f3d804ee68314636747
      lastState: {}
      name: csi-rbdplugin
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:24Z"
    - containerID: containerd://13175e206d5eb0efe4399769e6cd8feae4ea58f14da9113125d2dfed455ad310
      image: registry.k8s.io/sig-storage/csi-resizer:v1.13.2
      imageID: registry.k8s.io/sig-storage/csi-resizer@sha256:8ddd178ba5d08973f1607f9b84619b58320948de494b31c9d7cd5375b316d6d4
      lastState: {}
      name: csi-resizer
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:24Z"
    - containerID: containerd://ce317643b5286151d8209a76df2df01bdb8988fc83877cf8cf2a435836174ba1
      image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.1
      imageID: registry.k8s.io/sig-storage/csi-snapshotter@sha256:5f4bb469fec51147ce157329dab598c758da1b018bad6dad26f0ff469326d769
      lastState: {}
      name: csi-snapshotter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:24Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.4
    podIPs:
    - ip: 10.1.24.4
    qosClass: Burstable
    startTime: "2025-07-31T03:08:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: a965be1ff28ffeb299ac28ed8d83b7cd82609c8481fd5a93570919104e23f58a
      cni.projectcalico.org/podIP: 10.1.24.3/32
      cni.projectcalico.org/podIPs: 10.1.24.3/32
    creationTimestamp: "2025-07-31T03:08:22Z"
    generateName: csi-cephfsplugin-provisioner-7849cb4446-
    labels:
      app: csi-cephfsplugin-provisioner
      contains: csi-cephfsplugin-metrics
      pod-template-hash: 7849cb4446
    name: csi-cephfsplugin-provisioner-7849cb4446-dmhbx
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: csi-cephfsplugin-provisioner-7849cb4446
      uid: 2260b00c-45b2-45e3-90f3-70e5b93aff05
    resourceVersion: "8170"
    uid: 7e401ef4-90de-4d0d-a88a-145f4d0667d5
  spec:
    affinity:
      nodeAffinity: {}
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - csi-cephfsplugin-provisioner
          topologyKey: kubernetes.io/hostname
    containers:
    - args:
      - --v=0
      - --csi-address=$(ADDRESS)
      - --leader-election=true
      - --timeout=2m30s
      - --leader-election-namespace=rook-ceph
      - --leader-election-lease-duration=2m17s
      - --leader-election-renew-deadline=1m47s
      - --leader-election-retry-period=26s
      env:
      - name: ADDRESS
        value: /csi/csi-provisioner.sock
      image: registry.k8s.io/sig-storage/csi-attacher:v4.8.1
      imagePullPolicy: IfNotPresent
      name: csi-attacher
      resources:
        limits:
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-p6vmg
        readOnly: true
    - args:
      - --csi-address=$(ADDRESS)
      - --v=0
      - --timeout=2m30s
      - --leader-election=true
      - --leader-election-namespace=rook-ceph
      - --leader-election-lease-duration=2m17s
      - --leader-election-renew-deadline=1m47s
      - --leader-election-retry-period=26s
      - --extra-create-metadata=true
      env:
      - name: ADDRESS
        value: unix:///csi/csi-provisioner.sock
      image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.1
      imagePullPolicy: IfNotPresent
      name: csi-snapshotter
      resources:
        limits:
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-p6vmg
        readOnly: true
    - args:
      - --csi-address=$(ADDRESS)
      - --v=0
      - --timeout=2m30s
      - --leader-election=true
      - --leader-election-namespace=rook-ceph
      - --leader-election-lease-duration=2m17s
      - --leader-election-renew-deadline=1m47s
      - --leader-election-retry-period=26s
      - --handle-volume-inuse-error=false
      - --feature-gates=RecoverVolumeExpansionFailure=true
      env:
      - name: ADDRESS
        value: unix:///csi/csi-provisioner.sock
      image: registry.k8s.io/sig-storage/csi-resizer:v1.13.2
      imagePullPolicy: IfNotPresent
      name: csi-resizer
      resources:
        limits:
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-p6vmg
        readOnly: true
    - args:
      - --csi-address=$(ADDRESS)
      - --v=0
      - --timeout=2m30s
      - --retry-interval-start=500ms
      - --leader-election=true
      - --leader-election-namespace=rook-ceph
      - --feature-gates=HonorPVReclaimPolicy=true
      - --prevent-volume-mode-conversion=true
      - --leader-election-lease-duration=2m17s
      - --leader-election-renew-deadline=1m47s
      - --leader-election-retry-period=26s
      - --extra-create-metadata=true
      env:
      - name: ADDRESS
        value: unix:///csi/csi-provisioner.sock
      image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
      imagePullPolicy: IfNotPresent
      name: csi-provisioner
      resources:
        limits:
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-p6vmg
        readOnly: true
    - args:
      - --nodeid=$(NODE_ID)
      - --type=cephfs
      - --endpoint=$(CSI_ENDPOINT)
      - --v=0
      - --controllerserver=true
      - --drivername=rook-ceph.cephfs.csi.ceph.com
      - --pidlimit=-1
      - --forcecephkernelclient=true
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: NODE_ID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CSI_ENDPOINT
        value: unix:///csi/csi-provisioner.sock
      image: quay.io/cephcsi/cephcsi:v3.14.1
      imagePullPolicy: IfNotPresent
      name: csi-cephfsplugin
      resources:
        limits:
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 512Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /sys
        name: host-sys
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /dev
        name: host-dev
      - mountPath: /etc/ceph-csi-config/
        name: ceph-csi-config
      - mountPath: /tmp/csi/keys
        name: keys-tmp-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-p6vmg
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: foo
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: rook-csi-cephfs-provisioner-sa
    serviceAccountName: rook-csi-cephfs-provisioner-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        medium: Memory
      name: socket-dir
    - hostPath:
        path: /sys
        type: ""
      name: host-sys
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /dev
        type: ""
      name: host-dev
    - configMap:
        defaultMode: 420
        items:
        - key: csi-cluster-config-json
          path: config.json
        name: rook-ceph-csi-config
      name: ceph-csi-config
    - emptyDir:
        medium: Memory
      name: keys-tmp-dir
    - name: kube-api-access-p6vmg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:08:22Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:09:26Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:09:26Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:08:22Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a12d72a11834c5dfc9172f36bd7fd9ffdd73e5cea6aafb85f239032608cd748c
      image: registry.k8s.io/sig-storage/csi-attacher:v4.8.1
      imageID: registry.k8s.io/sig-storage/csi-attacher@sha256:69888dba58159c8bc0d7c092b9fb97900c9ca8710d088b0b7ea7bd9052df86f6
      lastState:
        terminated:
          containerID: containerd://70dfa396e1b7d452ebd77938d7015b449dfa7f796c70bab9c2c8a4127afbe712
          exitCode: 1
          finishedAt: "2025-07-31T03:09:03Z"
          reason: Error
          startedAt: "2025-07-31T03:08:33Z"
      name: csi-attacher
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:25Z"
    - containerID: containerd://fb505ce33b6f7e106a257f6dfac2384d926642cb9f02079ff6ffd4c5df717cdd
      image: quay.io/cephcsi/cephcsi:v3.14.1
      imageID: quay.io/cephcsi/cephcsi@sha256:6b3421b357e5fce6d9b25e3173890c60cb293c2f0ee48f3d804ee68314636747
      lastState: {}
      name: csi-cephfsplugin
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:25Z"
    - containerID: containerd://b16ad36b02f9cefadbb88d265eae8c6ed5a69b75ad442f293b6922897f773c29
      image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
      imageID: registry.k8s.io/sig-storage/csi-provisioner@sha256:d5e46da8aff7d73d6f00c761dae94472bcda6e78f4f17b3802dc89d44de0111b
      lastState: {}
      name: csi-provisioner
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:25Z"
    - containerID: containerd://05921adca758b4bf3b4f01a22359eac7f7858402968194410e0907d72e47622c
      image: registry.k8s.io/sig-storage/csi-resizer:v1.13.2
      imageID: registry.k8s.io/sig-storage/csi-resizer@sha256:8ddd178ba5d08973f1607f9b84619b58320948de494b31c9d7cd5375b316d6d4
      lastState: {}
      name: csi-resizer
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:25Z"
    - containerID: containerd://3bf3a2b8159df1ea598c844572de36ba7fe20dd5d069f8285cff773746a7ca3d
      image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.1
      imageID: registry.k8s.io/sig-storage/csi-snapshotter@sha256:5f4bb469fec51147ce157329dab598c758da1b018bad6dad26f0ff469326d769
      lastState: {}
      name: csi-snapshotter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:09:19Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.3
    podIPs:
    - ip: 10.1.24.3
    qosClass: Burstable
    startTime: "2025-07-31T03:08:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: "2025-07-31T03:34:30Z"
    generateName: aws-iam-authenticator-
    labels:
      controller-revision-hash: 559f4769b6
      k8s-app: aws-iam-authenticator
      pod-template-generation: "1"
    name: aws-iam-authenticator-hqxgr
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-iam-authenticator
      uid: 2ad0ef3e-5abd-45a8-a2b8-e195766e9b66
    resourceVersion: "12109"
    uid: 0ff76a61-f0c4-4ee0-9e6c-2319377190c0
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - foo
    containers:
    - args:
      - server
      - --config=/etc/aws-iam-authenticator/config.yaml
      - --state-dir=/var/aws-iam-authenticator
      - --generate-kubeconfig=/etc/kubernetes/aws-iam-authenticator/kubeconfig.yaml
      env:
      - name: AWS_REGION
        value: us-east-2
      - name: AWS_DEFAULT_REGION
        value: us-east-2
      image: public.ecr.aws/eks-distro/kubernetes-sigs/aws-iam-authenticator:v0.5.2-eks-1-18-1
      imagePullPolicy: IfNotPresent
      name: aws-iam-authenticator
      resources:
        limits:
          cpu: 100m
          memory: 20Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/aws-iam-authenticator/
        name: config
      - mountPath: /var/aws-iam-authenticator/
        name: state
      - mountPath: /etc/kubernetes/aws-iam-authenticator/
        name: output
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-kz4ds
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: foo
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-iam-authenticator
    serviceAccountName: aws-iam-authenticator
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: aws-iam-authenticator
      name: config
    - hostPath:
        path: /var/snap/microk8s/current/aws-iam-authenticator
        type: ""
      name: output
    - hostPath:
        path: /var/snap/microk8s/current/aws-iam-authenticator
        type: ""
      name: state
    - name: kube-api-access-kz4ds
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:34:30Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:34:31Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:34:31Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:34:30Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://3a11c8457c3a8d5da9592e388e1cce315b7fc239e6dcd49bea18275f0bcaeacb
      image: public.ecr.aws/eks-distro/kubernetes-sigs/aws-iam-authenticator:v0.5.2-eks-1-18-1
      imageID: public.ecr.aws/eks-distro/kubernetes-sigs/aws-iam-authenticator@sha256:1f80e4596beaa6983275230a5fe2488db3f4470cac71eac543458571e0c1a469
      lastState: {}
      name: aws-iam-authenticator
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:34:30Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 192.168.1.26
    podIPs:
    - ip: 192.168.1.26
    qosClass: Burstable
    startTime: "2025-07-31T03:34:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 34e70d208667328f6779aa34f624f93b2e99c6fbfb6cb7b119b263e39508919b
      cni.projectcalico.org/podIP: 10.1.24.7/32
      cni.projectcalico.org/podIPs: 10.1.24.7/32
    creationTimestamp: "2025-07-31T03:47:30Z"
    generateName: cert-manager-cainjector-7985fb445b-
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.8.0
      pod-template-hash: 7985fb445b
    name: cert-manager-cainjector-7985fb445b-4l7b9
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-cainjector-7985fb445b
      uid: 8a7fd58d-898f-4b75-b0c7-83bfe65864d2
    resourceVersion: "14289"
    uid: f66e81bb-ecf4-4292-9616-ba4f169f0a6e
  spec:
    containers:
    - args:
      - --v=2
      - --leader-election-namespace=kube-system
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
      imagePullPolicy: IfNotPresent
      name: cert-manager
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c8wzw
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: foo
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
    serviceAccount: cert-manager-cainjector
    serviceAccountName: cert-manager-cainjector
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-c8wzw
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:47:30Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:47:36Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:47:36Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:47:30Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://491918022dc02112c54e947560fb82c0127ce95dab7d1cfa788a467383503698
      image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
      imageID: quay.io/jetstack/cert-manager-cainjector@sha256:e7b6203ccb37f0af23458a4828bd004b5edc8212276c5221408eb8b2a97c938a
      lastState: {}
      name: cert-manager
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:47:36Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.7
    podIPs:
    - ip: 10.1.24.7
    qosClass: BestEffort
    startTime: "2025-07-31T03:47:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: d3a7069925b4c1e46bd2b80882db96d6fd1c4f83bfb0f5dbfcf014cbdb5e4d34
      cni.projectcalico.org/podIP: 10.1.24.9/32
      cni.projectcalico.org/podIPs: 10.1.24.9/32
      prometheus.io/path: /metrics
      prometheus.io/port: "9402"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-07-31T03:47:30Z"
    generateName: cert-manager-655bf9748f-
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.8.0
      pod-template-hash: 655bf9748f
    name: cert-manager-655bf9748f-dsvzf
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-655bf9748f
      uid: 883159a4-2f75-4c54-8d6c-63312e5787fe
    resourceVersion: "14318"
    uid: fde4684b-721c-4da6-a173-021faa94796b
  spec:
    containers:
    - args:
      - --v=2
      - --cluster-resource-namespace=$(POD_NAMESPACE)
      - --leader-election-namespace=kube-system
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-controller:v1.8.0
      imagePullPolicy: IfNotPresent
      name: cert-manager
      ports:
      - containerPort: 9402
        name: http-metrics
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zpslq
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: foo
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
    serviceAccount: cert-manager
    serviceAccountName: cert-manager
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-zpslq
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:47:30Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:47:42Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:47:42Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:47:30Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://364fce42611635da31b6920c4e5366204d7ae3823bc20d34af1fa99140a18da1
      image: quay.io/jetstack/cert-manager-controller:v1.8.0
      imageID: quay.io/jetstack/cert-manager-controller@sha256:e1642bf8e93357165c9f0b027397ce79fdbda8cd609ee048c69284da01401c6c
      lastState: {}
      name: cert-manager
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:47:42Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.9
    podIPs:
    - ip: 10.1.24.9
    qosClass: BestEffort
    startTime: "2025-07-31T03:47:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: b6ac22ebd674d1db5e836816f12b4efd5483e35308407cd36fdc1b1cfb1fc6ea
      cni.projectcalico.org/podIP: 10.1.24.8/32
      cni.projectcalico.org/podIPs: 10.1.24.8/32
    creationTimestamp: "2025-07-31T03:47:30Z"
    generateName: cert-manager-webhook-6dc9656f89-
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.8.0
      pod-template-hash: 6dc9656f89
    name: cert-manager-webhook-6dc9656f89-frtgj
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-webhook-6dc9656f89
      uid: 78f971c3-7870-44f5-b888-ce64d77c2c83
    resourceVersion: "15117"
    uid: e8ccf0f0-077e-421a-ad51-6c514f3bab4e
  spec:
    containers:
    - args:
      - --v=2
      - --secure-port=10250
      - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
      - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
      - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-webhook:v1.8.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /livez
          port: 6080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: cert-manager
      ports:
      - containerPort: 10250
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 6080
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v7wjg
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: foo
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
    serviceAccount: cert-manager-webhook
    serviceAccountName: cert-manager-webhook
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-v7wjg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:47:30Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:42Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:42Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:47:30Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://cbdc42a9a5d9490cc1ed35bc0f4ac3c1ef0d80aa1e9337c48d75f23707e699e9
      image: quay.io/jetstack/cert-manager-webhook:v1.8.0
      imageID: quay.io/jetstack/cert-manager-webhook@sha256:fd798a5a773e5a69880caa60f050d3ffd237c4c3ec3289aacaf59f938c8d7668
      lastState: {}
      name: cert-manager
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:47:39Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.8
    podIPs:
    - ip: 10.1.24.8
    qosClass: BestEffort
    startTime: "2025-07-31T03:47:30Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "7472"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-07-31T03:45:55Z"
    generateName: speaker-
    labels:
      app: metallb
      component: speaker
      controller-revision-hash: 6d55f58574
      pod-template-generation: "1"
    name: speaker-mwtpc
    namespace: metallb-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: speaker
      uid: c91405f6-0e2b-4cc4-849d-a60835634b4d
    resourceVersion: "15121"
    uid: 9c3820b9-4f73-4a9b-9ffa-3e37f7207d05
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - foo
    containers:
    - args:
      - --port=7472
      - --log-level=info
      env:
      - name: METALLB_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: METALLB_HOST
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: METALLB_ML_BIND_ADDR
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: METALLB_ML_LABELS
        value: app=metallb,component=speaker
      - name: METALLB_ML_SECRET_KEY
        valueFrom:
          secretKeyRef:
            key: secretkey
            name: memberlist
      image: quay.io/metallb/speaker:v0.13.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /metrics
          port: monitoring
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: speaker
      ports:
      - containerPort: 7472
        hostPort: 7472
        name: monitoring
        protocol: TCP
      - containerPort: 7946
        hostPort: 7946
        name: memberlist-tcp
        protocol: TCP
      - containerPort: 7946
        hostPort: 7946
        name: memberlist-udp
        protocol: UDP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /metrics
          port: monitoring
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_RAW
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-h6msf
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: foo
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: speaker
    serviceAccountName: speaker
    terminationGracePeriodSeconds: 2
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - name: kube-api-access-h6msf
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:45:55Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:45:55Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7c7be8e808a732d7366fde499d0c0bddaa4023395dfbf60d2dcfa0e701b3700e
      image: quay.io/metallb/speaker:v0.13.3
      imageID: quay.io/metallb/speaker@sha256:839ca1f96149ec65b3af5aa20606096bf1bd7d43727611a5ae16de21e0c32fcd
      lastState: {}
      name: speaker
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:46:15Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 192.168.1.26
    podIPs:
    - ip: 192.168.1.26
    qosClass: BestEffort
    startTime: "2025-07-31T03:45:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 7c93deceb62fa0535253ed37b4d9d4317467b8ee8af89be3d8c8bef56f86debf
      cni.projectcalico.org/podIP: 10.1.24.6/32
      cni.projectcalico.org/podIPs: 10.1.24.6/32
      priorityClassName: system-cluster-critical
    creationTimestamp: "2025-07-31T03:46:19Z"
    generateName: coredns-df8c8d8f5-
    labels:
      k8s-app: kube-dns
      pod-template-hash: df8c8d8f5
    name: coredns-df8c8d8f5-sgxj9
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-df8c8d8f5
      uid: bf1aaac3-91af-4296-ae17-2af4f4b733b5
    resourceVersion: "15122"
    uid: 6f6070f4-2840-4730-abb0-6fc5cfdea63d
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: public.ecr.aws/eks-distro/coredns/coredns:v1.9.3-eks-1-25-18
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tmtcg
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: foo
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-tmtcg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:46:19Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:46:19Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://503acddad15308b90940eced74d74629912da9d1db945f0d215c176f9a85e70b
      image: public.ecr.aws/eks-distro/coredns/coredns:v1.9.3-eks-1-25-18
      imageID: public.ecr.aws/eks-distro/coredns/coredns@sha256:6956f8584c996176cb278b42a087f05aaf16c2df70cc8c9acdace1c92428b1ef
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:46:38Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.6
    podIPs:
    - ip: 10.1.24.6
    qosClass: Burstable
    startTime: "2025-07-31T03:46:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 95bed826d5e749436db77ac38de427173ae9e31ec8b3d2582f395a2843463ed2
      cni.projectcalico.org/podIP: 10.1.24.5/32
      cni.projectcalico.org/podIPs: 10.1.24.5/32
      prometheus.io/port: "7472"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-07-31T03:45:55Z"
    generateName: controller-56c4696b5-
    labels:
      app: metallb
      component: controller
      pod-template-hash: 56c4696b5
    name: controller-56c4696b5-52fbd
    namespace: metallb-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: controller-56c4696b5
      uid: 5169e56a-121e-4499-8770-dedb25610dbd
    resourceVersion: "15128"
    uid: 479dfd03-c36e-4e05-a966-648467846fe2
  spec:
    containers:
    - args:
      - --port=7472
      - --log-level=info
      env:
      - name: METALLB_ML_SECRET_NAME
        value: memberlist
      - name: METALLB_DEPLOYMENT
        value: controller
      image: quay.io/metallb/controller:v0.13.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /metrics
          port: monitoring
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 7472
        name: monitoring
        protocol: TCP
      - containerPort: 9443
        name: webhook-server
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /metrics
          port: monitoring
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp/k8s-webhook-server/serving-certs
        name: cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pzdxv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: foo
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: controller
    serviceAccountName: controller
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: cert
      secret:
        defaultMode: 420
        secretName: webhook-server-cert
    - name: kube-api-access-pzdxv
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:45:55Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:46Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:46Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:45:55Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://66d3eee4ca332fc6160b0ca188cd20c492470018f1f3e27ddec7055485ae3517
      image: quay.io/metallb/controller:v0.13.3
      imageID: quay.io/metallb/controller@sha256:12fd9f57369003ea2cf503e4464baf70de08d00e689412277125ea605f7260e8
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:46:03Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.5
    podIPs:
    - ip: 10.1.24.5
    qosClass: BestEffort
    startTime: "2025-07-31T03:45:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 4e563eaf14ae5810a52a30f31742228d0121ca218e545b024c0b60852f105b31
      cni.projectcalico.org/podIP: 10.1.24.1/32
      cni.projectcalico.org/podIPs: 10.1.24.1/32
    creationTimestamp: "2025-07-31T01:27:55Z"
    generateName: calico-kube-controllers-d8b9b6478-
    labels:
      k8s-app: calico-kube-controllers
      pod-template-hash: d8b9b6478
    name: calico-kube-controllers-d8b9b6478-wdqmd
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: calico-kube-controllers-d8b9b6478
      uid: b2505670-b61a-4a0c-870b-3767a7b26c7c
    resourceVersion: "15133"
    uid: 544e453c-687d-4008-be8c-431ba0c5442c
  spec:
    containers:
    - env:
      - name: ENABLED_CONTROLLERS
        value: node
      - name: DATASTORE_TYPE
        value: kubernetes
      image: docker.io/calico/kube-controllers:v3.23.5
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /usr/bin/check-status
          - -l
        failureThreshold: 6
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: calico-kube-controllers
      readinessProbe:
        exec:
          command:
          - /usr/bin/check-status
          - -r
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vj5cz
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: foo
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-kube-controllers
    serviceAccountName: calico-kube-controllers
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-vj5cz
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T01:28:20Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T01:28:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://73214a88e6fae810d15becc4fd481ec5ee532b20d2fd26a53a7eb6c6c6ae1a4e
      image: docker.io/calico/kube-controllers:v3.23.5
      imageID: docker.io/calico/kube-controllers@sha256:58cc91c551e9e941a752e205eefed1c8da56f97a51e054b3d341b67bb7bf27eb
      lastState: {}
      name: calico-kube-controllers
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T01:28:44Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.1
    podIPs:
    - ip: 10.1.24.1
    qosClass: BestEffort
    startTime: "2025-07-31T01:28:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-07-31T01:27:56Z"
    generateName: calico-node-
    labels:
      controller-revision-hash: 57567cbdcd
      k8s-app: calico-node
      pod-template-generation: "1"
    name: calico-node-kxszv
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: calico-node
      uid: 03abcbcb-82cb-40e5-a1df-d81fb85226a5
    resourceVersion: "15138"
    uid: 7744b178-9d13-47ef-bda8-4df956b53c5b
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - foo
    containers:
    - env:
      - name: DATASTORE_TYPE
        value: kubernetes
      - name: WAIT_FOR_DATASTORE
        value: "true"
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_NETWORKING_BACKEND
        valueFrom:
          configMapKeyRef:
            key: calico_backend
            name: calico-config
      - name: CLUSTER_TYPE
        value: k8s,bgp
      - name: IP
        value: autodetect
      - name: IP_AUTODETECTION_METHOD
        value: first-found
      - name: CALICO_IPV4POOL_VXLAN
        value: Always
      - name: CALICO_IPV6POOL_VXLAN
        value: Never
      - name: FELIX_IPINIPMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: FELIX_VXLANMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: FELIX_WIREGUARDMTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: CALICO_IPV4POOL_CIDR
        value: 10.1.0.0/16
      - name: CALICO_DISABLE_FILE_LOGGING
        value: "true"
      - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
        value: ACCEPT
      - name: FELIX_IPV6SUPPORT
        value: "false"
      - name: FELIX_HEALTHENABLED
        value: "true"
      - name: FELIX_FEATUREDETECTOVERRIDE
        value: ChecksumOffloadBroken=true
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: docker.io/calico/node:v3.23.5
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /bin/calico-node
            - -shutdown
      livenessProbe:
        exec:
          command:
          - /bin/calico-node
          - -felix-live
        failureThreshold: 6
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: calico-node
      readinessProbe:
        exec:
          command:
          - /bin/calico-node
          - -felix-ready
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 250m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/calico
        name: var-run-calico
      - mountPath: /var/lib/calico
        name: var-lib-calico
      - mountPath: /var/run/nodeagent
        name: policysync
      - mountPath: /var/log/calico/cni
        name: cni-log-dir
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7czg2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /opt/cni/bin/calico-ipam
      - -upgrade
      env:
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CALICO_NETWORKING_BACKEND
        valueFrom:
          configMapKeyRef:
            key: calico_backend
            name: calico-config
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: docker.io/calico/cni:v3.23.5
      imagePullPolicy: IfNotPresent
      name: upgrade-ipam
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/cni/networks
        name: host-local-net-dir
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7czg2
        readOnly: true
    - command:
      - /opt/cni/bin/install
      env:
      - name: CNI_CONF_NAME
        value: 10-calico.conflist
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: calico-config
      - name: KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CNI_MTU
        valueFrom:
          configMapKeyRef:
            key: veth_mtu
            name: calico-config
      - name: SLEEP
        value: "false"
      - name: CNI_NET_DIR
        value: /var/snap/microk8s/current/args/cni-network
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: docker.io/calico/cni:v3.23.5
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7czg2
        readOnly: true
    nodeName: foo
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-node
    serviceAccountName: calico-node
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /var/snap/microk8s/current/var/run/calico
        type: ""
      name: var-run-calico
    - hostPath:
        path: /var/snap/microk8s/current/var/lib/calico
        type: ""
      name: var-lib-calico
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /sys/fs/
        type: DirectoryOrCreate
      name: sys-fs
    - hostPath:
        path: /var/snap/microk8s/current/opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /var/snap/microk8s/current/args/cni-network
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/snap/microk8s/common/var/log/calico/cni
        type: ""
      name: cni-log-dir
    - hostPath:
        path: /var/snap/microk8s/current/var/lib/cni/networks
        type: ""
      name: host-local-net-dir
    - hostPath:
        path: /var/snap/microk8s/current/var/run/nodeagent
        type: DirectoryOrCreate
      name: policysync
    - name: kube-api-access-7czg2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T01:28:20Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:51Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:51Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T01:27:56Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://fb6bf0fcefb5c76526dacb6436d0fc68be3f2fe75cd600c214725d65c5a05e90
      image: docker.io/calico/node:v3.23.5
      imageID: docker.io/calico/node@sha256:b7f4f7a0ce463de5d294fdf2bb13f61035ec6e3e5ee05dd61dcc8e79bc29d934
      lastState: {}
      name: calico-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T01:28:30Z"
    hostIP: 192.168.1.26
    initContainerStatuses:
    - containerID: containerd://f259877c42b418bf304f38e8c6f6bb42dae90ffa54d6cd90c979f376dfc38833
      image: docker.io/calico/cni:v3.23.5
      imageID: docker.io/calico/cni@sha256:7ca5c455cff6c0d661e33918d95a1133afb450411dbfb7e4369a9ecf5e0212dc
      lastState: {}
      name: upgrade-ipam
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://f259877c42b418bf304f38e8c6f6bb42dae90ffa54d6cd90c979f376dfc38833
          exitCode: 0
          finishedAt: "2025-07-31T01:28:18Z"
          reason: Completed
          startedAt: "2025-07-31T01:28:18Z"
    - containerID: containerd://a6d8995a73cae225c45bf5e7e4efad9f3d720b43d5fce0f1b74a6502f4806814
      image: docker.io/calico/cni:v3.23.5
      imageID: docker.io/calico/cni@sha256:7ca5c455cff6c0d661e33918d95a1133afb450411dbfb7e4369a9ecf5e0212dc
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://a6d8995a73cae225c45bf5e7e4efad9f3d720b43d5fce0f1b74a6502f4806814
          exitCode: 0
          finishedAt: "2025-07-31T01:28:19Z"
          reason: Completed
          startedAt: "2025-07-31T01:28:19Z"
    phase: Running
    podIP: 192.168.1.26
    podIPs:
    - ip: 192.168.1.26
    qosClass: Burstable
    startTime: "2025-07-31T01:27:56Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 295c2cedaa922e81eae89c60d8814cad6626137a83db1fab98943aa38cf8bdc9
      cni.projectcalico.org/podIP: 10.1.24.12/32
      cni.projectcalico.org/podIPs: 10.1.24.12/32
    creationTimestamp: "2025-07-31T03:50:32Z"
    generateName: metrics-server-6b75bd48cf-
    labels:
      k8s-app: metrics-server
      pod-template-hash: 6b75bd48cf
    name: metrics-server-6b75bd48cf-4tzkn
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: metrics-server-6b75bd48cf
      uid: 8ba9df92-46a7-4718-b7ac-b0a5b1b6fbca
    resourceVersion: "15172"
    uid: 1eac6289-7d28-46eb-891b-53ddb50c7ecc
  spec:
    containers:
    - args:
      - --cert-dir=/tmp
      - --secure-port=4443
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --kubelet-use-node-status-port
      - --metric-resolution=15s
      - --kubelet-insecure-tls
      image: public.ecr.aws/eks-distro/kubernetes-sigs/metrics-server:v0.6.3-eks-1-25-18
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /livez
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: metrics-server
      ports:
      - containerPort: 4443
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: https
          scheme: HTTPS
        initialDelaySeconds: 20
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
      securityContext:
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-q77jh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: foo
    nodeSelector:
      kubernetes.io/arch: amd64
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: metrics-server
    serviceAccountName: metrics-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-dir
    - name: kube-api-access-q77jh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:51:08Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:51:08Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:50:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e49b6b88701a4961379942c72356b88a4c1a8a1760abefd4572ad4dd75f697d5
      image: public.ecr.aws/eks-distro/kubernetes-sigs/metrics-server:v0.6.3-eks-1-25-18
      imageID: public.ecr.aws/eks-distro/kubernetes-sigs/metrics-server@sha256:4c184df272b5e87b8b1b1cbff770b2456e0a54e35ff0539986007c8b93ca13ef
      lastState: {}
      name: metrics-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:50:47Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.12
    podIPs:
    - ip: 10.1.24.12
    qosClass: Burstable
    startTime: "2025-07-31T03:50:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 7910468e4ee2a4ce4b0fc47b02f91b0a45882761d207b976952d094ab67f6f84
      cni.projectcalico.org/podIP: 10.1.24.13/32
      cni.projectcalico.org/podIPs: 10.1.24.13/32
    creationTimestamp: "2025-07-31T03:51:41Z"
    generateName: kubernetes-dashboard-74b66d7f9c-
    labels:
      k8s-app: kubernetes-dashboard
      pod-template-hash: 74b66d7f9c
    name: kubernetes-dashboard-74b66d7f9c-mgp28
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubernetes-dashboard-74b66d7f9c
      uid: 934ec813-b4a6-43c5-b963-ac94a24bac84
    resourceVersion: "15338"
    uid: bda0cb8c-c0fa-4f79-a511-5158b0cbf4fe
  spec:
    containers:
    - args:
      - --auto-generate-certificates
      - --namespace=kube-system
      image: kubernetesui/dashboard:v2.7.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8443
          scheme: HTTPS
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: kubernetes-dashboard
      ports:
      - containerPort: 8443
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 2001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /certs
        name: kubernetes-dashboard-certs
      - mountPath: /tmp
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-wzb55
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: foo
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: kubernetes-dashboard
    serviceAccountName: kubernetes-dashboard
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kubernetes-dashboard-certs
      secret:
        defaultMode: 420
        secretName: kubernetes-dashboard-certs
    - emptyDir: {}
      name: tmp-volume
    - name: kube-api-access-wzb55
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:51:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:51:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:51:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:51:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ba90b39ced420ceaffea1fa0f0c34522d97bb865b0601eed477ae468acbf86b5
      image: docker.io/kubernetesui/dashboard:v2.7.0
      imageID: docker.io/kubernetesui/dashboard@sha256:2e500d29e9d5f4a086b908eb8dfe7ecac57d2ab09d65b24f588b1d449841ef93
      lastState: {}
      name: kubernetes-dashboard
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:51:48Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.13
    podIPs:
    - ip: 10.1.24.13
    qosClass: BestEffort
    startTime: "2025-07-31T03:51:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 86e32f4eb0bb2d4569f60b474a0c53804bffc044127898435c0db0e59efd24e2
      cni.projectcalico.org/podIP: 10.1.24.14/32
      cni.projectcalico.org/podIPs: 10.1.24.14/32
    creationTimestamp: "2025-07-31T03:51:41Z"
    generateName: dashboard-metrics-scraper-64bcc67c9c-
    labels:
      k8s-app: dashboard-metrics-scraper
      pod-template-hash: 64bcc67c9c
    name: dashboard-metrics-scraper-64bcc67c9c-v7ksw
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: dashboard-metrics-scraper-64bcc67c9c
      uid: 82c4a4a5-cd17-45fc-a27a-2e45195c0633
    resourceVersion: "15370"
    uid: 5be09f8f-7167-4058-8ae1-8897df43e23f
  spec:
    containers:
    - image: kubernetesui/metrics-scraper:v1.0.8
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8000
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: dashboard-metrics-scraper
      ports:
      - containerPort: 8000
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 2001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-x8xvj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: foo
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: kubernetes-dashboard
    serviceAccountName: kubernetes-dashboard
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-volume
    - name: kube-api-access-x8xvj
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:51:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:51:54Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:51:54Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:51:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://3cebc860e5081173d6003ba7ebd0d4680ee7aa0950c91369b3791ed1c72ff49e
      image: docker.io/kubernetesui/metrics-scraper:v1.0.8
      imageID: docker.io/kubernetesui/metrics-scraper@sha256:76049887f07a0476dc93efc2d3569b9529bf982b22d29f356092ce206e98765c
      lastState: {}
      name: dashboard-metrics-scraper
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:51:53Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.14
    podIPs:
    - ip: 10.1.24.14
    qosClass: BestEffort
    startTime: "2025-07-31T03:51:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 5e5458180510c59593b82726c74ea77cbb2aa9f2d18bd65b78ee98b711af16e0
      cni.projectcalico.org/podIP: 10.1.24.15/32
      cni.projectcalico.org/podIPs: 10.1.24.15/32
    creationTimestamp: "2025-07-31T03:54:13Z"
    generateName: hostpath-provisioner-766849dd9d-
    labels:
      k8s-app: hostpath-provisioner
      pod-template-hash: 766849dd9d
    name: hostpath-provisioner-766849dd9d-pggdr
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: hostpath-provisioner-766849dd9d
      uid: f1858b50-c11c-4f0f-ae6b-1da259669ccb
    resourceVersion: "16046"
    uid: 3696c824-3e48-4830-8437-3d9009a1c6b3
  spec:
    containers:
    - env:
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: PV_DIR
        value: /var/snap/microk8s/common/default-storage
      - name: BUSYBOX_IMAGE
        value: busybox:1.28.4
      image: cdkbot/hostpath-provisioner:1.4.2
      imagePullPolicy: IfNotPresent
      name: hostpath-provisioner
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/snap/microk8s/common/default-storage
        name: pv-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rnzqf
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: foo
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: microk8s-hostpath
    serviceAccountName: microk8s-hostpath
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /var/snap/microk8s/common/default-storage
        type: ""
      name: pv-volume
    - name: kube-api-access-rnzqf
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:54:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:54:23Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:54:23Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:54:13Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c49600697e78c6db7aecb70e9e551110a30e0d9d360894c95b5b8bafafc822db
      image: docker.io/cdkbot/hostpath-provisioner:1.4.2
      imageID: docker.io/cdkbot/hostpath-provisioner@sha256:b8e7be62e9c072adc52ca7e0ff4cffd3687cc39e98171b07884c456104e3fc5c
      lastState: {}
      name: hostpath-provisioner
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:54:23Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.15
    podIPs:
    - ip: 10.1.24.15
    qosClass: BestEffort
    startTime: "2025-07-31T03:54:13Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 4f2a3585f8bd0a473e76dff660a0b8ffbfb992032f9f1f11a4c8dc0fa97f142d
      cni.projectcalico.org/podIP: 10.1.24.17/32
      cni.projectcalico.org/podIPs: 10.1.24.17/32
    creationTimestamp: "2025-07-31T03:54:13Z"
    generateName: registry-6674bf676f-
    labels:
      app: registry
      pod-template-hash: 6674bf676f
    name: registry-6674bf676f-snttc
    namespace: container-registry
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: registry-6674bf676f
      uid: 08d71f4b-cb84-46a4-990b-9f418fe84b33
    resourceVersion: "16169"
    uid: fde9599e-f676-45ee-9214-e523e23dbac1
  spec:
    containers:
    - env:
      - name: REGISTRY_HTTP_ADDR
        value: :5000
      - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
        value: /var/lib/registry
      - name: REGISTRY_STORAGE_DELETE_ENABLED
        value: "yes"
      image: registry:2.8.1
      imagePullPolicy: IfNotPresent
      name: registry
      ports:
      - containerPort: 5000
        name: registry
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/registry
        name: registry-data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-9l6bg
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: foo
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: registry-data
      persistentVolumeClaim:
        claimName: registry-claim
    - name: kube-api-access-9l6bg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:54:33Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:54:41Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:54:41Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T03:54:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a79383c70c4eea1c25b31aae12a94d2f9a804a422012b345ed9994752e033bb9
      image: docker.io/library/registry:2.8.1
      imageID: docker.io/library/registry@sha256:dbaa3e69f563fc146f3337eb9de422f74f6765bf0203c891ddfbd74a6f9b56eb
      lastState: {}
      name: registry
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T03:54:41Z"
    hostIP: 192.168.1.26
    phase: Running
    podIP: 10.1.24.17
    podIPs:
    - ip: 10.1.24.17
    qosClass: BestEffort
    startTime: "2025-07-31T03:54:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 47b27dc1239981305fdbd168418475cc16bf80ecb2637c8eeea952f8978aa7ee
      cni.projectcalico.org/podIP: 10.1.24.20/32
      cni.projectcalico.org/podIPs: 10.1.24.20/32
      kuma.io/gateway: enabled
      kuma.io/service-account-token-volume: kong-kong-token
      traffic.sidecar.istio.io/includeInboundPorts: ""
    creationTimestamp: "2025-07-31T04:15:14Z"
    generateName: kong-kong-86dcf9ddbb-
    labels:
      app: kong-kong
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: kong
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.9"
      helm.sh/chart: kong-2.51.0
      pod-template-hash: 86dcf9ddbb
      version: "3.9"
    name: kong-kong-86dcf9ddbb-szw97
    namespace: kong
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kong-kong-86dcf9ddbb
      uid: 9f5bc1d6-3c6b-4d9b-a2ea-e41ff0f7176b
    resourceVersion: "21020"
    uid: 924dd6e2-67c2-4210-a10a-04a191608fee
  spec:
    automountServiceAccountToken: false
    containers:
    - env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CONTROLLER_ADMISSION_WEBHOOK_LISTEN
        value: 0.0.0.0:8080
      - name: CONTROLLER_ELECTION_ID
        value: kong-ingress-controller-leader-kong
      - name: CONTROLLER_INGRESS_CLASS
        value: kong
      - name: CONTROLLER_KONG_ADMIN_TLS_SKIP_VERIFY
        value: "true"
      - name: CONTROLLER_KONG_ADMIN_URL
        value: https://localhost:8444
      - name: CONTROLLER_PUBLISH_SERVICE
        value: kong/kong-kong-proxy
      image: kong/kubernetes-ingress-controller:3.5
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: ingress-controller
      ports:
      - containerPort: 8080
        name: webhook
        protocol: TCP
      - containerPort: 10255
        name: cmetrics
        protocol: TCP
      - containerPort: 10254
        name: cstatus
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /admission-webhook
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kong-kong-token
        readOnly: true
    - env:
      - name: KONG_ADMIN_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_ADMIN_ERROR_LOG
        value: /dev/stderr
      - name: KONG_ADMIN_GUI_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_ADMIN_GUI_ERROR_LOG
        value: /dev/stderr
      - name: KONG_ADMIN_LISTEN
        value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
      - name: KONG_CLUSTER_LISTEN
        value: "off"
      - name: KONG_DATABASE
        value: "off"
      - name: KONG_KIC
        value: "on"
      - name: KONG_LUA_PACKAGE_PATH
        value: /opt/?.lua;/opt/?/init.lua;;
      - name: KONG_NGINX_WORKER_PROCESSES
        value: "2"
      - name: KONG_PORTAL_API_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_PORTAL_API_ERROR_LOG
        value: /dev/stderr
      - name: KONG_PORT_MAPS
        value: 80:8000, 443:8443
      - name: KONG_PREFIX
        value: /kong_prefix/
      - name: KONG_PROXY_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_PROXY_ERROR_LOG
        value: /dev/stderr
      - name: KONG_PROXY_LISTEN
        value: 0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl
      - name: KONG_PROXY_STREAM_ACCESS_LOG
        value: /dev/stdout basic
      - name: KONG_PROXY_STREAM_ERROR_LOG
        value: /dev/stderr
      - name: KONG_ROUTER_FLAVOR
        value: traditional
      - name: KONG_STATUS_ACCESS_LOG
        value: "off"
      - name: KONG_STATUS_ERROR_LOG
        value: /dev/stderr
      - name: KONG_STATUS_LISTEN
        value: 0.0.0.0:8100, [::]:8100
      - name: KONG_STREAM_LISTEN
        value: "off"
      - name: KONG_NGINX_DAEMON
        value: "off"
      image: kong:3.9
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - kong
            - quit
            - --wait=15
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /status
          port: status
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: proxy
      ports:
      - containerPort: 8000
        name: proxy
        protocol: TCP
      - containerPort: 8443
        name: proxy-tls
        protocol: TCP
      - containerPort: 8100
        name: status
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /status/ready
          port: status
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /kong_prefix/
        name: kong-kong-prefix-dir
      - mountPath: /tmp
        name: kong-kong-tmp
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - rm
      - -vrf
      - $KONG_PREFIX/pids
      env:
      - name: KONG_ADMIN_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_ADMIN_ERROR_LOG
        value: /dev/stderr
      - name: KONG_ADMIN_GUI_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_ADMIN_GUI_ERROR_LOG
        value: /dev/stderr
      - name: KONG_ADMIN_LISTEN
        value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
      - name: KONG_CLUSTER_LISTEN
        value: "off"
      - name: KONG_DATABASE
        value: "off"
      - name: KONG_KIC
        value: "on"
      - name: KONG_LUA_PACKAGE_PATH
        value: /opt/?.lua;/opt/?/init.lua;;
      - name: KONG_NGINX_WORKER_PROCESSES
        value: "2"
      - name: KONG_PORTAL_API_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_PORTAL_API_ERROR_LOG
        value: /dev/stderr
      - name: KONG_PORT_MAPS
        value: 80:8000, 443:8443
      - name: KONG_PREFIX
        value: /kong_prefix/
      - name: KONG_PROXY_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_PROXY_ERROR_LOG
        value: /dev/stderr
      - name: KONG_PROXY_LISTEN
        value: 0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl
      - name: KONG_PROXY_STREAM_ACCESS_LOG
        value: /dev/stdout basic
      - name: KONG_PROXY_STREAM_ERROR_LOG
        value: /dev/stderr
      - name: KONG_ROUTER_FLAVOR
        value: traditional
      - name: KONG_STATUS_ACCESS_LOG
        value: "off"
      - name: KONG_STATUS_ERROR_LOG
        value: /dev/stderr
      - name: KONG_STATUS_LISTEN
        value: 0.0.0.0:8100, [::]:8100
      - name: KONG_STREAM_LISTEN
        value: "off"
      image: kong:3.9
      imagePullPolicy: IfNotPresent
      name: clear-stale-pid
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /kong_prefix/
        name: kong-kong-prefix-dir
      - mountPath: /tmp
        name: kong-kong-tmp
    nodeName: foo
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: kong-kong
    serviceAccountName: kong-kong
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        sizeLimit: 256Mi
      name: kong-kong-prefix-dir
    - emptyDir:
        sizeLimit: 1Gi
      name: kong-kong-tmp
    - name: kong-kong-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: kong-kong-validation-webhook-keypair
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T04:15:15Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T04:15:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T04:15:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-31T04:15:14Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f7b3e3f9bb27377ef7f9d2a298d67b4335ed6e129f784392c8b0e677a3aa779d
      image: docker.io/kong/kubernetes-ingress-controller:3.5
      imageID: docker.io/kong/kubernetes-ingress-controller@sha256:02d58d47acb30d446c5e6f126026d87efcb7c5646bb7105bb8ae9123754eefe5
      lastState: {}
      name: ingress-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T04:15:15Z"
    - containerID: containerd://47c67e70e569ef2d742337db692bf3cae5c794736c0674d392b2f419df1151c8
      image: docker.io/library/kong:3.9
      imageID: docker.io/library/kong@sha256:239292ac8d8dd4ba910862bec5595d2f84ddb9201430af1004e3b008af00917f
      lastState: {}
      name: proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-31T04:15:15Z"
    hostIP: 192.168.1.26
    initContainerStatuses:
    - containerID: containerd://7c9e2df0c822cfc11bbb7d53427a74e7074de9343a6b448f25f9f78fc7976427
      image: docker.io/library/kong:3.9
      imageID: docker.io/library/kong@sha256:239292ac8d8dd4ba910862bec5595d2f84ddb9201430af1004e3b008af00917f
      lastState: {}
      name: clear-stale-pid
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: containerd://7c9e2df0c822cfc11bbb7d53427a74e7074de9343a6b448f25f9f78fc7976427
          exitCode: 0
          finishedAt: "2025-07-31T04:15:15Z"
          reason: Completed
          startedAt: "2025-07-31T04:15:15Z"
    phase: Running
    podIP: 10.1.24.20
    podIPs:
    - ip: 10.1.24.20
    qosClass: BestEffort
    startTime: "2025-07-31T04:15:14Z"
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-07-31T01:27:50Z"
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "134"
    uid: 6e62eb50-5c29-4597-9cf0-a66579226cba
  spec:
    clusterIP: 10.152.183.1
    clusterIPs:
    - 10.152.183.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 16443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"webhook-service","namespace":"metallb-system"},"spec":{"ports":[{"port":443,"targetPort":9443}],"selector":{"component":"controller"}}}
    creationTimestamp: "2025-07-31T03:45:55Z"
    name: webhook-service
    namespace: metallb-system
    resourceVersion: "13880"
    uid: 27ea431b-2a43-4a07-b88a-656d2e83d8a0
  spec:
    clusterIP: 10.152.183.90
    clusterIPs:
    - 10.152.183.90
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 443
      protocol: TCP
      targetPort: 9443
    selector:
      component: controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"prometheus.io/port":"9153","prometheus.io/scrape":"true"},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kube-dns","kubernetes.io/cluster-service":"true","kubernetes.io/name":"CoreDNS"},"name":"kube-dns","namespace":"kube-system"},"spec":{"clusterIP":"10.152.183.10","ports":[{"name":"dns","port":53,"protocol":"UDP"},{"name":"dns-tcp","port":53,"protocol":"TCP"},{"name":"metrics","port":9153,"protocol":"TCP"}],"selector":{"k8s-app":"kube-dns"}}}
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-07-31T03:46:19Z"
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: CoreDNS
    name: kube-dns
    namespace: kube-system
    resourceVersion: "14008"
    uid: 9395f838-53b2-4710-833a-75297b9cbccb
  spec:
    clusterIP: 10.152.183.10
    clusterIPs:
    - 10.152.183.10
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    - name: metrics
      port: 9153
      protocol: TCP
      targetPort: 9153
    selector:
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"cert-manager","app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.8.0"},"name":"cert-manager","namespace":"cert-manager"},"spec":{"ports":[{"name":"tcp-prometheus-servicemonitor","port":9402,"protocol":"TCP","targetPort":9402}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"},"type":"ClusterIP"}}
    creationTimestamp: "2025-07-31T03:46:28Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.8.0
    name: cert-manager
    namespace: cert-manager
    resourceVersion: "14110"
    uid: 15a43e49-b4ba-406a-8b9c-b85d0b87e725
  spec:
    clusterIP: 10.152.183.210
    clusterIPs:
    - 10.152.183.210
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-prometheus-servicemonitor
      port: 9402
      protocol: TCP
      targetPort: 9402
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"webhook","app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook","app.kubernetes.io/version":"v1.8.0"},"name":"cert-manager-webhook","namespace":"cert-manager"},"spec":{"ports":[{"name":"https","port":443,"protocol":"TCP","targetPort":"https"}],"selector":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook"},"type":"ClusterIP"}}
    creationTimestamp: "2025-07-31T03:46:29Z"
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.8.0
    name: cert-manager-webhook
    namespace: cert-manager
    resourceVersion: "14112"
    uid: 29cb1fc1-09cc-4cf0-b725-c914a91afa5f
  spec:
    clusterIP: 10.152.183.150
    clusterIPs:
    - 10.152.183.150
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"k8s-app":"metrics-server"},"name":"metrics-server","namespace":"kube-system"},"spec":{"ports":[{"name":"https","port":443,"protocol":"TCP","targetPort":"https"}],"selector":{"k8s-app":"metrics-server"}}}
    creationTimestamp: "2025-07-31T03:50:32Z"
    labels:
      k8s-app: metrics-server
    name: metrics-server
    namespace: kube-system
    resourceVersion: "15001"
    uid: 76dc775a-8507-4aa5-9488-91d3fc3d9c5c
  spec:
    clusterIP: 10.152.183.222
    clusterIPs:
    - 10.152.183.222
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      k8s-app: metrics-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"k8s-app":"kubernetes-dashboard"},"name":"kubernetes-dashboard","namespace":"kube-system"},"spec":{"ports":[{"port":443,"targetPort":8443}],"selector":{"k8s-app":"kubernetes-dashboard"}}}
    creationTimestamp: "2025-07-31T03:50:34Z"
    labels:
      k8s-app: kubernetes-dashboard
    name: kubernetes-dashboard
    namespace: kube-system
    resourceVersion: "15025"
    uid: 1bb85c25-73d6-4d01-857d-af01f5dcd0b8
  spec:
    clusterIP: 10.152.183.141
    clusterIPs:
    - 10.152.183.141
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 443
      protocol: TCP
      targetPort: 8443
    selector:
      k8s-app: kubernetes-dashboard
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"k8s-app":"dashboard-metrics-scraper"},"name":"dashboard-metrics-scraper","namespace":"kube-system"},"spec":{"ports":[{"port":8000,"targetPort":8000}],"selector":{"k8s-app":"dashboard-metrics-scraper"}}}
    creationTimestamp: "2025-07-31T03:50:34Z"
    labels:
      k8s-app: dashboard-metrics-scraper
    name: dashboard-metrics-scraper
    namespace: kube-system
    resourceVersion: "15036"
    uid: e62ad37a-633a-40e5-9578-7dea89f66736
  spec:
    clusterIP: 10.152.183.226
    clusterIPs:
    - 10.152.183.226
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      k8s-app: dashboard-metrics-scraper
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"registry"},"name":"registry","namespace":"container-registry"},"spec":{"ports":[{"name":"registry","nodePort":32000,"port":5000,"targetPort":5000}],"selector":{"app":"registry"},"type":"NodePort"}}
    creationTimestamp: "2025-07-31T03:54:13Z"
    labels:
      app: registry
    name: registry
    namespace: container-registry
    resourceVersion: "15990"
    uid: 5c186236-8fc4-4c2c-b854-6b2f9001ac38
  spec:
    clusterIP: 10.152.183.174
    clusterIPs:
    - 10.152.183.174
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: registry
      nodePort: 32000
      port: 5000
      protocol: TCP
      targetPort: 5000
    selector:
      app: registry
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: kong
      meta.helm.sh/release-namespace: kong
    creationTimestamp: "2025-07-31T04:09:14Z"
    labels:
      app.kubernetes.io/instance: kong
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.9"
      helm.sh/chart: kong-2.51.0
    name: kong-kong-validation-webhook
    namespace: kong
    resourceVersion: "20356"
    uid: 5d3bd358-2df1-42d2-bfc4-8209a0c8ca5a
  spec:
    clusterIP: 10.152.183.193
    clusterIPs:
    - 10.152.183.193
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: webhook
      port: 443
      protocol: TCP
      targetPort: webhook
    selector:
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: kong
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.9"
      helm.sh/chart: kong-2.51.0
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: kong
      meta.helm.sh/release-namespace: kong
    creationTimestamp: "2025-07-31T04:09:14Z"
    labels:
      app.kubernetes.io/instance: kong
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.9"
      helm.sh/chart: kong-2.51.0
    name: kong-kong-metrics
    namespace: kong
    resourceVersion: "20359"
    uid: 7588939f-49cf-42ea-89c5-fb5a78de624e
  spec:
    clusterIP: 10.152.183.219
    clusterIPs:
    - 10.152.183.219
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: cmetrics
      port: 10255
      protocol: TCP
      targetPort: cmetrics
    - name: status
      port: 10254
      protocol: TCP
      targetPort: cstatus
    selector:
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: kong
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.9"
      helm.sh/chart: kong-2.51.0
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: kong
      meta.helm.sh/release-namespace: kong
    creationTimestamp: "2025-07-31T04:09:14Z"
    labels:
      app.kubernetes.io/instance: kong
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.9"
      helm.sh/chart: kong-2.51.0
    name: kong-kong-manager
    namespace: kong
    resourceVersion: "20362"
    uid: ba8e7107-672e-438c-8de6-46aac31527ca
  spec:
    clusterIP: 10.152.183.94
    clusterIPs:
    - 10.152.183.94
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: kong-manager
      nodePort: 32692
      port: 8002
      protocol: TCP
      targetPort: 8002
    - name: kong-manager-tls
      nodePort: 31354
      port: 8445
      protocol: TCP
      targetPort: 8445
    selector:
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: kong
      app.kubernetes.io/name: kong
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: kong
      meta.helm.sh/release-namespace: kong
    creationTimestamp: "2025-07-31T04:09:15Z"
    labels:
      app.kubernetes.io/instance: kong
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.9"
      enable-metrics: "true"
      helm.sh/chart: kong-2.51.0
    name: kong-kong-proxy
    namespace: kong
    resourceVersion: "20365"
    uid: 8d8b9ff7-4185-49ae-85ad-0eb30d42abaf
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.152.183.92
    clusterIPs:
    - 10.152.183.92
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: kong-proxy
      nodePort: 31303
      port: 80
      protocol: TCP
      targetPort: 8000
    - name: kong-proxy-tls
      nodePort: 30486
      port: 443
      protocol: TCP
      targetPort: 8443
    selector:
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: kong
      app.kubernetes.io/name: kong
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - ip: 192.168.1.241
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"k8s-app":"calico-node"},"name":"calico-node","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"calico-node"}},"template":{"metadata":{"labels":{"k8s-app":"calico-node"}},"spec":{"containers":[{"env":[{"name":"DATASTORE_TYPE","value":"kubernetes"},{"name":"WAIT_FOR_DATASTORE","value":"true"},{"name":"NODENAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"CALICO_NETWORKING_BACKEND","valueFrom":{"configMapKeyRef":{"key":"calico_backend","name":"calico-config"}}},{"name":"CLUSTER_TYPE","value":"k8s,bgp"},{"name":"IP","value":"autodetect"},{"name":"IP_AUTODETECTION_METHOD","value":"first-found"},{"name":"CALICO_IPV4POOL_VXLAN","value":"Always"},{"name":"CALICO_IPV6POOL_VXLAN","value":"Never"},{"name":"FELIX_IPINIPMTU","valueFrom":{"configMapKeyRef":{"key":"veth_mtu","name":"calico-config"}}},{"name":"FELIX_VXLANMTU","valueFrom":{"configMapKeyRef":{"key":"veth_mtu","name":"calico-config"}}},{"name":"FELIX_WIREGUARDMTU","valueFrom":{"configMapKeyRef":{"key":"veth_mtu","name":"calico-config"}}},{"name":"CALICO_IPV4POOL_CIDR","value":"10.1.0.0/16"},{"name":"CALICO_DISABLE_FILE_LOGGING","value":"true"},{"name":"FELIX_DEFAULTENDPOINTTOHOSTACTION","value":"ACCEPT"},{"name":"FELIX_IPV6SUPPORT","value":"false"},{"name":"FELIX_HEALTHENABLED","value":"true"},{"name":"FELIX_FEATUREDETECTOVERRIDE","value":"ChecksumOffloadBroken=true"}],"envFrom":[{"configMapRef":{"name":"kubernetes-services-endpoint","optional":true}}],"image":"docker.io/calico/node:v3.23.5","lifecycle":{"preStop":{"exec":{"command":["/bin/calico-node","-shutdown"]}}},"livenessProbe":{"exec":{"command":["/bin/calico-node","-felix-live"]},"failureThreshold":6,"initialDelaySeconds":10,"periodSeconds":10,"timeoutSeconds":10},"name":"calico-node","readinessProbe":{"exec":{"command":["/bin/calico-node","-felix-ready"]},"periodSeconds":10,"timeoutSeconds":10},"resources":{"requests":{"cpu":"250m"}},"securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/host/etc/cni/net.d","name":"cni-net-dir","readOnly":false},{"mountPath":"/lib/modules","name":"lib-modules","readOnly":true},{"mountPath":"/run/xtables.lock","name":"xtables-lock","readOnly":false},{"mountPath":"/var/run/calico","name":"var-run-calico","readOnly":false},{"mountPath":"/var/lib/calico","name":"var-lib-calico","readOnly":false},{"mountPath":"/var/run/nodeagent","name":"policysync"},{"mountPath":"/var/log/calico/cni","name":"cni-log-dir","readOnly":true}]}],"hostNetwork":true,"initContainers":[{"command":["/opt/cni/bin/calico-ipam","-upgrade"],"env":[{"name":"KUBERNETES_NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"CALICO_NETWORKING_BACKEND","valueFrom":{"configMapKeyRef":{"key":"calico_backend","name":"calico-config"}}}],"envFrom":[{"configMapRef":{"name":"kubernetes-services-endpoint","optional":true}}],"image":"docker.io/calico/cni:v3.23.5","name":"upgrade-ipam","securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/var/lib/cni/networks","name":"host-local-net-dir"},{"mountPath":"/host/opt/cni/bin","name":"cni-bin-dir"}]},{"command":["/opt/cni/bin/install"],"env":[{"name":"CNI_CONF_NAME","value":"10-calico.conflist"},{"name":"CNI_NETWORK_CONFIG","valueFrom":{"configMapKeyRef":{"key":"cni_network_config","name":"calico-config"}}},{"name":"KUBERNETES_NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"CNI_MTU","valueFrom":{"configMapKeyRef":{"key":"veth_mtu","name":"calico-config"}}},{"name":"SLEEP","value":"false"},{"name":"CNI_NET_DIR","value":"/var/snap/microk8s/current/args/cni-network"}],"envFrom":[{"configMapRef":{"name":"kubernetes-services-endpoint","optional":true}}],"image":"docker.io/calico/cni:v3.23.5","name":"install-cni","securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/host/opt/cni/bin","name":"cni-bin-dir"},{"mountPath":"/host/etc/cni/net.d","name":"cni-net-dir"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"priorityClassName":"system-node-critical","serviceAccountName":"calico-node","terminationGracePeriodSeconds":0,"tolerations":[{"effect":"NoSchedule","operator":"Exists"},{"key":"CriticalAddonsOnly","operator":"Exists"},{"effect":"NoExecute","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/lib/modules"},"name":"lib-modules"},{"hostPath":{"path":"/var/snap/microk8s/current/var/run/calico"},"name":"var-run-calico"},{"hostPath":{"path":"/var/snap/microk8s/current/var/lib/calico"},"name":"var-lib-calico"},{"hostPath":{"path":"/run/xtables.lock","type":"FileOrCreate"},"name":"xtables-lock"},{"hostPath":{"path":"/sys/fs/","type":"DirectoryOrCreate"},"name":"sys-fs"},{"hostPath":{"path":"/var/snap/microk8s/current/opt/cni/bin"},"name":"cni-bin-dir"},{"hostPath":{"path":"/var/snap/microk8s/current/args/cni-network"},"name":"cni-net-dir"},{"hostPath":{"path":"/var/snap/microk8s/common/var/log/calico/cni"},"name":"cni-log-dir"},{"hostPath":{"path":"/var/snap/microk8s/current/var/lib/cni/networks"},"name":"host-local-net-dir"},{"hostPath":{"path":"/var/snap/microk8s/current/var/run/nodeagent","type":"DirectoryOrCreate"},"name":"policysync"}]}},"updateStrategy":{"rollingUpdate":{"maxUnavailable":1},"type":"RollingUpdate"}}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    labels:
      k8s-app: calico-node
    name: calico-node
    namespace: kube-system
    resourceVersion: "317"
    uid: 03abcbcb-82cb-40e5-a1df-d81fb85226a5
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: calico-node
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: calico-node
      spec:
        containers:
        - env:
          - name: DATASTORE_TYPE
            value: kubernetes
          - name: WAIT_FOR_DATASTORE
            value: "true"
          - name: NODENAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CALICO_NETWORKING_BACKEND
            valueFrom:
              configMapKeyRef:
                key: calico_backend
                name: calico-config
          - name: CLUSTER_TYPE
            value: k8s,bgp
          - name: IP
            value: autodetect
          - name: IP_AUTODETECTION_METHOD
            value: first-found
          - name: CALICO_IPV4POOL_VXLAN
            value: Always
          - name: CALICO_IPV6POOL_VXLAN
            value: Never
          - name: FELIX_IPINIPMTU
            valueFrom:
              configMapKeyRef:
                key: veth_mtu
                name: calico-config
          - name: FELIX_VXLANMTU
            valueFrom:
              configMapKeyRef:
                key: veth_mtu
                name: calico-config
          - name: FELIX_WIREGUARDMTU
            valueFrom:
              configMapKeyRef:
                key: veth_mtu
                name: calico-config
          - name: CALICO_IPV4POOL_CIDR
            value: 10.1.0.0/16
          - name: CALICO_DISABLE_FILE_LOGGING
            value: "true"
          - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
            value: ACCEPT
          - name: FELIX_IPV6SUPPORT
            value: "false"
          - name: FELIX_HEALTHENABLED
            value: "true"
          - name: FELIX_FEATUREDETECTOVERRIDE
            value: ChecksumOffloadBroken=true
          envFrom:
          - configMapRef:
              name: kubernetes-services-endpoint
              optional: true
          image: docker.io/calico/node:v3.23.5
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/calico-node
                - -shutdown
          livenessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-live
            failureThreshold: 6
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: calico-node
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-ready
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            requests:
              cpu: 250m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /var/run/calico
            name: var-run-calico
          - mountPath: /var/lib/calico
            name: var-lib-calico
          - mountPath: /var/run/nodeagent
            name: policysync
          - mountPath: /var/log/calico/cni
            name: cni-log-dir
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - command:
          - /opt/cni/bin/calico-ipam
          - -upgrade
          env:
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CALICO_NETWORKING_BACKEND
            valueFrom:
              configMapKeyRef:
                key: calico_backend
                name: calico-config
          envFrom:
          - configMapRef:
              name: kubernetes-services-endpoint
              optional: true
          image: docker.io/calico/cni:v3.23.5
          imagePullPolicy: IfNotPresent
          name: upgrade-ipam
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/cni/networks
            name: host-local-net-dir
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
        - command:
          - /opt/cni/bin/install
          env:
          - name: CNI_CONF_NAME
            value: 10-calico.conflist
          - name: CNI_NETWORK_CONFIG
            valueFrom:
              configMapKeyRef:
                key: cni_network_config
                name: calico-config
          - name: KUBERNETES_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CNI_MTU
            valueFrom:
              configMapKeyRef:
                key: veth_mtu
                name: calico-config
          - name: SLEEP
            value: "false"
          - name: CNI_NET_DIR
            value: /var/snap/microk8s/current/args/cni-network
          envFrom:
          - configMapRef:
              name: kubernetes-services-endpoint
              optional: true
          image: docker.io/calico/cni:v3.23.5
          imagePullPolicy: IfNotPresent
          name: install-cni
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: calico-node
        serviceAccountName: calico-node
        terminationGracePeriodSeconds: 0
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
        volumes:
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - hostPath:
            path: /var/snap/microk8s/current/var/run/calico
            type: ""
          name: var-run-calico
        - hostPath:
            path: /var/snap/microk8s/current/var/lib/calico
            type: ""
          name: var-lib-calico
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /sys/fs/
            type: DirectoryOrCreate
          name: sys-fs
        - hostPath:
            path: /var/snap/microk8s/current/opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /var/snap/microk8s/current/args/cni-network
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /var/snap/microk8s/common/var/log/calico/cni
            type: ""
          name: cni-log-dir
        - hostPath:
            path: /var/snap/microk8s/current/var/lib/cni/networks
            type: ""
          name: host-local-net-dir
        - hostPath:
            path: /var/snap/microk8s/current/var/run/nodeagent
            type: DirectoryOrCreate
          name: policysync
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 1
    desiredNumberScheduled: 1
    numberAvailable: 1
    numberMisscheduled: 0
    numberReady: 1
    observedGeneration: 1
    updatedNumberScheduled: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{"seccomp.security.alpha.kubernetes.io/pod":"runtime/default"},"labels":{"k8s-app":"aws-iam-authenticator"},"name":"aws-iam-authenticator","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"aws-iam-authenticator"}},"template":{"metadata":{"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""},"labels":{"k8s-app":"aws-iam-authenticator"}},"spec":{"containers":[{"args":["server","--config=/etc/aws-iam-authenticator/config.yaml","--state-dir=/var/aws-iam-authenticator","--generate-kubeconfig=/etc/kubernetes/aws-iam-authenticator/kubeconfig.yaml"],"env":[{"name":"AWS_REGION","value":"us-east-2"},{"name":"AWS_DEFAULT_REGION","value":"us-east-2"}],"image":"public.ecr.aws/eks-distro/kubernetes-sigs/aws-iam-authenticator:v0.5.2-eks-1-18-1","name":"aws-iam-authenticator","resources":{"limits":{"cpu":"100m","memory":"20Mi"},"requests":{"cpu":"10m","memory":"20Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]}},"volumeMounts":[{"mountPath":"/etc/aws-iam-authenticator/","name":"config"},{"mountPath":"/var/aws-iam-authenticator/","name":"state"},{"mountPath":"/etc/kubernetes/aws-iam-authenticator/","name":"output"}]}],"hostNetwork":true,"serviceAccountName":"aws-iam-authenticator","volumes":[{"configMap":{"name":"aws-iam-authenticator"},"name":"config"},{"hostPath":{"path":"/var/snap/microk8s/current/aws-iam-authenticator"},"name":"output"},{"hostPath":{"path":"/var/snap/microk8s/current/aws-iam-authenticator"},"name":"state"}]}},"updateStrategy":{"type":"RollingUpdate"}}}
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2025-07-31T01:57:40Z"
    generation: 1
    labels:
      k8s-app: aws-iam-authenticator
    name: aws-iam-authenticator
    namespace: kube-system
    resourceVersion: "12110"
    uid: 2ad0ef3e-5abd-45a8-a2b8-e195766e9b66
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: aws-iam-authenticator
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: aws-iam-authenticator
      spec:
        containers:
        - args:
          - server
          - --config=/etc/aws-iam-authenticator/config.yaml
          - --state-dir=/var/aws-iam-authenticator
          - --generate-kubeconfig=/etc/kubernetes/aws-iam-authenticator/kubeconfig.yaml
          env:
          - name: AWS_REGION
            value: us-east-2
          - name: AWS_DEFAULT_REGION
            value: us-east-2
          image: public.ecr.aws/eks-distro/kubernetes-sigs/aws-iam-authenticator:v0.5.2-eks-1-18-1
          imagePullPolicy: IfNotPresent
          name: aws-iam-authenticator
          resources:
            limits:
              cpu: 100m
              memory: 20Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/aws-iam-authenticator/
            name: config
          - mountPath: /var/aws-iam-authenticator/
            name: state
          - mountPath: /etc/kubernetes/aws-iam-authenticator/
            name: output
        dnsPolicy: ClusterFirst
        hostNetwork: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: aws-iam-authenticator
        serviceAccountName: aws-iam-authenticator
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: aws-iam-authenticator
          name: config
        - hostPath:
            path: /var/snap/microk8s/current/aws-iam-authenticator
            type: ""
          name: output
        - hostPath:
            path: /var/snap/microk8s/current/aws-iam-authenticator
            type: ""
          name: state
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 1
    desiredNumberScheduled: 1
    numberAvailable: 1
    numberMisscheduled: 0
    numberReady: 1
    observedGeneration: 1
    updatedNumberScheduled: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"app":"metallb","component":"speaker"},"name":"speaker","namespace":"metallb-system"},"spec":{"selector":{"matchLabels":{"app":"metallb","component":"speaker"}},"template":{"metadata":{"annotations":{"prometheus.io/port":"7472","prometheus.io/scrape":"true"},"labels":{"app":"metallb","component":"speaker"}},"spec":{"containers":[{"args":["--port=7472","--log-level=info"],"env":[{"name":"METALLB_NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"METALLB_HOST","valueFrom":{"fieldRef":{"fieldPath":"status.hostIP"}}},{"name":"METALLB_ML_BIND_ADDR","valueFrom":{"fieldRef":{"fieldPath":"status.podIP"}}},{"name":"METALLB_ML_LABELS","value":"app=metallb,component=speaker"},{"name":"METALLB_ML_SECRET_KEY","valueFrom":{"secretKeyRef":{"key":"secretkey","name":"memberlist"}}}],"image":"quay.io/metallb/speaker:v0.13.3","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/metrics","port":"monitoring"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"speaker","ports":[{"containerPort":7472,"name":"monitoring"},{"containerPort":7946,"name":"memberlist-tcp"},{"containerPort":7946,"name":"memberlist-udp","protocol":"UDP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/metrics","port":"monitoring"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_RAW"],"drop":["ALL"]},"readOnlyRootFilesystem":true}}],"hostNetwork":true,"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"speaker","terminationGracePeriodSeconds":2,"tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master","operator":"Exists"},{"effect":"NoSchedule","key":"node-role.kubernetes.io/control-plane","operator":"Exists"}]}}}}
    creationTimestamp: "2025-07-31T03:45:55Z"
    generation: 1
    labels:
      app: metallb
      component: speaker
    name: speaker
    namespace: metallb-system
    resourceVersion: "14201"
    uid: c91405f6-0e2b-4cc4-849d-a60835634b4d
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: metallb
        component: speaker
    template:
      metadata:
        annotations:
          prometheus.io/port: "7472"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: metallb
          component: speaker
      spec:
        containers:
        - args:
          - --port=7472
          - --log-level=info
          env:
          - name: METALLB_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: METALLB_HOST
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: METALLB_ML_BIND_ADDR
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: METALLB_ML_LABELS
            value: app=metallb,component=speaker
          - name: METALLB_ML_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: memberlist
          image: quay.io/metallb/speaker:v0.13.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: monitoring
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: speaker
          ports:
          - containerPort: 7472
            hostPort: 7472
            name: monitoring
            protocol: TCP
          - containerPort: 7946
            hostPort: 7946
            name: memberlist-tcp
            protocol: TCP
          - containerPort: 7946
            hostPort: 7946
            name: memberlist-udp
            protocol: UDP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: monitoring
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_RAW
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: speaker
        serviceAccountName: speaker
        terminationGracePeriodSeconds: 2
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 1
    desiredNumberScheduled: 1
    numberAvailable: 1
    numberMisscheduled: 0
    numberReady: 1
    observedGeneration: 1
    updatedNumberScheduled: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2025-07-31T03:08:22Z"
    generation: 1
    name: csi-rbdplugin
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: Deployment
      name: rook-ceph-operator
      uid: 432f7d42-7427-44c0-8abc-2253ced23edc
    resourceVersion: "31677"
    uid: 38d6c572-e17a-47c2-b984-b7d966faebb2
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: csi-rbdplugin
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-rbdplugin
          contains: csi-rbdplugin-metrics
      spec:
        affinity:
          nodeAffinity: {}
        containers:
        - args:
          - --v=0
          - --csi-address=/csi/csi.sock
          - --kubelet-registration-path=/var/lib/kubelet/plugins/rook-ceph.rbd.csi.ceph.com/csi.sock
          env:
          - name: KUBE_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
          imagePullPolicy: IfNotPresent
          name: driver-registrar
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 50m
              memory: 128Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: plugin-dir
          - mountPath: /registration
            name: registration-dir
        - args:
          - --nodeid=$(NODE_ID)
          - --endpoint=$(CSI_ENDPOINT)
          - --v=0
          - --type=rbd
          - --nodeserver=true
          - --drivername=rook-ceph.rbd.csi.ceph.com
          - --pidlimit=-1
          - --stagingpath=/var/lib/kubelet/plugins/kubernetes.io/csi/
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: NODE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CSI_ENDPOINT
            value: unix:///csi/csi.sock
          image: quay.io/cephcsi/cephcsi:v3.14.1
          imagePullPolicy: IfNotPresent
          name: csi-rbdplugin
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - SYS_ADMIN
              drop:
              - ALL
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: plugin-dir
          - mountPath: /var/lib/kubelet/pods
            mountPropagation: Bidirectional
            name: pods-mount-dir
          - mountPath: /var/lib/kubelet/plugins
            mountPropagation: Bidirectional
            name: plugin-mount-dir
          - mountPath: /dev
            name: host-dev
          - mountPath: /sys
            name: host-sys
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /etc/ceph-csi-config/
            name: ceph-csi-configs
          - mountPath: /tmp/csi/keys
            name: keys-tmp-dir
          - mountPath: /run/mount
            name: host-run-mount
          - mountPath: /run/secrets/tokens
            name: oidc-token
            readOnly: true
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        hostPID: true
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: rook-csi-rbd-plugin-sa
        serviceAccountName: rook-csi-rbd-plugin-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /var/lib/kubelet/plugins/rook-ceph.rbd.csi.ceph.com
            type: DirectoryOrCreate
          name: plugin-dir
        - hostPath:
            path: /var/lib/kubelet/plugins
            type: Directory
          name: plugin-mount-dir
        - hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
          name: registration-dir
        - hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
          name: pods-mount-dir
        - hostPath:
            path: /dev
            type: ""
          name: host-dev
        - hostPath:
            path: /sys
            type: ""
          name: host-sys
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - name: ceph-csi-configs
          projected:
            defaultMode: 420
            sources:
            - configMap:
                items:
                - key: csi-cluster-config-json
                  path: config.json
                name: rook-ceph-csi-config
            - configMap:
                items:
                - key: csi-mapping-config-json
                  path: cluster-mapping.json
                name: rook-ceph-csi-mapping-config
        - emptyDir:
            medium: Memory
          name: keys-tmp-dir
        - hostPath:
            path: /run/mount
            type: ""
          name: host-run-mount
        - name: oidc-token
          projected:
            defaultMode: 420
            sources:
            - serviceAccountToken:
                audience: ceph-csi-kms
                expirationSeconds: 3600
                path: oidc-token
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 1
    desiredNumberScheduled: 1
    numberAvailable: 1
    numberMisscheduled: 0
    numberReady: 1
    observedGeneration: 1
    updatedNumberScheduled: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2025-07-31T03:08:22Z"
    generation: 1
    name: csi-cephfsplugin
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: Deployment
      name: rook-ceph-operator
      uid: 432f7d42-7427-44c0-8abc-2253ced23edc
    resourceVersion: "31680"
    uid: 011009ad-180b-4943-a286-797669dc535f
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: csi-cephfsplugin
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-cephfsplugin
          contains: csi-cephfsplugin-metrics
      spec:
        affinity:
          nodeAffinity: {}
        containers:
        - args:
          - --v=0
          - --csi-address=/csi/csi.sock
          - --kubelet-registration-path=/var/lib/kubelet/plugins/rook-ceph.cephfs.csi.ceph.com/csi.sock
          env:
          - name: KUBE_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
          imagePullPolicy: IfNotPresent
          name: driver-registrar
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 50m
              memory: 128Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: plugin-dir
          - mountPath: /registration
            name: registration-dir
        - args:
          - --nodeid=$(NODE_ID)
          - --type=cephfs
          - --endpoint=$(CSI_ENDPOINT)
          - --v=0
          - --nodeserver=true
          - --drivername=rook-ceph.cephfs.csi.ceph.com
          - --pidlimit=-1
          - --forcecephkernelclient=true
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: NODE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CSI_ENDPOINT
            value: unix:///csi/csi.sock
          image: quay.io/cephcsi/cephcsi:v3.14.1
          imagePullPolicy: IfNotPresent
          name: csi-cephfsplugin
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - SYS_ADMIN
              drop:
              - ALL
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: plugin-dir
          - mountPath: /csi/mountinfo
            name: ceph-csi-mountinfo
          - mountPath: /var/lib/kubelet/plugins
            mountPropagation: Bidirectional
            name: csi-plugins-dir
          - mountPath: /var/lib/kubelet/pods
            mountPropagation: Bidirectional
            name: pods-mount-dir
          - mountPath: /sys
            name: host-sys
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /dev
            name: host-dev
          - mountPath: /etc/ceph-csi-config/
            name: ceph-csi-config
          - mountPath: /tmp/csi/keys
            name: keys-tmp-dir
          - mountPath: /run/mount
            name: host-run-mount
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: rook-csi-cephfs-plugin-sa
        serviceAccountName: rook-csi-cephfs-plugin-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /var/lib/kubelet/plugins/rook-ceph.cephfs.csi.ceph.com/mountinfo
            type: DirectoryOrCreate
          name: ceph-csi-mountinfo
        - hostPath:
            path: /var/lib/kubelet/plugins/rook-ceph.cephfs.csi.ceph.com/
            type: DirectoryOrCreate
          name: plugin-dir
        - hostPath:
            path: /var/lib/kubelet/plugins
            type: Directory
          name: csi-plugins-dir
        - hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
          name: registration-dir
        - hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
          name: pods-mount-dir
        - hostPath:
            path: /sys
            type: ""
          name: host-sys
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - hostPath:
            path: /dev
            type: ""
          name: host-dev
        - configMap:
            defaultMode: 420
            items:
            - key: csi-cluster-config-json
              path: config.json
            name: rook-ceph-csi-config
          name: ceph-csi-config
        - emptyDir:
            medium: Memory
          name: keys-tmp-dir
        - hostPath:
            path: /run/mount
            type: ""
          name: host-run-mount
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 1
    desiredNumberScheduled: 1
    numberAvailable: 1
    numberMisscheduled: 0
    numberReady: 1
    observedGeneration: 1
    updatedNumberScheduled: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"k8s-app":"calico-kube-controllers"},"name":"calico-kube-controllers","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"k8s-app":"calico-kube-controllers"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"labels":{"k8s-app":"calico-kube-controllers"},"name":"calico-kube-controllers","namespace":"kube-system"},"spec":{"containers":[{"env":[{"name":"ENABLED_CONTROLLERS","value":"node"},{"name":"DATASTORE_TYPE","value":"kubernetes"}],"image":"docker.io/calico/kube-controllers:v3.23.5","livenessProbe":{"exec":{"command":["/usr/bin/check-status","-l"]},"failureThreshold":6,"initialDelaySeconds":10,"periodSeconds":10,"timeoutSeconds":10},"name":"calico-kube-controllers","readinessProbe":{"exec":{"command":["/usr/bin/check-status","-r"]},"periodSeconds":10}}],"nodeSelector":{"kubernetes.io/os":"linux"},"priorityClassName":"system-cluster-critical","serviceAccountName":"calico-kube-controllers","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"},{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"}]}}}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    labels:
      k8s-app: calico-kube-controllers
    name: calico-kube-controllers
    namespace: kube-system
    resourceVersion: "343"
    uid: 029c5aa3-3525-4d7f-876f-68125d78eb63
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: calico-kube-controllers
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: calico-kube-controllers
        name: calico-kube-controllers
        namespace: kube-system
      spec:
        containers:
        - env:
          - name: ENABLED_CONTROLLERS
            value: node
          - name: DATASTORE_TYPE
            value: kubernetes
          image: docker.io/calico/kube-controllers:v3.23.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -l
            failureThreshold: 6
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: calico-kube-controllers
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: calico-kube-controllers
        serviceAccountName: calico-kube-controllers
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T01:28:45Z"
      lastUpdateTime: "2025-07-31T01:28:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T01:27:55Z"
      lastUpdateTime: "2025-07-31T01:28:45Z"
      message: ReplicaSet "calico-kube-controllers-d8b9b6478" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/created-by: helm
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: rook-ceph-operator
      helm.sh/chart: rook-ceph-v1.17.6
      operator: rook
      storage-backend: ceph
    name: rook-ceph-operator
    namespace: rook-ceph
    resourceVersion: "7647"
    uid: 432f7d42-7427-44c0-8abc-2253ced23edc
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: rook-ceph-operator
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: rook-ceph-operator
          helm.sh/chart: rook-ceph-v1.17.6
      spec:
        containers:
        - args:
          - ceph
          - operator
          env:
          - name: ROOK_CURRENT_NAMESPACE_ONLY
            value: "false"
          - name: ROOK_HOSTPATH_REQUIRES_PRIVILEGED
            value: "false"
          - name: ROOK_DISABLE_DEVICE_HOTPLUG
            value: "false"
          - name: ROOK_DISCOVER_DEVICES_INTERVAL
            value: 60m
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/rook/ceph:v1.17.6
          imagePullPolicy: IfNotPresent
          name: rook-ceph-operator
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 128Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 2016
            runAsNonRoot: true
            runAsUser: 2016
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/rook
            name: rook-config
          - mountPath: /etc/ceph
            name: default-config-dir
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: rook-ceph-system
        serviceAccountName: rook-ceph-system
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 5
        volumes:
        - emptyDir: {}
          name: rook-config
        - emptyDir: {}
          name: default-config-dir
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:30Z"
      lastUpdateTime: "2025-07-31T03:05:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      lastUpdateTime: "2025-07-31T03:05:30Z"
      message: ReplicaSet "rook-ceph-operator-79df5fd9d5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"metallb","component":"controller"},"name":"controller","namespace":"metallb-system"},"spec":{"revisionHistoryLimit":3,"selector":{"matchLabels":{"app":"metallb","component":"controller"}},"template":{"metadata":{"annotations":{"prometheus.io/port":"7472","prometheus.io/scrape":"true"},"labels":{"app":"metallb","component":"controller"}},"spec":{"containers":[{"args":["--port=7472","--log-level=info"],"env":[{"name":"METALLB_ML_SECRET_NAME","value":"memberlist"},{"name":"METALLB_DEPLOYMENT","value":"controller"}],"image":"quay.io/metallb/controller:v0.13.3","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/metrics","port":"monitoring"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"controller","ports":[{"containerPort":7472,"name":"monitoring"},{"containerPort":9443,"name":"webhook-server","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/metrics","port":"monitoring"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]},"readOnlyRootFilesystem":true},"volumeMounts":[{"mountPath":"/tmp/k8s-webhook-server/serving-certs","name":"cert","readOnly":true}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"fsGroup":65534,"runAsNonRoot":true,"runAsUser":65534},"serviceAccountName":"controller","terminationGracePeriodSeconds":0,"volumes":[{"name":"cert","secret":{"defaultMode":420,"secretName":"webhook-server-cert"}}]}}}}
    creationTimestamp: "2025-07-31T03:45:55Z"
    generation: 1
    labels:
      app: metallb
      component: controller
    name: controller
    namespace: metallb-system
    resourceVersion: "13986"
    uid: 346aec17-8d88-46f8-952c-4ccc83d12467
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        app: metallb
        component: controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/port: "7472"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: metallb
          component: controller
      spec:
        containers:
        - args:
          - --port=7472
          - --log-level=info
          env:
          - name: METALLB_ML_SECRET_NAME
            value: memberlist
          - name: METALLB_DEPLOYMENT
            value: controller
          image: quay.io/metallb/controller:v0.13.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: monitoring
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 7472
            name: monitoring
            protocol: TCP
          - containerPort: 9443
            name: webhook-server
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: monitoring
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: controller
        serviceAccountName: controller
        terminationGracePeriodSeconds: 0
        volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: webhook-server-cert
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T03:46:16Z"
      lastUpdateTime: "2025-07-31T03:46:16Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      lastUpdateTime: "2025-07-31T03:46:16Z"
      message: ReplicaSet "controller-56c4696b5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","k8s-app":"kube-dns","kubernetes.io/cluster-service":"true","kubernetes.io/name":"CoreDNS"},"name":"coredns","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"kube-dns"}},"strategy":{"rollingUpdate":{"maxSurge":"10%","maxUnavailable":0},"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"priorityClassName":"system-cluster-critical"},"labels":{"k8s-app":"kube-dns"}},"spec":{"containers":[{"args":["-conf","/etc/coredns/Corefile"],"image":"public.ecr.aws/eks-distro/coredns/coredns:v1.9.3-eks-1-25-18","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/health","port":8080,"scheme":"HTTP"},"initialDelaySeconds":60,"successThreshold":1,"timeoutSeconds":5},"name":"coredns","ports":[{"containerPort":53,"name":"dns","protocol":"UDP"},{"containerPort":53,"name":"dns-tcp","protocol":"TCP"},{"containerPort":9153,"name":"metrics","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/ready","port":8181,"scheme":"HTTP"}},"resources":{"limits":{"memory":"170Mi"},"requests":{"cpu":"100m","memory":"70Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_BIND_SERVICE"],"drop":["all"]},"readOnlyRootFilesystem":true},"volumeMounts":[{"mountPath":"/etc/coredns","name":"config-volume","readOnly":true}]}],"dnsPolicy":"Default","priorityClassName":"system-cluster-critical","serviceAccountName":"coredns","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"configMap":{"items":[{"key":"Corefile","path":"Corefile"}],"name":"coredns"},"name":"config-volume"}]}}}}
    creationTimestamp: "2025-07-31T03:46:19Z"
    generation: 1
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: CoreDNS
    name: coredns
    namespace: kube-system
    resourceVersion: "14226"
    uid: 53c334bf-f551-44d1-867b-dc3e0f9c3578
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 10%
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        annotations:
          priorityClassName: system-cluster-critical
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: public.ecr.aws/eks-distro/coredns/coredns:v1.9.3-eks-1-25-18
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T03:47:30Z"
      lastUpdateTime: "2025-07-31T03:47:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T03:46:19Z"
      lastUpdateTime: "2025-07-31T03:47:30Z"
      message: ReplicaSet "coredns-df8c8d8f5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"cainjector","app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cainjector","app.kubernetes.io/version":"v1.8.0"},"name":"cert-manager-cainjector","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cainjector"}},"template":{"metadata":{"labels":{"app":"cainjector","app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cainjector","app.kubernetes.io/version":"v1.8.0"}},"spec":{"containers":[{"args":["--v=2","--leader-election-namespace=kube-system"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/jetstack/cert-manager-cainjector:v1.8.0","imagePullPolicy":"IfNotPresent","name":"cert-manager","securityContext":{"allowPrivilegeEscalation":false}}],"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"runAsNonRoot":true},"serviceAccountName":"cert-manager-cainjector"}}}}
    creationTimestamp: "2025-07-31T03:46:29Z"
    generation: 1
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.8.0
    name: cert-manager-cainjector
    namespace: cert-manager
    resourceVersion: "14291"
    uid: 33bb8f95-c665-4583-b2ce-773c6d60d63d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.8.0
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
          imagePullPolicy: IfNotPresent
          name: cert-manager
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T03:47:36Z"
      lastUpdateTime: "2025-07-31T03:47:36Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T03:47:30Z"
      lastUpdateTime: "2025-07-31T03:47:36Z"
      message: ReplicaSet "cert-manager-cainjector-7985fb445b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"cert-manager","app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.8.0"},"name":"cert-manager","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"template":{"metadata":{"annotations":{"prometheus.io/path":"/metrics","prometheus.io/port":"9402","prometheus.io/scrape":"true"},"labels":{"app":"cert-manager","app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.8.0"}},"spec":{"containers":[{"args":["--v=2","--cluster-resource-namespace=$(POD_NAMESPACE)","--leader-election-namespace=kube-system"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/jetstack/cert-manager-controller:v1.8.0","imagePullPolicy":"IfNotPresent","name":"cert-manager","ports":[{"containerPort":9402,"name":"http-metrics","protocol":"TCP"}],"securityContext":{"allowPrivilegeEscalation":false}}],"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"runAsNonRoot":true},"serviceAccountName":"cert-manager"}}}}
    creationTimestamp: "2025-07-31T03:46:29Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.8.0
    name: cert-manager
    namespace: cert-manager
    resourceVersion: "14322"
    uid: a9f9ef6c-390a-465b-bafa-79f3bda4eb70
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.8.0
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.8.0
          imagePullPolicy: IfNotPresent
          name: cert-manager
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T03:47:42Z"
      lastUpdateTime: "2025-07-31T03:47:42Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T03:47:30Z"
      lastUpdateTime: "2025-07-31T03:47:42Z"
      message: ReplicaSet "cert-manager-655bf9748f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"webhook","app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook","app.kubernetes.io/version":"v1.8.0"},"name":"cert-manager-webhook","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook"}},"template":{"metadata":{"labels":{"app":"webhook","app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook","app.kubernetes.io/version":"v1.8.0"}},"spec":{"containers":[{"args":["--v=2","--secure-port=10250","--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)","--dynamic-serving-ca-secret-name=cert-manager-webhook-ca","--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/jetstack/cert-manager-webhook:v1.8.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/livez","port":6080,"scheme":"HTTP"},"initialDelaySeconds":60,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"cert-manager","ports":[{"containerPort":10250,"name":"https","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":6080,"scheme":"HTTP"},"initialDelaySeconds":5,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":1},"securityContext":{"allowPrivilegeEscalation":false}}],"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"runAsNonRoot":true},"serviceAccountName":"cert-manager-webhook"}}}}
    creationTimestamp: "2025-07-31T03:46:29Z"
    generation: 1
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.8.0
    name: cert-manager-webhook
    namespace: cert-manager
    resourceVersion: "14341"
    uid: fb036630-4d05-4270-8db1-8212e3133fc0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.8.0
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.8.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T03:47:46Z"
      lastUpdateTime: "2025-07-31T03:47:46Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T03:47:30Z"
      lastUpdateTime: "2025-07-31T03:47:46Z"
      message: ReplicaSet "cert-manager-webhook-6dc9656f89" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"k8s-app":"metrics-server"},"name":"metrics-server","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"metrics-server"}},"strategy":{"rollingUpdate":{"maxUnavailable":0}},"template":{"metadata":{"labels":{"k8s-app":"metrics-server"}},"spec":{"containers":[{"args":["--cert-dir=/tmp","--secure-port=4443","--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname","--kubelet-use-node-status-port","--metric-resolution=15s","--kubelet-insecure-tls"],"image":"public.ecr.aws/eks-distro/kubernetes-sigs/metrics-server:v0.6.3-eks-1-25-18","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/livez","port":"https","scheme":"HTTPS"},"periodSeconds":10},"name":"metrics-server","ports":[{"containerPort":4443,"name":"https","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/readyz","port":"https","scheme":"HTTPS"},"initialDelaySeconds":20,"periodSeconds":10},"resources":{"requests":{"cpu":"100m","memory":"200Mi"}},"securityContext":{"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":1000},"volumeMounts":[{"mountPath":"/tmp","name":"tmp-dir"}]}],"nodeSelector":{"kubernetes.io/arch":"amd64","kubernetes.io/os":"linux"},"priorityClassName":"system-cluster-critical","serviceAccountName":"metrics-server","volumes":[{"emptyDir":{},"name":"tmp-dir"}]}}}}
    creationTimestamp: "2025-07-31T03:50:32Z"
    generation: 1
    labels:
      k8s-app: metrics-server
    name: metrics-server
    namespace: kube-system
    resourceVersion: "15257"
    uid: f6e42db4-0f89-48c3-b6c1-392c017b7524
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: metrics-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
      spec:
        containers:
        - args:
          - --cert-dir=/tmp
          - --secure-port=4443
          - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
          - --kubelet-insecure-tls
          image: public.ecr.aws/eks-distro/kubernetes-sigs/metrics-server:v0.6.3-eks-1-25-18
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: metrics-server
          ports:
          - containerPort: 4443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/arch: amd64
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-dir
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T03:51:40Z"
      lastUpdateTime: "2025-07-31T03:51:40Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T03:50:32Z"
      lastUpdateTime: "2025-07-31T03:51:40Z"
      message: ReplicaSet "metrics-server-6b75bd48cf" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"k8s-app":"kubernetes-dashboard"},"name":"kubernetes-dashboard","namespace":"kube-system"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"k8s-app":"kubernetes-dashboard"}},"template":{"metadata":{"labels":{"k8s-app":"kubernetes-dashboard"}},"spec":{"containers":[{"args":["--auto-generate-certificates","--namespace=kube-system"],"image":"kubernetesui/dashboard:v2.7.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/","port":8443,"scheme":"HTTPS"},"initialDelaySeconds":30,"timeoutSeconds":30},"name":"kubernetes-dashboard","ports":[{"containerPort":8443,"protocol":"TCP"}],"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsGroup":2001,"runAsUser":1001},"volumeMounts":[{"mountPath":"/certs","name":"kubernetes-dashboard-certs"},{"mountPath":"/tmp","name":"tmp-volume"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"kubernetes-dashboard","tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"}],"volumes":[{"name":"kubernetes-dashboard-certs","secret":{"secretName":"kubernetes-dashboard-certs"}},{"emptyDir":{},"name":"tmp-volume"}]}}}}
    creationTimestamp: "2025-07-31T03:50:34Z"
    generation: 1
    labels:
      k8s-app: kubernetes-dashboard
    name: kubernetes-dashboard
    namespace: kube-system
    resourceVersion: "15342"
    uid: b41c5e03-2b7f-405d-97bd-03409da823d9
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kubernetes-dashboard
      spec:
        containers:
        - args:
          - --auto-generate-certificates
          - --namespace=kube-system
          image: kubernetesui/dashboard:v2.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 8443
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: kubernetes-dashboard-certs
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - name: kubernetes-dashboard-certs
          secret:
            defaultMode: 420
            secretName: kubernetes-dashboard-certs
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T03:51:48Z"
      lastUpdateTime: "2025-07-31T03:51:48Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T03:51:41Z"
      lastUpdateTime: "2025-07-31T03:51:48Z"
      message: ReplicaSet "kubernetes-dashboard-74b66d7f9c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"k8s-app":"dashboard-metrics-scraper"},"name":"dashboard-metrics-scraper","namespace":"kube-system"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"k8s-app":"dashboard-metrics-scraper"}},"template":{"metadata":{"labels":{"k8s-app":"dashboard-metrics-scraper"}},"spec":{"containers":[{"image":"kubernetesui/metrics-scraper:v1.0.8","livenessProbe":{"httpGet":{"path":"/","port":8000,"scheme":"HTTP"},"initialDelaySeconds":30,"timeoutSeconds":30},"name":"dashboard-metrics-scraper","ports":[{"containerPort":8000,"protocol":"TCP"}],"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsGroup":2001,"runAsUser":1001},"volumeMounts":[{"mountPath":"/tmp","name":"tmp-volume"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"kubernetes-dashboard","tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"}],"volumes":[{"emptyDir":{},"name":"tmp-volume"}]}}}}
    creationTimestamp: "2025-07-31T03:50:34Z"
    generation: 1
    labels:
      k8s-app: dashboard-metrics-scraper
    name: dashboard-metrics-scraper
    namespace: kube-system
    resourceVersion: "15374"
    uid: 69b44619-d287-4ceb-8997-b92e05fc349f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: dashboard-metrics-scraper
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: dashboard-metrics-scraper
      spec:
        containers:
        - image: kubernetesui/metrics-scraper:v1.0.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: dashboard-metrics-scraper
          ports:
          - containerPort: 8000
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T03:51:54Z"
      lastUpdateTime: "2025-07-31T03:51:54Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T03:51:41Z"
      lastUpdateTime: "2025-07-31T03:51:54Z"
      message: ReplicaSet "dashboard-metrics-scraper-64bcc67c9c" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"k8s-app":"hostpath-provisioner"},"name":"hostpath-provisioner","namespace":"kube-system"},"spec":{"replicas":1,"revisionHistoryLimit":0,"selector":{"matchLabels":{"k8s-app":"hostpath-provisioner"}},"template":{"metadata":{"labels":{"k8s-app":"hostpath-provisioner"}},"spec":{"containers":[{"env":[{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"PV_DIR","value":"/var/snap/microk8s/common/default-storage"},{"name":"BUSYBOX_IMAGE","value":"busybox:1.28.4"}],"image":"cdkbot/hostpath-provisioner:1.4.2","name":"hostpath-provisioner","volumeMounts":[{"mountPath":"/var/snap/microk8s/common/default-storage","name":"pv-volume"}]}],"serviceAccountName":"microk8s-hostpath","volumes":[{"hostPath":{"path":"/var/snap/microk8s/common/default-storage"},"name":"pv-volume"}]}}}}
    creationTimestamp: "2025-07-31T03:54:13Z"
    generation: 1
    labels:
      k8s-app: hostpath-provisioner
    name: hostpath-provisioner
    namespace: kube-system
    resourceVersion: "16048"
    uid: 978507d7-f4fc-4e83-992a-5f1240465916
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 0
    selector:
      matchLabels:
        k8s-app: hostpath-provisioner
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: hostpath-provisioner
      spec:
        containers:
        - env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: PV_DIR
            value: /var/snap/microk8s/common/default-storage
          - name: BUSYBOX_IMAGE
            value: busybox:1.28.4
          image: cdkbot/hostpath-provisioner:1.4.2
          imagePullPolicy: IfNotPresent
          name: hostpath-provisioner
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/snap/microk8s/common/default-storage
            name: pv-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: microk8s-hostpath
        serviceAccountName: microk8s-hostpath
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /var/snap/microk8s/common/default-storage
            type: ""
          name: pv-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T03:54:23Z"
      lastUpdateTime: "2025-07-31T03:54:23Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T03:54:13Z"
      lastUpdateTime: "2025-07-31T03:54:23Z"
      message: ReplicaSet "hostpath-provisioner-766849dd9d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"registry"},"name":"registry","namespace":"container-registry"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"registry"}},"template":{"metadata":{"labels":{"app":"registry"}},"spec":{"containers":[{"env":[{"name":"REGISTRY_HTTP_ADDR","value":":5000"},{"name":"REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY","value":"/var/lib/registry"},{"name":"REGISTRY_STORAGE_DELETE_ENABLED","value":"yes"}],"image":"registry:2.8.1","name":"registry","ports":[{"containerPort":5000,"name":"registry","protocol":"TCP"}],"volumeMounts":[{"mountPath":"/var/lib/registry","name":"registry-data"}]}],"volumes":[{"name":"registry-data","persistentVolumeClaim":{"claimName":"registry-claim"}}]}}}}
    creationTimestamp: "2025-07-31T03:54:13Z"
    generation: 1
    labels:
      app: registry
    name: registry
    namespace: container-registry
    resourceVersion: "16173"
    uid: 103283e6-ffc4-4ec4-828c-b37f279f6522
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: registry
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: registry
      spec:
        containers:
        - env:
          - name: REGISTRY_HTTP_ADDR
            value: :5000
          - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
            value: /var/lib/registry
          - name: REGISTRY_STORAGE_DELETE_ENABLED
            value: "yes"
          image: registry:2.8.1
          imagePullPolicy: IfNotPresent
          name: registry
          ports:
          - containerPort: 5000
            name: registry
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/registry
            name: registry-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: registry-data
          persistentVolumeClaim:
            claimName: registry-claim
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T03:54:41Z"
      lastUpdateTime: "2025-07-31T03:54:41Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T03:54:13Z"
      lastUpdateTime: "2025-07-31T03:54:41Z"
      message: ReplicaSet "registry-6674bf676f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: kong
      meta.helm.sh/release-namespace: kong
    creationTimestamp: "2025-07-31T04:09:15Z"
    generation: 2
    labels:
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: kong
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.9"
      helm.sh/chart: kong-2.51.0
    name: kong-kong
    namespace: kong
    resourceVersion: "21031"
    uid: 88d8cc88-e1a2-484b-9582-e869c1e00e1a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: app
        app.kubernetes.io/instance: kong
        app.kubernetes.io/name: kong
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kuma.io/gateway: enabled
          kuma.io/service-account-token-volume: kong-kong-token
          traffic.sidecar.istio.io/includeInboundPorts: ""
        creationTimestamp: null
        labels:
          app: kong-kong
          app.kubernetes.io/component: app
          app.kubernetes.io/instance: kong
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kong
          app.kubernetes.io/version: "3.9"
          helm.sh/chart: kong-2.51.0
          version: "3.9"
      spec:
        automountServiceAccountToken: false
        containers:
        - env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CONTROLLER_ADMISSION_WEBHOOK_LISTEN
            value: 0.0.0.0:8080
          - name: CONTROLLER_ELECTION_ID
            value: kong-ingress-controller-leader-kong
          - name: CONTROLLER_INGRESS_CLASS
            value: kong
          - name: CONTROLLER_KONG_ADMIN_TLS_SKIP_VERIFY
            value: "true"
          - name: CONTROLLER_KONG_ADMIN_URL
            value: https://localhost:8444
          - name: CONTROLLER_PUBLISH_SERVICE
            value: kong/kong-kong-proxy
          image: kong/kubernetes-ingress-controller:3.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: ingress-controller
          ports:
          - containerPort: 8080
            name: webhook
            protocol: TCP
          - containerPort: 10255
            name: cmetrics
            protocol: TCP
          - containerPort: 10254
            name: cstatus
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /admission-webhook
            name: webhook-cert
            readOnly: true
          - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
            name: kong-kong-token
            readOnly: true
        - env:
          - name: KONG_ADMIN_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_GUI_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_GUI_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_LISTEN
            value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
          - name: KONG_CLUSTER_LISTEN
            value: "off"
          - name: KONG_DATABASE
            value: "off"
          - name: KONG_KIC
            value: "on"
          - name: KONG_LUA_PACKAGE_PATH
            value: /opt/?.lua;/opt/?/init.lua;;
          - name: KONG_NGINX_WORKER_PROCESSES
            value: "2"
          - name: KONG_PORTAL_API_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PORTAL_API_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PORT_MAPS
            value: 80:8000, 443:8443
          - name: KONG_PREFIX
            value: /kong_prefix/
          - name: KONG_PROXY_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PROXY_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PROXY_LISTEN
            value: 0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2
              ssl
          - name: KONG_PROXY_STREAM_ACCESS_LOG
            value: /dev/stdout basic
          - name: KONG_PROXY_STREAM_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ROUTER_FLAVOR
            value: traditional
          - name: KONG_STATUS_ACCESS_LOG
            value: "off"
          - name: KONG_STATUS_ERROR_LOG
            value: /dev/stderr
          - name: KONG_STATUS_LISTEN
            value: 0.0.0.0:8100, [::]:8100
          - name: KONG_STREAM_LISTEN
            value: "off"
          - name: KONG_NGINX_DAEMON
            value: "off"
          image: kong:3.9
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - kong
                - quit
                - --wait=15
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: status
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: proxy
          ports:
          - containerPort: 8000
            name: proxy
            protocol: TCP
          - containerPort: 8443
            name: proxy-tls
            protocol: TCP
          - containerPort: 8100
            name: status
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /status/ready
              port: status
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kong_prefix/
            name: kong-kong-prefix-dir
          - mountPath: /tmp
            name: kong-kong-tmp
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - rm
          - -vrf
          - $KONG_PREFIX/pids
          env:
          - name: KONG_ADMIN_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_GUI_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_GUI_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_LISTEN
            value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
          - name: KONG_CLUSTER_LISTEN
            value: "off"
          - name: KONG_DATABASE
            value: "off"
          - name: KONG_KIC
            value: "on"
          - name: KONG_LUA_PACKAGE_PATH
            value: /opt/?.lua;/opt/?/init.lua;;
          - name: KONG_NGINX_WORKER_PROCESSES
            value: "2"
          - name: KONG_PORTAL_API_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PORTAL_API_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PORT_MAPS
            value: 80:8000, 443:8443
          - name: KONG_PREFIX
            value: /kong_prefix/
          - name: KONG_PROXY_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PROXY_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PROXY_LISTEN
            value: 0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2
              ssl
          - name: KONG_PROXY_STREAM_ACCESS_LOG
            value: /dev/stdout basic
          - name: KONG_PROXY_STREAM_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ROUTER_FLAVOR
            value: traditional
          - name: KONG_STATUS_ACCESS_LOG
            value: "off"
          - name: KONG_STATUS_ERROR_LOG
            value: /dev/stderr
          - name: KONG_STATUS_LISTEN
            value: 0.0.0.0:8100, [::]:8100
          - name: KONG_STREAM_LISTEN
            value: "off"
          image: kong:3.9
          imagePullPolicy: IfNotPresent
          name: clear-stale-pid
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kong_prefix/
            name: kong-kong-prefix-dir
          - mountPath: /tmp
            name: kong-kong-tmp
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kong-kong
        serviceAccountName: kong-kong
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir:
            sizeLimit: 256Mi
          name: kong-kong-prefix-dir
        - emptyDir:
            sizeLimit: 1Gi
          name: kong-kong-tmp
        - name: kong-kong-token
          projected:
            defaultMode: 420
            sources:
            - serviceAccountToken:
                expirationSeconds: 3607
                path: token
            - configMap:
                items:
                - key: ca.crt
                  path: ca.crt
                name: kube-root-ca.crt
            - downwardAPI:
                items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: kong-kong-validation-webhook-keypair
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T04:09:15Z"
      lastUpdateTime: "2025-07-31T04:13:35Z"
      message: ReplicaSet "kong-kong-86dcf9ddbb" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-07-31T04:15:35Z"
      lastUpdateTime: "2025-07-31T04:15:35Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      banzaicloud.com/last-applied: UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAb3JpZ2luYWzkmN1uGjkUx9/F6kVXGg8fIU00EhdRobvRbghKqt5UUWXsA7h4bNf2UNho3n11PANMAqTJtlq12osojOfv4/Px8wH7njArP4Dz0miSEWatby07JCELqQXJyACsMuscdCAJySEwwQIj2T3RLAeSEe4ldRNhVTGTmlpnlhJNgSNJlHjLOOqcMQvKwc5JQsxXDe4GpuBAc/Ak+3jUi4kyfHGN+gEoCPH1lCkPCeFGB2eUAkey4Ao47HLt5nZ5aiw4Fgz6V0iU90660zPR69KzXveM9nq8Tc/ZhNNu9/SEg+iegOCkvCsT4i1wDN2BVZIzT7JOQjwo4Ggvuyc5C3z+F5uA8vjIrH0yQyXaDI4FmK1RH9YWfb0B7oAFIGVCAuRW4We03si+evYiVaKY1H5PlkNwkvvKjzo2Np1KLUP0RxsBF7vnMiHWiAsdZGOQOPhSSAdiUDipZ7d8DqJQUs8uZ9psh4cr4EVVvY+187eP8zZcWQceva6IWMC6QgGJ2RQtI5eaJGTJVBHBeSLwu1izYKxRZrb+M1pbFBNwGgL4VJrW3PgQ+SjvMAV1nsDVRLpZXIFSXIMJgd71X72+GAxuhre3v5GEULrst+P/IHMwReh385O2jyMOgltTqQO4JVPUB+ZC/7TdzqvXCpgAR2MSpNF9JPjQC7rdRP3mFtrXKWAeqCgci/a6eefs4ErUgYavVAATSmrod/LeUSFGYMFJI/rdN5VIwJQVKtCpR1r7sAq9OA6r4BitwKUbUndRWQdL0IEujSpyoLkRQLnRy2rL73RTYKFwQGcsgO//YbRx4w83wBWT+dgoydfHtO/rQvdjeyB3CQG9jIWsW0Bdtw09JCOFlqus1WpxL/GvSU/qDV+Q8i4hMmez2EFgJn1w63RxHuHxckZ9MI7N4PHkbHmadlMEI04eF0pVviO+05EJYwf+QXt6ZIAkxIE3hYvd8Z4omcvgqx6QG4d2uqdvriR2CNx/4Ku33BYkI512O4/NupZ2uucoLRNSZf/KFDpUjOf4cczCnGQEo9h5hPFDoEK62Pu+ezv8qrzPmRYKNtxKXXig4JxxNWf7IN4AN0twH+KM4coyjUV9x6QqHFRx/+dwOvDybwSzk3ZO0u4Lyaxn/9xUHkfvCV5/VSoPdeHnQPVjaGIhMD5HnHrpedp5IU2b2T83Tv+rJvfEl/dzqPqhrcprZv3chIB8nafdF/PVMPBzI4Y/r6Xov3o9uh4MP10OKrpAC2ukDv1Xr9/eXn4ajgbj68vR+0fo4a53E1H1t+1ByINbgtthJ5xcgkNPdpylbiJS7mUaH7jJo9JKEZPTp50DJR9fDz5djjcVf+dMjlmaSlDiBqbbz3UCfGCh8Kk14nJMyhKDru3UgT7bkAWeYpZG8Ud60xJ6NLq4Gt6OL94On2tvQ3a6O5g+MNrM97/F+0vB1og1ZjdOqP5ny5O003sxy9uTzTNI7vy+x/H23Wmn+33oJo+EApY7IZ6jKI7syfzaP5LhyJ5MyUkrN6JQ0JArOaG7QQdMXGu1rs76exYg8Jjq2Le50VM5azVS+fDNAQ9CbmN9F9D0GJ9oyO3hHLhCtzye1YNvBbMA3ZhppOA0Du77foe8WCeNk2H9VjHvR3XC1z5ATrkqfABHuZNBcqZIQjzwIqqNDrAK1WEcd7vkcME5ejVqXnRU6DRJpZ6RTfWrwmM5qlDuiW2UtTxc10PyqpgH63tI3ixzebDOOBNyG9YDWV0MgJBFTjJyVZFcHoPzWKEx0eYz8AAC7W130Md7UkmumMUXMkDevHaINjZ1iEL62RssZh1MNZjGQaynZo/umXZekNhjvrlczqyVenZkudqXWvSNdR+aImW833huZvegP4T00aw+hPJ9lGf3hBVCguYParSIVyGwsrL6eXML3GjhSXbypt3eRt5YNsZxV1bXZvgdg/ug/CcAAP//UEsHCAurXMCtBQAAwhQAAFBLAQIUABQACAAIAAAAAAALq1zArQUAAMIUAAAIAAAAAAAAAAAAAAAAAAAAAABvcmlnaW5hbFBLBQYAAAAAAQABADYAAADjBQAAAAA=
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:08:22Z"
    generation: 706
    name: csi-rbdplugin-provisioner
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: Deployment
      name: rook-ceph-operator
      uid: 432f7d42-7427-44c0-8abc-2253ced23edc
    resourceVersion: "31681"
    uid: 03ef1982-d706-458e-9db1-a1adda5b877b
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: csi-rbdplugin-provisioner
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-rbdplugin-provisioner
          contains: csi-rbdplugin-metrics
      spec:
        affinity:
          nodeAffinity: {}
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - csi-rbdplugin-provisioner
              topologyKey: kubernetes.io/hostname
        containers:
        - args:
          - --csi-address=$(ADDRESS)
          - --v=0
          - --timeout=2m30s
          - --retry-interval-start=500ms
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --default-fstype=ext4
          - --extra-create-metadata=true
          - --prevent-volume-mode-conversion=true
          - --feature-gates=HonorPVReclaimPolicy=true
          - --feature-gates=Topology=false
          env:
          - name: ADDRESS
            value: unix:///csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
          imagePullPolicy: IfNotPresent
          name: csi-provisioner
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --v=0
          - --timeout=2m30s
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --handle-volume-inuse-error=false
          - --feature-gates=RecoverVolumeExpansionFailure=true
          env:
          - name: ADDRESS
            value: unix:///csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-resizer:v1.13.2
          imagePullPolicy: IfNotPresent
          name: csi-resizer
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --v=0
          - --timeout=2m30s
          - --csi-address=$(ADDRESS)
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --default-fstype=ext4
          env:
          - name: ADDRESS
            value: /csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-attacher:v4.8.1
          imagePullPolicy: IfNotPresent
          name: csi-attacher
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --v=0
          - --timeout=2m30s
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --extra-create-metadata=true
          env:
          - name: ADDRESS
            value: unix:///csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.1
          imagePullPolicy: IfNotPresent
          name: csi-snapshotter
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --nodeid=$(NODE_ID)
          - --endpoint=$(CSI_ENDPOINT)
          - --v=0
          - --type=rbd
          - --controllerserver=true
          - --drivername=rook-ceph.rbd.csi.ceph.com
          - --pidlimit=-1
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: NODE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CSI_ENDPOINT
            value: unix:///csi/csi-provisioner.sock
          image: quay.io/cephcsi/cephcsi:v3.14.1
          imagePullPolicy: IfNotPresent
          name: csi-rbdplugin
          resources:
            limits:
              memory: 1Gi
            requests:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - mountPath: /dev
            name: host-dev
          - mountPath: /sys
            name: host-sys
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /etc/ceph-csi-config/
            name: ceph-csi-configs
          - mountPath: /tmp/csi/keys
            name: keys-tmp-dir
          - mountPath: /run/secrets/tokens
            name: oidc-token
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: rook-csi-rbd-provisioner-sa
        serviceAccountName: rook-csi-rbd-provisioner-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /dev
            type: ""
          name: host-dev
        - hostPath:
            path: /sys
            type: ""
          name: host-sys
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - emptyDir:
            medium: Memory
          name: socket-dir
        - name: ceph-csi-configs
          projected:
            defaultMode: 420
            sources:
            - configMap:
                items:
                - key: csi-cluster-config-json
                  path: config.json
                name: rook-ceph-csi-config
            - configMap:
                items:
                - key: csi-mapping-config-json
                  path: cluster-mapping.json
                name: rook-ceph-csi-mapping-config
        - emptyDir:
            medium: Memory
          name: keys-tmp-dir
        - name: oidc-token
          projected:
            defaultMode: 420
            sources:
            - serviceAccountToken:
                audience: ceph-csi-kms
                expirationSeconds: 3600
                path: oidc-token
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T03:09:25Z"
      lastUpdateTime: "2025-07-31T03:09:25Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T03:08:22Z"
      lastUpdateTime: "2025-07-31T03:09:25Z"
      message: ReplicaSet "csi-rbdplugin-provisioner-d88479984" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 706
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      banzaicloud.com/last-applied: UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAb3JpZ2luYWzsmFFv2zgSx78L0YceICq24jSBAD8EtXtn3MUxkkNfiqBgyLHNM0WyQ0qNL/B3P5CUYzlx2uS22A0W+xBEIofD4X9+Q5O6J8zKz4BOGk1Kwqx1R02fZGQltSAlGYFVZl2B9iQjFXgmmGekvCeaVUBKwp2kHOxy7qyqF1JTi6aRwRsgyaKVs4wHUzRmFW1JRsx3DXgFc0DQHBwpvzwbyK0yfHUZ7EegwMfuOVMOMsKN9miUAiSlxxoOR91G+jA9NRaQeRPiq2UwHxwX81MxKOjpoDilgwHv0TN2y2lRnBxzEMUxCE42N5uMOAs8rB7BKsmZI2U/Iw4U8OCvvCcV83z5L3YLyoVXZu3PRNoEtx6Zh8U6DPFrG8K9Ao7APJBNRjxUVoXnMEEnB+o18yS5mNTukGUFHiV3KZp2kWw+l1r6GJU2As5375uMWCPOtZedRoLwrZYIYlSj1ItrvgRRK6kXk4U2D83jO+B1SuOXdgnXjwUc31kEFwJPaKxgnZgI6GyzV5KJJhlpmKojQT9e/k3MnzfWKLNY/zM6XNW3gBo8uFyao6VxPrKyuQkqtGoBtnTiIk5CaTPskYxQGqZjQoRAh+/en49GV+Pr67/FLgVMANK4LGn0MMAZO7yswNR+WFTHPXfIlD5UzLBbL0/tFDAHVNTI4gxF1T897BBBw3cqgAklNQz71eBZQ49ragGlEcPigyM3GQHdxNW3NdQucqs6KckRdzL8dbXOneErsrnJiKzYItYeLKTzuM5XZ1FqJxfUeYNsAXEw857xJWDZDPKzPFR9HDmrlZoZJXlI1mQ+NX6G4PaqujuaZATBmRrjjnJPlKykd6loKoPBSXHy4UKGkgqogku93NakJP1er4p7XGvaL86C6SYjjVF1BRem1j6xUIXHGfPLVoBdOGHl4KmQGPeLLjY/wGVL1E/p2IH0hrEJRnDnkdG0g9HtlpWifwlVtZZ35dHRr4HLaWbd0ngf+DrLi1fz1XHwF2JvBrEl00IBTcpRqWsHFBANDuPpINrMgfkagS6YBze8Am4awM9xxPjOMh2Q+sSkqhH+IDgRnPxvALOf94/z4pVktqP/hFSmlEvtARumqPMM/fCk16t+EbT7ZPzDaIOzz1fAFZNVEn7n0yI0oP0WtcoIoNzoJh1Wn5/7dyqEt7TXdgaXzUle5L1XEr1/Yn3DVIcDsRTDd++nl6Px18koAR0O78N0Bk250cIaqf3w3fuP15Ov4+lodjmZ/nuf/t01xgE2gDuiBMoGMASzwzdP7nPuZJ7eTZUwlSJKNKT9hLhBDsFiFQ65iisJ2j/Hxexy9HUy22LxCU0VpJxLUOIK5g/PrUrOM1+73BoxmZHNJijT+mnVeLEjCzwPUk7jwbvrKUQ0Pb8YX8/OP45f6m+Lf767eO457Sbh/62BbzVbB/aDtHFA+l82x3l/8OrDRffC8gLi+39/hvfiZJ/3k37x23jPHhm6tdsZhrsSDS1PzJS8PaqMqBV0zJW8pbtGBCYutVqnS/sTDwKaRxOFlidm4HmUPv6+cKPncnHUkXa/5+lwX9mY7hV01xXeqK/stuRvMmJRGpR+/VEx56atTmvnoaJc1c4DUo7SS84UyYgDXkdroz3c+XRVDmUtOZxzHiKYdr9HPBDQZY46RrZ5SymDyvr1SKYbMghZV6QkFynXm+fSF7RLy70ntpPFzeE0HjLvZnNzMJ3PjUw5O5jGlJILZoO99FB1L/lRka2u0ZD+x5lQGq3n1JjHxpAf/fjzzl7Wf8TDy0R9jET6XhP2v5Dczf8CAAD//1BLBwjYQzhQPwUAAEETAABQSwECFAAUAAgACAAAAAAA2EM4UD8FAABBEwAACAAAAAAAAAAAAAAAAAAAAAAAb3JpZ2luYWxQSwUGAAAAAAEAAQA2AAAAdQUAAAAA
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:08:22Z"
    generation: 706
    name: csi-cephfsplugin-provisioner
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: Deployment
      name: rook-ceph-operator
      uid: 432f7d42-7427-44c0-8abc-2253ced23edc
    resourceVersion: "31686"
    uid: fa4543aa-9b02-4612-a6ab-8b86bd725da5
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: csi-cephfsplugin-provisioner
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-cephfsplugin-provisioner
          contains: csi-cephfsplugin-metrics
      spec:
        affinity:
          nodeAffinity: {}
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - csi-cephfsplugin-provisioner
              topologyKey: kubernetes.io/hostname
        containers:
        - args:
          - --v=0
          - --csi-address=$(ADDRESS)
          - --leader-election=true
          - --timeout=2m30s
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          env:
          - name: ADDRESS
            value: /csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-attacher:v4.8.1
          imagePullPolicy: IfNotPresent
          name: csi-attacher
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --v=0
          - --timeout=2m30s
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --extra-create-metadata=true
          env:
          - name: ADDRESS
            value: unix:///csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.1
          imagePullPolicy: IfNotPresent
          name: csi-snapshotter
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --v=0
          - --timeout=2m30s
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --handle-volume-inuse-error=false
          - --feature-gates=RecoverVolumeExpansionFailure=true
          env:
          - name: ADDRESS
            value: unix:///csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-resizer:v1.13.2
          imagePullPolicy: IfNotPresent
          name: csi-resizer
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --v=0
          - --timeout=2m30s
          - --retry-interval-start=500ms
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --feature-gates=HonorPVReclaimPolicy=true
          - --prevent-volume-mode-conversion=true
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --extra-create-metadata=true
          env:
          - name: ADDRESS
            value: unix:///csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
          imagePullPolicy: IfNotPresent
          name: csi-provisioner
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --nodeid=$(NODE_ID)
          - --type=cephfs
          - --endpoint=$(CSI_ENDPOINT)
          - --v=0
          - --controllerserver=true
          - --drivername=rook-ceph.cephfs.csi.ceph.com
          - --pidlimit=-1
          - --forcecephkernelclient=true
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: NODE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CSI_ENDPOINT
            value: unix:///csi/csi-provisioner.sock
          image: quay.io/cephcsi/cephcsi:v3.14.1
          imagePullPolicy: IfNotPresent
          name: csi-cephfsplugin
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - mountPath: /sys
            name: host-sys
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /dev
            name: host-dev
          - mountPath: /etc/ceph-csi-config/
            name: ceph-csi-config
          - mountPath: /tmp/csi/keys
            name: keys-tmp-dir
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: rook-csi-cephfs-provisioner-sa
        serviceAccountName: rook-csi-cephfs-provisioner-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir:
            medium: Memory
          name: socket-dir
        - hostPath:
            path: /sys
            type: ""
          name: host-sys
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - hostPath:
            path: /dev
            type: ""
          name: host-dev
        - configMap:
            defaultMode: 420
            items:
            - key: csi-cluster-config-json
              path: config.json
            name: rook-ceph-csi-config
          name: ceph-csi-config
        - emptyDir:
            medium: Memory
          name: keys-tmp-dir
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-31T03:09:26Z"
      lastUpdateTime: "2025-07-31T03:09:26Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-31T03:08:22Z"
      lastUpdateTime: "2025-07-31T03:09:26Z"
      message: ReplicaSet "csi-cephfsplugin-provisioner-7849cb4446" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 706
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T01:27:55Z"
    generation: 1
    labels:
      k8s-app: calico-kube-controllers
      pod-template-hash: d8b9b6478
    name: calico-kube-controllers-d8b9b6478
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: calico-kube-controllers
      uid: 029c5aa3-3525-4d7f-876f-68125d78eb63
    resourceVersion: "342"
    uid: b2505670-b61a-4a0c-870b-3767a7b26c7c
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: calico-kube-controllers
        pod-template-hash: d8b9b6478
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: calico-kube-controllers
          pod-template-hash: d8b9b6478
        name: calico-kube-controllers
        namespace: kube-system
      spec:
        containers:
        - env:
          - name: ENABLED_CONTROLLERS
            value: node
          - name: DATASTORE_TYPE
            value: kubernetes
          image: docker.io/calico/kube-controllers:v3.23.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -l
            failureThreshold: 6
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: calico-kube-controllers
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: calico-kube-controllers
        serviceAccountName: calico-kube-controllers
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app: rook-ceph-operator
      helm.sh/chart: rook-ceph-v1.17.6
      pod-template-hash: 79df5fd9d5
    name: rook-ceph-operator-79df5fd9d5
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: rook-ceph-operator
      uid: 432f7d42-7427-44c0-8abc-2253ced23edc
    resourceVersion: "7646"
    uid: 71d04c68-5f70-4785-9e74-4fc1fa64ce95
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: rook-ceph-operator
        pod-template-hash: 79df5fd9d5
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: rook-ceph-operator
          helm.sh/chart: rook-ceph-v1.17.6
          pod-template-hash: 79df5fd9d5
      spec:
        containers:
        - args:
          - ceph
          - operator
          env:
          - name: ROOK_CURRENT_NAMESPACE_ONLY
            value: "false"
          - name: ROOK_HOSTPATH_REQUIRES_PRIVILEGED
            value: "false"
          - name: ROOK_DISABLE_DEVICE_HOTPLUG
            value: "false"
          - name: ROOK_DISCOVER_DEVICES_INTERVAL
            value: 60m
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/rook/ceph:v1.17.6
          imagePullPolicy: IfNotPresent
          name: rook-ceph-operator
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 128Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 2016
            runAsNonRoot: true
            runAsUser: 2016
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/rook
            name: rook-config
          - mountPath: /etc/ceph
            name: default-config-dir
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: rook-ceph-system
        serviceAccountName: rook-ceph-system
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 5
        volumes:
        - emptyDir: {}
          name: rook-config
        - emptyDir: {}
          name: default-config-dir
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      banzaicloud.com/last-applied: UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAb3JpZ2luYWzkmN1uGjkUx9/F6kVXGg8fIU00EhdRobvRbghKqt5UUWXsA7h4bNf2UNho3n11PANMAqTJtlq12osojOfv4/Px8wH7njArP4Dz0miSEWatby07JCELqQXJyACsMuscdCAJySEwwQIj2T3RLAeSEe4ldRNhVTGTmlpnlhJNgSNJlHjLOOqcMQvKwc5JQsxXDe4GpuBAc/Ak+3jUi4kyfHGN+gEoCPH1lCkPCeFGB2eUAkey4Ao47HLt5nZ5aiw4Fgz6V0iU90660zPR69KzXveM9nq8Tc/ZhNNu9/SEg+iegOCkvCsT4i1wDN2BVZIzT7JOQjwo4Ggvuyc5C3z+F5uA8vjIrH0yQyXaDI4FmK1RH9YWfb0B7oAFIGVCAuRW4We03si+evYiVaKY1H5PlkNwkvvKjzo2Np1KLUP0RxsBF7vnMiHWiAsdZGOQOPhSSAdiUDipZ7d8DqJQUs8uZ9psh4cr4EVVvY+187eP8zZcWQceva6IWMC6QgGJ2RQtI5eaJGTJVBHBeSLwu1izYKxRZrb+M1pbFBNwGgL4VJrW3PgQ+SjvMAV1nsDVRLpZXIFSXIMJgd71X72+GAxuhre3v5GEULrst+P/IHMwReh385O2jyMOgltTqQO4JVPUB+ZC/7TdzqvXCpgAR2MSpNF9JPjQC7rdRP3mFtrXKWAeqCgci/a6eefs4ErUgYavVAATSmrod/LeUSFGYMFJI/rdN5VIwJQVKtCpR1r7sAq9OA6r4BitwKUbUndRWQdL0IEujSpyoLkRQLnRy2rL73RTYKFwQGcsgO//YbRx4w83wBWT+dgoydfHtO/rQvdjeyB3CQG9jIWsW0Bdtw09JCOFlqus1WpxL/GvSU/qDV+Q8i4hMmez2EFgJn1w63RxHuHxckZ9MI7N4PHkbHmadlMEI04eF0pVviO+05EJYwf+QXt6ZIAkxIE3hYvd8Z4omcvgqx6QG4d2uqdvriR2CNx/4Ku33BYkI512O4/NupZ2uucoLRNSZf/KFDpUjOf4cczCnGQEo9h5hPFDoEK62Pu+ezv8qrzPmRYKNtxKXXig4JxxNWf7IN4AN0twH+KM4coyjUV9x6QqHFRx/+dwOvDybwSzk3ZO0u4Lyaxn/9xUHkfvCV5/VSoPdeHnQPVjaGIhMD5HnHrpedp5IU2b2T83Tv+rJvfEl/dzqPqhrcprZv3chIB8nafdF/PVMPBzI4Y/r6Xov3o9uh4MP10OKrpAC2ukDv1Xr9/eXn4ajgbj68vR+0fo4a53E1H1t+1ByINbgtthJ5xcgkNPdpylbiJS7mUaH7jJo9JKEZPTp50DJR9fDz5djjcVf+dMjlmaSlDiBqbbz3UCfGCh8Kk14nJMyhKDru3UgT7bkAWeYpZG8Ud60xJ6NLq4Gt6OL94On2tvQ3a6O5g+MNrM97/F+0vB1og1ZjdOqP5ny5O003sxy9uTzTNI7vy+x/H23Wmn+33oJo+EApY7IZ6jKI7syfzaP5LhyJ5MyUkrN6JQ0JArOaG7QQdMXGu1rs76exYg8Jjq2Le50VM5azVS+fDNAQ9CbmN9F9D0GJ9oyO3hHLhCtzye1YNvBbMA3ZhppOA0Du77foe8WCeNk2H9VjHvR3XC1z5ATrkqfABHuZNBcqZIQjzwIqqNDrAK1WEcd7vkcME5ejVqXnRU6DRJpZ6RTfWrwmM5qlDuiW2UtTxc10PyqpgH63tI3ixzebDOOBNyG9YDWV0MgJBFTjJyVZFcHoPzWKEx0eYz8AAC7W130Md7UkmumMUXMkDevHaINjZ1iEL62RssZh1MNZjGQaynZo/umXZekNhjvrlczqyVenZkudqXWvSNdR+aImW833huZvegP4T00aw+hPJ9lGf3hBVCguYParSIVyGwsrL6eXML3GjhSXbypt3eRt5YNsZxV1bXZvgdg/ug/CcAAP//UEsHCAurXMCtBQAAwhQAAFBLAQIUABQACAAIAAAAAAALq1zArQUAAMIUAAAIAAAAAAAAAAAAAAAAAAAAAABvcmlnaW5hbFBLBQYAAAAAAQABADYAAADjBQAAAAA=
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:08:22Z"
    generation: 1
    labels:
      app: csi-rbdplugin-provisioner
      contains: csi-rbdplugin-metrics
      pod-template-hash: d88479984
    name: csi-rbdplugin-provisioner-d88479984
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: csi-rbdplugin-provisioner
      uid: 03ef1982-d706-458e-9db1-a1adda5b877b
    resourceVersion: "8151"
    uid: 862ef5b5-b12b-4d2b-9931-0e54c41ccceb
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: csi-rbdplugin-provisioner
        pod-template-hash: d88479984
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-rbdplugin-provisioner
          contains: csi-rbdplugin-metrics
          pod-template-hash: d88479984
      spec:
        affinity:
          nodeAffinity: {}
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - csi-rbdplugin-provisioner
              topologyKey: kubernetes.io/hostname
        containers:
        - args:
          - --csi-address=$(ADDRESS)
          - --v=0
          - --timeout=2m30s
          - --retry-interval-start=500ms
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --default-fstype=ext4
          - --extra-create-metadata=true
          - --prevent-volume-mode-conversion=true
          - --feature-gates=HonorPVReclaimPolicy=true
          - --feature-gates=Topology=false
          env:
          - name: ADDRESS
            value: unix:///csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
          imagePullPolicy: IfNotPresent
          name: csi-provisioner
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --v=0
          - --timeout=2m30s
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --handle-volume-inuse-error=false
          - --feature-gates=RecoverVolumeExpansionFailure=true
          env:
          - name: ADDRESS
            value: unix:///csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-resizer:v1.13.2
          imagePullPolicy: IfNotPresent
          name: csi-resizer
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --v=0
          - --timeout=2m30s
          - --csi-address=$(ADDRESS)
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --default-fstype=ext4
          env:
          - name: ADDRESS
            value: /csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-attacher:v4.8.1
          imagePullPolicy: IfNotPresent
          name: csi-attacher
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --v=0
          - --timeout=2m30s
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --extra-create-metadata=true
          env:
          - name: ADDRESS
            value: unix:///csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.1
          imagePullPolicy: IfNotPresent
          name: csi-snapshotter
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --nodeid=$(NODE_ID)
          - --endpoint=$(CSI_ENDPOINT)
          - --v=0
          - --type=rbd
          - --controllerserver=true
          - --drivername=rook-ceph.rbd.csi.ceph.com
          - --pidlimit=-1
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: NODE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CSI_ENDPOINT
            value: unix:///csi/csi-provisioner.sock
          image: quay.io/cephcsi/cephcsi:v3.14.1
          imagePullPolicy: IfNotPresent
          name: csi-rbdplugin
          resources:
            limits:
              memory: 1Gi
            requests:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - mountPath: /dev
            name: host-dev
          - mountPath: /sys
            name: host-sys
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /etc/ceph-csi-config/
            name: ceph-csi-configs
          - mountPath: /tmp/csi/keys
            name: keys-tmp-dir
          - mountPath: /run/secrets/tokens
            name: oidc-token
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: rook-csi-rbd-provisioner-sa
        serviceAccountName: rook-csi-rbd-provisioner-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /dev
            type: ""
          name: host-dev
        - hostPath:
            path: /sys
            type: ""
          name: host-sys
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - emptyDir:
            medium: Memory
          name: socket-dir
        - name: ceph-csi-configs
          projected:
            defaultMode: 420
            sources:
            - configMap:
                items:
                - key: csi-cluster-config-json
                  path: config.json
                name: rook-ceph-csi-config
            - configMap:
                items:
                - key: csi-mapping-config-json
                  path: cluster-mapping.json
                name: rook-ceph-csi-mapping-config
        - emptyDir:
            medium: Memory
          name: keys-tmp-dir
        - name: oidc-token
          projected:
            defaultMode: 420
            sources:
            - serviceAccountToken:
                audience: ceph-csi-kms
                expirationSeconds: 3600
                path: oidc-token
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      banzaicloud.com/last-applied: UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAb3JpZ2luYWzsmFFv2zgSx78L0YceICq24jSBAD8EtXtn3MUxkkNfiqBgyLHNM0WyQ0qNL/B3P5CUYzlx2uS22A0W+xBEIofD4X9+Q5O6J8zKz4BOGk1Kwqx1R02fZGQltSAlGYFVZl2B9iQjFXgmmGekvCeaVUBKwp2kHOxy7qyqF1JTi6aRwRsgyaKVs4wHUzRmFW1JRsx3DXgFc0DQHBwpvzwbyK0yfHUZ7EegwMfuOVMOMsKN9miUAiSlxxoOR91G+jA9NRaQeRPiq2UwHxwX81MxKOjpoDilgwHv0TN2y2lRnBxzEMUxCE42N5uMOAs8rB7BKsmZI2U/Iw4U8OCvvCcV83z5L3YLyoVXZu3PRNoEtx6Zh8U6DPFrG8K9Ao7APJBNRjxUVoXnMEEnB+o18yS5mNTukGUFHiV3KZp2kWw+l1r6GJU2As5375uMWCPOtZedRoLwrZYIYlSj1ItrvgRRK6kXk4U2D83jO+B1SuOXdgnXjwUc31kEFwJPaKxgnZgI6GyzV5KJJhlpmKojQT9e/k3MnzfWKLNY/zM6XNW3gBo8uFyao6VxPrKyuQkqtGoBtnTiIk5CaTPskYxQGqZjQoRAh+/en49GV+Pr67/FLgVMANK4LGn0MMAZO7yswNR+WFTHPXfIlD5UzLBbL0/tFDAHVNTI4gxF1T897BBBw3cqgAklNQz71eBZQ49ragGlEcPigyM3GQHdxNW3NdQucqs6KckRdzL8dbXOneErsrnJiKzYItYeLKTzuM5XZ1FqJxfUeYNsAXEw857xJWDZDPKzPFR9HDmrlZoZJXlI1mQ+NX6G4PaqujuaZATBmRrjjnJPlKykd6loKoPBSXHy4UKGkgqogku93NakJP1er4p7XGvaL86C6SYjjVF1BRem1j6xUIXHGfPLVoBdOGHl4KmQGPeLLjY/wGVL1E/p2IH0hrEJRnDnkdG0g9HtlpWifwlVtZZ35dHRr4HLaWbd0ngf+DrLi1fz1XHwF2JvBrEl00IBTcpRqWsHFBANDuPpINrMgfkagS6YBze8Am4awM9xxPjOMh2Q+sSkqhH+IDgRnPxvALOf94/z4pVktqP/hFSmlEvtARumqPMM/fCk16t+EbT7ZPzDaIOzz1fAFZNVEn7n0yI0oP0WtcoIoNzoJh1Wn5/7dyqEt7TXdgaXzUle5L1XEr1/Yn3DVIcDsRTDd++nl6Px18koAR0O78N0Bk250cIaqf3w3fuP15Ov4+lodjmZ/nuf/t01xgE2gDuiBMoGMASzwzdP7nPuZJ7eTZUwlSJKNKT9hLhBDsFiFQ65iisJ2j/Hxexy9HUy22LxCU0VpJxLUOIK5g/PrUrOM1+73BoxmZHNJijT+mnVeLEjCzwPUk7jwbvrKUQ0Pb8YX8/OP45f6m+Lf767eO457Sbh/62BbzVbB/aDtHFA+l82x3l/8OrDRffC8gLi+39/hvfiZJ/3k37x23jPHhm6tdsZhrsSDS1PzJS8PaqMqBV0zJW8pbtGBCYutVqnS/sTDwKaRxOFlidm4HmUPv6+cKPncnHUkXa/5+lwX9mY7hV01xXeqK/stuRvMmJRGpR+/VEx56atTmvnoaJc1c4DUo7SS84UyYgDXkdroz3c+XRVDmUtOZxzHiKYdr9HPBDQZY46RrZ5SymDyvr1SKYbMghZV6QkFynXm+fSF7RLy70ntpPFzeE0HjLvZnNzMJ3PjUw5O5jGlJILZoO99FB1L/lRka2u0ZD+x5lQGq3n1JjHxpAf/fjzzl7Wf8TDy0R9jET6XhP2v5Dczf8CAAD//1BLBwjYQzhQPwUAAEETAABQSwECFAAUAAgACAAAAAAA2EM4UD8FAABBEwAACAAAAAAAAAAAAAAAAAAAAAAAb3JpZ2luYWxQSwUGAAAAAAEAAQA2AAAAdQUAAAAA
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:08:22Z"
    generation: 1
    labels:
      app: csi-cephfsplugin-provisioner
      contains: csi-cephfsplugin-metrics
      pod-template-hash: 7849cb4446
    name: csi-cephfsplugin-provisioner-7849cb4446
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: csi-cephfsplugin-provisioner
      uid: fa4543aa-9b02-4612-a6ab-8b86bd725da5
    resourceVersion: "8171"
    uid: 2260b00c-45b2-45e3-90f3-70e5b93aff05
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: csi-cephfsplugin-provisioner
        pod-template-hash: 7849cb4446
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-cephfsplugin-provisioner
          contains: csi-cephfsplugin-metrics
          pod-template-hash: 7849cb4446
      spec:
        affinity:
          nodeAffinity: {}
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - csi-cephfsplugin-provisioner
              topologyKey: kubernetes.io/hostname
        containers:
        - args:
          - --v=0
          - --csi-address=$(ADDRESS)
          - --leader-election=true
          - --timeout=2m30s
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          env:
          - name: ADDRESS
            value: /csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-attacher:v4.8.1
          imagePullPolicy: IfNotPresent
          name: csi-attacher
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --v=0
          - --timeout=2m30s
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --extra-create-metadata=true
          env:
          - name: ADDRESS
            value: unix:///csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.1
          imagePullPolicy: IfNotPresent
          name: csi-snapshotter
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --v=0
          - --timeout=2m30s
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --handle-volume-inuse-error=false
          - --feature-gates=RecoverVolumeExpansionFailure=true
          env:
          - name: ADDRESS
            value: unix:///csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-resizer:v1.13.2
          imagePullPolicy: IfNotPresent
          name: csi-resizer
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=$(ADDRESS)
          - --v=0
          - --timeout=2m30s
          - --retry-interval-start=500ms
          - --leader-election=true
          - --leader-election-namespace=rook-ceph
          - --feature-gates=HonorPVReclaimPolicy=true
          - --prevent-volume-mode-conversion=true
          - --leader-election-lease-duration=2m17s
          - --leader-election-renew-deadline=1m47s
          - --leader-election-retry-period=26s
          - --extra-create-metadata=true
          env:
          - name: ADDRESS
            value: unix:///csi/csi-provisioner.sock
          image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
          imagePullPolicy: IfNotPresent
          name: csi-provisioner
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --nodeid=$(NODE_ID)
          - --type=cephfs
          - --endpoint=$(CSI_ENDPOINT)
          - --v=0
          - --controllerserver=true
          - --drivername=rook-ceph.cephfs.csi.ceph.com
          - --pidlimit=-1
          - --forcecephkernelclient=true
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: NODE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CSI_ENDPOINT
            value: unix:///csi/csi-provisioner.sock
          image: quay.io/cephcsi/cephcsi:v3.14.1
          imagePullPolicy: IfNotPresent
          name: csi-cephfsplugin
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - mountPath: /sys
            name: host-sys
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /dev
            name: host-dev
          - mountPath: /etc/ceph-csi-config/
            name: ceph-csi-config
          - mountPath: /tmp/csi/keys
            name: keys-tmp-dir
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: rook-csi-cephfs-provisioner-sa
        serviceAccountName: rook-csi-cephfs-provisioner-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir:
            medium: Memory
          name: socket-dir
        - hostPath:
            path: /sys
            type: ""
          name: host-sys
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - hostPath:
            path: /dev
            type: ""
          name: host-dev
        - configMap:
            defaultMode: 420
            items:
            - key: csi-cluster-config-json
              path: config.json
            name: rook-ceph-csi-config
          name: ceph-csi-config
        - emptyDir:
            medium: Memory
          name: keys-tmp-dir
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:45:55Z"
    generation: 1
    labels:
      app: metallb
      component: controller
      pod-template-hash: 56c4696b5
    name: controller-56c4696b5
    namespace: metallb-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: controller
      uid: 346aec17-8d88-46f8-952c-4ccc83d12467
    resourceVersion: "13985"
    uid: 5169e56a-121e-4499-8770-dedb25610dbd
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: metallb
        component: controller
        pod-template-hash: 56c4696b5
    template:
      metadata:
        annotations:
          prometheus.io/port: "7472"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: metallb
          component: controller
          pod-template-hash: 56c4696b5
      spec:
        containers:
        - args:
          - --port=7472
          - --log-level=info
          env:
          - name: METALLB_ML_SECRET_NAME
            value: memberlist
          - name: METALLB_DEPLOYMENT
            value: controller
          image: quay.io/metallb/controller:v0.13.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: monitoring
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 7472
            name: monitoring
            protocol: TCP
          - containerPort: 9443
            name: webhook-server
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: monitoring
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: controller
        serviceAccountName: controller
        terminationGracePeriodSeconds: 0
        volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: webhook-server-cert
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:46:19Z"
    generation: 1
    labels:
      k8s-app: kube-dns
      pod-template-hash: df8c8d8f5
    name: coredns-df8c8d8f5
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: 53c334bf-f551-44d1-867b-dc3e0f9c3578
    resourceVersion: "14222"
    uid: bf1aaac3-91af-4296-ae17-2af4f4b733b5
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kube-dns
        pod-template-hash: df8c8d8f5
    template:
      metadata:
        annotations:
          priorityClassName: system-cluster-critical
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
          pod-template-hash: df8c8d8f5
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: public.ecr.aws/eks-distro/coredns/coredns:v1.9.3-eks-1-25-18
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:47:30Z"
    generation: 1
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.8.0
      pod-template-hash: 7985fb445b
    name: cert-manager-cainjector-7985fb445b
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: 33bb8f95-c665-4583-b2ce-773c6d60d63d
    resourceVersion: "14290"
    uid: 8a7fd58d-898f-4b75-b0c7-83bfe65864d2
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: 7985fb445b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.8.0
          pod-template-hash: 7985fb445b
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.8.0
          imagePullPolicy: IfNotPresent
          name: cert-manager
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:47:30Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.8.0
      pod-template-hash: 655bf9748f
    name: cert-manager-655bf9748f
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: a9f9ef6c-390a-465b-bafa-79f3bda4eb70
    resourceVersion: "14321"
    uid: 883159a4-2f75-4c54-8d6c-63312e5787fe
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: 655bf9748f
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.8.0
          pod-template-hash: 655bf9748f
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.8.0
          imagePullPolicy: IfNotPresent
          name: cert-manager
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:47:30Z"
    generation: 1
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.8.0
      pod-template-hash: 6dc9656f89
    name: cert-manager-webhook-6dc9656f89
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-webhook
      uid: fb036630-4d05-4270-8db1-8212e3133fc0
    resourceVersion: "14340"
    uid: 78f971c3-7870-44f5-b888-ce64d77c2c83
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
        pod-template-hash: 6dc9656f89
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.8.0
          pod-template-hash: 6dc9656f89
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.8.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:50:32Z"
    generation: 1
    labels:
      k8s-app: metrics-server
      pod-template-hash: 6b75bd48cf
    name: metrics-server-6b75bd48cf
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server
      uid: f6e42db4-0f89-48c3-b6c1-392c017b7524
    resourceVersion: "15250"
    uid: 8ba9df92-46a7-4718-b7ac-b0a5b1b6fbca
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: 6b75bd48cf
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: 6b75bd48cf
      spec:
        containers:
        - args:
          - --cert-dir=/tmp
          - --secure-port=4443
          - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
          - --kubelet-insecure-tls
          image: public.ecr.aws/eks-distro/kubernetes-sigs/metrics-server:v0.6.3-eks-1-25-18
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: metrics-server
          ports:
          - containerPort: 4443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/arch: amd64
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-dir
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:51:41Z"
    generation: 1
    labels:
      k8s-app: kubernetes-dashboard
      pod-template-hash: 74b66d7f9c
    name: kubernetes-dashboard-74b66d7f9c
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubernetes-dashboard
      uid: b41c5e03-2b7f-405d-97bd-03409da823d9
    resourceVersion: "15341"
    uid: 934ec813-b4a6-43c5-b963-ac94a24bac84
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
        pod-template-hash: 74b66d7f9c
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kubernetes-dashboard
          pod-template-hash: 74b66d7f9c
      spec:
        containers:
        - args:
          - --auto-generate-certificates
          - --namespace=kube-system
          image: kubernetesui/dashboard:v2.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 8443
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: kubernetes-dashboard-certs
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - name: kubernetes-dashboard-certs
          secret:
            defaultMode: 420
            secretName: kubernetes-dashboard-certs
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:51:41Z"
    generation: 1
    labels:
      k8s-app: dashboard-metrics-scraper
      pod-template-hash: 64bcc67c9c
    name: dashboard-metrics-scraper-64bcc67c9c
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dashboard-metrics-scraper
      uid: 69b44619-d287-4ceb-8997-b92e05fc349f
    resourceVersion: "15373"
    uid: 82c4a4a5-cd17-45fc-a27a-2e45195c0633
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: dashboard-metrics-scraper
        pod-template-hash: 64bcc67c9c
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: dashboard-metrics-scraper
          pod-template-hash: 64bcc67c9c
      spec:
        containers:
        - image: kubernetesui/metrics-scraper:v1.0.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: dashboard-metrics-scraper
          ports:
          - containerPort: 8000
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:54:13Z"
    generation: 1
    labels:
      k8s-app: hostpath-provisioner
      pod-template-hash: 766849dd9d
    name: hostpath-provisioner-766849dd9d
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: hostpath-provisioner
      uid: 978507d7-f4fc-4e83-992a-5f1240465916
    resourceVersion: "16047"
    uid: f1858b50-c11c-4f0f-ae6b-1da259669ccb
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: hostpath-provisioner
        pod-template-hash: 766849dd9d
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: hostpath-provisioner
          pod-template-hash: 766849dd9d
      spec:
        containers:
        - env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: PV_DIR
            value: /var/snap/microk8s/common/default-storage
          - name: BUSYBOX_IMAGE
            value: busybox:1.28.4
          image: cdkbot/hostpath-provisioner:1.4.2
          imagePullPolicy: IfNotPresent
          name: hostpath-provisioner
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/snap/microk8s/common/default-storage
            name: pv-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: microk8s-hostpath
        serviceAccountName: microk8s-hostpath
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /var/snap/microk8s/common/default-storage
            type: ""
          name: pv-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-31T03:54:13Z"
    generation: 1
    labels:
      app: registry
      pod-template-hash: 6674bf676f
    name: registry-6674bf676f
    namespace: container-registry
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: registry
      uid: 103283e6-ffc4-4ec4-828c-b37f279f6522
    resourceVersion: "16172"
    uid: 08d71f4b-cb84-46a4-990b-9f418fe84b33
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: registry
        pod-template-hash: 6674bf676f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: registry
          pod-template-hash: 6674bf676f
      spec:
        containers:
        - env:
          - name: REGISTRY_HTTP_ADDR
            value: :5000
          - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
            value: /var/lib/registry
          - name: REGISTRY_STORAGE_DELETE_ENABLED
            value: "yes"
          image: registry:2.8.1
          imagePullPolicy: IfNotPresent
          name: registry
          ports:
          - containerPort: 5000
            name: registry
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/registry
            name: registry-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: registry-data
          persistentVolumeClaim:
            claimName: registry-claim
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kong
      meta.helm.sh/release-namespace: kong
    creationTimestamp: "2025-07-31T04:09:15Z"
    generation: 2
    labels:
      app: kong-kong
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: kong
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.8"
      helm.sh/chart: kong-2.51.0
      pod-template-hash: c466b6f48
      version: "3.8"
    name: kong-kong-c466b6f48
    namespace: kong
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kong-kong
      uid: 88d8cc88-e1a2-484b-9582-e869c1e00e1a
    resourceVersion: "20493"
    uid: 81cc9eb9-4bbb-420d-8539-5bc7b6219dc1
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: app
        app.kubernetes.io/instance: kong
        app.kubernetes.io/name: kong
        pod-template-hash: c466b6f48
    template:
      metadata:
        annotations:
          kuma.io/gateway: enabled
          kuma.io/service-account-token-volume: kong-kong-token
          traffic.sidecar.istio.io/includeInboundPorts: ""
        creationTimestamp: null
        labels:
          app: kong-kong
          app.kubernetes.io/component: app
          app.kubernetes.io/instance: kong
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kong
          app.kubernetes.io/version: "3.8"
          helm.sh/chart: kong-2.51.0
          pod-template-hash: c466b6f48
          version: "3.8"
      spec:
        automountServiceAccountToken: false
        containers:
        - env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CONTROLLER_ADMISSION_WEBHOOK_LISTEN
            value: 0.0.0.0:8080
          - name: CONTROLLER_ELECTION_ID
            value: kong-ingress-controller-leader-kong
          - name: CONTROLLER_INGRESS_CLASS
            value: kong
          - name: CONTROLLER_KONG_ADMIN_TLS_SKIP_VERIFY
            value: "true"
          - name: CONTROLLER_KONG_ADMIN_URL
            value: https://localhost:8444
          - name: CONTROLLER_PUBLISH_SERVICE
            value: kong/kong-kong-proxy
          image: kong/kubernetes-ingress-controller:3.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: ingress-controller
          ports:
          - containerPort: 8080
            name: webhook
            protocol: TCP
          - containerPort: 10255
            name: cmetrics
            protocol: TCP
          - containerPort: 10254
            name: cstatus
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /admission-webhook
            name: webhook-cert
            readOnly: true
          - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
            name: kong-kong-token
            readOnly: true
        - env:
          - name: KONG_ADMIN_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_GUI_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_GUI_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_LISTEN
            value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
          - name: KONG_CLUSTER_LISTEN
            value: "off"
          - name: KONG_DATABASE
            value: "off"
          - name: KONG_KIC
            value: "on"
          - name: KONG_LUA_PACKAGE_PATH
            value: /opt/?.lua;/opt/?/init.lua;;
          - name: KONG_NGINX_WORKER_PROCESSES
            value: "2"
          - name: KONG_PLUGINS
            value: bundled,oidcify
          - name: KONG_PLUGINSERVER_NAMES
            value: oidcify
          - name: KONG_PLUGINSERVER_OIDCIFY_QUERY_CMD
            value: /usr/local/bin/oidcify -dump
          - name: KONG_PLUGINSERVER_OIDCIFY_START_CMD
            value: /usr/local/bin/oidcify
          - name: KONG_PORTAL_API_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PORTAL_API_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PORT_MAPS
            value: 80:8000, 443:8443
          - name: KONG_PREFIX
            value: /kong_prefix/
          - name: KONG_PROXY_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PROXY_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PROXY_LISTEN
            value: 0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2
              ssl
          - name: KONG_PROXY_STREAM_ACCESS_LOG
            value: /dev/stdout basic
          - name: KONG_PROXY_STREAM_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ROUTER_FLAVOR
            value: traditional
          - name: KONG_STATUS_ACCESS_LOG
            value: "off"
          - name: KONG_STATUS_ERROR_LOG
            value: /dev/stderr
          - name: KONG_STATUS_LISTEN
            value: 0.0.0.0:8100, [::]:8100
          - name: KONG_STREAM_LISTEN
            value: "off"
          - name: KONG_NGINX_DAEMON
            value: "off"
          image: localhost:32000/kong-oidcify:3.8
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - kong
                - quit
                - --wait=15
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: status
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: proxy
          ports:
          - containerPort: 8000
            name: proxy
            protocol: TCP
          - containerPort: 8443
            name: proxy-tls
            protocol: TCP
          - containerPort: 8100
            name: status
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /status/ready
              port: status
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kong_prefix/
            name: kong-kong-prefix-dir
          - mountPath: /tmp
            name: kong-kong-tmp
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - rm
          - -vrf
          - $KONG_PREFIX/pids
          env:
          - name: KONG_ADMIN_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_GUI_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_GUI_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_LISTEN
            value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
          - name: KONG_CLUSTER_LISTEN
            value: "off"
          - name: KONG_DATABASE
            value: "off"
          - name: KONG_KIC
            value: "on"
          - name: KONG_LUA_PACKAGE_PATH
            value: /opt/?.lua;/opt/?/init.lua;;
          - name: KONG_NGINX_WORKER_PROCESSES
            value: "2"
          - name: KONG_PLUGINS
            value: bundled,oidcify
          - name: KONG_PLUGINSERVER_NAMES
            value: oidcify
          - name: KONG_PLUGINSERVER_OIDCIFY_QUERY_CMD
            value: /usr/local/bin/oidcify -dump
          - name: KONG_PLUGINSERVER_OIDCIFY_START_CMD
            value: /usr/local/bin/oidcify
          - name: KONG_PORTAL_API_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PORTAL_API_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PORT_MAPS
            value: 80:8000, 443:8443
          - name: KONG_PREFIX
            value: /kong_prefix/
          - name: KONG_PROXY_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PROXY_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PROXY_LISTEN
            value: 0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2
              ssl
          - name: KONG_PROXY_STREAM_ACCESS_LOG
            value: /dev/stdout basic
          - name: KONG_PROXY_STREAM_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ROUTER_FLAVOR
            value: traditional
          - name: KONG_STATUS_ACCESS_LOG
            value: "off"
          - name: KONG_STATUS_ERROR_LOG
            value: /dev/stderr
          - name: KONG_STATUS_LISTEN
            value: 0.0.0.0:8100, [::]:8100
          - name: KONG_STREAM_LISTEN
            value: "off"
          image: localhost:32000/kong-oidcify:3.8
          imagePullPolicy: IfNotPresent
          name: clear-stale-pid
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kong_prefix/
            name: kong-kong-prefix-dir
          - mountPath: /tmp
            name: kong-kong-tmp
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kong-kong
        serviceAccountName: kong-kong
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir:
            sizeLimit: 256Mi
          name: kong-kong-prefix-dir
        - emptyDir:
            sizeLimit: 1Gi
          name: kong-kong-tmp
        - name: kong-kong-token
          projected:
            defaultMode: 420
            sources:
            - serviceAccountToken:
                expirationSeconds: 3607
                path: token
            - configMap:
                items:
                - key: ca.crt
                  path: ca.crt
                name: kube-root-ca.crt
            - downwardAPI:
                items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: kong-kong-validation-webhook-keypair
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: kong
      meta.helm.sh/release-namespace: kong
    creationTimestamp: "2025-07-31T04:13:14Z"
    generation: 1
    labels:
      app: kong-kong
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: kong
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.9"
      helm.sh/chart: kong-2.51.0
      pod-template-hash: 86dcf9ddbb
      version: "3.9"
    name: kong-kong-86dcf9ddbb
    namespace: kong
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kong-kong
      uid: 88d8cc88-e1a2-484b-9582-e869c1e00e1a
    resourceVersion: "21028"
    uid: 9f5bc1d6-3c6b-4d9b-a2ea-e41ff0f7176b
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: app
        app.kubernetes.io/instance: kong
        app.kubernetes.io/name: kong
        pod-template-hash: 86dcf9ddbb
    template:
      metadata:
        annotations:
          kuma.io/gateway: enabled
          kuma.io/service-account-token-volume: kong-kong-token
          traffic.sidecar.istio.io/includeInboundPorts: ""
        creationTimestamp: null
        labels:
          app: kong-kong
          app.kubernetes.io/component: app
          app.kubernetes.io/instance: kong
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kong
          app.kubernetes.io/version: "3.9"
          helm.sh/chart: kong-2.51.0
          pod-template-hash: 86dcf9ddbb
          version: "3.9"
      spec:
        automountServiceAccountToken: false
        containers:
        - env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CONTROLLER_ADMISSION_WEBHOOK_LISTEN
            value: 0.0.0.0:8080
          - name: CONTROLLER_ELECTION_ID
            value: kong-ingress-controller-leader-kong
          - name: CONTROLLER_INGRESS_CLASS
            value: kong
          - name: CONTROLLER_KONG_ADMIN_TLS_SKIP_VERIFY
            value: "true"
          - name: CONTROLLER_KONG_ADMIN_URL
            value: https://localhost:8444
          - name: CONTROLLER_PUBLISH_SERVICE
            value: kong/kong-kong-proxy
          image: kong/kubernetes-ingress-controller:3.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: ingress-controller
          ports:
          - containerPort: 8080
            name: webhook
            protocol: TCP
          - containerPort: 10255
            name: cmetrics
            protocol: TCP
          - containerPort: 10254
            name: cstatus
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /admission-webhook
            name: webhook-cert
            readOnly: true
          - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
            name: kong-kong-token
            readOnly: true
        - env:
          - name: KONG_ADMIN_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_GUI_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_GUI_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_LISTEN
            value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
          - name: KONG_CLUSTER_LISTEN
            value: "off"
          - name: KONG_DATABASE
            value: "off"
          - name: KONG_KIC
            value: "on"
          - name: KONG_LUA_PACKAGE_PATH
            value: /opt/?.lua;/opt/?/init.lua;;
          - name: KONG_NGINX_WORKER_PROCESSES
            value: "2"
          - name: KONG_PORTAL_API_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PORTAL_API_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PORT_MAPS
            value: 80:8000, 443:8443
          - name: KONG_PREFIX
            value: /kong_prefix/
          - name: KONG_PROXY_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PROXY_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PROXY_LISTEN
            value: 0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2
              ssl
          - name: KONG_PROXY_STREAM_ACCESS_LOG
            value: /dev/stdout basic
          - name: KONG_PROXY_STREAM_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ROUTER_FLAVOR
            value: traditional
          - name: KONG_STATUS_ACCESS_LOG
            value: "off"
          - name: KONG_STATUS_ERROR_LOG
            value: /dev/stderr
          - name: KONG_STATUS_LISTEN
            value: 0.0.0.0:8100, [::]:8100
          - name: KONG_STREAM_LISTEN
            value: "off"
          - name: KONG_NGINX_DAEMON
            value: "off"
          image: kong:3.9
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - kong
                - quit
                - --wait=15
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: status
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: proxy
          ports:
          - containerPort: 8000
            name: proxy
            protocol: TCP
          - containerPort: 8443
            name: proxy-tls
            protocol: TCP
          - containerPort: 8100
            name: status
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /status/ready
              port: status
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kong_prefix/
            name: kong-kong-prefix-dir
          - mountPath: /tmp
            name: kong-kong-tmp
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - rm
          - -vrf
          - $KONG_PREFIX/pids
          env:
          - name: KONG_ADMIN_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_GUI_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_GUI_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_LISTEN
            value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
          - name: KONG_CLUSTER_LISTEN
            value: "off"
          - name: KONG_DATABASE
            value: "off"
          - name: KONG_KIC
            value: "on"
          - name: KONG_LUA_PACKAGE_PATH
            value: /opt/?.lua;/opt/?/init.lua;;
          - name: KONG_NGINX_WORKER_PROCESSES
            value: "2"
          - name: KONG_PORTAL_API_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PORTAL_API_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PORT_MAPS
            value: 80:8000, 443:8443
          - name: KONG_PREFIX
            value: /kong_prefix/
          - name: KONG_PROXY_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PROXY_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PROXY_LISTEN
            value: 0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2
              ssl
          - name: KONG_PROXY_STREAM_ACCESS_LOG
            value: /dev/stdout basic
          - name: KONG_PROXY_STREAM_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ROUTER_FLAVOR
            value: traditional
          - name: KONG_STATUS_ACCESS_LOG
            value: "off"
          - name: KONG_STATUS_ERROR_LOG
            value: /dev/stderr
          - name: KONG_STATUS_LISTEN
            value: 0.0.0.0:8100, [::]:8100
          - name: KONG_STREAM_LISTEN
            value: "off"
          image: kong:3.9
          imagePullPolicy: IfNotPresent
          name: clear-stale-pid
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kong_prefix/
            name: kong-kong-prefix-dir
          - mountPath: /tmp
            name: kong-kong-tmp
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kong-kong
        serviceAccountName: kong-kong
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir:
            sizeLimit: 256Mi
          name: kong-kong-prefix-dir
        - emptyDir:
            sizeLimit: 1Gi
          name: kong-kong-tmp
        - name: kong-kong-token
          projected:
            defaultMode: 420
            sources:
            - serviceAccountToken:
                expirationSeconds: 3607
                path: token
            - configMap:
                items:
                - key: ca.crt
                  path: ca.crt
                name: kube-root-ca.crt
            - downwardAPI:
                items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: kong-kong-validation-webhook-keypair
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: v1
  data:
    client-ca-file: |
      -----BEGIN CERTIFICATE-----
      MIIDDzCCAfegAwIBAgIUEjuQQIbOlVhzxc49hJXX6uFU/p0wDQYJKoZIhvcNAQEL
      BQAwFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMB4XDTI1MDczMTAxMjczOVoXDTM1
      MDcyOTAxMjczOVowFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMIIBIjANBgkqhkiG
      9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1KIFIBoAVuocqHntjk3aV3djS21U6j2RwwC
      Uk6fTMwJ0bHUV1C9ZHZBzOfbJ1+kggWQ+zWCA9emTIuPTIBK447nxciafdL7rvWJ
      78nUeYWhizAUvfc9u6/JBJOtGQiN/y7kGkr5ms0hhE73urm1B79v5evnLQ4tdH66
      1yZnEEthF5OOYUg7nD6kePDCMZQo9pzBcLMc9JO7hbI388kGKLyVjiPb3RV2ACbo
      xElVAOnX1fJxQBA2AVdNR0FgZD7Wx4t+aYvxdaDuOgKILr5bY6IWg06BX4EQImRP
      CBq31/ttIY8WJbPUcvic4h6vx5vHKU2hjDEMTZsBEkZP/MBvTQIDAQABo1MwUTAd
      BgNVHQ4EFgQUUcYw0mYKba95uM7mR9581XspVtwwHwYDVR0jBBgwFoAUUcYw0mYK
      ba95uM7mR9581XspVtwwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
      AQEAOvIBRWAo/8eoNxv3tx+b365+vd63ET+8GdWjA3uzPNnEYYUlLUr+P8j90uQH
      tAyS+0BJbH0pap4K0xL7AG3DG/S5loBJyZjrEH4qyZZbzi2BlcnN1bj3zjPQ1apd
      byJSq/k4vS9NaukNSY5rJQSBLXSh/7iWCuzaVGh5W+0Gkw+gcqthVmXPtewe/LKj
      aQCwLuM9X9IH3F84WYMl8XLr9q0piKPcAC1vV9XgrPsETJ1yKcKbTC2xCvMWu1KH
      fQ84e17B7Q7bxW+ayD4uBcP7vUCAxnSPaOW7JY9CC0Jhsowz+C2b5vpdTciuZYmI
      62SW2xq9Utp2j/TSmHIpXlWrVA==
      -----END CERTIFICATE-----
    requestheader-allowed-names: '["front-proxy-client"]'
    requestheader-client-ca-file: |
      -----BEGIN CERTIFICATE-----
      MIIDEzCCAfugAwIBAgIUVLJ+dVJiRJGWQ3rcEFqPt7/JFRUwDQYJKoZIhvcNAQEL
      BQAwGTEXMBUGA1UEAwwOZnJvbnQtcHJveHktY2EwHhcNMjUwNzMxMDEyNzM5WhcN
      MzUwNzI5MDEyNzM5WjAZMRcwFQYDVQQDDA5mcm9udC1wcm94eS1jYTCCASIwDQYJ
      KoZIhvcNAQEBBQADggEPADCCAQoCggEBALWj7aR+6HsVR2ppzHAPHJnu0rQ1z9ph
      uJiRP9yTdhxevZHNetDZ4pS5WpsQMXqveE4gqGJStZDdDHeK4d6IXnK0rlavCbI3
      Mo6t+oecXI9Q2kD/ta/4JxowehDrTeTYyR6oXXOfyv5mIgzoWurjcsq17N54LGEe
      asS0BG8XqtzMuvMdsJaEiQGXcYsf/dOuk/QbtCEW94oJHitChi1nR5sG3oK+iPdp
      PFpUWutQrRiLxqPxvSBKHQFNh9E0VNBWHLCfBjNioskODXduixosOkGsCrCr5Dcg
      MFU79AU7YiGGXWbvxNHBfcaVWL6RiP3Aqt7lVPK4d2on+VecUiFcpDcCAwEAAaNT
      MFEwHQYDVR0OBBYEFE3YvBMbEEWZ/xUtX3UlGrFVusGvMB8GA1UdIwQYMBaAFE3Y
      vBMbEEWZ/xUtX3UlGrFVusGvMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
      BQADggEBAF/2y7p7Y9N6lDM0ePZEKM74tlLFkCd8tgkCitiMOMEMJb+vZ1lNgt0D
      /h6ed7MopeaE4Brdx+P7w8+loKK4vzYeCBhTKY5ibr/eQgcptU3NX/h5STze5BmV
      JYhKVny4tgBAlA4oxdAcgeu54vEsrmK+WFVcBV7wz2Vt/OTEaDMv13OYT0J+ZEeJ
      2serLc+OMvVgkFfKFPPW9S0gHBbOn6ZgRhKVHoEFu5Pe/o/qe/pLCxifJuFDMUtF
      9zHKtX9LQ7RthoxYjoPzDbwqlaPvShlTxLl6f3CvXUtReDfR6wtnu8NQKHwNjx6H
      u3pfX2Alb6RDd+VX/v28qlss7ICuzFo=
      -----END CERTIFICATE-----
    requestheader-extra-headers-prefix: '["X-Remote-Extra-"]'
    requestheader-group-headers: '["X-Remote-Group"]'
    requestheader-username-headers: '["X-Remote-User"]'
  kind: ConfigMap
  metadata:
    creationTimestamp: "2025-07-31T01:27:49Z"
    name: extension-apiserver-authentication
    namespace: kube-system
    resourceVersion: "15"
    uid: 28f2d951-2200-4eec-a358-ff48ffe06089
- apiVersion: v1
  data:
    calico_backend: vxlan
    cni_network_config: |-
      {
        "name": "k8s-pod-network",
        "cniVersion": "0.3.1",
        "plugins": [
          {
            "type": "calico",
            "log_level": "info",
            "nodename_file_optional": true,
            "log_file_path": "/var/log/calico/cni/cni.log",
            "datastore_type": "kubernetes",
            "nodename": "__KUBERNETES_NODE_NAME__",
            "mtu": __CNI_MTU__,
            "ipam": {
                "type": "calico-ipam"
            },
            "policy": {
                "type": "k8s"
            },
            "kubernetes": {
                "kubeconfig": "__KUBECONFIG_FILEPATH__"
            }
          },
          {
            "type": "portmap",
            "snat": true,
            "capabilities": {"portMappings": true}
          },
          {
            "type": "bandwidth",
            "capabilities": {"bandwidth": true}
          }
        ]
      }
    typha_service_name: none
    veth_mtu: "0"
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"calico_backend":"vxlan","cni_network_config":"{\n  \"name\": \"k8s-pod-network\",\n  \"cniVersion\": \"0.3.1\",\n  \"plugins\": [\n    {\n      \"type\": \"calico\",\n      \"log_level\": \"info\",\n      \"nodename_file_optional\": true,\n      \"log_file_path\": \"/var/log/calico/cni/cni.log\",\n      \"datastore_type\": \"kubernetes\",\n      \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n      \"mtu\": __CNI_MTU__,\n      \"ipam\": {\n          \"type\": \"calico-ipam\"\n      },\n      \"policy\": {\n          \"type\": \"k8s\"\n      },\n      \"kubernetes\": {\n          \"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"\n      }\n    },\n    {\n      \"type\": \"portmap\",\n      \"snat\": true,\n      \"capabilities\": {\"portMappings\": true}\n    },\n    {\n      \"type\": \"bandwidth\",\n      \"capabilities\": {\"bandwidth\": true}\n    }\n  ]\n}","typha_service_name":"none","veth_mtu":"0"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"calico-config","namespace":"kube-system"}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    name: calico-config
    namespace: kube-system
    resourceVersion: "67"
    uid: a2ef311f-599c-40b8-8ebb-458474d0b2a5
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDDzCCAfegAwIBAgIUEjuQQIbOlVhzxc49hJXX6uFU/p0wDQYJKoZIhvcNAQEL
      BQAwFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMB4XDTI1MDczMTAxMjczOVoXDTM1
      MDcyOTAxMjczOVowFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMIIBIjANBgkqhkiG
      9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1KIFIBoAVuocqHntjk3aV3djS21U6j2RwwC
      Uk6fTMwJ0bHUV1C9ZHZBzOfbJ1+kggWQ+zWCA9emTIuPTIBK447nxciafdL7rvWJ
      78nUeYWhizAUvfc9u6/JBJOtGQiN/y7kGkr5ms0hhE73urm1B79v5evnLQ4tdH66
      1yZnEEthF5OOYUg7nD6kePDCMZQo9pzBcLMc9JO7hbI388kGKLyVjiPb3RV2ACbo
      xElVAOnX1fJxQBA2AVdNR0FgZD7Wx4t+aYvxdaDuOgKILr5bY6IWg06BX4EQImRP
      CBq31/ttIY8WJbPUcvic4h6vx5vHKU2hjDEMTZsBEkZP/MBvTQIDAQABo1MwUTAd
      BgNVHQ4EFgQUUcYw0mYKba95uM7mR9581XspVtwwHwYDVR0jBBgwFoAUUcYw0mYK
      ba95uM7mR9581XspVtwwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
      AQEAOvIBRWAo/8eoNxv3tx+b365+vd63ET+8GdWjA3uzPNnEYYUlLUr+P8j90uQH
      tAyS+0BJbH0pap4K0xL7AG3DG/S5loBJyZjrEH4qyZZbzi2BlcnN1bj3zjPQ1apd
      byJSq/k4vS9NaukNSY5rJQSBLXSh/7iWCuzaVGh5W+0Gkw+gcqthVmXPtewe/LKj
      aQCwLuM9X9IH3F84WYMl8XLr9q0piKPcAC1vV9XgrPsETJ1yKcKbTC2xCvMWu1KH
      fQ84e17B7Q7bxW+ayD4uBcP7vUCAxnSPaOW7JY9CC0Jhsowz+C2b5vpdTciuZYmI
      62SW2xq9Utp2j/TSmHIpXlWrVA==
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-07-31T01:27:55Z"
    name: kube-root-ca.crt
    namespace: kube-public
    resourceVersion: "198"
    uid: caeb5399-73b6-41ed-88f9-51fc161891e6
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDDzCCAfegAwIBAgIUEjuQQIbOlVhzxc49hJXX6uFU/p0wDQYJKoZIhvcNAQEL
      BQAwFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMB4XDTI1MDczMTAxMjczOVoXDTM1
      MDcyOTAxMjczOVowFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMIIBIjANBgkqhkiG
      9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1KIFIBoAVuocqHntjk3aV3djS21U6j2RwwC
      Uk6fTMwJ0bHUV1C9ZHZBzOfbJ1+kggWQ+zWCA9emTIuPTIBK447nxciafdL7rvWJ
      78nUeYWhizAUvfc9u6/JBJOtGQiN/y7kGkr5ms0hhE73urm1B79v5evnLQ4tdH66
      1yZnEEthF5OOYUg7nD6kePDCMZQo9pzBcLMc9JO7hbI388kGKLyVjiPb3RV2ACbo
      xElVAOnX1fJxQBA2AVdNR0FgZD7Wx4t+aYvxdaDuOgKILr5bY6IWg06BX4EQImRP
      CBq31/ttIY8WJbPUcvic4h6vx5vHKU2hjDEMTZsBEkZP/MBvTQIDAQABo1MwUTAd
      BgNVHQ4EFgQUUcYw0mYKba95uM7mR9581XspVtwwHwYDVR0jBBgwFoAUUcYw0mYK
      ba95uM7mR9581XspVtwwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
      AQEAOvIBRWAo/8eoNxv3tx+b365+vd63ET+8GdWjA3uzPNnEYYUlLUr+P8j90uQH
      tAyS+0BJbH0pap4K0xL7AG3DG/S5loBJyZjrEH4qyZZbzi2BlcnN1bj3zjPQ1apd
      byJSq/k4vS9NaukNSY5rJQSBLXSh/7iWCuzaVGh5W+0Gkw+gcqthVmXPtewe/LKj
      aQCwLuM9X9IH3F84WYMl8XLr9q0piKPcAC1vV9XgrPsETJ1yKcKbTC2xCvMWu1KH
      fQ84e17B7Q7bxW+ayD4uBcP7vUCAxnSPaOW7JY9CC0Jhsowz+C2b5vpdTciuZYmI
      62SW2xq9Utp2j/TSmHIpXlWrVA==
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-07-31T01:27:55Z"
    name: kube-root-ca.crt
    namespace: kube-node-lease
    resourceVersion: "199"
    uid: b69d27b2-9059-48b3-89bc-aac4c3b942a9
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDDzCCAfegAwIBAgIUEjuQQIbOlVhzxc49hJXX6uFU/p0wDQYJKoZIhvcNAQEL
      BQAwFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMB4XDTI1MDczMTAxMjczOVoXDTM1
      MDcyOTAxMjczOVowFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMIIBIjANBgkqhkiG
      9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1KIFIBoAVuocqHntjk3aV3djS21U6j2RwwC
      Uk6fTMwJ0bHUV1C9ZHZBzOfbJ1+kggWQ+zWCA9emTIuPTIBK447nxciafdL7rvWJ
      78nUeYWhizAUvfc9u6/JBJOtGQiN/y7kGkr5ms0hhE73urm1B79v5evnLQ4tdH66
      1yZnEEthF5OOYUg7nD6kePDCMZQo9pzBcLMc9JO7hbI388kGKLyVjiPb3RV2ACbo
      xElVAOnX1fJxQBA2AVdNR0FgZD7Wx4t+aYvxdaDuOgKILr5bY6IWg06BX4EQImRP
      CBq31/ttIY8WJbPUcvic4h6vx5vHKU2hjDEMTZsBEkZP/MBvTQIDAQABo1MwUTAd
      BgNVHQ4EFgQUUcYw0mYKba95uM7mR9581XspVtwwHwYDVR0jBBgwFoAUUcYw0mYK
      ba95uM7mR9581XspVtwwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
      AQEAOvIBRWAo/8eoNxv3tx+b365+vd63ET+8GdWjA3uzPNnEYYUlLUr+P8j90uQH
      tAyS+0BJbH0pap4K0xL7AG3DG/S5loBJyZjrEH4qyZZbzi2BlcnN1bj3zjPQ1apd
      byJSq/k4vS9NaukNSY5rJQSBLXSh/7iWCuzaVGh5W+0Gkw+gcqthVmXPtewe/LKj
      aQCwLuM9X9IH3F84WYMl8XLr9q0piKPcAC1vV9XgrPsETJ1yKcKbTC2xCvMWu1KH
      fQ84e17B7Q7bxW+ayD4uBcP7vUCAxnSPaOW7JY9CC0Jhsowz+C2b5vpdTciuZYmI
      62SW2xq9Utp2j/TSmHIpXlWrVA==
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-07-31T01:27:55Z"
    name: kube-root-ca.crt
    namespace: default
    resourceVersion: "200"
    uid: 4c85cd1d-7418-4108-a403-fcbce001ce43
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDDzCCAfegAwIBAgIUEjuQQIbOlVhzxc49hJXX6uFU/p0wDQYJKoZIhvcNAQEL
      BQAwFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMB4XDTI1MDczMTAxMjczOVoXDTM1
      MDcyOTAxMjczOVowFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMIIBIjANBgkqhkiG
      9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1KIFIBoAVuocqHntjk3aV3djS21U6j2RwwC
      Uk6fTMwJ0bHUV1C9ZHZBzOfbJ1+kggWQ+zWCA9emTIuPTIBK447nxciafdL7rvWJ
      78nUeYWhizAUvfc9u6/JBJOtGQiN/y7kGkr5ms0hhE73urm1B79v5evnLQ4tdH66
      1yZnEEthF5OOYUg7nD6kePDCMZQo9pzBcLMc9JO7hbI388kGKLyVjiPb3RV2ACbo
      xElVAOnX1fJxQBA2AVdNR0FgZD7Wx4t+aYvxdaDuOgKILr5bY6IWg06BX4EQImRP
      CBq31/ttIY8WJbPUcvic4h6vx5vHKU2hjDEMTZsBEkZP/MBvTQIDAQABo1MwUTAd
      BgNVHQ4EFgQUUcYw0mYKba95uM7mR9581XspVtwwHwYDVR0jBBgwFoAUUcYw0mYK
      ba95uM7mR9581XspVtwwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
      AQEAOvIBRWAo/8eoNxv3tx+b365+vd63ET+8GdWjA3uzPNnEYYUlLUr+P8j90uQH
      tAyS+0BJbH0pap4K0xL7AG3DG/S5loBJyZjrEH4qyZZbzi2BlcnN1bj3zjPQ1apd
      byJSq/k4vS9NaukNSY5rJQSBLXSh/7iWCuzaVGh5W+0Gkw+gcqthVmXPtewe/LKj
      aQCwLuM9X9IH3F84WYMl8XLr9q0piKPcAC1vV9XgrPsETJ1yKcKbTC2xCvMWu1KH
      fQ84e17B7Q7bxW+ayD4uBcP7vUCAxnSPaOW7JY9CC0Jhsowz+C2b5vpdTciuZYmI
      62SW2xq9Utp2j/TSmHIpXlWrVA==
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-07-31T01:27:55Z"
    name: kube-root-ca.crt
    namespace: kube-system
    resourceVersion: "201"
    uid: 342b97ce-a312-4161-84e3-baab7350b9d6
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDDzCCAfegAwIBAgIUEjuQQIbOlVhzxc49hJXX6uFU/p0wDQYJKoZIhvcNAQEL
      BQAwFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMB4XDTI1MDczMTAxMjczOVoXDTM1
      MDcyOTAxMjczOVowFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMIIBIjANBgkqhkiG
      9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1KIFIBoAVuocqHntjk3aV3djS21U6j2RwwC
      Uk6fTMwJ0bHUV1C9ZHZBzOfbJ1+kggWQ+zWCA9emTIuPTIBK447nxciafdL7rvWJ
      78nUeYWhizAUvfc9u6/JBJOtGQiN/y7kGkr5ms0hhE73urm1B79v5evnLQ4tdH66
      1yZnEEthF5OOYUg7nD6kePDCMZQo9pzBcLMc9JO7hbI388kGKLyVjiPb3RV2ACbo
      xElVAOnX1fJxQBA2AVdNR0FgZD7Wx4t+aYvxdaDuOgKILr5bY6IWg06BX4EQImRP
      CBq31/ttIY8WJbPUcvic4h6vx5vHKU2hjDEMTZsBEkZP/MBvTQIDAQABo1MwUTAd
      BgNVHQ4EFgQUUcYw0mYKba95uM7mR9581XspVtwwHwYDVR0jBBgwFoAUUcYw0mYK
      ba95uM7mR9581XspVtwwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
      AQEAOvIBRWAo/8eoNxv3tx+b365+vd63ET+8GdWjA3uzPNnEYYUlLUr+P8j90uQH
      tAyS+0BJbH0pap4K0xL7AG3DG/S5loBJyZjrEH4qyZZbzi2BlcnN1bj3zjPQ1apd
      byJSq/k4vS9NaukNSY5rJQSBLXSh/7iWCuzaVGh5W+0Gkw+gcqthVmXPtewe/LKj
      aQCwLuM9X9IH3F84WYMl8XLr9q0piKPcAC1vV9XgrPsETJ1yKcKbTC2xCvMWu1KH
      fQ84e17B7Q7bxW+ayD4uBcP7vUCAxnSPaOW7JY9CC0Jhsowz+C2b5vpdTciuZYmI
      62SW2xq9Utp2j/TSmHIpXlWrVA==
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-07-31T03:05:13Z"
    name: kube-root-ca.crt
    namespace: rook-ceph
    resourceVersion: "7490"
    uid: dab14710-7c15-4fbf-a14a-8f1617edb597
- apiVersion: v1
  data:
    CSI_CEPHFS_ATTACH_REQUIRED: "true"
    CSI_CEPHFS_FSGROUPPOLICY: File
    CSI_CEPHFS_PLUGIN_RESOURCE: |
      - name : driver-registrar
        resource:
          requests:
            memory: 128Mi
            cpu: 50m
          limits:
            memory: 256Mi
      - name : csi-cephfsplugin
        resource:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 1Gi
      - name : liveness-prometheus
        resource:
          requests:
            memory: 128Mi
            cpu: 50m
          limits:
            memory: 256Mi
    CSI_CEPHFS_PROVISIONER_RESOURCE: |
      - name : csi-provisioner
        resource:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 256Mi
      - name : csi-resizer
        resource:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 256Mi
      - name : csi-attacher
        resource:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 256Mi
      - name : csi-snapshotter
        resource:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 256Mi
      - name : csi-cephfsplugin
        resource:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 1Gi
      - name : liveness-prometheus
        resource:
          requests:
            memory: 128Mi
            cpu: 50m
          limits:
            memory: 256Mi
    CSI_ENABLE_CEPHFS_SNAPSHOTTER: "true"
    CSI_ENABLE_CSIADDONS: "false"
    CSI_ENABLE_ENCRYPTION: "false"
    CSI_ENABLE_HOST_NETWORK: "true"
    CSI_ENABLE_METADATA: "false"
    CSI_ENABLE_NFS_SNAPSHOTTER: "true"
    CSI_ENABLE_OMAP_GENERATOR: "false"
    CSI_ENABLE_RBD_SNAPSHOTTER: "true"
    CSI_ENABLE_TOPOLOGY: "false"
    CSI_ENABLE_VOLUME_GROUP_SNAPSHOT: "true"
    CSI_FORCE_CEPHFS_KERNEL_CLIENT: "true"
    CSI_GRPC_TIMEOUT_SECONDS: "150"
    CSI_NFS_ATTACH_REQUIRED: "true"
    CSI_NFS_FSGROUPPOLICY: File
    CSI_NFS_PLUGIN_RESOURCE: |
      - name : driver-registrar
        resource:
          requests:
            memory: 128Mi
            cpu: 50m
          limits:
            memory: 256Mi
      - name : csi-nfsplugin
        resource:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 1Gi
    CSI_NFS_PROVISIONER_RESOURCE: |
      - name : csi-provisioner
        resource:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 256Mi
      - name : csi-nfsplugin
        resource:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 1Gi
      - name : csi-attacher
        resource:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 1Gi
    CSI_PLUGIN_ENABLE_SELINUX_HOST_MOUNT: "false"
    CSI_PLUGIN_PRIORITY_CLASSNAME: system-node-critical
    CSI_PROVISIONER_PRIORITY_CLASSNAME: system-cluster-critical
    CSI_PROVISIONER_REPLICAS: "2"
    CSI_RBD_ATTACH_REQUIRED: "true"
    CSI_RBD_FSGROUPPOLICY: File
    CSI_RBD_PLUGIN_RESOURCE: |
      - name : driver-registrar
        resource:
          requests:
            memory: 128Mi
            cpu: 50m
          limits:
            memory: 256Mi
      - name : csi-rbdplugin
        resource:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 1Gi
      - name : liveness-prometheus
        resource:
          requests:
            memory: 128Mi
            cpu: 50m
          limits:
            memory: 256Mi
    CSI_RBD_PROVISIONER_RESOURCE: |
      - name : csi-provisioner
        resource:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 256Mi
      - name : csi-resizer
        resource:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 256Mi
      - name : csi-attacher
        resource:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 256Mi
      - name : csi-snapshotter
        resource:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 256Mi
      - name : csi-rbdplugin
        resource:
          requests:
            memory: 512Mi
          limits:
            memory: 1Gi
      - name : csi-omap-generator
        resource:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 1Gi
      - name : liveness-prometheus
        resource:
          requests:
            memory: 128Mi
            cpu: 50m
          limits:
            memory: 256Mi
    ROOK_CEPH_ALLOW_LOOP_DEVICES: "false"
    ROOK_CEPH_COMMANDS_TIMEOUT_SECONDS: "15"
    ROOK_CSI_ATTACHER_IMAGE: registry.k8s.io/sig-storage/csi-attacher:v4.8.1
    ROOK_CSI_CEPH_IMAGE: quay.io/cephcsi/cephcsi:v3.14.1
    ROOK_CSI_DISABLE_DRIVER: "false"
    ROOK_CSI_ENABLE_CEPHFS: "true"
    ROOK_CSI_ENABLE_NFS: "false"
    ROOK_CSI_ENABLE_RBD: "true"
    ROOK_CSI_IMAGE_PULL_POLICY: IfNotPresent
    ROOK_CSI_PROVISIONER_IMAGE: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
    ROOK_CSI_REGISTRAR_IMAGE: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
    ROOK_CSI_RESIZER_IMAGE: registry.k8s.io/sig-storage/csi-resizer:v1.13.2
    ROOK_CSI_SNAPSHOTTER_IMAGE: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.1
    ROOK_CSIADDONS_IMAGE: quay.io/csiaddons/k8s-sidecar:v0.12.0
    ROOK_ENABLE_DISCOVERY_DAEMON: "false"
    ROOK_LOG_LEVEL: INFO
    ROOK_OBC_ALLOW_ADDITIONAL_CONFIG_FIELDS: maxObjects,maxSize
    ROOK_OBC_WATCH_OPERATOR_NAMESPACE: "true"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    labels:
      app.kubernetes.io/managed-by: Helm
    name: rook-ceph-operator-config
    namespace: rook-ceph
    resourceVersion: "7504"
    uid: 613691de-bc5b-4a05-89f0-abe8f6b9650e
- apiVersion: v1
  data:
    csi-cluster-config-json: '[]'
  kind: ConfigMap
  metadata:
    creationTimestamp: "2025-07-31T03:05:30Z"
    name: rook-ceph-csi-config
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: Deployment
      name: rook-ceph-operator
      uid: 432f7d42-7427-44c0-8abc-2253ced23edc
    resourceVersion: "7648"
    uid: 9ce461ef-352c-430e-b539-719c19f258d9
- apiVersion: v1
  data:
    csi-mapping-config-json: '[]'
  kind: ConfigMap
  metadata:
    creationTimestamp: "2025-07-31T03:08:22Z"
    name: rook-ceph-csi-mapping-config
    namespace: rook-ceph
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: Deployment
      name: rook-ceph-operator
      uid: 432f7d42-7427-44c0-8abc-2253ced23edc
    resourceVersion: "7864"
    uid: ca8e5789-641b-4e27-9685-d4d1086d3750
- apiVersion: v1
  data:
    mapAccounts: |
      - "810358012972"
    mapRoles: |
      - rolearn: arn:aws:iam::810358012972:role/KubernetesAdmin
        username: kubernetes-admin
        groups:
          - system:masters
    mapUsers: |
      # add per-user mappings here if you need them later
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"mapAccounts":"- \"810358012972\"\n","mapRoles":"- rolearn: arn:aws:iam::810358012972:role/AdministratorAccess\n  username: kubernetes-admin\n  groups:\n    - system:masters\n","mapUsers":"# add per-user mappings here if you need them later\n"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"aws-auth","namespace":"kube-system"}}
    creationTimestamp: "2025-07-31T02:03:29Z"
    name: aws-auth
    namespace: kube-system
    resourceVersion: "11179"
    uid: ba06cc07-bc13-4067-88ff-2797a6b61fb3
- apiVersion: v1
  data:
    config.yaml: |
      # a unique-per-cluster identifier to prevent replay attacks
      # (good choices are a random token or a domain name that will be unique to your cluster)
      clusterID: aws-cluster-623
      server:
        # each mapRoles entry maps an IAM role to a username and set of groups
        # Each username and group can optionally contain template parameters:
        #  1) "{{AccountID}}" is the 12 digit AWS ID.
        #  2) "{{SessionName}}" is the role session name, with `@` characters
        #     transliterated to `-` characters.
        #  3) "{{SessionNameRaw}}" is the role session name, without character
        #     transliteration (available in version >= 0.5).
        mapRoles:
        # statically map arn:aws:iam::000000000000:role/KubernetesAdmin to a cluster admin
        - roleARN: arn:aws:iam::810358012972:role/KubernetesAdmin
          username: kubernetes-admin
          groups:
          - system:masters
        # map EC2 instances in my "KubernetesNode" role to users like
        # "aws:000000000000:instance:i-0123456789abcdef0". Only use this if you
        # trust that the role can only be assumed by EC2 instances. If an IAM user
        # can assume this role directly (with sts:AssumeRole) they can control
        # SessionName.
        - roleARN: arn:aws:iam::810358012972:role/KubernetesNode
          username: aws:{{AccountID}}:instance:{{SessionName}}
          groups:
          - system:bootstrappers
          - aws:instances
        # map federated users in my "KubernetesAdmin" role to users like
        # "admin:alice-example.com". The SessionName is an arbitrary role name
        # like an e-mail address passed by the identity provider. Note that if this
        # role is assumed directly by an IAM User (not via federation), the user
        # can control the SessionName.
        - roleARN: arn:aws:iam::810358012972:role/KubernetesAdmin
          username: admin:{{SessionName}}
          groups:
          - system:masters
        # map federated users in my "KubernetesOtherAdmin" role to users like
        # "alice-example.com". The SessionName is an arbitrary role name
        # like an e-mail address passed by the identity provider. Note that if this
        # role is assumed directly by an IAM User (not via federation), the user
        # can control the SessionName.  Note that the "{{SessionName}}" macro is
        # quoted to ensure it is properly parsed as a string.
        - roleARN: arn:aws:iam::810358012972:role/KubernetesOtherAdmin
          username: "{{SessionName}}"
          groups:
          - system:masters
        # map federated users in my "KubernetesUsers" role to users like
        # "alice@example.com". SessionNameRaw is sourced from the same place as
        # SessionName with the distinction that no transformation is performed
        # on the value. For example an email addresses passed by an identity
        # provider will not have the `@` replaced with a `-`.
        - roleARN: arn:aws:iam::810358012972:role/KubernetesUsers
          username: "{{SessionNameRaw}}"
          groups:
          - developers
        # each mapUsers entry maps an IAM role to a static username and set of groups
        mapUsers:
        # map user IAM user Alice in 000000000000 to user "alice" in "system:masters"
        #- userARN: arn:aws:iam::000000000000:user/Alice
        #  username: alice
        #  groups:
        #  - system:masters
        # List of Account IDs to whitelist for authentication
        mapAccounts:
        - "810358012972"
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"config.yaml":"# a unique-per-cluster identifier to prevent replay attacks\n# (good choices are a random token or a domain name that will be unique to your cluster)\nclusterID: aws-cluster-623\nserver:\n  # each mapRoles entry maps an IAM role to a username and set of groups\n  # Each username and group can optionally contain template parameters:\n  #  1) \"{{AccountID}}\" is the 12 digit AWS ID.\n  #  2) \"{{SessionName}}\" is the role session name, with `@` characters\n  #     transliterated to `-` characters.\n  #  3) \"{{SessionNameRaw}}\" is the role session name, without character\n  #     transliteration (available in version \u003e= 0.5).\n  mapRoles:\n  # statically map arn:aws:iam::000000000000:role/KubernetesAdmin to a cluster admin\n  - roleARN: arn:aws:iam::000000000000:role/KubernetesAdmin\n    username: kubernetes-admin\n    groups:\n    - system:masters\n  # map EC2 instances in my \"KubernetesNode\" role to users like\n  # \"aws:000000000000:instance:i-0123456789abcdef0\". Only use this if you\n  # trust that the role can only be assumed by EC2 instances. If an IAM user\n  # can assume this role directly (with sts:AssumeRole) they can control\n  # SessionName.\n  - roleARN: arn:aws:iam::000000000000:role/KubernetesNode\n    username: aws:{{AccountID}}:instance:{{SessionName}}\n    groups:\n    - system:bootstrappers\n    - aws:instances\n  # map federated users in my \"KubernetesAdmin\" role to users like\n  # \"admin:alice-example.com\". The SessionName is an arbitrary role name\n  # like an e-mail address passed by the identity provider. Note that if this\n  # role is assumed directly by an IAM User (not via federation), the user\n  # can control the SessionName.\n  - roleARN: arn:aws:iam::000000000000:role/KubernetesAdmin\n    username: admin:{{SessionName}}\n    groups:\n    - system:masters\n  # map federated users in my \"KubernetesOtherAdmin\" role to users like\n  # \"alice-example.com\". The SessionName is an arbitrary role name\n  # like an e-mail address passed by the identity provider. Note that if this\n  # role is assumed directly by an IAM User (not via federation), the user\n  # can control the SessionName.  Note that the \"{{SessionName}}\" macro is\n  # quoted to ensure it is properly parsed as a string.\n  - roleARN: arn:aws:iam::000000000000:role/KubernetesOtherAdmin\n    username: \"{{SessionName}}\"\n    groups:\n    - system:masters\n  # map federated users in my \"KubernetesUsers\" role to users like\n  # \"alice@example.com\". SessionNameRaw is sourced from the same place as\n  # SessionName with the distinction that no transformation is performed\n  # on the value. For example an email addresses passed by an identity\n  # provider will not have the `@` replaced with a `-`.\n  - roleARN: arn:aws:iam::000000000000:role/KubernetesUsers\n    username: \"{{SessionNameRaw}}\"\n    groups:\n    - developers\n  # each mapUsers entry maps an IAM role to a static username and set of groups\n  mapUsers:\n  # map user IAM user Alice in 000000000000 to user \"alice\" in \"system:masters\"\n  #- userARN: arn:aws:iam::000000000000:user/Alice\n  #  username: alice\n  #  groups:\n  #  - system:masters\n  # List of Account IDs to whitelist for authentication\n  mapAccounts:\n  # - \u003cAWS_ACCOUNT_ID\u003e\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"k8s-app":"aws-iam-authenticator"},"name":"aws-iam-authenticator","namespace":"kube-system"}}
    creationTimestamp: "2025-07-31T01:57:40Z"
    labels:
      k8s-app: aws-iam-authenticator
    name: aws-iam-authenticator
    namespace: kube-system
    resourceVersion: "12007"
    uid: 7f73e85f-0485-4acc-8f24-4348393a7428
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDDzCCAfegAwIBAgIUEjuQQIbOlVhzxc49hJXX6uFU/p0wDQYJKoZIhvcNAQEL
      BQAwFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMB4XDTI1MDczMTAxMjczOVoXDTM1
      MDcyOTAxMjczOVowFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMIIBIjANBgkqhkiG
      9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1KIFIBoAVuocqHntjk3aV3djS21U6j2RwwC
      Uk6fTMwJ0bHUV1C9ZHZBzOfbJ1+kggWQ+zWCA9emTIuPTIBK447nxciafdL7rvWJ
      78nUeYWhizAUvfc9u6/JBJOtGQiN/y7kGkr5ms0hhE73urm1B79v5evnLQ4tdH66
      1yZnEEthF5OOYUg7nD6kePDCMZQo9pzBcLMc9JO7hbI388kGKLyVjiPb3RV2ACbo
      xElVAOnX1fJxQBA2AVdNR0FgZD7Wx4t+aYvxdaDuOgKILr5bY6IWg06BX4EQImRP
      CBq31/ttIY8WJbPUcvic4h6vx5vHKU2hjDEMTZsBEkZP/MBvTQIDAQABo1MwUTAd
      BgNVHQ4EFgQUUcYw0mYKba95uM7mR9581XspVtwwHwYDVR0jBBgwFoAUUcYw0mYK
      ba95uM7mR9581XspVtwwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
      AQEAOvIBRWAo/8eoNxv3tx+b365+vd63ET+8GdWjA3uzPNnEYYUlLUr+P8j90uQH
      tAyS+0BJbH0pap4K0xL7AG3DG/S5loBJyZjrEH4qyZZbzi2BlcnN1bj3zjPQ1apd
      byJSq/k4vS9NaukNSY5rJQSBLXSh/7iWCuzaVGh5W+0Gkw+gcqthVmXPtewe/LKj
      aQCwLuM9X9IH3F84WYMl8XLr9q0piKPcAC1vV9XgrPsETJ1yKcKbTC2xCvMWu1KH
      fQ84e17B7Q7bxW+ayD4uBcP7vUCAxnSPaOW7JY9CC0Jhsowz+C2b5vpdTciuZYmI
      62SW2xq9Utp2j/TSmHIpXlWrVA==
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-07-31T03:45:55Z"
    name: kube-root-ca.crt
    namespace: metallb-system
    resourceVersion: "13868"
    uid: 6e8a87b6-361b-490e-83bf-11b98ae61c61
- apiVersion: v1
  data:
    Corefile: ".:53 {\n    errors\n    health {\n      lameduck 5s\n    }\n    ready\n
      \   log . {\n      class error\n    }\n    kubernetes cluster.local in-addr.arpa
      ip6.arpa {\n      pods insecure\n      fallthrough in-addr.arpa ip6.arpa\n    }\n
      \   prometheus :9153\n    forward . 8.8.8.8 8.8.4.4 \n    cache 30\n    loop\n
      \   reload\n    loadbalance\n}\n"
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"Corefile":".:53 {\n    errors\n    health {\n      lameduck 5s\n    }\n    ready\n    log . {\n      class error\n    }\n    kubernetes cluster.local in-addr.arpa ip6.arpa {\n      pods insecure\n      fallthrough in-addr.arpa ip6.arpa\n    }\n    prometheus :9153\n    forward . 8.8.8.8 8.8.4.4 \n    cache 30\n    loop\n    reload\n    loadbalance\n}\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"EnsureExists","k8s-app":"kube-dns"},"name":"coredns","namespace":"kube-system"}}
    creationTimestamp: "2025-07-31T03:46:19Z"
    labels:
      addonmanager.kubernetes.io/mode: EnsureExists
      k8s-app: kube-dns
    name: coredns
    namespace: kube-system
    resourceVersion: "14002"
    uid: 1f0a3137-fbb3-4967-9e20-1e412f154eef
- apiVersion: v1
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":null,"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"app":"webhook","app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook"},"name":"cert-manager-webhook","namespace":"cert-manager"}}
    creationTimestamp: "2025-07-31T03:46:28Z"
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
    name: cert-manager-webhook
    namespace: cert-manager
    resourceVersion: "14078"
    uid: 40fec194-96c8-454f-914f-cae997740097
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDDzCCAfegAwIBAgIUEjuQQIbOlVhzxc49hJXX6uFU/p0wDQYJKoZIhvcNAQEL
      BQAwFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMB4XDTI1MDczMTAxMjczOVoXDTM1
      MDcyOTAxMjczOVowFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMIIBIjANBgkqhkiG
      9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1KIFIBoAVuocqHntjk3aV3djS21U6j2RwwC
      Uk6fTMwJ0bHUV1C9ZHZBzOfbJ1+kggWQ+zWCA9emTIuPTIBK447nxciafdL7rvWJ
      78nUeYWhizAUvfc9u6/JBJOtGQiN/y7kGkr5ms0hhE73urm1B79v5evnLQ4tdH66
      1yZnEEthF5OOYUg7nD6kePDCMZQo9pzBcLMc9JO7hbI388kGKLyVjiPb3RV2ACbo
      xElVAOnX1fJxQBA2AVdNR0FgZD7Wx4t+aYvxdaDuOgKILr5bY6IWg06BX4EQImRP
      CBq31/ttIY8WJbPUcvic4h6vx5vHKU2hjDEMTZsBEkZP/MBvTQIDAQABo1MwUTAd
      BgNVHQ4EFgQUUcYw0mYKba95uM7mR9581XspVtwwHwYDVR0jBBgwFoAUUcYw0mYK
      ba95uM7mR9581XspVtwwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
      AQEAOvIBRWAo/8eoNxv3tx+b365+vd63ET+8GdWjA3uzPNnEYYUlLUr+P8j90uQH
      tAyS+0BJbH0pap4K0xL7AG3DG/S5loBJyZjrEH4qyZZbzi2BlcnN1bj3zjPQ1apd
      byJSq/k4vS9NaukNSY5rJQSBLXSh/7iWCuzaVGh5W+0Gkw+gcqthVmXPtewe/LKj
      aQCwLuM9X9IH3F84WYMl8XLr9q0piKPcAC1vV9XgrPsETJ1yKcKbTC2xCvMWu1KH
      fQ84e17B7Q7bxW+ayD4uBcP7vUCAxnSPaOW7JY9CC0Jhsowz+C2b5vpdTciuZYmI
      62SW2xq9Utp2j/TSmHIpXlWrVA==
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-07-31T03:47:29Z"
    name: kube-root-ca.crt
    namespace: cert-manager
    resourceVersion: "14195"
    uid: 6fe0ba5d-f6c7-49f7-bc5b-b158cc1ca716
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDDzCCAfegAwIBAgIUEjuQQIbOlVhzxc49hJXX6uFU/p0wDQYJKoZIhvcNAQEL
      BQAwFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMB4XDTI1MDczMTAxMjczOVoXDTM1
      MDcyOTAxMjczOVowFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMIIBIjANBgkqhkiG
      9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1KIFIBoAVuocqHntjk3aV3djS21U6j2RwwC
      Uk6fTMwJ0bHUV1C9ZHZBzOfbJ1+kggWQ+zWCA9emTIuPTIBK447nxciafdL7rvWJ
      78nUeYWhizAUvfc9u6/JBJOtGQiN/y7kGkr5ms0hhE73urm1B79v5evnLQ4tdH66
      1yZnEEthF5OOYUg7nD6kePDCMZQo9pzBcLMc9JO7hbI388kGKLyVjiPb3RV2ACbo
      xElVAOnX1fJxQBA2AVdNR0FgZD7Wx4t+aYvxdaDuOgKILr5bY6IWg06BX4EQImRP
      CBq31/ttIY8WJbPUcvic4h6vx5vHKU2hjDEMTZsBEkZP/MBvTQIDAQABo1MwUTAd
      BgNVHQ4EFgQUUcYw0mYKba95uM7mR9581XspVtwwHwYDVR0jBBgwFoAUUcYw0mYK
      ba95uM7mR9581XspVtwwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
      AQEAOvIBRWAo/8eoNxv3tx+b365+vd63ET+8GdWjA3uzPNnEYYUlLUr+P8j90uQH
      tAyS+0BJbH0pap4K0xL7AG3DG/S5loBJyZjrEH4qyZZbzi2BlcnN1bj3zjPQ1apd
      byJSq/k4vS9NaukNSY5rJQSBLXSh/7iWCuzaVGh5W+0Gkw+gcqthVmXPtewe/LKj
      aQCwLuM9X9IH3F84WYMl8XLr9q0piKPcAC1vV9XgrPsETJ1yKcKbTC2xCvMWu1KH
      fQ84e17B7Q7bxW+ayD4uBcP7vUCAxnSPaOW7JY9CC0Jhsowz+C2b5vpdTciuZYmI
      62SW2xq9Utp2j/TSmHIpXlWrVA==
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-07-31T03:49:09Z"
    name: kube-root-ca.crt
    namespace: kong
    resourceVersion: "14601"
    uid: c06ffbef-5225-4145-8e31-1568101484ec
- apiVersion: v1
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"ConfigMap","metadata":{"annotations":{},"labels":{"k8s-app":"kubernetes-dashboard"},"name":"kubernetes-dashboard-settings","namespace":"kube-system"}}
    creationTimestamp: "2025-07-31T03:50:34Z"
    labels:
      k8s-app: kubernetes-dashboard
    name: kubernetes-dashboard-settings
    namespace: kube-system
    resourceVersion: "15029"
    uid: e0adeaed-57ae-4e57-8b06-3edf4164290e
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDDzCCAfegAwIBAgIUEjuQQIbOlVhzxc49hJXX6uFU/p0wDQYJKoZIhvcNAQEL
      BQAwFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMB4XDTI1MDczMTAxMjczOVoXDTM1
      MDcyOTAxMjczOVowFzEVMBMGA1UEAwwMMTAuMTUyLjE4My4xMIIBIjANBgkqhkiG
      9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1KIFIBoAVuocqHntjk3aV3djS21U6j2RwwC
      Uk6fTMwJ0bHUV1C9ZHZBzOfbJ1+kggWQ+zWCA9emTIuPTIBK447nxciafdL7rvWJ
      78nUeYWhizAUvfc9u6/JBJOtGQiN/y7kGkr5ms0hhE73urm1B79v5evnLQ4tdH66
      1yZnEEthF5OOYUg7nD6kePDCMZQo9pzBcLMc9JO7hbI388kGKLyVjiPb3RV2ACbo
      xElVAOnX1fJxQBA2AVdNR0FgZD7Wx4t+aYvxdaDuOgKILr5bY6IWg06BX4EQImRP
      CBq31/ttIY8WJbPUcvic4h6vx5vHKU2hjDEMTZsBEkZP/MBvTQIDAQABo1MwUTAd
      BgNVHQ4EFgQUUcYw0mYKba95uM7mR9581XspVtwwHwYDVR0jBBgwFoAUUcYw0mYK
      ba95uM7mR9581XspVtwwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
      AQEAOvIBRWAo/8eoNxv3tx+b365+vd63ET+8GdWjA3uzPNnEYYUlLUr+P8j90uQH
      tAyS+0BJbH0pap4K0xL7AG3DG/S5loBJyZjrEH4qyZZbzi2BlcnN1bj3zjPQ1apd
      byJSq/k4vS9NaukNSY5rJQSBLXSh/7iWCuzaVGh5W+0Gkw+gcqthVmXPtewe/LKj
      aQCwLuM9X9IH3F84WYMl8XLr9q0piKPcAC1vV9XgrPsETJ1yKcKbTC2xCvMWu1KH
      fQ84e17B7Q7bxW+ayD4uBcP7vUCAxnSPaOW7JY9CC0Jhsowz+C2b5vpdTciuZYmI
      62SW2xq9Utp2j/TSmHIpXlWrVA==
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-07-31T03:54:13Z"
    name: kube-root-ca.crt
    namespace: container-registry
    resourceVersion: "15976"
    uid: a3482b58-acb0-4239-95f9-acaeb3eedccc
- apiVersion: v1
  data:
    localRegistryHosting.v1: |
      help: "https://microk8s.io/docs/registry-built-in"
      host: "localhost:32000"
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"localRegistryHosting.v1":"help: \"https://microk8s.io/docs/registry-built-in\"\nhost: \"localhost:32000\"\n"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"local-registry-hosting","namespace":"kube-public"}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    name: local-registry-hosting
    namespace: kube-public
    resourceVersion: "15996"
    uid: cd101f20-9e5b-49ab-8406-6b4380fea2bf
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-31T03:05:13Z"
    labels:
      modifiedAt: "1753931113"
      name: rook-ceph
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.rook-ceph.v1
    namespace: rook-ceph
    resourceVersion: "7609"
    uid: 281546a0-a36a-483a-b597-fdaa6fda730c
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    adminKey: QVFDTXhJcG8xcHlXSVJBQXBIYlVFTmt6NGt0cTd6NjJjQUU1NEE9PQ==
    cephFSUserID: azhzLWNlcGhmcw==
    cephFSUserKey: QVFEVDNJcG9Tak14Q3hBQVd4dDB6VXFVQy95N0YxdjNhcG04RVE9PQ==
    fsid: YmUzOGIyNDMtMzg2Yi00ZGVmLTkwMzUtMjViYWFiMDk4ZDk4
    monHost: djI6MTkyLjE2OC4xLjI2OjMzMDAvMCx2MToxOTIuMTY4LjEuMjY6Njc4OS8w
    userID: azhzLXJiZA==
    userKey: QVFETjNJcG9URUNhQUJBQTk5T3VIV3hOVm1xeHdidHBwNE1hQVE9PQ==
  kind: Secret
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{},"name":"rook-ceph-external-cluster-details","namespace":"rook-ceph"},"stringData":{"adminKey":"AQCMxIpo1pyWIRAApHbUENkz4ktq7z62cAE54A==","cephFSUserID":"k8s-cephfs","cephFSUserKey":"AQDT3IpoSjMxCxAAWxt0zUqUC/y7F1v3apm8EQ==","fsid":"be38b243-386b-4def-9035-25baab098d98","monHost":"v2:192.168.1.26:3300/0,v1:192.168.1.26:6789/0","userID":"k8s-rbd","userKey":"AQDN3IpoTECaABAA99OuHWxNVmqxwbtpp4MaAQ=="}}
    creationTimestamp: "2025-07-31T03:07:55Z"
    name: rook-ceph-external-cluster-details
    namespace: rook-ceph
    resourceVersion: "7826"
    uid: 58a35260-a89b-49bd-b0ed-586918f0dc27
  type: Opaque
- apiVersion: v1
  data:
    secretkey: K3dYb3Frc094TnVhZGdXL0hVamRYZw==
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-31T03:46:03Z"
    name: memberlist
    namespace: metallb-system
    ownerReferences:
    - apiVersion: apps/v1
      kind: Deployment
      name: controller
      uid: 346aec17-8d88-46f8-952c-4ccc83d12467
    resourceVersion: "13942"
    uid: e251872e-a64d-42c1-8f2a-2979e9351728
  type: Opaque
- apiVersion: v1
  data:
    ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFoTVJBd0RnWURWUVFLRXdkdFpYUmgKYkd4aU1RMHdDd1lEVlFRREV3UmpaWEowTUI0WERUSTFNRGN6TVRBeU5EWXdORm9YRFRNMU1EY3lPVEF6TkRZdwpORm93SVRFUU1BNEdBMVVFQ2hNSGJXVjBZV3hzWWpFTk1Bc0dBMVVFQXhNRVkyVnlkRENDQVNJd0RRWUpLb1pJCmh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTVdOUjArVHdlbEVkWVlwSnNOckVsMlZGQlJxM2x4WjVmYVcKSjA0YUl5YlA3ekpmZkJlbnMxQzJGUHhjV3UwbnByWnUrTEkyckp2d1krOTVHemtRMkxHOEIvakEyZW9pSjAxVwpnaW9uanlRWkJ6WmhmUGI5eVBUN3ByN3FJVTVaNXFPRUdWRUdzcG5mTVppOXVibEJGbzVlcUNNYklPTEcyenE4CnE2OXNFa2wvbFMyMHFGRXVYaUdQMkJsOUhPd1laTkN2SjVmMFJ1MVMxUWo5WkovRlo4VWV2dytCOVFUb3lWcXkKdnplUm9oTEhEMGd4a0FjWW9jSmVabzRKK21EZlc4ampwS0V5UXlsODhxdk1uMEpucllkdDB5SWgxQVhHbzd1awpaVXNaZDVZQmtFMDhrWmFPbGxmbVMyOGZGdGRkNkpObzFFaXhxK3dMUWVXTk83WDV6Q1VDQXdFQUFhTlRNRkV3CkRnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkFxckJOTUIKNDFNZDcxUkx1VjBNb0ZwRmlUa3NNQThHQTFVZEVRUUlNQWFDQkdObGNuUXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUpaZmRzdmFvNWppRkVySXY0WmpLVGpYbWdkSHFobmUwc2VLSmcvcGFqUnRlK01mS0FtZzNzMVpRVVhjCmYrL3RQVkVjQnZnRDk1MkJJWUQ3bk9EK2UzdjdvREJOc0JlVVNmZGN2Y3ppV3NmV1Z1MGlKT09BcWFlRjUxWmsKSWphaVREWEE4dDZMRTZ5QnhJOERHalhLMkIrallVR0YrWm1qakJ3UGdLU1ZDLzlMRE9YV2J4M1prUXJ0aWpxQQoyY1RkSFBTU0pJT2RSdnNaaEVsZ2xOWW5kTXVZZzZ2bW9RSWN5TTV6R3VzT1c3eUxLMC94emlKWHltV0svWWFqCm9LWEk5OEcrQlJYYXhnU2hqSC9sQW13VWFSYTJkNE1GMUErZ05leVZvVzJtelovQm9YMWlOWENwUjRGWEQ1RVAKelhIaUVTeDJVaTdlV2ltVlcxbzJzdTE0ZVBNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeFkxSFQ1UEI2VVIxaGlrbXcyc1NYWlVVRkdyZVhGbmw5cFluVGhvakpzL3ZNbDk4CkY2ZXpVTFlVL0Z4YTdTZW10bTc0c2phc20vQmo3M2tiT1JEWXNid0grTURaNmlJblRWYUNLaWVQSkJrSE5tRjgKOXYzSTlQdW12dW9oVGxubW80UVpVUWF5bWQ4eG1MMjV1VUVXamw2b0l4c2c0c2JiT3J5cnIyd1NTWCtWTGJTbwpVUzVlSVkvWUdYMGM3QmhrMEs4bmwvUkc3VkxWQ1Axa244Vm54UjYvRDRIMUJPakpXcksvTjVHaUVzY1BTREdRCkJ4aWh3bDVtamduNllOOWJ5T09rb1RKREtYenlxOHlmUW1ldGgyM1RJaUhVQmNhanU2UmxTeGwzbGdHUVRUeVIKbG82V1YrWkxieDhXMTEzb2syalVTTEdyN0F0QjVZMDd0Zm5NSlFJREFRQUJBb0lCQURFSTF6bDJXSHhaQkw3UApPaExwWWI2ZXdVUXNIcE5Yc1EvYXgxaklmZzhsTDU4V09rdjQwVFpvYTU4VUlYR2FGUFJWYVI5N0dLOEFKUjRNCnRtZ2N1VnlzYW1JaEpEWE1VbXNNM1BRdnE0VHZQVzRQRnFDTDc3UjNQalZIRWd0TG4wYlpCQnVyaU90T2poWDIKaWNIazJQOXZtVlpWWm4xRGxLam9xY2k2RDNQMGFreEROVUlTQWlCYWxtbTBNaEZEU3l4dXd5TjNoZ2Z4WTIwaApQMno2dUhVL1dBbTVxTnI3UzNoaUlKQ1VLcllHbGpJL1FwYUFHL1NPb210RmU3bytpbzR0dlEvd3JVVWU4NnFXClVNV08waXNBNzhsSVk2T3JKbzRnTnpZRUpZbFBoR3RxN0hJWWRqc1lBTzZJQ3Fqbk9ZRnp1QkQyR2I2Y3cweFAKWFZodE5nRUNnWUVBMStKd25Dc1BTTGVsaURlZFFVeUxNRnYrTnM5VWJCS2hjWXBmT3pBNVdrZG1YclYzcC9ZbgpvcHh0Zmtwek1uMGV3SEhrRGh5OTFPYncxRG1xY2svM0FBL3JNd2Q5eUYyL082QmlYckU5a0dQemc0d1p0SUFjCm1RMFpWTnkrNStlamFSM1BERDZudjlieVhNSzlGOXozajhBbFFsbDcwU0ZLQll6dzlmQWVaYVVDZ1lFQTZrTEMKZVRCWXRmbisybDNnSFFFK1dvOXlHNklLckNOc3JHWFNJamwwbE5WRk9MRkM5bEdleWg0NlNSVTB5MHlOZU9QWQpjSStXRTJXNEJva3dlZ3hlL1dXbTg2akJDT2haSUFFamlkdW43RHJFZC84SFhuUjdlS1o1T25wSzlQR285UVA0CnRGVzdQWDhEY3ZBSnlQUGEyQ2xZQ1VhcERwS1FlNVBxQ1ZBcUJJRUNnWUVBb3pmN1pjY1VkaWtLeU5NclhLeFAKYTgrUmdzVDhFZjEvL0FUZS9UUDNtSzcwMGRRblZHRENGS3BxQ2hxbHY5MWpPNktnQnA5cVVxWU1ISmhBcXM2VQpjNEtWazI0dGhpaUNwY1VidW5ZTWtyZE82LzBuamhWeUNiRWluc3VLdG5DbVZwb0g2VDBSdlBQNUozTEFYbU5jCjlGMFVqblp6SzJrY3V0ZVZjb3dKbjFVQ2dZRUFzb3F4SjZabVprT2tMcEFQeUd0ek41aE9rcXI4MFZlcWN2YWoKb2p3Q0U1RThVY29nVEJYSEhTck9wM2JISnc4d1grdmZ3V0plTW1oN1NsZnpINElnUDZiakNLQWNoNHAycXdMVApNRFcrbFRmeEY3ZkN5UVdrT1Q4LzlBYlM3RDdtMDk3MEJaVzF3RmYycS9vd3F2ellWWm1sSkdTN1lvVG9JNWVICmJ4T3ZBb0VDZ1lCU29EOXJONFVMVi9ReHV3MS9DRldZRGNKUmJmc0JPQTNpUVpkc09VeUQ4UkVUbndLdkdWbjgKcmYzUjRHYlN5QjErU2RKVXJVRUd1cE4rQmdIR0dGWDdvL0lUdFFFYS9FVUdBVmw5MHVqcjdZaUc4RSs3RmdZdAoyZkFPSnhYWHkzVVl4THV3eEVVdGowM0pjNndLdUhneTlwU3owOGJkMjlwQUhBTTNEMy9iOEE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
    tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVRENDQWppZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFoTVJBd0RnWURWUVFLRXdkdFpYUmgKYkd4aU1RMHdDd1lEVlFRREV3UmpaWEowTUI0WERUSTFNRGN6TVRBeU5EWXdORm9YRFRNMU1EY3lPVEF6TkRZdwpORm93TFRFck1Da0dBMVVFQXhNaWQyVmlhRzl2YXkxelpYSjJhV05sTG0xbGRHRnNiR0l0YzNsemRHVnRMbk4yCll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtseHF4TU8yQUtTTTExYVQvenMKNzFVRlUvaU5sdGF1ZXlBWGNLMzUrRHJ3NWdYMVRPL285cFc4Y0x5ei9Fb0dWQ1JVQTZWK1lZeG84NVNLN1NvegpKam5Bc3pVN2h0ZW82dVNnUnE5aFQ0ZVROM0FYQjRTWHE4RDFjS0krSVdoaEI5SGRMSktTbWZTa3F2NE1Nd3dVCitMaldqUzVSTnV1TnhRMVlxb1Y5NCtlZW54dGtZYmdCVnpHZEZ1NmJXWU1qN1hkT3BNS2ZMaDM0OVM0cWp2QVQKNWZxQ3I2Smh3K3M0cW56TlF1WWs2QWhIdmgvcjFBbmFydzY5dlhYOEtvQ2JKcUc5NElDcGdsMzVaQ1ZyZ042Mgp2ZWxMREN1Z0JWQUFPaGNiUk5jSWtWRHI5bDZIM2g1WUtpZ0dPVVRldGovQXdNaEZDTUZ1QUpYUkhialZFRmVKClZzTUNBd0VBQWFPQmhqQ0JnekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUgKQXdFd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JRS3F3VFRBZU5USGU5VVM3bGRES0JhUllrNQpMREF0QmdOVkhSRUVKakFrZ2lKM1pXSm9iMjlyTFhObGNuWnBZMlV1YldWMFlXeHNZaTF6ZVhOMFpXMHVjM1pqCk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQk9zZG1kMVhwMmt4Qkt6cmk5ZGY1UGRVZnZDdWtrWHovdzJjZkMKZDIzaWxhSi9POHJNMk1uMkFpd3BqMnhJeGo2L2UxVFpiOUZjRDIvb2F1dEdBOTJzZGNLaHJ6M3dBM05SUTR0eAo0emwwb0ljSHRlOVUraGlya3lGTGhQaFptVjlZNG0rRGkyS0x4S3JzUWMyMUhCTDBMUW5zaEc3K2UwNEd0MnJ3CmlKcE5TNDI5MmhBa0EvREZtT2xmSElUZVpDaFVFY3ZQMHBFVzYwOEtlUEFGMnd3MEVVaUYrU2x6b2dRNy9Vcm0KaHV5NVBHY2JuenJtZHVCd1RjZXZndXBoNGNRaE9FWTd2SE81YWhJREliU3d6Tmw1NHZ0dGRsSVE4UHBDWjV1RQpIbmZkd3d2M0hsWURQc0ZhcE5wSGRiTGVhWUZnSkNsbW0wT0sraExnMkhKVzVMY3oKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcVhHckV3N1lBcEl6WFZwUC9PenZWUVZUK0kyVzFxNTdJQmR3cmZuNE92RG1CZlZNCjcrajJsYnh3dkxQOFNnWlVKRlFEcFg1aGpHanpsSXJ0S2pNbU9jQ3pOVHVHMTZqcTVLQkdyMkZQaDVNM2NCY0gKaEplcndQVndvajRoYUdFSDBkMHNrcEtaOUtTcS9nd3pEQlQ0dU5hTkxsRTI2NDNGRFZpcWhYM2o1NTZmRzJSaAp1QUZYTVowVzdwdFpneVB0ZDA2a3dwOHVIZmoxTGlxTzhCUGwrb0t2b21IRDZ6aXFmTTFDNWlUb0NFZStIK3ZVCkNkcXZEcjI5ZGZ3cWdKc21vYjNnZ0ttQ1hmbGtKV3VBM3JhOTZVc01LNkFGVUFBNkZ4dEUxd2lSVU92MlhvZmUKSGxncUtBWTVSTjYyUDhEQXlFVUl3VzRBbGRFZHVOVVFWNGxXd3dJREFRQUJBb0lCQUFjR1ZGNVU1ald0RS80Ugp5WEVsN1lJcjEyQmRsbHhPSFlLbUZpRFFWUzgwWDRUdHQ0UFd0NnBiaHB6OEpVQjRaTEtnM1FuV1pIcnF1dlowCmtBS0kzbFBVbmxsZG4yaC9jMFdKTTRULzFzazdIRGhFYkNaZUYxdkhrU1RZeUkvSVBnZkFVS0crL0N6OVNxMS8KbWZvdFFHYUJWcGNOL09YbEdiOUU1c1RrQkRmTTlXaVIxbkhLRDU2Um5GemJIRUhhQ2xGNXdiS2ExdGE2RnBpMgpmT20vQ213MlNSMHplOWhZTG1lcU1GMDlwUjFmdVpoUkh2cnBWeElPWUYvV1JCK3BKM0hrQUpOQ05IVHZqOVNUCktvU3RCVXY5OUk0bXdFZVhsaEE4b044VzQ1N0NQQnRmcGd4RDBsMHNaWXZVYnFLNEthSlZ0N2hYRzZzZ0liQXYKbmI1SThPa0NnWUVBMll5YWtFSUljbkl6L3R1NEFKTFg2MkxKM3dmcXphVEZ5ajNjL2JVVGg2ZEJCTlBUcXNwNApHbWpDMmhuTkFyMTQ4V3RNd1FsNk9TR1lSMWdRbExDMVpuSDltcTlOTjVJY1RWV0phM2RXUGhhR2VDUEszRDJLCis1SklURG45c2RRMHo2ZUYxdGZwWVdBbnpjL1loaFROWThJMTVKaEV5cStWdDc2TXcyelYvejhDZ1lFQXgyUjEKclZDYzVSQ3p1VlpPWDFscmptdnkvc3NralkxZXd3ZngxS3ZKL0pmNHRZQ1QxMkNoeHFXbXVGLzgyQmx6YUZzTApIazRVVk5FMjhpL0RFdG5iMlBac0ZzYlVFeGtmb2E2SGJ3WCt5MHNveDBidXAyUVJCbUVrcHFyU1JmQnU1VnlzCkp5RlNYVVkrRk1CL2FFOCt0Ukx2TWVsam9JbEJFYmF5Wm8zc0MzMENnWUVBbkVxYVJHZGNRRFJ4ekhnM3dobTkKQzd1bVFoZ2pCV2lLUEppaktwWXJtTHA5U0tXU0hOSm01TG84dW9uc3NqcERLRllwQjBueXlCYXRteHZXbGF3NgpOb1pRWncvb0RyTm1wOXg2NUgwUXRYeGpVTzZOOEJvNnZpL0N4eGltZlZweU1ua3MrME9VeEVOYmRVNE1SWSt1Cld5d01vZFVQSHZwME9sU29Oa0g3bitzQ2dZRUFoVGFYN0ZBRVVvSGpJVHNKSjJqdGsveUpIek9IVzA4TTlZNDAKUWxyM210dkpuVEduRkdrS0RGYVYyVzYvMVh6RGZ2LzhvS1dYcmNjTlI2Y2pWRS9iTXN3SUVQdUxxcXJKV0ZMcgpSd0NoWng3eXdwaWdUNU5xVUhITWM5R0NwSmxxN2JBSmtDY1NDU0VwenVHQS9hYWNCWXY5NU1IQi92cFVUOHBZCnpHMmJPMTBDZ1lCa3pjNmlLNFdHT1pHYUJGNDZKbXJzdEIxdThpTG5ZZFg1ck5FWVJ2WDJ4M0xSWXp5T3llQ08KaG1RLzdtRG5JcUNFSHMrbUJhZzNDb2VqKzdvemRCTGNuQnNyNitKU29wQmV3VlQ3MzB0eG1Ka09BN0FkdUJVZgpQdExsRjJJU0d3cFROUnNVUmtSRHo4OVRoQ1IxbXhQRzZQK3N0UDd2VHMrMDJqcTBzREx0VEE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{},"name":"webhook-server-cert","namespace":"metallb-system"}}
    creationTimestamp: "2025-07-31T03:45:55Z"
    name: webhook-server-cert
    namespace: metallb-system
    resourceVersion: "13943"
    uid: b9b53d8f-3696-4f1c-8f7c-d1570aba18f3
  type: Opaque
- apiVersion: v1
  data:
    token: SGU3c0pleTNUQlktTHFQNWtCNWk3ZEd0LWJUU1ZGRWxBanhOTF9hNQ==
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-31T03:47:05Z"
    name: cloudflare-api-token
    namespace: cert-manager
    resourceVersion: "14169"
    uid: d67503cc-aa8c-43f0-a277-1bedea7bcfd9
  type: Opaque
- apiVersion: v1
  data:
    ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ3RENDQVVlZ0F3SUJBZ0lRU1FaZ3crRWRMSGhEQzd0RzVTZ1NwVEFLQmdncWhrak9QUVFEQXpBaU1TQXcKSGdZRFZRUURFeGRqWlhKMExXMWhibUZuWlhJdGQyVmlhRzl2YXkxallUQWVGdzB5TlRBM016RXdNelEzTXpsYQpGdzB5TmpBM016RXdNelEzTXpsYU1DSXhJREFlQmdOVkJBTVRGMk5sY25RdGJXRnVZV2RsY2kxM1pXSm9iMjlyCkxXTmhNSFl3RUFZSEtvWkl6ajBDQVFZRks0RUVBQ0lEWWdBRWVLU1k2VEQ4dUZmMG1ZT1EzNHlQdUJGMWdrdGgKSkhSQ1JxblBnNHZHa3o2QW9aaTBnS1M3cTIrWG1zNXZ0azdsUVQ3U21aUGMrekZyb2RTN280R2RjNFBiVXNrcwpoNnJYS2duSG5ybGRIZTAxeVlVbnhQaVFjNG5KV3AxWllaVEhvMEl3UURBT0JnTlZIUThCQWY4RUJBTUNBcVF3CkR3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVduTE1zSlk5UU9yYVNXMHNWZWdPL2c2M1VlMHcKQ2dZSUtvWkl6ajBFQXdNRFp3QXdaQUl4QU9OVW1odWdKTXZTam9NWWZ6ZCtwVGFhMUJKVmVST0NKNy9oSVRJOApibndEZDFtVkdkK1BOR0czdGxTVFowT2tuUUl2WWlMUEhQTi9zVWtQdGtPYTlOT1Zmd1RRVFNPVUJLRHZKS0RQCm5nZjduMi9nTkp3WFFuS0lra0E0THlKb0JRWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ3RENDQVVlZ0F3SUJBZ0lRU1FaZ3crRWRMSGhEQzd0RzVTZ1NwVEFLQmdncWhrak9QUVFEQXpBaU1TQXcKSGdZRFZRUURFeGRqWlhKMExXMWhibUZuWlhJdGQyVmlhRzl2YXkxallUQWVGdzB5TlRBM016RXdNelEzTXpsYQpGdzB5TmpBM016RXdNelEzTXpsYU1DSXhJREFlQmdOVkJBTVRGMk5sY25RdGJXRnVZV2RsY2kxM1pXSm9iMjlyCkxXTmhNSFl3RUFZSEtvWkl6ajBDQVFZRks0RUVBQ0lEWWdBRWVLU1k2VEQ4dUZmMG1ZT1EzNHlQdUJGMWdrdGgKSkhSQ1JxblBnNHZHa3o2QW9aaTBnS1M3cTIrWG1zNXZ0azdsUVQ3U21aUGMrekZyb2RTN280R2RjNFBiVXNrcwpoNnJYS2duSG5ybGRIZTAxeVlVbnhQaVFjNG5KV3AxWllaVEhvMEl3UURBT0JnTlZIUThCQWY4RUJBTUNBcVF3CkR3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVduTE1zSlk5UU9yYVNXMHNWZWdPL2c2M1VlMHcKQ2dZSUtvWkl6ajBFQXdNRFp3QXdaQUl4QU9OVW1odWdKTXZTam9NWWZ6ZCtwVGFhMUJKVmVST0NKNy9oSVRJOApibndEZDFtVkdkK1BOR0czdGxTVFowT2tuUUl2WWlMUEhQTi9zVWtQdGtPYTlOT1Zmd1RRVFNPVUJLRHZKS0RQCm5nZjduMi9nTkp3WFFuS0lra0E0THlKb0JRWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JRzJBZ0VBTUJBR0J5cUdTTTQ5QWdFR0JTdUJCQUFpQklHZU1JR2JBZ0VCQkRDVG0xaUllSUVaMXUzd0d3aVQKZGxZOTl4cHV0c0IzTDI4RGlLQU5mSmpUTlYyT2dTdk1jSllXQXlxdmlxZXhhVXVoWkFOaUFBUjRwSmpwTVB5NApWL1NaZzVEZmpJKzRFWFdDUzJFa2RFSkdxYytEaThhVFBvQ2htTFNBcEx1cmI1ZWF6bSsyVHVWQlB0S1prOXo3Ck1XdWgxTHVqZ1oxemc5dFN5U3lIcXRjcUNjZWV1VjBkN1RYSmhTZkUrSkJ6aWNsYW5WbGhsTWM9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  kind: Secret
  metadata:
    annotations:
      cert-manager.io/allow-direct-injection: "true"
    creationTimestamp: "2025-07-31T03:47:39Z"
    name: cert-manager-webhook-ca
    namespace: cert-manager
    resourceVersion: "14304"
    uid: 069af933-5924-42c7-9776-d6d934d24b3f
  type: Opaque
- apiVersion: v1
  data:
    tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeHNGWG1pczloTURjbHRJYzQzT2lZRkZua01iOG8vT1MrYVNoZDFoZUw1c0FsbFdZClE5dzVDWkcwQXBJZW52N1R4cHBQT01HVGYvOFFmSjhLWllHeUdxdlhqSDZRZXRpeE53dUw5amR6OFZTQ0daU2EKTGJBMFpUMjNlNXBMTGd0ZzhEamJYQzk3Wklrbko4UThBN1BLdHJvOTczQVVndmNuV0xwdVBKRFBoZm1PMzNDNQpHTGN4K29qYmI4c1Q5YWVBOUtVWFEyei9PSUFndFl2NmMwY2RFMTdtM0xaditkVnQzYklYcDV6SkVFaThMRjJFCjhhRHk2ZGo2ZHNWLzZSUk40N2cyUExRYi9MMU1WNFVnOGxWbFBQTXpvUmJ6djAvSUp0aURDeHdnTi90NlYzYkMKN2l2by9rMVcwMllZWGZyY2t2VzRicXM5Y3FrUERwZzh6WXU2cFFJREFRQUJBb0lCQVFDUnE2anFES0VWQ0VsawpuUENoWCtIMW1CUkF6eWJoZnljTW96WFlnOExjUDAycDRXZ3M3RjQ5ZmpXaDRMaGlyY0JIZ2xkbjhMQ0xra1RpCklhcDhCUmVsWnFjZmlLK1o2ZkhRdHp6SW81SHRvWk9NN2hZbVFFdldtK283eERVdnRSVkNXMW1pOGdZTkJGelgKVDRMdzc3ZzJQc0FnR2xSZVBJanhCZ3EvaHg4aVFDQmQ3QStDYTV4YjBIOUhoVzRpc3o2YnlKNTFCenRMQzl3SgpzclBhQjlKWWxWdE1uNXQwUUhjb0lQL0I4akZWb3BJZEpwd3hMVU9CdVRZcWgvRjVtRU1MT1JaZzg1c2xqR0M2CkF6aXpBeWNVeVRHSEgzR0hrT0tEd1UrY082NXpnUDIyTnVRRGRWbGNoMjcyMkZoUlRPdGZCeGdOMXc4RjM3elkKUUZoSDdZVE5Bb0dCQU4zZzJ1VElkNnNrS1VLWnFKS1lIOXZSNk1HcXo4ZW5rT3hHOEVCb2xRbjRHVHphZ2NqYgpRa2xHVG16MzFVQ2VycG9YZ25OMUk3SFRzbFJQR0tuWGdwVWh0cnNvSE5HbVExemRoM20yT29wYlE3Wmk5MTJyCm85bVNjZklMemw0cFpoMjVITHlYekVxUFN4R1dheVpnMHhBQi9XMzlpcGlnVjBWc3NrOHV1aGIvQW9HQkFPVlMKSnZid0VYd2d1UnU2UzB6cVZuTlloQ01WVzFCaExnTzNSajhlcFhPMFltc1UwVCt0TiszRnhjbGI4d2JrSGFqNAp0M0FKSng0cFNUWm92L1FsZTNZcjlCMjRiTkt6cnlFaGgzMmVsbHFGckRHZVNXajJEV3Y5SFJRM1ZweS9rRHZHCnF0cHlHaEt2WForcVM2SzJRa29QR0JJNE5oeks4eWZRSkljVTJISmJBb0dCQU5RMmJlWUgvcjBIZHhjbUZGOHgKZExjd2kyaEFVVDdxZStnZzZVVVJRZ3NvNmlxVDZ6SUswOWwxanlrVjJUZFhEalIvYTl1MkhBL0hKSGNTdDhvcQpQOUVYVDhpdDB2S0tEVC9TK2ZKbFlwUldPZXRGdU1ZMGxpQlF1djhBWDc4YjVYbGtSYUh6cGdkaUNqQ21KNUdyClpmT1hrNmNScXUvVDIrU2cwK0o4Rkt4TkFvR0FMbE1kS2U4dktRc1hPY0cxYW5GQVM0YkxFcWRDemdjRG01NlAKWXpyV28zd0NFYTJmNDZRalV6WUxrWFN3c0dpdWtTN0ZKNjNCcURjZzRndmhFdm5yYWVEUkxKdlA1L1NDWVVmNwpyZVcyYTh6ckR3N3h0M0ZWSHNaLzlGQ0ZmNTYzRFV4QndXVWhYVHJ0eDg1SC96T2dTb09vRWk0bXlFUTdRSVNzCmpGa3FyRmNDZ1lBWGw2K1psOWpZUmZTTy9QSWV4aXcvMHlkR1I3TC80djgwSTBSYXFJc3pCMlRrUjRDK1dhMmoKckVROThlanh1aVlkRVBIWlhWUlh1d0U0K1Y4ZGZ1UHZMaUMyWVpnZTRBV2hwNlhHdjIwTUhhc2w0bGhuRGxVQwpjTHIvdjFtclpjYVpOTyswRi9IcmhMcDBhcEUwcGZ5OVJ6eFp1NW5WMWJUbWlIYXlIWGVWaEE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-31T03:48:15Z"
    name: letsencrypt-cloudflare
    namespace: cert-manager
    resourceVersion: "14412"
    uid: 6070f542-20d5-4fb0-bbb0-97704e3e69ea
  type: Opaque
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{},"labels":{"k8s-app":"kubernetes-dashboard"},"name":"kubernetes-dashboard-certs","namespace":"kube-system"},"type":"Opaque"}
    creationTimestamp: "2025-07-31T03:50:34Z"
    labels:
      k8s-app: kubernetes-dashboard
    name: kubernetes-dashboard-certs
    namespace: kube-system
    resourceVersion: "15026"
    uid: 39a42bc3-6336-4226-94ff-264fa7ff46c9
  type: Opaque
- apiVersion: v1
  data:
    ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lVRWp1UVFJYk9sVmh6eGM0OWhKWFg2dUZVL3Awd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0Z6RVZNQk1HQTFVRUF3d01NVEF1TVRVeUxqRTRNeTR4TUI0WERUSTFNRGN6TVRBeE1qY3pPVm9YRFRNMQpNRGN5T1RBeE1qY3pPVm93RnpFVk1CTUdBMVVFQXd3TU1UQXVNVFV5TGpFNE15NHhNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFyMUtJRklCb0FWdW9jcUhudGprM2FWM2RqUzIxVTZqMlJ3d0MKVWs2ZlRNd0owYkhVVjFDOVpIWkJ6T2ZiSjEra2dnV1EreldDQTllbVRJdVBUSUJLNDQ3bnhjaWFmZEw3cnZXSgo3OG5VZVlXaGl6QVV2ZmM5dTYvSkJKT3RHUWlOL3k3a0drcjVtczBoaEU3M3VybTFCNzl2NWV2bkxRNHRkSDY2CjF5Wm5FRXRoRjVPT1lVZzduRDZrZVBEQ01aUW85cHpCY0xNYzlKTzdoYkkzODhrR0tMeVZqaVBiM1JWMkFDYm8KeEVsVkFPblgxZkp4UUJBMkFWZE5SMEZnWkQ3V3g0dCthWXZ4ZGFEdU9nS0lMcjViWTZJV2cwNkJYNEVRSW1SUApDQnEzMS90dElZOFdKYlBVY3ZpYzRoNnZ4NXZIS1UyaGpERU1UWnNCRWtaUC9NQnZUUUlEQVFBQm8xTXdVVEFkCkJnTlZIUTRFRmdRVVVjWXcwbVlLYmE5NXVNN21SOTU4MVhzcFZ0d3dId1lEVlIwakJCZ3dGb0FVVWNZdzBtWUsKYmE5NXVNN21SOTU4MVhzcFZ0d3dEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBT3ZJQlJXQW8vOGVvTnh2M3R4K2IzNjUrdmQ2M0VUKzhHZFdqQTN1elBObkVZWVVsTFVyK1A4ajkwdVFICnRBeVMrMEJKYkgwcGFwNEsweEw3QUczREcvUzVsb0JKeVpqckVINHF5WlpiemkyQmxjbk4xYmozempQUTFhcGQKYnlKU3EvazR2UzlOYXVrTlNZNXJKUVNCTFhTaC83aVdDdXphVkdoNVcrMEdrdytnY3F0aFZtWFB0ZXdlL0xLagphUUN3THVNOVg5SUgzRjg0V1lNbDhYTHI5cTBwaUtQY0FDMXZWOVhnclBzRVRKMXlLY0tiVEMyeEN2TVd1MUtICmZRODRlMTdCN1E3YnhXK2F5RDR1QmNQN3ZVQ0F4blNQYU9XN0pZOUNDMEpoc293eitDMmI1dnBkVGNpdVpZbUkKNjJTVzJ4cTlVdHAyai9UU21ISXBYbFdyVkE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    namespace: a3ViZS1zeXN0ZW0=
    token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNkltZGpkVk5EYkd0dFVqYzBhR0pXVTJoRE1HZFhaV1ZSU0ZKUGVFMUNPWFpQTFhaM1MyTXlaR1Y0TFhjaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpyZFdKbExYTjVjM1JsYlNJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZqY21WMExtNWhiV1VpT2lKdGFXTnliMnM0Y3kxa1lYTm9ZbTloY21RdGRHOXJaVzRpTENKcmRXSmxjbTVsZEdWekxtbHZMM05sY25acFkyVmhZMk52ZFc1MEwzTmxjblpwWTJVdFlXTmpiM1Z1ZEM1dVlXMWxJam9pWkdWbVlYVnNkQ0lzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVnlkbWxqWlMxaFkyTnZkVzUwTG5WcFpDSTZJamhsTlRaaE56QTFMVGc1TkdVdE5HRmtPUzFoTUdSaUxUUTVZVGxqWmpsa1lUbGpPU0lzSW5OMVlpSTZJbk41YzNSbGJUcHpaWEoyYVdObFlXTmpiM1Z1ZERwcmRXSmxMWE41YzNSbGJUcGtaV1poZFd4MEluMC5hRGpXdVdDWFctZjhqYzJoOXJJeDhURVdtQnFKVUN3QTBYeEViODdjNXJjTEJuU2pKUG1mbnVFX05sWXNDaGloZ2dhazVDeTRlcHVYYVY3N19TTmN5MnFSQ19JOUNydUJXU2NaaTg1dWJHeENfMjFBTmlOSi1hYlJWakFpNS1xRkVPeDJ4b29CUjdTMFdmaE5kQkZFa0F4eWhqQ3g1YjV4N1R3cnYwMzJRNXRDbnBkMXhkeW9YSjhLZUtSdkFSZkQ0b25ucjBsWWFPMEczU09sbkcwem8wOGJiNjFFNXBhRF9QOG45V3p5MUcxRzdFRmlpVDF2OGFPUm1EZVVEdnBHNUtCSkZpRDdsSDRBTzB6NnozRzV5dlZXTVp4WnhqelV0dkw1RTJ5bEpaMTViNjMzMDdxZ1hmaGVYYlpmZ2Rzemg2S21mSXdGZEZ5ejFGQ19VaTFQX1E=
  kind: Secret
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Secret","metadata":{"annotations":{"kubernetes.io/service-account.name":"default"},"name":"microk8s-dashboard-token","namespace":"kube-system"},"type":"kubernetes.io/service-account-token"}
      kubernetes.io/service-account.name: default
      kubernetes.io/service-account.uid: 8e56a705-894e-4ad9-a0db-49a9cf9da9c9
    creationTimestamp: "2025-07-31T03:50:34Z"
    name: microk8s-dashboard-token
    namespace: kube-system
    resourceVersion: "15248"
    uid: 7673707c-8f73-471f-9eb5-a1e6d00f345b
  type: kubernetes.io/service-account-token
- apiVersion: v1
  data:
    csrf: MXRmV/UJUggUYNUzTGz9gE+f0xFdRKqdacDr5KgZem5o0jZAvLPiRr3X/17MW3Nr9ngMxbf9pvJpP4X5XDgBA+cWYbSOsj3+LhI/K7JOU3m/XoI02sY9L1/T2wGQv9/jtoVP8FiXh03ja4JJw1vWHdmIUl3qccQUCEquSmTYCkgnyKHXJu2lkiJeKytLYKESM3/AcXskQzYJMrq4FtIepiDsYAwE2kuVLwQftMG+0MbEvDSRPFNzZnOuRUCzt2y+4SBqOv24C+tNFhxQzhN6ACTnptVDAqZVctSgdsKX46F6FI1tKj2TCZgV51h6ktt9Z7QOw8l67PGzonELB7I/tA==
  kind: Secret
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"csrf":""},"kind":"Secret","metadata":{"annotations":{},"labels":{"k8s-app":"kubernetes-dashboard"},"name":"kubernetes-dashboard-csrf","namespace":"kube-system"},"type":"Opaque"}
    creationTimestamp: "2025-07-31T03:50:34Z"
    labels:
      k8s-app: kubernetes-dashboard
    name: kubernetes-dashboard-csrf
    namespace: kube-system
    resourceVersion: "15335"
    uid: b352cd32-4864-4d30-8f96-1a1f9518664a
  type: Opaque
- apiVersion: v1
  data:
    priv: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdUowd0JlZUxESit6Yms1ekZYZXNXKy9Da2Y1UHl2eThFSXFTZWlCd1ZNMTJkcFc1Cit3MEV1ZHpQN0JJbU9vcFpDcXRacUF4Qk5QM1dlbW1Tdmg1UVo4bXVObkc3c0JUKzU4TFM3OHpYTFVNSERPSEcKU2srZWxuMjB3V1ZsTGY5NS9oRXZ1azYrY0JXWE9hczBZRHJXS3Z3NUFPUmRTTkRUUGRSS1VKaWFPOGd4MXBndwo2TXZuUWFINTNYa3M0V1JtNGhCT0NVRWJtbjJCMUt1U01KZ25YYzB0ekhLNUU2N1lTZmxyeUkrUmcwQVpWMlo2ClZwWEcrTlovQU9wSFpjamlnNThYTTdzZlVMN01jc1pDT1dQSXF0MFlZZWQ1UlU2dk9MSHZ0b0pnSWNJaDRxelYKWXRBbW5DNXFUSlhTWVFpZTRyZlFHMjQrdnhNbC9FNmxPa2crc3dJREFRQUJBb0lCQUNhOFhKSXdsaDFzK09JaApOY2FBV0xybG9NYXZQS0RUek1ZUHZWSkFzakVvOXoxRWgwUms0K1Azcit6UmxoSGNhM2h3b1p4QURnS0hiRlE5CkNKdzVraGRrMnRmem56VUFBc2d3T2NBMUU4VWNka00rc0ROeFowNGVUQ24wRTNuR1RCdUNFYWllMHhpRGZ6cUwKY0s3c1NYbTFlR1IyaGhnOE1NYWRYNFp2cnBUeVBqQkJmR3ZqRnJNL2JLWGt5SDZyL0svZ3hVNDN0N242Y055bgp2dWl3WVRwQlN3TzNZWXM2UHd2eDNWMXNqLy9jNmRZcW1SU2lTZUNTZE9CNFFOTUhFbmM1akRFRWlXMDVKYTZrClVDRFhmSVhxc1B1UjZyQytZcW50MXVlYy9NQ0Z1aVlMWUxLbFpINmxqM3FuRVhvNE5adGdLOWtYT2hXR29hV2MKc2dRcGJ1RUNnWUVBMFpBQ3VxOWpWU3hKTmlObE9PSFhSck1lQ3RKbXJzckVxdzFnT0JoY2tGTmc3OGdkZmJOUQpCNlExZmw1cUNJL2lCY3AvUzk5aTFtR2VNQ25pSm5aTDZoL3JoRHpqMHhPNFRIZmY0YjcyeGJzTk5VcEtGZy9MCmNhMy95UVo0NlpPUjRvSDBBOFc3b0luT0QrUmZ1QVFHaUJWWUt2TGpKWXlOMVJZcHhwK0YwQkVDZ1lFQTRZWG4KM2F2SDRMdTBVdlYxSlBPNGVrWFJZYjcvWml1OTdLSURHNjdXYUxxVmpFZ3FVTGYzYVh6MWVza1RQczkrbGtIMgpWTHpNNlBxZ3FtRmFOR3dPSjFxc0M0Mnl2cVNzVnlPQTJFL1djMHpwSzZ5azliRkxacVJTYUdwTTR1N2dGdkpDCkxiWHAwR2gxcGdHTVJ5R2xHZXRCL0FCQlVSSXdTaXg5bXJGb1pvTUNnWUJLNkZFeGJmUHh4QXkvWDFPVlM1VHAKM3FqRWNZVG13ZkFldkg5Q1RlTDRhL1ZnZ0lXYUl2aGVZdUlFTTdkdkxBODh4cTlON2FHa3crd0poMDhoTkhQYQpVbUtiT0RDdmlJTCtRbk15ZkZJMVI3Rm05UkVhWmJieEFhTkd0aHVPVW9ONUZiNmxnbzZZeWVsd1lNK2VOVUlvCmJvaS9nV2FVUzNOL1VaYkpPc2hZSVFLQmdRQyswTWpsbzBJRVlXMXF2K3ExTUU0SGp1bGhWZlRNNHZmWXJ5QUkKSFQrbTd6QTN1SnV0SG1zRlkwaGs4cHNKQ3hGbFd6eHNhQzdNZGJyWlRuTy9aU240bkZ4empob04rbEVqalpPbgo4cTFWYzE3YXFFSU83RXNLOXNBUFB0bjlMUGFJRThSdzNybU5yOFRUaC8zRDliQzNKSG41R2RJcUlVU2dqZEpjCnYvekF0d0tCZ0VwT0YzU05oZ2V1M0xmcDJVK3ljREY2dVN0b045d1pvV2RPMWZYSVA0OEF4dVEvdnppVGNLbW4KbWVhM2c0VXVQdDhweXN5L3RGSXQrK3dUKzdGQXJnajdZSEZkcFcyRWkwQzZRMlZuaHRibnI2V1E2K01OaDZYOQpLR1J6MWdMczQyOS9udVNmWUozV3BCdmpTaXBaNlY1K0RXdnJZekFmQjRYNFZ3aFppeGtJCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
    pub: LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdUowd0JlZUxESit6Yms1ekZYZXMKVysvQ2tmNVB5dnk4RUlxU2VpQndWTTEyZHBXNSt3MEV1ZHpQN0JJbU9vcFpDcXRacUF4Qk5QM1dlbW1Tdmg1UQpaOG11Tm5HN3NCVCs1OExTNzh6WExVTUhET0hHU2srZWxuMjB3V1ZsTGY5NS9oRXZ1azYrY0JXWE9hczBZRHJXCkt2dzVBT1JkU05EVFBkUktVSmlhTzhneDFwZ3c2TXZuUWFINTNYa3M0V1JtNGhCT0NVRWJtbjJCMUt1U01KZ24KWGMwdHpISzVFNjdZU2ZscnlJK1JnMEFaVjJaNlZwWEcrTlovQU9wSFpjamlnNThYTTdzZlVMN01jc1pDT1dQSQpxdDBZWWVkNVJVNnZPTEh2dG9KZ0ljSWg0cXpWWXRBbW5DNXFUSlhTWVFpZTRyZlFHMjQrdnhNbC9FNmxPa2crCnN3SURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-31T03:50:34Z"
    name: kubernetes-dashboard-key-holder
    namespace: kube-system
    resourceVersion: "15336"
    uid: 617ee525-3abb-4a11-8f82-04ecc5b2c0b3
  type: Opaque
- apiVersion: v1
  data:
    tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU5VENDQTkyZ0F3SUJBZ0lTQlMrZGpmOGhVcGZUalp6NFRFN2JiQzQwTUEwR0NTcUdTSWIzRFFFQkN3VUEKTURNeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rd3dDZ1lEVlFRRApFd05TTVRFd0hoY05NalV3TnpNeE1ESTFNek14V2hjTk1qVXhNREk1TURJMU16TXdXakFZTVJZd0ZBWURWUVFECkRBMHFMbUZzWkc5MWN5NXBibVp2TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEKd05ka214S2l3a1hjaSszQzdYb3k0dStHQndQanFFRkVOMlM0R1J1a0hrRVRWOGVPS2tBbmtmaUpXdjd5MllkSgpmaGNxdGNyVmpTKzJqOUN4K0dkQllvZVArR04xT3VnN0k1MTFzdVVDeE00NEg4MDdxWjlpL0UyaGJoNURBZFNiCjVsY3ArTWRIZnFGVmFrdHgyQ3R2STN6RXlhV2lqWTRKcElCeWU2KzdWNU1vVHV6RkNsdFk2QW1INm9uTThhQjQKRzNENmRVdk0reEhLZzVSb1U2aUZVQTkzOHpraVA1SkM5ZUNPcnBBSTl4T1VWWjMza1dOd0llZFNEbVhuTUN5TwpnQnZ2eENmdmdXQ052M3lOSDMrNkpXZ3NnQ3hSV2JYWGl0R2N4a3JCNmptL3BvbWhMb3IwcGc5MlZJNi9jZlZwCjlOb3NuYXFTSHVITHV4RUVIMXFCd1FJREFRQUJvNElDSERDQ0FoZ3dEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjBHQTFVZApEZ1FXQkJUR2xzZFZGaUpyUkJNRHAvZGJpSDR0Ui9IQ1JUQWZCZ05WSFNNRUdEQVdnQlRGejBhazZ2VER3SHBzCmxjUXRzRjZTTHlianVUQXpCZ2dyQmdFRkJRY0JBUVFuTUNVd0l3WUlLd1lCQlFVSE1BS0dGMmgwZEhBNkx5OXkKTVRFdWFTNXNaVzVqY2k1dmNtY3ZNQmdHQTFVZEVRUVJNQStDRFNvdVlXeGtiM1Z6TG1sdVptOHdFd1lEVlIwZwpCQXd3Q2pBSUJnWm5nUXdCQWdFd0xnWURWUjBmQkNjd0pUQWpvQ0dnSDRZZGFIUjBjRG92TDNJeE1TNWpMbXhsCmJtTnlMbTl5Wnk4MU15NWpjbXd3Z2dFREJnb3JCZ0VFQWRaNUFnUUNCSUgwQklIeEFPOEFkZ0RNK3c5cWhYRUoKWmY2Vm0xUE82Yko4SXVtRlhBMlhqYmFwZmxUQS9rd05zQUFBQVpoZW03emFBQUFFQXdCSE1FVUNJUURuMzZYRQpLeWlxMVJIaEtna1JRV0lVbWZzRzB6bHlza0lVejFJbFJnRjVOQUlnQVVSNGlJKzViRGQ1Z3pLOGlGNUpyYTErCkxvVVc0d0ZiSVhyazFZSitiU3dBZFFEZDNNbzBsZGZoRmdYbmxUTDZ4NS80UFJ4UTM5c0FPaFFTZGdvc3JMdkkKS2dBQUFaaGVtNzBWQUFBRUF3QkdNRVFDSUZJYjRQTFZ4eW03UlMzU3pucks4Z0ltdVFQMVFjNitZcGZreURXZwpIVGFxQWlBS1lPTFZwaGRDTTNSZUdrVDdlOE1pR3ExdlRqaHJzUENHdmgrQjcydXp3akFOQmdrcWhraUc5dzBCCkFRc0ZBQU9DQVFFQUxmdytTTUVFNmFrMEpoSVY1QU14L2VXUVU3MUg4UEQ2VzJrL0tmS2d2WXVtQWVqMGFuTVIKTDluS29tL0piNGtIcGY0N2xqNEw4RHpnNVBBRTFpZ0FPVXpNS2RrZWlvWENjQmFpQTFlRzVSMENQRmd5b1M4WgpnL1YvSlE3Z2svck1XblJ6OWUrTU9vRFhoR3dtOWNwZFFjUWQ1N295aWZzczVVSmZxM2hDMlR6WE1sRDBqbGJmClI1di91RG1oNlNVUWZ6aDJCcHZPWTduNEtxb1ZkcUlzYWZjQSttQ1NIQy9mV1lyNEd2eEdOeStHQmdlTW5KSS8KMHJzQThiTHpQc25hdi9IbG11eENrMGhkaXlmRDdIclVMWDhhRE42cldXNEpvMUp2SnQ3QXZTL1A0ZUl2UGJsdQp0bGFGOUp2cHVsL0tvTGVyYUsyVGplb2lkL1lqYXNlTEd3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRkJqQ0NBdTZnQXdJQkFnSVJBSXA5UGhQV0x6RHZJNGE5S1Fkck5QZ3dEUVlKS29aSWh2Y05BUUVMQlFBdwpUekVMTUFrR0ExVUVCaE1DVlZNeEtUQW5CZ05WQkFvVElFbHVkR1Z5Ym1WMElGTmxZM1Z5YVhSNUlGSmxjMlZoCmNtTm9JRWR5YjNWd01SVXdFd1lEVlFRREV3eEpVMUpISUZKdmIzUWdXREV3SGhjTk1qUXdNekV6TURBd01EQXcKV2hjTk1qY3dNekV5TWpNMU9UVTVXakF6TVFzd0NRWURWUVFHRXdKVlV6RVdNQlFHQTFVRUNoTU5UR1YwSjNNZwpSVzVqY25sd2RERU1NQW9HQTFVRUF4TURVakV4TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCCkNnS0NBUUVBdW9lOFhCc0FPY3ZLQ3MzVVp4RDVBVHlsVHFWaHl5YktVdnNWQWJlNUtQVW9IdTBuc3lRWU9XY0oKREFqczREcXdPM2NPdmZQbE9WUkJERTZ1UWRhWmRONVIyKzk3LzFpOXFMY1Q5dDR4MWZKeXlYSnFDNE4wbFp4RwpBR1FVbWZPeDJTTFp6YWlTcWh3bWVqLys3MWdGZXdpVmdkdHhENDc3NHpFSnV3bStVRTFmajVGMlBWcWRub1B5CjZjUm1zK0VHWmtOSUdJQmxvRGNZbXB1RU1wZXhzcjNFK0JVQW5TZUkrK0pqRjVac215ZG5TOFRiS0Y1cHdubncKU1Z6Z0pGRGh4THloQmF4N1FHMEF0TUpCUDZkWXVDL0ZYSnVsdXdtZThmN3JzSVU1L2FnSzcwWEVlT3RsS3NMUApYenplNDF4TkcvY0xKeXVxQzBKM1UwOTVhaDJIMlFJREFRQUJvNEg0TUlIMU1BNEdBMVVkRHdFQi93UUVBd0lCCmhqQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBZ1lJS3dZQkJRVUhBd0V3RWdZRFZSMFRBUUgvQkFnd0JnRUIKL3dJQkFEQWRCZ05WSFE0RUZnUVV4YzlHcE9yMHc4QjZiSlhFTGJCZWtpOG00N2t3SHdZRFZSMGpCQmd3Rm9BVQplYlJaNW51MjVlUUJjNEFJaU1nYVdQYnBtMjR3TWdZSUt3WUJCUVVIQVFFRUpqQWtNQ0lHQ0NzR0FRVUZCekFDCmhoWm9kSFJ3T2k4dmVERXVhUzVzWlc1amNpNXZjbWN2TUJNR0ExVWRJQVFNTUFvd0NBWUdaNEVNQVFJQk1DY0cKQTFVZEh3UWdNQjR3SEtBYW9CaUdGbWgwZEhBNkx5OTRNUzVqTG14bGJtTnlMbTl5Wnk4d0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnSUJBRTdpaVYwS0F4eVFPTkQxSC9seFhQakRqN0kzaUhwdnNDVWY3YjYzMklZR2p1a0poTTF5CnY0SHovTXJQVTBqdHZmWnBRdFNsRVQ0MXlCT3lraDBGWCtvdTFOajRTY090OVptV25POG0yT0cwSkF0SUlFMzgKMDFTMHFjWWh5T0UyRy85M1pDa1h1ZkJMNzEzcXpYblF2NUMvdmlPeWtOcEtxVWd4ZEtsRUMrSGk5aTJEY2FSMQplOUtVd1FVWlJoeTVqL1BFZEVnbEtnM2w5ZHRENHR1VG03a1p0Qjh2MzJvT2p6SFRZdys3S2R6ZFppdy9zQnRuClVmaEJQT1JOdWF5NHBKeG1ZL1dyaFNNZHpGTzJxM0d1M01VQmNkbzI3Z29ZS2pMOUNURjhqL1p6NTV5Y3RVb1YKYW5lQ1dzL2FqVVgrSHlwa0JUQStjOExHRExuV08yTktxMFlEL3BuQVJrQW5ZR1BmVURvSFI5Z1ZTcC9xUngrWgpXZ2hpRExac013aE4xemp0U0MwdUJXaXVnRjN2VE56WUlFRmZhUEc3V3MzakRyQU1NWWViUTk1SlErSElCRC9SClBCdUhSVEJwcUtseURua1NIREhZUGlOWDNhZFBvUEFjZ2RGM0gyL1cwcm1vc3dNV2dUbExuMVd1MG1ya3M3L3EKcGRXZlM2UEoxanR5ODByMlZLc00vRGozWUlEZmJqWEtkYUZVNUMrOGJoZkpHcVUzdGFLYXV1ejB3SFZHVDNlbwo2RmxXa1dZdGJ0NHBnZGFtbHdWZVpFVytMTTdxWkVKRXNNTlByZkMwM0FQS21ac0pncFdDRFdPS1p2a1pjdmpWCnVZa1E0b21ZQ1RYNW9oeStrbk1qZE9tZEg5YzdTcHFFV0JEQzg2ZmlOZXgrTzBYT01FWlNhOERBCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBd05ka214S2l3a1hjaSszQzdYb3k0dStHQndQanFFRkVOMlM0R1J1a0hrRVRWOGVPCktrQW5rZmlKV3Y3eTJZZEpmaGNxdGNyVmpTKzJqOUN4K0dkQllvZVArR04xT3VnN0k1MTFzdVVDeE00NEg4MDcKcVo5aS9FMmhiaDVEQWRTYjVsY3ArTWRIZnFGVmFrdHgyQ3R2STN6RXlhV2lqWTRKcElCeWU2KzdWNU1vVHV6RgpDbHRZNkFtSDZvbk04YUI0RzNENmRVdk0reEhLZzVSb1U2aUZVQTkzOHpraVA1SkM5ZUNPcnBBSTl4T1VWWjMzCmtXTndJZWRTRG1Ybk1DeU9nQnZ2eENmdmdXQ052M3lOSDMrNkpXZ3NnQ3hSV2JYWGl0R2N4a3JCNmptL3BvbWgKTG9yMHBnOTJWSTYvY2ZWcDlOb3NuYXFTSHVITHV4RUVIMXFCd1FJREFRQUJBb0lCQVFDTzMwWkhhaEF5RlNabwplWmhBNzVkQjhTb0FpbzRodTNFNkJTSXNZQUZBOVAvS3VpdUcvQThWSStsSUJMbVNGcHlKa2Nwdjg3NHlJMWFECnlLQUNwU1daUlV5U1A4VzhCaERDdTBkWGFqcVo2eHREM0g5R2xiTDFzT0pZUG8xd2pyK09jYWZFRElqWXRka2QKcnBYRERiTUN2TTdqZ3hjaS8wZi9tN2EyRXFXZkpEdGxFRWFyUkN3Z2Q3cmoyd1FZL2lhSW5kMGZESVNnM3FxagphdXpRVmI0MzZhOXdUakRiLzR5WlovYVVtTk90T0VXbFdsYVRBektqQi9vNkJYUmVFL3lxZDBpbmlCNVJyZGxQCkYzYkZYOUFoQUNFUFJlK25xTSszcE5RYmJPT0djVVpQT3l2MU0wQVhtNmhMclV1RmhxY3J1eUdyZjhOSlBGdHIKRXJhNm1JY2RBb0dCQU9laTdVeDZWR0ZFUzhHTExDb1pWMHo3bkxxQW5yN2xGbVRMZVlRSDUxSEphcVFXdmFFVwp3K0FZOTlmWXNCYmc4UVFXQzV3cGhEMFljejc4UjdGTzFCeXlXdmtTZW5qWlowNHczRjBBWU96cFpEa0JBN2ZjClhNWVVFWDFNamJmU2VLZGM1dnlQaS9BOHNqVmhaMFJhODBHbmpTakRCMzgvUnpvbCsvMGlJVnQ3QW9HQkFOVWYKM1lTdVVWMGJ1YlZBQXUrTmRDZ1dzMVgyamd0dE1pOWx3TDVaYXZFK1ZzekdkakhEQXFkQVI1eVhodDl0WTBSSAozQ1pJNWR3M01DREtIQkZkeEMwZm1OaDFQZGtpY3k2MlUvQ05yY3FCRzhiVkU4SWRpb3drNzZ1bWx5eHJZV01HCnJ5aWVReC9Lc0RSV0o5d0FsWWhJa0kxUk9JMUczczQzdG9nWTdFVHpBb0dBUWc4QzRhYVpYY3ZlVnVuYnhIM0oKbWRpL3o2aFNuVm96MHJiOGhwekNhVjZwblBZblNrTjF4UGtaNVdLVWhWSE5LajhuUEhmU2tLSGlhL29DY0J4cwovV29YNjZSTGJSK0RDSmVDb0xzMDZSdCtTNHR3aGdUQUtIVWNyOEVmUVdjeXBYZ25INnZJV3REVWVjaTNiSlVMCmZwUEwrKzN5dTJWT2FOVGdVa1pqZ1BVQ2Z5bWdENlBhYUFuSFlINEdBb3pIRStqQWhrWkQ0WHBaMlhOb2JEekIKT2lIa0N3L3pzeUlFOUgrMkRrYUhVZEJSalJISTl6YURCbUg4WldvQ0QzbFUxdnY1TCtFWEJQMWp2UnRpZ1FKNgpxWGJqd0lrVkZNYlUvanBnL0c2S0d2eVIvSE5hMnRzVURnZ25qa0txa1I1bS9zMmZYcHc3UU5CWEJ5MC90R2JnCmQwVUNnWUVBaVEzK2hrUDBnVm8rN2IzSHI4RGZlUHE5eS9STktTK2dIVnE0QWRZZjRLU3c2ZEw0a3UwWkUvVlQKMnV4dk1TWkk2UTRPNE1qZkJSWDZXSHNlelduVXZudjhUekMvaTY1Q01xSXJOZVpCQzMxb1VNL3RmQy9mb2g4eApLMDg4cHRueUF1WXowOGxqNkpTTVk0VGU5NEV4VitBM2pydGtuSVJjUzNPU3ZRV3hnWVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  kind: Secret
  metadata:
    annotations:
      cert-manager.io/alt-names: '*.aldous.info'
      cert-manager.io/certificate-name: wildcard-aldous
      cert-manager.io/common-name: '*.aldous.info'
      cert-manager.io/ip-sans: ""
      cert-manager.io/issuer-group: ""
      cert-manager.io/issuer-kind: ClusterIssuer
      cert-manager.io/issuer-name: letsencrypt-cloudflare
      cert-manager.io/uri-sans: ""
    creationTimestamp: "2025-07-31T03:52:02Z"
    name: wildcard-aldous-tls
    namespace: kong
    resourceVersion: "15406"
    uid: cb02535f-9457-485f-8c4c-acd67fbfceae
  type: kubernetes.io/tls
- apiVersion: v1
  data:
    tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZCRENDQSt5Z0F3SUJBZ0lTQlhudW10ZGtVVnR2ZVI4OW9qa0phbm8wTUEwR0NTcUdTSWIzRFFFQkN3VUEKTURNeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rd3dDZ1lEVlFRRApFd05TTVRFd0hoY05NalV3TnpNeE1ESTFOVEUwV2hjTk1qVXhNREk1TURJMU5URXpXakFnTVI0d0hBWURWUVFECkV4VmtZWE5vWW05aGNtUXVZV3hrYjNWekxtbHVabTh3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUUN3RUNWRDUxdWFTRThGOUdsSlVuTlExYm1TdVNQcWlQNGlPSzRxMDN1czR4S1JFN1E4eTFsYgp4RDFqVk4vNHZSM3pWWktmK1YrNERwcUNZaHBxN0hOa2c3WHEyODFBQk9nOXM0NXdmMVBmb3lRT2lucDRoM1BjCis1eXdQQkg0cDJYRTZoSXJTRHJVVkpXejVNZ3lISWJmUS9PaGVaRzR1K2hudWxHOEFOK2FUVkhycHVKY0tzSisKdTF5UWswZmtEaHNKeklXK1pxa3V5TW81ZlRINndBVUxGVTNSYVgzbzJvOVphYkU1VmtocnBXeXVRb0ZWdmZPSQo4UTVWdlN0WjBnSkdUL1lqb2dMc2RBelNLSERST28ybWloNDlYK1dJWE45QmdleWRnR1ZIZDJIc3o0b3MxdzNnCkVPcHhKRHowRkFwNWNjU2tqZTFkZVBRNHE5ZUR2OXNoQWdNQkFBR2pnZ0lqTUlJQ0h6QU9CZ05WSFE4QkFmOEUKQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQwpNQUF3SFFZRFZSME9CQllFRkhvTks5Z1pHR3ErKzREY2F5UWp0UXJMbGxPQk1COEdBMVVkSXdRWU1CYUFGTVhQClJxVHE5TVBBZW15VnhDMndYcEl2SnVPNU1ETUdDQ3NHQVFVRkJ3RUJCQ2N3SlRBakJnZ3JCZ0VGQlFjd0FvWVgKYUhSMGNEb3ZMM0l4TVM1cExteGxibU55TG05eVp5OHdJQVlEVlIwUkJCa3dGNElWWkdGemFHSnZZWEprTG1GcwpaRzkxY3k1cGJtWnZNQk1HQTFVZElBUU1NQW93Q0FZR1o0RU1BUUlCTUM0R0ExVWRId1FuTUNVd0k2QWhvQitHCkhXaDBkSEE2THk5eU1URXVZeTVzWlc1amNpNXZjbWN2TlRNdVkzSnNNSUlCQWdZS0t3WUJCQUhXZVFJRUFnU0IKOHdTQjhBRHVBSFVBN1R4TDF1Z0d3cVNpQUZmYnl5VGlPQUhmVVMvdHhJYkZjQThnM2JjK1ArQUFBQUdZWHAxUgpEQUFBQkFNQVJqQkVBaUJwMk0zYlZ3WGh6aXlTVEhYT1hUeFRDNWdIbnNJdytMY2d3dUtLRGVCWjF3SWdNRWlzCkk1YWZuaGo1OFJWVFh3c2FnbzBTT3hEVmtrdE1wRDVLYUFqRlU1c0FkUUFhQlA5SjBGUWRRSy8yb01PLzhkakUKWnk5TzdPNGpRR2lZYXhkQUx0eUpmUUFBQVpoZW5WRmxBQUFFQXdCR01FUUNJQ2lKamVaOVVRSXNnK2gySEtaRQptS0I3aEFvcGNMTUx4emthSzJ0SjVKL2dBaUJrMHk4SDh6U3UwZzZ2TDZzemIxWFFIZzExcERjZEpSVHUxMmpPCnQyVlFaakFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBRlJpRnBPWHZJNTQzTVF0emE0bnBUY0ppZEZaam0rT1UKTUZSVHpRTTVkWEZlb283WHNzZWZVZXEvYml3WWk2U2N3ZnlzMDk3a01UQjF6dndGeTFYM254TWJCVENQMTZGeQpmWnNFVytKMkxkT2FrSFI4WnJMN2pmNktRU2JINXdIVVVwNmJBdnlCUWlNeU82cWY2Um9UQ3NNcGx2OXc2TWxQCmNTYThIYW0wVitzcDU0UDZwNUJ2QXNENVhpbDhkRDg2UHFLV3Z6NFR4QVZzcE9rUVIyZGhPNzdoU01VWHVVQzIKeW80Um92VTJLOHZtcVI5NjlpeHJNTjVJbCtCMVlvQURBYytscVRPcTNhMzc4Rzc4S2drVzNKeVJZM0lzcEVFQgpBZzFlNmFJL3FGSVYyVGhyZC9GeFlyNHZrTGRLbGZxMmFXV0EvVWxWQzJiTkpVTzUyMUhsQVE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGQmpDQ0F1NmdBd0lCQWdJUkFJcDlQaFBXTHpEdkk0YTlLUWRyTlBnd0RRWUpLb1pJaHZjTkFRRUxCUUF3ClR6RUxNQWtHQTFVRUJoTUNWVk14S1RBbkJnTlZCQW9USUVsdWRHVnlibVYwSUZObFkzVnlhWFI1SUZKbGMyVmgKY21Ob0lFZHliM1Z3TVJVd0V3WURWUVFERXd4SlUxSkhJRkp2YjNRZ1dERXdIaGNOTWpRd016RXpNREF3TURBdwpXaGNOTWpjd016RXlNak0xT1RVNVdqQXpNUXN3Q1FZRFZRUUdFd0pWVXpFV01CUUdBMVVFQ2hNTlRHVjBKM01nClJXNWpjbmx3ZERFTU1Bb0dBMVVFQXhNRFVqRXhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUIKQ2dLQ0FRRUF1b2U4WEJzQU9jdktDczNVWnhENUFUeWxUcVZoeXliS1V2c1ZBYmU1S1BVb0h1MG5zeVFZT1djSgpEQWpzNERxd08zY092ZlBsT1ZSQkRFNnVRZGFaZE41UjIrOTcvMWk5cUxjVDl0NHgxZkp5eVhKcUM0TjBsWnhHCkFHUVVtZk94MlNMWnphaVNxaHdtZWovKzcxZ0Zld2lWZ2R0eEQ0Nzc0ekVKdXdtK1VFMWZqNUYyUFZxZG5vUHkKNmNSbXMrRUdaa05JR0lCbG9EY1ltcHVFTXBleHNyM0UrQlVBblNlSSsrSmpGNVpzbXlkblM4VGJLRjVwd25udwpTVnpnSkZEaHhMeWhCYXg3UUcwQXRNSkJQNmRZdUMvRlhKdWx1d21lOGY3cnNJVTUvYWdLNzBYRWVPdGxLc0xQClh6emU0MXhORy9jTEp5dXFDMEozVTA5NWFoMkgyUUlEQVFBQm80SDRNSUgxTUE0R0ExVWREd0VCL3dRRUF3SUIKaGpBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFnWUlLd1lCQlFVSEF3RXdFZ1lEVlIwVEFRSC9CQWd3QmdFQgovd0lCQURBZEJnTlZIUTRFRmdRVXhjOUdwT3IwdzhCNmJKWEVMYkJla2k4bTQ3a3dId1lEVlIwakJCZ3dGb0FVCmViUlo1bnUyNWVRQmM0QUlpTWdhV1BicG0yNHdNZ1lJS3dZQkJRVUhBUUVFSmpBa01DSUdDQ3NHQVFVRkJ6QUMKaGhab2RIUndPaTh2ZURFdWFTNXNaVzVqY2k1dmNtY3ZNQk1HQTFVZElBUU1NQW93Q0FZR1o0RU1BUUlCTUNjRwpBMVVkSHdRZ01CNHdIS0Fhb0JpR0ZtaDBkSEE2THk5NE1TNWpMbXhsYm1OeUxtOXlaeTh3RFFZSktvWklodmNOCkFRRUxCUUFEZ2dJQkFFN2lpVjBLQXh5UU9ORDFIL2x4WFBqRGo3STNpSHB2c0NVZjdiNjMySVlHanVrSmhNMXkKdjRIei9NclBVMGp0dmZacFF0U2xFVDQxeUJPeWtoMEZYK291MU5qNFNjT3Q5Wm1Xbk84bTJPRzBKQXRJSUUzOAowMVMwcWNZaHlPRTJHLzkzWkNrWHVmQkw3MTNxelhuUXY1Qy92aU95a05wS3FVZ3hkS2xFQytIaTlpMkRjYVIxCmU5S1V3UVVaUmh5NWovUEVkRWdsS2czbDlkdEQ0dHVUbTdrWnRCOHYzMm9PanpIVFl3KzdLZHpkWml3L3NCdG4KVWZoQlBPUk51YXk0cEp4bVkvV3JoU01kekZPMnEzR3UzTVVCY2RvMjdnb1lLakw5Q1RGOGovWno1NXljdFVvVgphbmVDV3MvYWpVWCtIeXBrQlRBK2M4TEdETG5XTzJOS3EwWUQvcG5BUmtBbllHUGZVRG9IUjlnVlNwL3FSeCtaCldnaGlETFpzTXdoTjF6anRTQzB1QldpdWdGM3ZUTnpZSUVGZmFQRzdXczNqRHJBTU1ZZWJROTVKUStISUJEL1IKUEJ1SFJUQnBxS2x5RG5rU0hESFlQaU5YM2FkUG9QQWNnZEYzSDIvVzBybW9zd01XZ1RsTG4xV3UwbXJrczcvcQpwZFdmUzZQSjFqdHk4MHIyVktzTS9EajNZSURmYmpYS2RhRlU1Qys4YmhmSkdxVTN0YUthdXV6MHdIVkdUM2VvCjZGbFdrV1l0YnQ0cGdkYW1sd1ZlWkVXK0xNN3FaRUpFc01OUHJmQzAzQVBLbVpzSmdwV0NEV09LWnZrWmN2alYKdVlrUTRvbVlDVFg1b2h5K2tuTWpkT21kSDljN1NwcUVXQkRDODZmaU5leCtPMFhPTUVaU2E4REEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc0JBbFErZGJta2hQQmZScFNWSnpVTlc1a3JrajZvaitJaml1S3RON3JPTVNrUk8wClBNdFpXOFE5WTFUZitMMGQ4MVdTbi9sZnVBNmFnbUlhYXV4elpJTzE2dHZOUUFUb1BiT09jSDlUMzZNa0RvcDYKZUlkejNQdWNzRHdSK0tkbHhPb1NLMGc2MUZTVnMrVElNaHlHMzBQem9YbVJ1THZvWjdwUnZBRGZtazFSNjZiaQpYQ3JDZnJ0Y2tKTkg1QTRiQ2N5RnZtYXBMc2pLT1gweCtzQUZDeFZOMFdsOTZOcVBXV214T1ZaSWE2VnNya0tCClZiM3ppUEVPVmIwcldkSUNSay8ySTZJQzdIUU0waWh3MFRxTnBvb2VQVi9saUZ6ZlFZSHNuWUJsUjNkaDdNK0sKTE5jTjRCRHFjU1E4OUJRS2VYSEVwSTN0WFhqME9LdlhnNy9iSVFJREFRQUJBb0lCQUdHN0pLUnoyY0pqbnhJRQpJU21sVGdPeUQ4ZmxZNDErSyt1ZElQaisyZWtYUnlnbkV1YW9UbHNGTExwbDA4bkVXTXJKVnBIY29JaVArcTZqCmZGeWNFbFhhVXZJaXZ1VnBrKzBrTGM0K3I3VTFYdjkvV1Fwc3ppRDl2bldKY3NSZlQ3dWwzeDROZ3pKNEhYMTEKWXJlR1pFdXM4YUZSMVZVQllibXFrRkpXL2NndGRhSjhIM25mUStoc0pTSk9Cc0dzSldtQ1NlUno0dmZ2TVliSwpoUGlSSFNsTGphekdRNHdSK2xkWGhmQUZONllLSTF4WDd4ZHJCcVN0MGZZWkJtcXQxU3RwTXgzUjhSam9UR1p2CkE0UXRpczNEaGRsRit1Y1llaHU3Z2lDNTQ1QllqWWRRNTBOY3cyWWZJRW1weFkzdlRFVVV1Q0t5VXo5UkwyZEUKRjhSL1NaRUNnWUVBenFvWEdQeUNhQlg1Q3VmUXRiRFMzMVFyZi9VTDlhZHJpY3BJZGhqMU9KSFBTTjI1dXFLZApzZm13M0Z1TkgwTEloaHBkYjRSaFVoM2QvY0hUc3RKai9NdGFnMzhLSkFEZ05VWnVKalFrUjUzakI0RFM1VjBkCkUzS0tDQUJ0aHVJK3UzYjQ1Ny81NGpnU3gvNG1VZlNuazJvbTUzbUdvUlhmcWlUUlNXTDdwQVVDZ1lFQTJoZnAKUlF5b1lEVzlnSEg3a2hHTHVxeUlQOXVmdlJSTExXZ0k4YlVtRUZmTTVmT1UyZGI2aWJIQ3QzRFN5R0NwTmY2RQppL014N2U4VitUeU43OFE0akZDb0Y5WkdOT2dlbWxxTXo3N3JyYmNYWERxRmxSZlBiVzBvQnZzUy9reTBGbTFuCnIwUVZqWWo0UlJSeThUTU9Mbm9vSkVnR1hNaTJDMng1ZkhmTEFXMENnWUJhTnpRSUMwcmVKeUZsV2xib3liejAKRXVrK1hYbVFEanJLbHN4VkNZWWE0TVB0R2lXV3pLQXNia1IvblZPWW51MnNaTnYrNzNvUWY4dEZtQlJURHJicApSdGhIYVBERFVNS1BYeVI4ZHV5VGV0LzlpWVlHN0VQaUZuRWRGeHE0OUJEUWd4b2JDTm9MbjlETER5NHBQclRjCmpFMVpaTnFaZlZQN0VVRnZXTTlqQlFLQmdRQzA1VFpvUG9wK1dyVFhFRFFCUVNwcjZPV09TZ1doMkc1T3VFY0sKN1Iwb1d4c3A5TE1YU1BoQU04QjFWVkNRUVpTNG8yYWZpbFYwckdYR2VCS211RlBMRnErR0xnWEhwbXlUek4yVgpCeUFHMDZHOXJ4RFR6SThSallPdzNwb3ZjY0hDQkhjRzZlc1NuWFNJSCtFQzdUMHJFY212NWtuWXRlWkJiWFVLCjUzWHJ0UUtCZ0VRM0ltditwdGZtTDhPUTZmVzRUV1VWd1JiQ1g0RGhacVl6d2ZNWDhFeWRwNjg0UHEyenk0UVAKRXZKZStXc1NpbUFQRXdmOWJGMGNBZWFYVVJ5M1RPK3dHR3ZXQ1pqeWppNEhLa1d5eDVXVFRnalliY05JODArRgpMNVhPT09zbkdmS3NCOEM0Wm00dE5icnI3azhFbVpZK2hiNDZta1Z2RW5NbWVxUisxSmRDCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  kind: Secret
  metadata:
    annotations:
      cert-manager.io/alt-names: dashboard.aldous.info
      cert-manager.io/certificate-name: wildcard-aldous-tls
      cert-manager.io/common-name: dashboard.aldous.info
      cert-manager.io/ip-sans: ""
      cert-manager.io/issuer-group: cert-manager.io
      cert-manager.io/issuer-kind: ClusterIssuer
      cert-manager.io/issuer-name: letsencrypt-cloudflare
      cert-manager.io/uri-sans: ""
    creationTimestamp: "2025-07-31T03:53:46Z"
    name: wildcard-aldous-tls
    namespace: kube-system
    resourceVersion: "15857"
    uid: b414d135-3d4a-4123-9f7b-b0fe2286dfff
  type: kubernetes.io/tls
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-31T03:49:09Z"
    labels:
      modifiedAt: "1753933749"
      name: kong
      owner: helm
      status: superseded
      version: "1"
    name: sh.helm.release.v1.kong.v1
    namespace: kong
    resourceVersion: "18297"
    uid: 03b69307-26a3-45b8-83c3-d813638d7b9e
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-31T04:04:05Z"
    labels:
      modifiedAt: "1753933749"
      name: kong
      owner: helm
      status: superseded
      version: "2"
    name: sh.helm.release.v1.kong.v2
    namespace: kong
    resourceVersion: "19498"
    uid: babfcf52-d200-40a1-8a6c-02444d0178e2
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJekNDQWd1Z0F3SUJBZ0lRTEtKS01LU1hqOVVJQnVDRWJsTEV4VEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGcmIyNW5MV0ZrYldsemMybHZiaTFqWVRBZUZ3MHlOVEEzTXpFd05EQTVNVFJhRncwegpOVEEzTWprd05EQTVNVFJhTUJ3eEdqQVlCZ05WQkFNVEVXdHZibWN0WVdSdGFYTnphVzl1TFdOaE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTFiMS85c0N2L1lOQ1c4YmVQM3FXWFhldXRmS0IKaDZya0NMdmVLZDU4VnFHclN3RXNtYWd4dWF2cVdWTi9VVUxlZVFiZFN6M0ZBT3dyVU5Mc3BldXlrWEtLVWF4VwpIUmlLVitQeU93ZGUvTWdQcEVSRzRGNTJxY25EbWcxbmFVT2lkNzJrN3FuSEVQQXJVMUg1ZnBxeCtmZGtaZHRnCnAxUERBNmdKUXBmcDVqcHk0RUR2MWYwblBMbWl5RXhiTXlhcUZZS29pVEgvY0pqNENZenRRZGxOWmUwU3lKYUUKbzJPZHFSSmp1RDdYQk9PbVhacXd5eFAvcVdZZndnV2Y3d0pYY0VPT0gvd3FBZHA4ZGhMNzJ0TnBycjNTL2txcApaVjg0N2RIVWx2SEtYUzd1R2NxREFYeVNGdWRqTllLQ1hQVXRMMG5nL0ZGVzlxaElPVktXR0hSTWpRSURBUUFCCm8yRXdYekFPQmdOVkhROEJBZjhFQkFNQ0FxUXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUYKQndNQ01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZDNEtaTkFjQzU3NHZVVFlISTY0amcxMQplbllYTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCdnhuUy9KVkY1d2ptZFlWdGwxaUljWnBYRkgrM04yQUZ0CkNlTUkrZHk3WGkvQjlUY0Z5dVpYWEJFLzgrQlFYWGgrRURrWmd0bmdUQXZwbmZQaGtnUWJ1dlF5VFJEaVl6MjAKaEpINmZQK29INXhYeEVVcE4vZnZPOVZyS1dQTkg3Y25ibTNBYWtmTVZTeTNwVU03RER2UlpteUw1U2o1MW9BaQpqUUJWbzNyTTZ1a2kxZzIwbXF1SFE2OHA1SjE4bFg1dnhkOUs4ZXIrVHpXTG1jclA4YWQvWExUOENmdlByWDNGCkFzbTlnWHY2a1RtTjBpd04xYUZGRCtHR2ZvWElQN3BrSXhwTU1IeFpBZGxia0Z6ejRnd21XZCtSUkUyMTgwZTQKUFo2MTNzYi9HMXdFazhRdFI1R2k3L1FmaWM3SmV2OWptcCtvbXAzYWlnVUE0UXB2RDVzQwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMWIxLzlzQ3YvWU5DVzhiZVAzcVdYWGV1dGZLQmg2cmtDTHZlS2Q1OFZxR3JTd0VzCm1hZ3h1YXZxV1ZOL1VVTGVlUWJkU3ozRkFPd3JVTkxzcGV1eWtYS0tVYXhXSFJpS1YrUHlPd2RlL01nUHBFUkcKNEY1MnFjbkRtZzFuYVVPaWQ3Mms3cW5IRVBBclUxSDVmcHF4K2Zka1pkdGdwMVBEQTZnSlFwZnA1anB5NEVEdgoxZjBuUExtaXlFeGJNeWFxRllLb2lUSC9jSmo0Q1l6dFFkbE5aZTBTeUphRW8yT2RxUkpqdUQ3WEJPT21YWnF3Cnl4UC9xV1lmd2dXZjd3SlhjRU9PSC93cUFkcDhkaEw3MnROcHJyM1Mva3FwWlY4NDdkSFVsdkhLWFM3dUdjcUQKQVh5U0Z1ZGpOWUtDWFBVdEwwbmcvRkZXOXFoSU9WS1dHSFJNalFJREFRQUJBb0lCQURvS0R5bHVBVndSdkg4MwpiVHBIaTNVdC9wOGhqdExNTU1lK1hBRjZqTURwZlo0TVg1UUovQmF5L0J2dGRIRVllMWpaNkZWNkhIaTNxTHQxCnl4VHkvN1pIS0JBdGYrUyt1VEpNajRZLzVpYzJIQ2s2OFJRVUVwemdVT0VRS3JpR3lTTkN0L3FtMTR0ZDdDWGYKNktQY1ZkL09zZENHMWFRYU5xWlRodEF5ZUMwdnltekJpQ2R6M3RzdDhmbDdxcHFIazQyelIzbFo1RFhkY3ZOVApOZ3F6akU4YmdBSTM5aGkzNldNNzNUWEFKK0FrQXkwQVV2Q0ZKT3ZxbXFYdFFQS0VpSjN3TTMzNlM5Z3BMQndOCnpBb09YZlJlZy9qVDlYQ01MemJzeENhZllMcUFKZ29uV3VRZU16ZW5IcXp0VmdjWEc0bUtTUzdick1HcDdDM2UKZ1YrM2NIRUNnWUVBL25VcDBjM2VqZ0FDMmpUb00wV296VlNrRElLTnNSbUZEVXpaU3RXSFd2eFNHNWdYWFJzbAozYzJ4ZjdEY0F6M0hvMGE2YTFVYmdLSk1WdkZTVnk2WGkwa0R5c2c2Q3lBMGlYQ0paVUNkZnNpTVhCVThGWTB1Ck1KcUVyTTgyZjJ5RVRBelFuRmJZZllPRGM5LzYrVDFwV2FGc1lOWEo0YkpmeWtWanE3cEV5NU1DZ1lFQTF3a24KOXJlUHpseDNFYWs3dEJEbjBxcFVqVHFVNjR1ME51a0k0LzRNYzV5SUtaSVdNZS8xY3BkMlNpUVVVV0t6c3pVMQpGbkFLOGpXb2diNlRpYWxEcnBsbUVKYk1LZ0pSSVVSWVJqZzl2alUvY1Nwc3JwZ0NpdlRSdmtJK1EvTmJ2SXRDCk53OFhoR2lwUzc2S3FHdGVjajR6eGQrdkRVVldnV2lId1YzaTIxOENnWUVBbWQraUJXUjM4K2pmMExKenhDV1kKdVdvNHRmUHcyU3EwZ2VGNStUMzgxekdFT1htVWoxSU9hUDJ0RzZtSXNsRVd1NDdXeG5jMTVXaS92MGU1WWswagppVEFESWdwSXgxZVhUWkdIRkhxcGd2U2xwRDJYRXZWSC9FNUVjdmZ2WGNqeWk4YW9GQktVWWZvNGNNYitUdUFyCkorOXN5WFllMmVQeTl5OVU0WkVIYnc4Q2dZQjFXenJqVENVQXM3Z0wvSGRuKzMzNW5Cb1BCYlMycElVVEhyVksKY0tEdEM3WElNa0ZJdWJRVCtST0d2UkFWcHE5NkU0VEluUmRzUHRxYkRKNUttQVVuS2ZMcEJOT2g3YWZIWnh4aQpIbG1jRUVWeWhudlFBWWdKdkRrb0E5RWxscEF2WXpVZEJYQ0pRL0Y1TkNGS2IyYVpKTmR1bTNoVzNzdXFUcGtnCmNCUGFNd0tCZ1FDS2FUeTdJajYxL1NDck1uRGZLZThUUUtrYWZPQXVPd0YrUTJaYUllc3l0TWZva3JTcUNoRE8KWGVMQnRrbjJ5UHFIWUtBcWxNZW9iOHJ4ZXpQL0lFV2dmMHdNNW00OUI4cTNLS3Q0Qjc1R0hVK0pEdUVuL3pJbQpJMmswVXdJR0VGSFVZRUdONGNyeEQ2azNDTEsvamRvV1MxYkhMc0lSVDZZSDl1cy9GNUxvL1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    annotations:
      meta.helm.sh/release-name: kong
      meta.helm.sh/release-namespace: kong
    creationTimestamp: "2025-07-31T04:09:14Z"
    labels:
      app.kubernetes.io/instance: kong
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.9"
      helm.sh/chart: kong-2.51.0
    name: kong-kong-validation-webhook-ca-keypair
    namespace: kong
    resourceVersion: "20350"
    uid: be347628-b506-450f-9683-f4ea6205f38a
  type: kubernetes.io/tls
- apiVersion: v1
  data:
    tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURhakNDQWxLZ0F3SUJBZ0lRT3MrZkthZm9ieHd3YlRWK28rdWxnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGcmIyNW5MV0ZrYldsemMybHZiaTFqWVRBZUZ3MHlOVEEzTXpFd05EQTVNVFJhRncwegpOVEEzTWprd05EQTVNVFJhTURBeExqQXNCZ05WQkFNVEpXdHZibWN0YTI5dVp5MTJZV3hwWkdGMGFXOXVMWGRsClltaHZiMnN1YTI5dVp5NXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREEKd0g1UjFVTWpiWVdkbUtIWnIzVEY3dXg2TDdMQlI5Ky9OeVRDLzlwdnoyS0U0V0dnODVrUVN6TEJPZW5Bem1WTwpJdmRjVjBRWHJYbnZBVXA3L0dTajhZUmhqMlZYeitvc055MEFpb3NYanBXYUdFVTBDZE0ram9zbCtTTy8vVlhYCmpTM1piZHl4UXdBdHRsZTdERExJNHV1SUJzaFhsMmZxSW1FMHhaWFVBSXVNcDZ2SG90cDU0UnFWaEhNUzdMQkIKSWZoT2RwdkFKYXJqQ1owMzBsaU9iQ3M3REROazNkWTlKbmFDa1l4djU1MzJkMVplUU90V2I3UnRCUDUweTZJcApMWThyZVgxdlJhOVdhMTJmNk1KOWJWWGJ6djU0MEgySi91RmhjK2w4OWxlYnhmWm5xNXNUMlp4b1d0UFl2UVU5Cm1QMHFGRTAxd1N6RG82MmFGbXVqQWdNQkFBR2pnWk13Z1pBd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWQpNQmFBRkM0S1pOQWNDNTc0dlVUWUhJNjRqZzExZW5ZWE1EQUdBMVVkRVFRcE1DZUNKV3R2Ym1jdGEyOXVaeTEyCllXeHBaR0YwYVc5dUxYZGxZbWh2YjJzdWEyOXVaeTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHOWcKRjJTZFdrSEtpeTAxQ1h3NFRPOGZnb29tbGEvaFgrR2tnendXbysydzZpdTdwVFFROGpnKzRNUHhITlk0OXdnYQpFRU1CWStrbmVkRDVYR01NUWNkaGNXL1QvZDhLbkxoUjA5QzFJL21RVWNUVVVEUXRJb2FNNGlXMVZxdUx6UUt4CnFmRzJ6eGU5UFUzdkd3aGdOQk4wSVpYZE9paVNPckcyb1Y3RzFuWHNINW1wazk4Y0psWTJiaUMwNG5YMjNjRlUKVUthSXhNbFdkcnh3cEM2RkxkdmkyaDhkNkZsbmxIdmMxS1N3OGNnbUhCd1hYVStxc0VkdGRaSzE2ZU5FeHl5OQpYR3NheGdhM2txTjJ1emJXRlh3bG9PMVlQQ1FzN3lxSFRPU0c0WERPOTgwVWtrQlhiYlNPZGVvcTNJTXpCZ1huCjB5Y21QZ2szbXJiM3M0MVZ4eFE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd01CK1VkVkRJMjJGblppaDJhOTB4ZTdzZWkreXdVZmZ2emNrd3YvYWI4OWloT0ZoCm9QT1pFRXN5d1RucHdNNWxUaUwzWEZkRUY2MTU3d0ZLZS94a28vR0VZWTlsVjgvcUxEY3RBSXFMRjQ2Vm1oaEYKTkFuVFBvNkxKZmtqdi8xVjE0MHQyVzNjc1VNQUxiWlh1d3d5eU9McmlBYklWNWRuNmlKaE5NV1YxQUNMaktlcgp4NkxhZWVFYWxZUnpFdXl3UVNINFRuYWJ3Q1dxNHdtZE45SllqbXdyT3d3elpOM1dQU1oyZ3BHTWIrZWQ5bmRXClhrRHJWbSswYlFUK2RNdWlLUzJQSzNsOWIwV3ZWbXRkbitqQ2ZXMVYyODcrZU5COWlmN2hZWFBwZlBaWG04WDIKWjZ1YkU5bWNhRnJUMkwwRlBaajlLaFJOTmNFc3c2T3RtaFpyb3dJREFRQUJBb0lCQUg2WGJkOE04MVUzUHdQcwpGSkJGZmFucGF3SXNoWGdQWGxIVlE1MldMNzR6TS84Vmp1c0lVY1N6dnBmTkUwcC93MlQzN2dHRmhzRU9QQURPCmxqNnIydVVaWDlvN05WSGd5V2xVcTRlcGRnUjRycVJQd0ZPWENGZ1RnaXZrWHFoZkY1dkRxeE1iNWsrOU0wYlMKZFBmeDRRQ3ltQUgwZ211VWtyamc3M3FiTWZYVFoybWNhblo4WElFUHlDdHZMMnR0d05rME9IMEs4dUhRSnZZNgpBRGhibjZpaHFlS2JTSGttdkpDeTBlblgrN2NmR0hjZ1BjSDdUNG9EcHV0ZEdtSDdObDJUMzIxdHBWclB3eTYzCnVQQnFYUXh4RFNMUFpZbWZPNk5tSGhIMDg5djg1Vnp3R01zVzVVUDAwWHc5eG10YU1hY29WSEc1VExIK2JLQW0KQUlQTzVKRUNnWUVBd2tBbjR6UzVsQTR0eXdrQ2NpczAyc0VqeHY4eVk5YkxnVVBWMVdIQW9NZjhzWmc3SVd1SgpVbVhuWXd5bElJK3lGNDM3STVyZGEyYnp5UGZSVlZsUytsY2U2THNDOUJHSG4ycjBNZ1NCb1hSNXVtUUtjSmVQCjV2Y1dRQ3pKMlZoaThic283UlNRdjM1UVlvMGVnajNSNlNpN3hLQ253b2FyVjRzaFpaN1lVejhDZ1lFQS9nWmcKaGFVdGR4eWhXbk1kZFhuYmhMYUF4UkQyUWJWeVZFL2o0NE83QUNnbzY3THdtUytXN2JCbVdkRlhCN3Z2Y0taMApyTmdPYzJiYjJhc1FXRUtQMW1qeXpCR0lIUDhxN2JTMHJ1dEl5WVFhaUFzbDZtaG5IQmh5akRLMUYxVi9OQmluCjJkVFFVYjlmRzV5eHVOYVlBTFBHT3IvQWFkVkpXUmJhYS8xaklwMENnWUEzMk80ZTJwZklRMU5USG1IL3BRQnIKTEVBM0JFUGVoSEM1MTJEeEdrdWhiaDN1aVUvbXlkNFBQSkVMM3lUU2ViM0FHK2ZxVXFuNktQMUorRVhNL2dObgpTZ2p1N0dWcSttYzlwQ2hWQVFxcitxck10ZHB5aUlDczdMa085bEdLRldsTkNudzN2VVBvYWs1K0p3aHdkWW1XCk9VblN2RVcvSGF6QlhKVGJmSkhCVFFLQmdRQ2FGckF5SVhJazBKOG55TEJUOUdrdVphNVMyK2tsRHJXZFl5Q3YKZjliTlQ0OFMrbVpyNWF3OTNrVVhzcDZDT0lRVDUwVGJHK3dZSUlxM3pNYUxZMFR4SUpRM0tXTlJnNDg4eGVMYwpRQ2pVNUdkYm9yZUxLMjF3WTN3SWd6SEtSN2h6bDRrcDM2ZkdEcm5ZZkFKcVJ2SEphME9SbTROU0wyamd1N1llCno0TjFHUUtCZ0NET0hoVGdzOXVIcWN5N210cUQwMGhIaEJHbjlYb05EemthWlRLeE14VWFXWmJOQmFtM0pldVEKQWdpcTVIMWtWMURtamwwanFTaEdySTdkVDdSWHdEYWJQYTdIOXZSSzVrOEk5NURoWEJPRHVvNnhaUHFJOWhOegpnS2NBbTVHMyt6SlFoRTZPbmpWbDVFNHlYV3FnWGgvbE94SUgrSkJqY2RMSjN2VHlaTEg4Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  kind: Secret
  metadata:
    annotations:
      meta.helm.sh/release-name: kong
      meta.helm.sh/release-namespace: kong
    creationTimestamp: "2025-07-31T04:09:14Z"
    labels:
      app.kubernetes.io/instance: kong
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.9"
      helm.sh/chart: kong-2.51.0
    name: kong-kong-validation-webhook-keypair
    namespace: kong
    resourceVersion: "20351"
    uid: 80e5f33d-05ab-41f0-97ff-188c6c2a2a52
  type: kubernetes.io/tls
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-31T04:09:14Z"
    labels:
      modifiedAt: "1753933749"
      name: kong
      owner: helm
      status: superseded
      version: "3"
    name: sh.helm.release.v1.kong.v3
    namespace: kong
    resourceVersion: "20385"
    uid: 0377ffa9-0dd9-400c-b976-487b053b82a8
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-31T04:13:14Z"
    labels:
      modifiedAt: "1753933749"
      name: kong
      owner: helm
      status: superseded
      version: "4"
    name: sh.helm.release.v1.kong.v4
    namespace: kong
    resourceVersion: "21230"
    uid: 7f665b2d-3d07-4057-908f-9ebe118a2f33
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-31T04:16:27Z"
    labels:
      modifiedAt: "1753933749"
      name: kong
      owner: helm
      status: deployed
      version: "5"
    name: sh.helm.release.v1.kong.v5
    namespace: kong
    resourceVersion: "21231"
    uid: 3bdfc389-224a-4234-bc7a-dd91c6c9dfb8
  type: helm.sh/release.v1
- apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-cloudflare
      konghq.com/plugins: dashboard-oidc
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"networking.k8s.io/v1","kind":"Ingress","metadata":{"annotations":{"cert-manager.io/cluster-issuer":"letsencrypt-cloudflare","konghq.com/plugins":"dashboard-oidc"},"name":"kubernetes-dashboard","namespace":"kube-system"},"spec":{"ingressClassName":"kong","rules":[{"host":"dashboard.aldous.info","http":{"paths":[{"backend":{"service":{"name":"kubernetes-dashboard","port":{"number":443}}},"path":"/","pathType":"Prefix"}]}}],"tls":[{"hosts":["dashboard.aldous.info"],"secretName":"wildcard-aldous-tls"}]}}
    creationTimestamp: "2025-07-31T03:52:27Z"
    generation: 1
    name: kubernetes-dashboard
    namespace: kube-system
    resourceVersion: "15502"
    uid: 5f821a35-c71b-4410-a31b-a4e779db22b0
  spec:
    ingressClassName: kong
    rules:
    - host: dashboard.aldous.info
      http:
        paths:
        - backend:
            service:
              name: kubernetes-dashboard
              port:
                number: 443
          path: /
          pathType: Prefix
    tls:
    - hosts:
      - dashboard.aldous.info
      secretName: wildcard-aldous-tls
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"PersistentVolumeClaim","metadata":{"annotations":{},"name":"registry-claim","namespace":"container-registry"},"spec":{"accessModes":["ReadWriteMany"],"resources":{"requests":{"storage":"20Gi"}},"volumeMode":"Filesystem"}}
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-provisioner: microk8s.io/hostpath
      volume.kubernetes.io/selected-node: foo
      volume.kubernetes.io/storage-provisioner: microk8s.io/hostpath
    creationTimestamp: "2025-07-31T03:54:13Z"
    finalizers:
    - kubernetes.io/pvc-protection
    name: registry-claim
    namespace: container-registry
    resourceVersion: "16115"
    uid: 50b9786e-f038-47e2-9e4d-518569693b35
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: 20Gi
    storageClassName: microk8s-hostpath
    volumeMode: Filesystem
    volumeName: pvc-50b9786e-f038-47e2-9e4d-518569693b35
  status:
    accessModes:
    - ReadWriteMany
    capacity:
      storage: 20Gi
    phase: Bound
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    annotations:
      hostPathProvisionerIdentity: foo
      pv.kubernetes.io/provisioned-by: microk8s.io/hostpath
    creationTimestamp: "2025-07-31T03:54:33Z"
    finalizers:
    - kubernetes.io/pv-protection
    name: pvc-50b9786e-f038-47e2-9e4d-518569693b35
    resourceVersion: "16113"
    uid: 0d244f60-250b-4e39-bc95-f25027b323b4
  spec:
    accessModes:
    - ReadWriteMany
    capacity:
      storage: 20Gi
    claimRef:
      apiVersion: v1
      kind: PersistentVolumeClaim
      name: registry-claim
      namespace: container-registry
      resourceVersion: "15993"
      uid: 50b9786e-f038-47e2-9e4d-518569693b35
    hostPath:
      path: /var/snap/microk8s/common/default-storage/container-registry-registry-claim-pvc-50b9786e-f038-47e2-9e4d-518569693b35
      type: DirectoryOrCreate
    nodeAffinity:
      required:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - foo
    persistentVolumeReclaimPolicy: Delete
    storageClassName: microk8s-hostpath
    volumeMode: Filesystem
  status:
    phase: Bound
- allowVolumeExpansion: true
  apiVersion: storage.k8s.io/v1
  kind: StorageClass
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"allowVolumeExpansion":true,"apiVersion":"storage.k8s.io/v1","kind":"StorageClass","metadata":{"annotations":{},"name":"ceph-rbd"},"parameters":{"clusterID":"be38b243-386b-4def-9035-25baab098d98","csi.storage.k8s.io/node-stage-secret-name":"rook-csi-rbd-node","csi.storage.k8s.io/node-stage-secret-namespace":"rook-ceph","csi.storage.k8s.io/provisioner-secret-name":"rook-csi-rbd-provisioner","csi.storage.k8s.io/provisioner-secret-namespace":"rook-ceph","imageFeatures":"layering","imageFormat":"2","pool":"rbd"},"provisioner":"rook-ceph.rbd.csi.ceph.com","reclaimPolicy":"Delete"}
    creationTimestamp: "2025-07-31T03:09:06Z"
    name: ceph-rbd
    resourceVersion: "8044"
    uid: b4444302-631d-44d0-be28-b9a91f989cfa
  parameters:
    clusterID: be38b243-386b-4def-9035-25baab098d98
    csi.storage.k8s.io/node-stage-secret-name: rook-csi-rbd-node
    csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
    csi.storage.k8s.io/provisioner-secret-name: rook-csi-rbd-provisioner
    csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
    imageFeatures: layering
    imageFormat: "2"
    pool: rbd
  provisioner: rook-ceph.rbd.csi.ceph.com
  reclaimPolicy: Delete
  volumeBindingMode: Immediate
- allowVolumeExpansion: true
  apiVersion: storage.k8s.io/v1
  kind: StorageClass
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"allowVolumeExpansion":true,"apiVersion":"storage.k8s.io/v1","kind":"StorageClass","metadata":{"annotations":{},"name":"cephfs"},"parameters":{"clusterID":"be38b243-386b-4def-9035-25baab098d98","csi.storage.k8s.io/node-stage-secret-name":"rook-csi-cephfs-node","csi.storage.k8s.io/node-stage-secret-namespace":"rook-ceph","csi.storage.k8s.io/provisioner-secret-name":"rook-csi-cephfs-provisioner","csi.storage.k8s.io/provisioner-secret-namespace":"rook-ceph","fsName":"cephfs","pool":"cephfs-data0"},"provisioner":"rook-ceph.cephfs.csi.ceph.com","reclaimPolicy":"Delete"}
    creationTimestamp: "2025-07-31T03:09:10Z"
    name: cephfs
    resourceVersion: "8049"
    uid: 712bf0d4-3c0e-4bdc-89a3-1d9c1c87f728
  parameters:
    clusterID: be38b243-386b-4def-9035-25baab098d98
    csi.storage.k8s.io/node-stage-secret-name: rook-csi-cephfs-node
    csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
    csi.storage.k8s.io/provisioner-secret-name: rook-csi-cephfs-provisioner
    csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
    fsName: cephfs
    pool: cephfs-data0
  provisioner: rook-ceph.cephfs.csi.ceph.com
  reclaimPolicy: Delete
  volumeBindingMode: Immediate
- apiVersion: storage.k8s.io/v1
  kind: StorageClass
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"storage.k8s.io/v1","kind":"StorageClass","metadata":{"annotations":{"storageclass.kubernetes.io/is-default-class":"true"},"name":"microk8s-hostpath"},"provisioner":"microk8s.io/hostpath","reclaimPolicy":"Delete","volumeBindingMode":"WaitForFirstConsumer"}
      storageclass.kubernetes.io/is-default-class: "true"
    creationTimestamp: "2025-07-31T03:54:13Z"
    name: microk8s-hostpath
    resourceVersion: "15957"
    uid: b6829beb-1ff6-4e81-89fd-edfd8811db3a
  provisioner: microk8s.io/hostpath
  reclaimPolicy: Delete
  volumeBindingMode: WaitForFirstConsumer
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: "2025-07-31T01:27:49Z"
    labels:
      kubernetes.io/metadata.name: kube-system
    name: kube-system
    resourceVersion: "5"
    uid: 047e4db7-82bc-48ac-bef5-a9f9da16e7a9
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: "2025-07-31T01:27:49Z"
    labels:
      kubernetes.io/metadata.name: kube-public
    name: kube-public
    resourceVersion: "6"
    uid: 94d1b61a-766c-4404-8c66-0ecfcb6c433c
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: "2025-07-31T01:27:49Z"
    labels:
      kubernetes.io/metadata.name: kube-node-lease
    name: kube-node-lease
    resourceVersion: "7"
    uid: 857fc3ab-bbfa-466d-bac3-537ef7955cc3
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: "2025-07-31T01:27:50Z"
    labels:
      kubernetes.io/metadata.name: default
    name: default
    resourceVersion: "132"
    uid: f0420df4-6d47-41de-93be-43913cab74d5
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: "2025-07-31T03:05:13Z"
    labels:
      kubernetes.io/metadata.name: rook-ceph
      name: rook-ceph
    name: rook-ceph
    resourceVersion: "7488"
    uid: 86f6969e-29bb-40cb-a21b-457ce25c3a03
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"labels":{"pod-security.kubernetes.io/audit":"privileged","pod-security.kubernetes.io/enforce":"privileged","pod-security.kubernetes.io/warn":"privileged"},"name":"metallb-system"}}
    creationTimestamp: "2025-07-31T03:45:55Z"
    labels:
      kubernetes.io/metadata.name: metallb-system
      pod-security.kubernetes.io/audit: privileged
      pod-security.kubernetes.io/enforce: privileged
      pod-security.kubernetes.io/warn: privileged
    name: metallb-system
    resourceVersion: "13866"
    uid: 0a9630e2-c45a-4c04-be05-fc6ec9b84c3f
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"name":"cert-manager"}}
    creationTimestamp: "2025-07-31T03:46:28Z"
    labels:
      kubernetes.io/metadata.name: cert-manager
    name: cert-manager
    resourceVersion: "14056"
    uid: 6a07f7e5-85cf-4ee5-9089-eb9228ae5b8e
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: "2025-07-31T03:49:09Z"
    labels:
      kubernetes.io/metadata.name: kong
      name: kong
    name: kong
    resourceVersion: "14600"
    uid: 150d1336-0e3d-425b-a441-254b0122ef2e
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"name":"container-registry"}}
    creationTimestamp: "2025-07-31T03:54:13Z"
    labels:
      kubernetes.io/metadata.name: container-registry
    name: container-registry
    resourceVersion: "15975"
    uid: 7e2a6998-b4d2-4ab8-b671-930ccd07be74
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"bgpconfigurations.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"BGPConfiguration","listKind":"BGPConfigurationList","plural":"bgpconfigurations","singular":"bgpconfiguration"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"description":"BGPConfiguration contains the configuration for any BGP routing.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"BGPConfigurationSpec contains the values of the BGP configuration.","properties":{"asNumber":{"description":"ASNumber is the default AS number used by a node. [Default: 64512]","format":"int32","type":"integer"},"bindMode":{"description":"BindMode indicates whether to listen for BGP connections on all addresses (None) or only on the node's canonical IP address Node.Spec.BGP.IPvXAddress (NodeIP). Default behaviour is to listen for BGP connections on all addresses.","type":"string"},"communities":{"description":"Communities is a list of BGP community values and their arbitrary names for tagging routes.","items":{"description":"Community contains standard or large community value and its name.","properties":{"name":{"description":"Name given to community value.","type":"string"},"value":{"description":"Value must be of format `aa:nn` or `aa:nn:mm`. For standard community use `aa:nn` format, where `aa` and `nn` are 16 bit number. For large community use `aa:nn:mm` format, where `aa`, `nn` and `mm` are 32 bit number. Where, `aa` is an AS Number, `nn` and `mm` are per-AS identifier.","pattern":"^(\\d+):(\\d+)$|^(\\d+):(\\d+):(\\d+)$","type":"string"}},"type":"object"},"type":"array"},"listenPort":{"description":"ListenPort is the port where BGP protocol should listen. Defaults to 179","maximum":65535,"minimum":1,"type":"integer"},"logSeverityScreen":{"description":"LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: INFO]","type":"string"},"nodeMeshMaxRestartTime":{"description":"Time to allow for software restart for node-to-mesh peerings.  When specified, this is configured as the graceful restart timeout.  When not specified, the BIRD default of 120s is used. This field can only be set on the default BGPConfiguration instance and requires that NodeMesh is enabled","type":"string"},"nodeMeshPassword":{"description":"Optional BGP password for full node-to-mesh peerings. This field can only be set on the default BGPConfiguration instance and requires that NodeMesh is enabled","properties":{"secretKeyRef":{"description":"Selects a key of a secret in the node pod's namespace.","properties":{"key":{"description":"The key of the secret to select from.  Must be a valid secret key.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the Secret or its key must be defined","type":"boolean"}},"required":["key"],"type":"object"}},"type":"object"},"nodeToNodeMeshEnabled":{"description":"NodeToNodeMeshEnabled sets whether full node to node BGP mesh is enabled. [Default: true]","type":"boolean"},"prefixAdvertisements":{"description":"PrefixAdvertisements contains per-prefix advertisement configuration.","items":{"description":"PrefixAdvertisement configures advertisement properties for the specified CIDR.","properties":{"cidr":{"description":"CIDR for which properties should be advertised.","type":"string"},"communities":{"description":"Communities can be list of either community names already defined in `Specs.Communities` or community value of format `aa:nn` or `aa:nn:mm`. For standard community use `aa:nn` format, where `aa` and `nn` are 16 bit number. For large community use `aa:nn:mm` format, where `aa`, `nn` and `mm` are 32 bit number. Where,`aa` is an AS Number, `nn` and `mm` are per-AS identifier.","items":{"type":"string"},"type":"array"}},"type":"object"},"type":"array"},"serviceClusterIPs":{"description":"ServiceClusterIPs are the CIDR blocks from which service cluster IPs are allocated. If specified, Calico will advertise these blocks, as well as any cluster IPs within them.","items":{"description":"ServiceClusterIPBlock represents a single allowed ClusterIP CIDR block.","properties":{"cidr":{"type":"string"}},"type":"object"},"type":"array"},"serviceExternalIPs":{"description":"ServiceExternalIPs are the CIDR blocks for Kubernetes Service External IPs. Kubernetes Service ExternalIPs will only be advertised if they are within one of these blocks.","items":{"description":"ServiceExternalIPBlock represents a single allowed External IP CIDR block.","properties":{"cidr":{"type":"string"}},"type":"object"},"type":"array"},"serviceLoadBalancerIPs":{"description":"ServiceLoadBalancerIPs are the CIDR blocks for Kubernetes Service LoadBalancer IPs. Kubernetes Service status.LoadBalancer.Ingress IPs will only be advertised if they are within one of these blocks.","items":{"description":"ServiceLoadBalancerIPBlock represents a single allowed LoadBalancer IP CIDR block.","properties":{"cidr":{"type":"string"}},"type":"object"},"type":"array"}},"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: bgpconfigurations.crd.projectcalico.org
    resourceVersion: "72"
    uid: dcc4f4da-96f1-40bd-9fc4-bfc834759d54
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: BGPConfiguration
      listKind: BGPConfigurationList
      plural: bgpconfigurations
      singular: bgpconfiguration
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: BGPConfiguration contains the configuration for any BGP routing.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: BGPConfigurationSpec contains the values of the BGP configuration.
              properties:
                asNumber:
                  description: 'ASNumber is the default AS number used by a node.
                    [Default: 64512]'
                  format: int32
                  type: integer
                bindMode:
                  description: BindMode indicates whether to listen for BGP connections
                    on all addresses (None) or only on the node's canonical IP address
                    Node.Spec.BGP.IPvXAddress (NodeIP). Default behaviour is to listen
                    for BGP connections on all addresses.
                  type: string
                communities:
                  description: Communities is a list of BGP community values and their
                    arbitrary names for tagging routes.
                  items:
                    description: Community contains standard or large community value
                      and its name.
                    properties:
                      name:
                        description: Name given to community value.
                        type: string
                      value:
                        description: Value must be of format `aa:nn` or `aa:nn:mm`.
                          For standard community use `aa:nn` format, where `aa` and
                          `nn` are 16 bit number. For large community use `aa:nn:mm`
                          format, where `aa`, `nn` and `mm` are 32 bit number. Where,
                          `aa` is an AS Number, `nn` and `mm` are per-AS identifier.
                        pattern: ^(\d+):(\d+)$|^(\d+):(\d+):(\d+)$
                        type: string
                    type: object
                  type: array
                listenPort:
                  description: ListenPort is the port where BGP protocol should listen.
                    Defaults to 179
                  maximum: 65535
                  minimum: 1
                  type: integer
                logSeverityScreen:
                  description: 'LogSeverityScreen is the log severity above which
                    logs are sent to the stdout. [Default: INFO]'
                  type: string
                nodeMeshMaxRestartTime:
                  description: Time to allow for software restart for node-to-mesh
                    peerings.  When specified, this is configured as the graceful
                    restart timeout.  When not specified, the BIRD default of 120s
                    is used. This field can only be set on the default BGPConfiguration
                    instance and requires that NodeMesh is enabled
                  type: string
                nodeMeshPassword:
                  description: Optional BGP password for full node-to-mesh peerings.
                    This field can only be set on the default BGPConfiguration instance
                    and requires that NodeMesh is enabled
                  properties:
                    secretKeyRef:
                      description: Selects a key of a secret in the node pod's namespace.
                      properties:
                        key:
                          description: The key of the secret to select from.  Must
                            be a valid secret key.
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            TODO: Add other useful fields. apiVersion, kind, uid?'
                          type: string
                        optional:
                          description: Specify whether the Secret or its key must
                            be defined
                          type: boolean
                      required:
                      - key
                      type: object
                  type: object
                nodeToNodeMeshEnabled:
                  description: 'NodeToNodeMeshEnabled sets whether full node to node
                    BGP mesh is enabled. [Default: true]'
                  type: boolean
                prefixAdvertisements:
                  description: PrefixAdvertisements contains per-prefix advertisement
                    configuration.
                  items:
                    description: PrefixAdvertisement configures advertisement properties
                      for the specified CIDR.
                    properties:
                      cidr:
                        description: CIDR for which properties should be advertised.
                        type: string
                      communities:
                        description: Communities can be list of either community names
                          already defined in `Specs.Communities` or community value
                          of format `aa:nn` or `aa:nn:mm`. For standard community
                          use `aa:nn` format, where `aa` and `nn` are 16 bit number.
                          For large community use `aa:nn:mm` format, where `aa`, `nn`
                          and `mm` are 32 bit number. Where,`aa` is an AS Number,
                          `nn` and `mm` are per-AS identifier.
                        items:
                          type: string
                        type: array
                    type: object
                  type: array
                serviceClusterIPs:
                  description: ServiceClusterIPs are the CIDR blocks from which service
                    cluster IPs are allocated. If specified, Calico will advertise
                    these blocks, as well as any cluster IPs within them.
                  items:
                    description: ServiceClusterIPBlock represents a single allowed
                      ClusterIP CIDR block.
                    properties:
                      cidr:
                        type: string
                    type: object
                  type: array
                serviceExternalIPs:
                  description: ServiceExternalIPs are the CIDR blocks for Kubernetes
                    Service External IPs. Kubernetes Service ExternalIPs will only
                    be advertised if they are within one of these blocks.
                  items:
                    description: ServiceExternalIPBlock represents a single allowed
                      External IP CIDR block.
                    properties:
                      cidr:
                        type: string
                    type: object
                  type: array
                serviceLoadBalancerIPs:
                  description: ServiceLoadBalancerIPs are the CIDR blocks for Kubernetes
                    Service LoadBalancer IPs. Kubernetes Service status.LoadBalancer.Ingress
                    IPs will only be advertised if they are within one of these blocks.
                  items:
                    description: ServiceLoadBalancerIPBlock represents a single allowed
                      LoadBalancer IP CIDR block.
                    properties:
                      cidr:
                        type: string
                    type: object
                  type: array
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: BGPConfiguration
      listKind: BGPConfigurationList
      plural: bgpconfigurations
      singular: bgpconfiguration
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"bgppeers.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"BGPPeer","listKind":"BGPPeerList","plural":"bgppeers","singular":"bgppeer"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"BGPPeerSpec contains the specification for a BGPPeer resource.","properties":{"asNumber":{"description":"The AS Number of the peer.","format":"int32","type":"integer"},"keepOriginalNextHop":{"description":"Option to keep the original nexthop field when routes are sent to a BGP Peer. Setting \"true\" configures the selected BGP Peers node to use the \"next hop keep;\" instead of \"next hop self;\"(default) in the specific branch of the Node on \"bird.cfg\".","type":"boolean"},"maxRestartTime":{"description":"Time to allow for software restart.  When specified, this is configured as the graceful restart timeout.  When not specified, the BIRD default of 120s is used.","type":"string"},"node":{"description":"The node name identifying the Calico node instance that is targeted by this peer. If this is not set, and no nodeSelector is specified, then this BGP peer selects all nodes in the cluster.","type":"string"},"nodeSelector":{"description":"Selector for the nodes that should have this peering.  When this is set, the Node field must be empty.","type":"string"},"numAllowedLocalASNumbers":{"description":"Maximum number of local AS numbers that are allowed in the AS path for received routes. This removes BGP loop prevention and should only be used if absolutely necesssary.","format":"int32","type":"integer"},"password":{"description":"Optional BGP password for the peerings generated by this BGPPeer resource.","properties":{"secretKeyRef":{"description":"Selects a key of a secret in the node pod's namespace.","properties":{"key":{"description":"The key of the secret to select from.  Must be a valid secret key.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the Secret or its key must be defined","type":"boolean"}},"required":["key"],"type":"object"}},"type":"object"},"peerIP":{"description":"The IP address of the peer followed by an optional port number to peer with. If port number is given, format should be `[\u003cIPv6\u003e]:port` or `\u003cIPv4\u003e:\u003cport\u003e` for IPv4. If optional port number is not set, and this peer IP and ASNumber belongs to a calico/node with ListenPort set in BGPConfiguration, then we use that port to peer.","type":"string"},"peerSelector":{"description":"Selector for the remote nodes to peer with.  When this is set, the PeerIP and ASNumber fields must be empty.  For each peering between the local node and selected remote nodes, we configure an IPv4 peering if both ends have NodeBGPSpec.IPv4Address specified, and an IPv6 peering if both ends have NodeBGPSpec.IPv6Address specified.  The remote AS number comes from the remote node's NodeBGPSpec.ASNumber, or the global default if that is not set.","type":"string"},"sourceAddress":{"description":"Specifies whether and how to configure a source address for the peerings generated by this BGPPeer resource.  Default value \"UseNodeIP\" means to configure the node IP as the source address.  \"None\" means not to configure a source address.","type":"string"}},"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: bgppeers.crd.projectcalico.org
    resourceVersion: "75"
    uid: a84d31da-19e6-451f-97fd-f73c02b43399
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: BGPPeer
      listKind: BGPPeerList
      plural: bgppeers
      singular: bgppeer
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: BGPPeerSpec contains the specification for a BGPPeer resource.
              properties:
                asNumber:
                  description: The AS Number of the peer.
                  format: int32
                  type: integer
                keepOriginalNextHop:
                  description: Option to keep the original nexthop field when routes
                    are sent to a BGP Peer. Setting "true" configures the selected
                    BGP Peers node to use the "next hop keep;" instead of "next hop
                    self;"(default) in the specific branch of the Node on "bird.cfg".
                  type: boolean
                maxRestartTime:
                  description: Time to allow for software restart.  When specified,
                    this is configured as the graceful restart timeout.  When not
                    specified, the BIRD default of 120s is used.
                  type: string
                node:
                  description: The node name identifying the Calico node instance
                    that is targeted by this peer. If this is not set, and no nodeSelector
                    is specified, then this BGP peer selects all nodes in the cluster.
                  type: string
                nodeSelector:
                  description: Selector for the nodes that should have this peering.  When
                    this is set, the Node field must be empty.
                  type: string
                numAllowedLocalASNumbers:
                  description: Maximum number of local AS numbers that are allowed
                    in the AS path for received routes. This removes BGP loop prevention
                    and should only be used if absolutely necesssary.
                  format: int32
                  type: integer
                password:
                  description: Optional BGP password for the peerings generated by
                    this BGPPeer resource.
                  properties:
                    secretKeyRef:
                      description: Selects a key of a secret in the node pod's namespace.
                      properties:
                        key:
                          description: The key of the secret to select from.  Must
                            be a valid secret key.
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            TODO: Add other useful fields. apiVersion, kind, uid?'
                          type: string
                        optional:
                          description: Specify whether the Secret or its key must
                            be defined
                          type: boolean
                      required:
                      - key
                      type: object
                  type: object
                peerIP:
                  description: The IP address of the peer followed by an optional
                    port number to peer with. If port number is given, format should
                    be `[<IPv6>]:port` or `<IPv4>:<port>` for IPv4. If optional port
                    number is not set, and this peer IP and ASNumber belongs to a
                    calico/node with ListenPort set in BGPConfiguration, then we use
                    that port to peer.
                  type: string
                peerSelector:
                  description: Selector for the remote nodes to peer with.  When this
                    is set, the PeerIP and ASNumber fields must be empty.  For each
                    peering between the local node and selected remote nodes, we configure
                    an IPv4 peering if both ends have NodeBGPSpec.IPv4Address specified,
                    and an IPv6 peering if both ends have NodeBGPSpec.IPv6Address
                    specified.  The remote AS number comes from the remote node's
                    NodeBGPSpec.ASNumber, or the global default if that is not set.
                  type: string
                sourceAddress:
                  description: Specifies whether and how to configure a source address
                    for the peerings generated by this BGPPeer resource.  Default
                    value "UseNodeIP" means to configure the node IP as the source
                    address.  "None" means not to configure a source address.
                  type: string
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: BGPPeer
      listKind: BGPPeerList
      plural: bgppeers
      singular: bgppeer
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"blockaffinities.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"BlockAffinity","listKind":"BlockAffinityList","plural":"blockaffinities","singular":"blockaffinity"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"BlockAffinitySpec contains the specification for a BlockAffinity resource.","properties":{"cidr":{"type":"string"},"deleted":{"description":"Deleted indicates that this block affinity is being deleted. This field is a string for compatibility with older releases that mistakenly treat this field as a string.","type":"string"},"node":{"type":"string"},"state":{"type":"string"}},"required":["cidr","deleted","node","state"],"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: blockaffinities.crd.projectcalico.org
    resourceVersion: "78"
    uid: fb38b480-3779-476b-8d38-97e4b2ed92b2
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: BlockAffinity
      listKind: BlockAffinityList
      plural: blockaffinities
      singular: blockaffinity
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: BlockAffinitySpec contains the specification for a BlockAffinity
                resource.
              properties:
                cidr:
                  type: string
                deleted:
                  description: Deleted indicates that this block affinity is being
                    deleted. This field is a string for compatibility with older releases
                    that mistakenly treat this field as a string.
                  type: string
                node:
                  type: string
                state:
                  type: string
              required:
              - cidr
              - deleted
              - node
              - state
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: BlockAffinity
      listKind: BlockAffinityList
      plural: blockaffinities
      singular: blockaffinity
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: (devel)
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"(devel)"},"creationTimestamp":null,"name":"caliconodestatuses.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"CalicoNodeStatus","listKind":"CalicoNodeStatusList","plural":"caliconodestatuses","singular":"caliconodestatus"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"CalicoNodeStatusSpec contains the specification for a CalicoNodeStatus resource.","properties":{"classes":{"description":"Classes declares the types of information to monitor for this calico/node, and allows for selective status reporting about certain subsets of information.","items":{"type":"string"},"type":"array"},"node":{"description":"The node name identifies the Calico node instance for node status.","type":"string"},"updatePeriodSeconds":{"description":"UpdatePeriodSeconds is the period at which CalicoNodeStatus should be updated. Set to 0 to disable CalicoNodeStatus refresh. Maximum update period is one day.","format":"int32","type":"integer"}},"type":"object"},"status":{"description":"CalicoNodeStatusStatus defines the observed state of CalicoNodeStatus. No validation needed for status since it is updated by Calico.","properties":{"agent":{"description":"Agent holds agent status on the node.","properties":{"birdV4":{"description":"BIRDV4 represents the latest observed status of bird4.","properties":{"lastBootTime":{"description":"LastBootTime holds the value of lastBootTime from bird.ctl output.","type":"string"},"lastReconfigurationTime":{"description":"LastReconfigurationTime holds the value of lastReconfigTime from bird.ctl output.","type":"string"},"routerID":{"description":"Router ID used by bird.","type":"string"},"state":{"description":"The state of the BGP Daemon.","type":"string"},"version":{"description":"Version of the BGP daemon","type":"string"}},"type":"object"},"birdV6":{"description":"BIRDV6 represents the latest observed status of bird6.","properties":{"lastBootTime":{"description":"LastBootTime holds the value of lastBootTime from bird.ctl output.","type":"string"},"lastReconfigurationTime":{"description":"LastReconfigurationTime holds the value of lastReconfigTime from bird.ctl output.","type":"string"},"routerID":{"description":"Router ID used by bird.","type":"string"},"state":{"description":"The state of the BGP Daemon.","type":"string"},"version":{"description":"Version of the BGP daemon","type":"string"}},"type":"object"}},"type":"object"},"bgp":{"description":"BGP holds node BGP status.","properties":{"numberEstablishedV4":{"description":"The total number of IPv4 established bgp sessions.","type":"integer"},"numberEstablishedV6":{"description":"The total number of IPv6 established bgp sessions.","type":"integer"},"numberNotEstablishedV4":{"description":"The total number of IPv4 non-established bgp sessions.","type":"integer"},"numberNotEstablishedV6":{"description":"The total number of IPv6 non-established bgp sessions.","type":"integer"},"peersV4":{"description":"PeersV4 represents IPv4 BGP peers status on the node.","items":{"description":"CalicoNodePeer contains the status of BGP peers on the node.","properties":{"peerIP":{"description":"IP address of the peer whose condition we are reporting.","type":"string"},"since":{"description":"Since the state or reason last changed.","type":"string"},"state":{"description":"State is the BGP session state.","type":"string"},"type":{"description":"Type indicates whether this peer is configured via the node-to-node mesh, or via en explicit global or per-node BGPPeer object.","type":"string"}},"type":"object"},"type":"array"},"peersV6":{"description":"PeersV6 represents IPv6 BGP peers status on the node.","items":{"description":"CalicoNodePeer contains the status of BGP peers on the node.","properties":{"peerIP":{"description":"IP address of the peer whose condition we are reporting.","type":"string"},"since":{"description":"Since the state or reason last changed.","type":"string"},"state":{"description":"State is the BGP session state.","type":"string"},"type":{"description":"Type indicates whether this peer is configured via the node-to-node mesh, or via en explicit global or per-node BGPPeer object.","type":"string"}},"type":"object"},"type":"array"}},"required":["numberEstablishedV4","numberEstablishedV6","numberNotEstablishedV4","numberNotEstablishedV6"],"type":"object"},"lastUpdated":{"description":"LastUpdated is a timestamp representing the server time when CalicoNodeStatus object last updated. It is represented in RFC3339 form and is in UTC.","format":"date-time","nullable":true,"type":"string"},"routes":{"description":"Routes reports routes known to the Calico BGP daemon on the node.","properties":{"routesV4":{"description":"RoutesV4 represents IPv4 routes on the node.","items":{"description":"CalicoNodeRoute contains the status of BGP routes on the node.","properties":{"destination":{"description":"Destination of the route.","type":"string"},"gateway":{"description":"Gateway for the destination.","type":"string"},"interface":{"description":"Interface for the destination","type":"string"},"learnedFrom":{"description":"LearnedFrom contains information regarding where this route originated.","properties":{"peerIP":{"description":"If sourceType is NodeMesh or BGPPeer, IP address of the router that sent us this route.","type":"string"},"sourceType":{"description":"Type of the source where a route is learned from.","type":"string"}},"type":"object"},"type":{"description":"Type indicates if the route is being used for forwarding or not.","type":"string"}},"type":"object"},"type":"array"},"routesV6":{"description":"RoutesV6 represents IPv6 routes on the node.","items":{"description":"CalicoNodeRoute contains the status of BGP routes on the node.","properties":{"destination":{"description":"Destination of the route.","type":"string"},"gateway":{"description":"Gateway for the destination.","type":"string"},"interface":{"description":"Interface for the destination","type":"string"},"learnedFrom":{"description":"LearnedFrom contains information regarding where this route originated.","properties":{"peerIP":{"description":"If sourceType is NodeMesh or BGPPeer, IP address of the router that sent us this route.","type":"string"},"sourceType":{"description":"Type of the source where a route is learned from.","type":"string"}},"type":"object"},"type":{"description":"Type indicates if the route is being used for forwarding or not.","type":"string"}},"type":"object"},"type":"array"}},"type":"object"}},"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: caliconodestatuses.crd.projectcalico.org
    resourceVersion: "82"
    uid: 3594b155-9d7c-4037-a4d5-f76e9516854d
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: CalicoNodeStatus
      listKind: CalicoNodeStatusList
      plural: caliconodestatuses
      singular: caliconodestatus
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: CalicoNodeStatusSpec contains the specification for a CalicoNodeStatus
                resource.
              properties:
                classes:
                  description: Classes declares the types of information to monitor
                    for this calico/node, and allows for selective status reporting
                    about certain subsets of information.
                  items:
                    type: string
                  type: array
                node:
                  description: The node name identifies the Calico node instance for
                    node status.
                  type: string
                updatePeriodSeconds:
                  description: UpdatePeriodSeconds is the period at which CalicoNodeStatus
                    should be updated. Set to 0 to disable CalicoNodeStatus refresh.
                    Maximum update period is one day.
                  format: int32
                  type: integer
              type: object
            status:
              description: CalicoNodeStatusStatus defines the observed state of CalicoNodeStatus.
                No validation needed for status since it is updated by Calico.
              properties:
                agent:
                  description: Agent holds agent status on the node.
                  properties:
                    birdV4:
                      description: BIRDV4 represents the latest observed status of
                        bird4.
                      properties:
                        lastBootTime:
                          description: LastBootTime holds the value of lastBootTime
                            from bird.ctl output.
                          type: string
                        lastReconfigurationTime:
                          description: LastReconfigurationTime holds the value of
                            lastReconfigTime from bird.ctl output.
                          type: string
                        routerID:
                          description: Router ID used by bird.
                          type: string
                        state:
                          description: The state of the BGP Daemon.
                          type: string
                        version:
                          description: Version of the BGP daemon
                          type: string
                      type: object
                    birdV6:
                      description: BIRDV6 represents the latest observed status of
                        bird6.
                      properties:
                        lastBootTime:
                          description: LastBootTime holds the value of lastBootTime
                            from bird.ctl output.
                          type: string
                        lastReconfigurationTime:
                          description: LastReconfigurationTime holds the value of
                            lastReconfigTime from bird.ctl output.
                          type: string
                        routerID:
                          description: Router ID used by bird.
                          type: string
                        state:
                          description: The state of the BGP Daemon.
                          type: string
                        version:
                          description: Version of the BGP daemon
                          type: string
                      type: object
                  type: object
                bgp:
                  description: BGP holds node BGP status.
                  properties:
                    numberEstablishedV4:
                      description: The total number of IPv4 established bgp sessions.
                      type: integer
                    numberEstablishedV6:
                      description: The total number of IPv6 established bgp sessions.
                      type: integer
                    numberNotEstablishedV4:
                      description: The total number of IPv4 non-established bgp sessions.
                      type: integer
                    numberNotEstablishedV6:
                      description: The total number of IPv6 non-established bgp sessions.
                      type: integer
                    peersV4:
                      description: PeersV4 represents IPv4 BGP peers status on the
                        node.
                      items:
                        description: CalicoNodePeer contains the status of BGP peers
                          on the node.
                        properties:
                          peerIP:
                            description: IP address of the peer whose condition we
                              are reporting.
                            type: string
                          since:
                            description: Since the state or reason last changed.
                            type: string
                          state:
                            description: State is the BGP session state.
                            type: string
                          type:
                            description: Type indicates whether this peer is configured
                              via the node-to-node mesh, or via en explicit global
                              or per-node BGPPeer object.
                            type: string
                        type: object
                      type: array
                    peersV6:
                      description: PeersV6 represents IPv6 BGP peers status on the
                        node.
                      items:
                        description: CalicoNodePeer contains the status of BGP peers
                          on the node.
                        properties:
                          peerIP:
                            description: IP address of the peer whose condition we
                              are reporting.
                            type: string
                          since:
                            description: Since the state or reason last changed.
                            type: string
                          state:
                            description: State is the BGP session state.
                            type: string
                          type:
                            description: Type indicates whether this peer is configured
                              via the node-to-node mesh, or via en explicit global
                              or per-node BGPPeer object.
                            type: string
                        type: object
                      type: array
                  required:
                  - numberEstablishedV4
                  - numberEstablishedV6
                  - numberNotEstablishedV4
                  - numberNotEstablishedV6
                  type: object
                lastUpdated:
                  description: LastUpdated is a timestamp representing the server
                    time when CalicoNodeStatus object last updated. It is represented
                    in RFC3339 form and is in UTC.
                  format: date-time
                  nullable: true
                  type: string
                routes:
                  description: Routes reports routes known to the Calico BGP daemon
                    on the node.
                  properties:
                    routesV4:
                      description: RoutesV4 represents IPv4 routes on the node.
                      items:
                        description: CalicoNodeRoute contains the status of BGP routes
                          on the node.
                        properties:
                          destination:
                            description: Destination of the route.
                            type: string
                          gateway:
                            description: Gateway for the destination.
                            type: string
                          interface:
                            description: Interface for the destination
                            type: string
                          learnedFrom:
                            description: LearnedFrom contains information regarding
                              where this route originated.
                            properties:
                              peerIP:
                                description: If sourceType is NodeMesh or BGPPeer,
                                  IP address of the router that sent us this route.
                                type: string
                              sourceType:
                                description: Type of the source where a route is learned
                                  from.
                                type: string
                            type: object
                          type:
                            description: Type indicates if the route is being used
                              for forwarding or not.
                            type: string
                        type: object
                      type: array
                    routesV6:
                      description: RoutesV6 represents IPv6 routes on the node.
                      items:
                        description: CalicoNodeRoute contains the status of BGP routes
                          on the node.
                        properties:
                          destination:
                            description: Destination of the route.
                            type: string
                          gateway:
                            description: Gateway for the destination.
                            type: string
                          interface:
                            description: Interface for the destination
                            type: string
                          learnedFrom:
                            description: LearnedFrom contains information regarding
                              where this route originated.
                            properties:
                              peerIP:
                                description: If sourceType is NodeMesh or BGPPeer,
                                  IP address of the router that sent us this route.
                                type: string
                              sourceType:
                                description: Type of the source where a route is learned
                                  from.
                                type: string
                            type: object
                          type:
                            description: Type indicates if the route is being used
                              for forwarding or not.
                            type: string
                        type: object
                      type: array
                  type: object
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: CalicoNodeStatus
      listKind: CalicoNodeStatusList
      plural: caliconodestatuses
      singular: caliconodestatus
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"clusterinformations.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"ClusterInformation","listKind":"ClusterInformationList","plural":"clusterinformations","singular":"clusterinformation"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"description":"ClusterInformation contains the cluster specific information.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"ClusterInformationSpec contains the values of describing the cluster.","properties":{"calicoVersion":{"description":"CalicoVersion is the version of Calico that the cluster is running","type":"string"},"clusterGUID":{"description":"ClusterGUID is the GUID of the cluster","type":"string"},"clusterType":{"description":"ClusterType describes the type of the cluster","type":"string"},"datastoreReady":{"description":"DatastoreReady is used during significant datastore migrations to signal to components such as Felix that it should wait before accessing the datastore.","type":"boolean"},"variant":{"description":"Variant declares which variant of Calico should be active.","type":"string"}},"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: clusterinformations.crd.projectcalico.org
    resourceVersion: "84"
    uid: 8ccdec0e-0f5c-43f9-b742-880c93db399b
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: ClusterInformation
      listKind: ClusterInformationList
      plural: clusterinformations
      singular: clusterinformation
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: ClusterInformation contains the cluster specific information.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ClusterInformationSpec contains the values of describing
                the cluster.
              properties:
                calicoVersion:
                  description: CalicoVersion is the version of Calico that the cluster
                    is running
                  type: string
                clusterGUID:
                  description: ClusterGUID is the GUID of the cluster
                  type: string
                clusterType:
                  description: ClusterType describes the type of the cluster
                  type: string
                datastoreReady:
                  description: DatastoreReady is used during significant datastore
                    migrations to signal to components such as Felix that it should
                    wait before accessing the datastore.
                  type: boolean
                variant:
                  description: Variant declares which variant of Calico should be
                    active.
                  type: string
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: ClusterInformation
      listKind: ClusterInformationList
      plural: clusterinformations
      singular: clusterinformation
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"felixconfigurations.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"FelixConfiguration","listKind":"FelixConfigurationList","plural":"felixconfigurations","singular":"felixconfiguration"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"description":"Felix Configuration contains the configuration for Felix.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"FelixConfigurationSpec contains the values of the Felix configuration.","properties":{"allowIPIPPacketsFromWorkloads":{"description":"AllowIPIPPacketsFromWorkloads controls whether Felix will add a rule to drop IPIP encapsulated traffic from workloads [Default: false]","type":"boolean"},"allowVXLANPacketsFromWorkloads":{"description":"AllowVXLANPacketsFromWorkloads controls whether Felix will add a rule to drop VXLAN encapsulated traffic from workloads [Default: false]","type":"boolean"},"awsSrcDstCheck":{"description":"Set source-destination-check on AWS EC2 instances. Accepted value must be one of \"DoNothing\", \"Enable\" or \"Disable\". [Default: DoNothing]","enum":["DoNothing","Enable","Disable"],"type":"string"},"bpfConnectTimeLoadBalancingEnabled":{"description":"BPFConnectTimeLoadBalancingEnabled when in BPF mode, controls whether Felix installs the connection-time load balancer.  The connect-time load balancer is required for the host to be able to reach Kubernetes services and it improves the performance of pod-to-service connections.  The only reason to disable it is for debugging purposes.  [Default: true]","type":"boolean"},"bpfDataIfacePattern":{"description":"BPFDataIfacePattern is a regular expression that controls which interfaces Felix should attach BPF programs to in order to catch traffic to/from the network.  This needs to match the interfaces that Calico workload traffic flows over as well as any interfaces that handle incoming traffic to nodeports and services from outside the cluster.  It should not match the workload interfaces (usually named cali...).","type":"string"},"bpfDisableUnprivileged":{"description":"BPFDisableUnprivileged, if enabled, Felix sets the kernel.unprivileged_bpf_disabled sysctl to disable unprivileged use of BPF.  This ensures that unprivileged users cannot access Calico's BPF maps and cannot insert their own BPF programs to interfere with Calico's. [Default: true]","type":"boolean"},"bpfEnabled":{"description":"BPFEnabled, if enabled Felix will use the BPF dataplane. [Default: false]","type":"boolean"},"bpfEnforceRPF":{"description":"BPFEnforceRPF enforce strict RPF on all interfaces with BPF programs regardless of what is the per-interfaces or global setting. Possible values are Disabled or Strict. [Default: Strict]","type":"string"},"bpfExtToServiceConnmark":{"description":"BPFExtToServiceConnmark in BPF mode, control a 32bit mark that is set on connections from an external client to a local service. This mark allows us to control how packets of that connection are routed within the host and how is routing interpreted by RPF check. [Default: 0]","type":"integer"},"bpfExternalServiceMode":{"description":"BPFExternalServiceMode in BPF mode, controls how connections from outside the cluster to services (node ports and cluster IPs) are forwarded to remote workloads.  If set to \"Tunnel\" then both request and response traffic is tunneled to the remote node.  If set to \"DSR\", the request traffic is tunneled but the response traffic is sent directly from the remote node.  In \"DSR\" mode, the remote node appears to use the IP of the ingress node; this requires a permissive L2 network.  [Default: Tunnel]","type":"string"},"bpfKubeProxyEndpointSlicesEnabled":{"description":"BPFKubeProxyEndpointSlicesEnabled in BPF mode, controls whether Felix's embedded kube-proxy accepts EndpointSlices or not.","type":"boolean"},"bpfKubeProxyIptablesCleanupEnabled":{"description":"BPFKubeProxyIptablesCleanupEnabled, if enabled in BPF mode, Felix will proactively clean up the upstream Kubernetes kube-proxy's iptables chains.  Should only be enabled if kube-proxy is not running.  [Default: true]","type":"boolean"},"bpfKubeProxyMinSyncPeriod":{"description":"BPFKubeProxyMinSyncPeriod, in BPF mode, controls the minimum time between updates to the dataplane for Felix's embedded kube-proxy.  Lower values give reduced set-up latency.  Higher values reduce Felix CPU usage by batching up more work.  [Default: 1s]","type":"string"},"bpfLogLevel":{"description":"BPFLogLevel controls the log level of the BPF programs when in BPF dataplane mode.  One of \"Off\", \"Info\", or \"Debug\".  The logs are emitted to the BPF trace pipe, accessible with the command `tc exec bpf debug`. [Default: Off].","type":"string"},"bpfMapSizeConntrack":{"description":"BPFMapSizeConntrack sets the size for the conntrack map.  This map must be large enough to hold an entry for each active connection.  Warning: changing the size of the conntrack map can cause disruption.","type":"integer"},"bpfMapSizeIPSets":{"description":"BPFMapSizeIPSets sets the size for ipsets map.  The IP sets map must be large enough to hold an entry for each endpoint matched by every selector in the source/destination matches in network policy.  Selectors such as \"all()\" can result in large numbers of entries (one entry per endpoint in that case).","type":"integer"},"bpfMapSizeNATAffinity":{"type":"integer"},"bpfMapSizeNATBackend":{"description":"BPFMapSizeNATBackend sets the size for nat back end map. This is the total number of endpoints. This is mostly more than the size of the number of services.","type":"integer"},"bpfMapSizeNATFrontend":{"description":"BPFMapSizeNATFrontend sets the size for nat front end map. FrontendMap should be large enough to hold an entry for each nodeport, external IP and each port in each service.","type":"integer"},"bpfMapSizeRoute":{"description":"BPFMapSizeRoute sets the size for the routes map.  The routes map should be large enough to hold one entry per workload and a handful of entries per host (enough to cover its own IPs and tunnel IPs).","type":"integer"},"bpfPSNATPorts":{"anyOf":[{"type":"integer"},{"type":"string"}],"description":"BPFPSNATPorts sets the range from which we randomly pick a port if there is a source port collision. This should be within the ephemeral range as defined by RFC 6056 (1024–65535) and preferably outside the  ephemeral ranges used by common operating systems. Linux uses 32768–60999, while others mostly use the IANA defined range 49152–65535. It is not necessarily a problem if this range overlaps with the operating systems. Both ends of the range are inclusive. [Default: 20000:29999]","pattern":"^.*","x-kubernetes-int-or-string":true},"chainInsertMode":{"description":"ChainInsertMode controls whether Felix hooks the kernel's top-level iptables chains by inserting a rule at the top of the chain or by appending a rule at the bottom. insert is the safe default since it prevents Calico's rules from being bypassed. If you switch to append mode, be sure that the other rules in the chains signal acceptance by falling through to the Calico rules, otherwise the Calico policy will be bypassed. [Default: insert]","type":"string"},"dataplaneDriver":{"description":"DataplaneDriver filename of the external dataplane driver to use.  Only used if UseInternalDataplaneDriver is set to false.","type":"string"},"dataplaneWatchdogTimeout":{"description":"DataplaneWatchdogTimeout is the readiness/liveness timeout used for Felix's (internal) dataplane driver. Increase this value if you experience spurious non-ready or non-live events when Felix is under heavy load. Decrease the value to get felix to report non-live or non-ready more quickly. [Default: 90s]","type":"string"},"debugDisableLogDropping":{"type":"boolean"},"debugMemoryProfilePath":{"type":"string"},"debugSimulateCalcGraphHangAfter":{"type":"string"},"debugSimulateDataplaneHangAfter":{"type":"string"},"defaultEndpointToHostAction":{"description":"DefaultEndpointToHostAction controls what happens to traffic that goes from a workload endpoint to the host itself (after the traffic hits the endpoint egress policy). By default Calico blocks traffic from workload endpoints to the host itself with an iptables \"DROP\" action. If you want to allow some or all traffic from endpoint to host, set this parameter to RETURN or ACCEPT. Use RETURN if you have your own rules in the iptables \"INPUT\" chain; Calico will insert its rules at the top of that chain, then \"RETURN\" packets to the \"INPUT\" chain once it has completed processing workload endpoint egress policy. Use ACCEPT to unconditionally accept packets from workloads after processing workload endpoint egress policy. [Default: Drop]","type":"string"},"deviceRouteProtocol":{"description":"This defines the route protocol added to programmed device routes, by default this will be RTPROT_BOOT when left blank.","type":"integer"},"deviceRouteSourceAddress":{"description":"This is the IPv4 source address to use on programmed device routes. By default the source address is left blank, leaving the kernel to choose the source address used.","type":"string"},"deviceRouteSourceAddressIPv6":{"description":"This is the IPv6 source address to use on programmed device routes. By default the source address is left blank, leaving the kernel to choose the source address used.","type":"string"},"disableConntrackInvalidCheck":{"type":"boolean"},"endpointReportingDelay":{"type":"string"},"endpointReportingEnabled":{"type":"boolean"},"externalNodesList":{"description":"ExternalNodesCIDRList is a list of CIDR's of external-non-calico-nodes which may source tunnel traffic and have the tunneled traffic be accepted at calico nodes.","items":{"type":"string"},"type":"array"},"failsafeInboundHostPorts":{"description":"FailsafeInboundHostPorts is a list of UDP/TCP ports and CIDRs that Felix will allow incoming traffic to host endpoints on irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. For back-compatibility, if the protocol is not specified, it defaults to \"tcp\". If a CIDR is not specified, it will allow traffic from all addresses. To disable all inbound host ports, use the value none. The default value allows ssh access and DHCP. [Default: tcp:22, udp:68, tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666, tcp:6667]","items":{"description":"ProtoPort is combination of protocol, port, and CIDR. Protocol and port must be specified.","properties":{"net":{"type":"string"},"port":{"type":"integer"},"protocol":{"type":"string"}},"required":["port","protocol"],"type":"object"},"type":"array"},"failsafeOutboundHostPorts":{"description":"FailsafeOutboundHostPorts is a list of UDP/TCP ports and CIDRs that Felix will allow outgoing traffic from host endpoints to irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. For back-compatibility, if the protocol is not specified, it defaults to \"tcp\". If a CIDR is not specified, it will allow traffic from all addresses. To disable all outbound host ports, use the value none. The default value opens etcd's standard ports to ensure that Felix does not get cut off from etcd as well as allowing DHCP and DNS. [Default: tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666, tcp:6667, udp:53, udp:67]","items":{"description":"ProtoPort is combination of protocol, port, and CIDR. Protocol and port must be specified.","properties":{"net":{"type":"string"},"port":{"type":"integer"},"protocol":{"type":"string"}},"required":["port","protocol"],"type":"object"},"type":"array"},"featureDetectOverride":{"description":"FeatureDetectOverride is used to override the feature detection. Values are specified in a comma separated list with no spaces, example; \"SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=\". \"true\" or \"false\" will force the feature, empty or omitted values are auto-detected.","type":"string"},"floatingIPs":{"description":"FloatingIPs configures whether or not Felix will program floating IP addresses.","enum":["Enabled","Disabled"],"type":"string"},"genericXDPEnabled":{"description":"GenericXDPEnabled enables Generic XDP so network cards that don't support XDP offload or driver modes can use XDP. This is not recommended since it doesn't provide better performance than iptables. [Default: false]","type":"boolean"},"healthEnabled":{"type":"boolean"},"healthHost":{"type":"string"},"healthPort":{"type":"integer"},"interfaceExclude":{"description":"InterfaceExclude is a comma-separated list of interfaces that Felix should exclude when monitoring for host endpoints. The default value ensures that Felix ignores Kubernetes' IPVS dummy interface, which is used internally by kube-proxy. If you want to exclude multiple interface names using a single value, the list supports regular expressions. For regular expressions you must wrap the value with '/'. For example having values '/^kube/,veth1' will exclude all interfaces that begin with 'kube' and also the interface 'veth1'. [Default: kube-ipvs0]","type":"string"},"interfacePrefix":{"description":"InterfacePrefix is the interface name prefix that identifies workload endpoints and so distinguishes them from host endpoint interfaces. Note: in environments other than bare metal, the orchestrators configure this appropriately. For example our Kubernetes and Docker integrations set the 'cali' value, and our OpenStack integration sets the 'tap' value. [Default: cali]","type":"string"},"interfaceRefreshInterval":{"description":"InterfaceRefreshInterval is the period at which Felix rescans local interfaces to verify their state. The rescan can be disabled by setting the interval to 0.","type":"string"},"ipipEnabled":{"description":"IPIPEnabled overrides whether Felix should configure an IPIP interface on the host. Optional as Felix determines this based on the existing IP pools. [Default: nil (unset)]","type":"boolean"},"ipipMTU":{"description":"IPIPMTU is the MTU to set on the tunnel device. See Configuring MTU [Default: 1440]","type":"integer"},"ipsetsRefreshInterval":{"description":"IpsetsRefreshInterval is the period at which Felix re-checks all iptables state to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable iptables refresh. [Default: 90s]","type":"string"},"iptablesBackend":{"description":"IptablesBackend specifies which backend of iptables will be used. The default is legacy.","type":"string"},"iptablesFilterAllowAction":{"type":"string"},"iptablesLockFilePath":{"description":"IptablesLockFilePath is the location of the iptables lock file. You may need to change this if the lock file is not in its standard location (for example if you have mapped it into Felix's container at a different path). [Default: /run/xtables.lock]","type":"string"},"iptablesLockProbeInterval":{"description":"IptablesLockProbeInterval is the time that Felix will wait between attempts to acquire the iptables lock if it is not available. Lower values make Felix more responsive when the lock is contended, but use more CPU. [Default: 50ms]","type":"string"},"iptablesLockTimeout":{"description":"IptablesLockTimeout is the time that Felix will wait for the iptables lock, or 0, to disable. To use this feature, Felix must share the iptables lock file with all other processes that also take the lock. When running Felix inside a container, this requires the /run directory of the host to be mounted into the calico/node or calico/felix container. [Default: 0s disabled]","type":"string"},"iptablesMangleAllowAction":{"type":"string"},"iptablesMarkMask":{"description":"IptablesMarkMask is the mask that Felix selects its IPTables Mark bits from. Should be a 32 bit hexadecimal number with at least 8 bits set, none of which clash with any other mark bits in use on the system. [Default: 0xff000000]","format":"int32","type":"integer"},"iptablesNATOutgoingInterfaceFilter":{"type":"string"},"iptablesPostWriteCheckInterval":{"description":"IptablesPostWriteCheckInterval is the period after Felix has done a write to the dataplane that it schedules an extra read back in order to check the write was not clobbered by another process. This should only occur if another application on the system doesn't respect the iptables lock. [Default: 1s]","type":"string"},"iptablesRefreshInterval":{"description":"IptablesRefreshInterval is the period at which Felix re-checks the IP sets in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable IP sets refresh. Note: the default for this value is lower than the other refresh intervals as a workaround for a Linux kernel bug that was fixed in kernel version 4.11. If you are using v4.11 or greater you may want to set this to, a higher value to reduce Felix CPU usage. [Default: 10s]","type":"string"},"ipv6Support":{"description":"IPv6Support controls whether Felix enables support for IPv6 (if supported by the in-use dataplane).","type":"boolean"},"kubeNodePortRanges":{"description":"KubeNodePortRanges holds list of port ranges used for service node ports. Only used if felix detects kube-proxy running in ipvs mode. Felix uses these ranges to separate host and workload traffic. [Default: 30000:32767].","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"logDebugFilenameRegex":{"description":"LogDebugFilenameRegex controls which source code files have their Debug log output included in the logs. Only logs from files with names that match the given regular expression are included.  The filter only applies to Debug level logs.","type":"string"},"logFilePath":{"description":"LogFilePath is the full path to the Felix log. Set to none to disable file logging. [Default: /var/log/calico/felix.log]","type":"string"},"logPrefix":{"description":"LogPrefix is the log prefix that Felix uses when rendering LOG rules. [Default: calico-packet]","type":"string"},"logSeverityFile":{"description":"LogSeverityFile is the log severity above which logs are sent to the log file. [Default: Info]","type":"string"},"logSeverityScreen":{"description":"LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]","type":"string"},"logSeveritySys":{"description":"LogSeveritySys is the log severity above which logs are sent to the syslog. Set to None for no logging to syslog. [Default: Info]","type":"string"},"maxIpsetSize":{"type":"integer"},"metadataAddr":{"description":"MetadataAddr is the IP address or domain name of the server that can answer VM queries for cloud-init metadata. In OpenStack, this corresponds to the machine running nova-api (or in Ubuntu, nova-api-metadata). A value of none (case insensitive) means that Felix should not set up any NAT rule for the metadata path. [Default: 127.0.0.1]","type":"string"},"metadataPort":{"description":"MetadataPort is the port of the metadata server. This, combined with global.MetadataAddr (if not 'None'), is used to set up a NAT rule, from 169.254.169.254:80 to MetadataAddr:MetadataPort. In most cases this should not need to be changed [Default: 8775].","type":"integer"},"mtuIfacePattern":{"description":"MTUIfacePattern is a regular expression that controls which interfaces Felix should scan in order to calculate the host's MTU. This should not match workload interfaces (usually named cali...).","type":"string"},"natOutgoingAddress":{"description":"NATOutgoingAddress specifies an address to use when performing source NAT for traffic in a natOutgoing pool that is leaving the network. By default the address used is an address on the interface the traffic is leaving on (ie it uses the iptables MASQUERADE target)","type":"string"},"natPortRange":{"anyOf":[{"type":"integer"},{"type":"string"}],"description":"NATPortRange specifies the range of ports that is used for port mapping when doing outgoing NAT. When unset the default behavior of the network stack is used.","pattern":"^.*","x-kubernetes-int-or-string":true},"netlinkTimeout":{"type":"string"},"openstackRegion":{"description":"OpenstackRegion is the name of the region that a particular Felix belongs to. In a multi-region Calico/OpenStack deployment, this must be configured somehow for each Felix (here in the datamodel, or in felix.cfg or the environment on each compute node), and must match the [calico] openstack_region value configured in neutron.conf on each node. [Default: Empty]","type":"string"},"policySyncPathPrefix":{"description":"PolicySyncPathPrefix is used to by Felix to communicate policy changes to external services, like Application layer policy. [Default: Empty]","type":"string"},"prometheusGoMetricsEnabled":{"description":"PrometheusGoMetricsEnabled disables Go runtime metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]","type":"boolean"},"prometheusMetricsEnabled":{"description":"PrometheusMetricsEnabled enables the Prometheus metrics server in Felix if set to true. [Default: false]","type":"boolean"},"prometheusMetricsHost":{"description":"PrometheusMetricsHost is the host that the Prometheus metrics server should bind to. [Default: empty]","type":"string"},"prometheusMetricsPort":{"description":"PrometheusMetricsPort is the TCP port that the Prometheus metrics server should bind to. [Default: 9091]","type":"integer"},"prometheusProcessMetricsEnabled":{"description":"PrometheusProcessMetricsEnabled disables process metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]","type":"boolean"},"prometheusWireGuardMetricsEnabled":{"description":"PrometheusWireGuardMetricsEnabled disables wireguard metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]","type":"boolean"},"removeExternalRoutes":{"description":"Whether or not to remove device routes that have not been programmed by Felix. Disabling this will allow external applications to also add device routes. This is enabled by default which means we will remove externally added routes.","type":"boolean"},"reportingInterval":{"description":"ReportingInterval is the interval at which Felix reports its status into the datastore or 0 to disable. Must be non-zero in OpenStack deployments. [Default: 30s]","type":"string"},"reportingTTL":{"description":"ReportingTTL is the time-to-live setting for process-wide status reports. [Default: 90s]","type":"string"},"routeRefreshInterval":{"description":"RouteRefreshInterval is the period at which Felix re-checks the routes in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable route refresh. [Default: 90s]","type":"string"},"routeSource":{"description":"RouteSource configures where Felix gets its routing information. - WorkloadIPs: use workload endpoints to construct routes. - CalicoIPAM: the default - use IPAM data to construct routes.","type":"string"},"routeTableRange":{"description":"Deprecated in favor of RouteTableRanges. Calico programs additional Linux route tables for various purposes. RouteTableRange specifies the indices of the route tables that Calico should use.","properties":{"max":{"type":"integer"},"min":{"type":"integer"}},"required":["max","min"],"type":"object"},"routeTableRanges":{"description":"Calico programs additional Linux route tables for various purposes. RouteTableRanges specifies a set of table index ranges that Calico should use. Deprecates`RouteTableRange`, overrides `RouteTableRange`.","items":{"properties":{"max":{"type":"integer"},"min":{"type":"integer"}},"required":["max","min"],"type":"object"},"type":"array"},"serviceLoopPrevention":{"description":"When service IP advertisement is enabled, prevent routing loops to service IPs that are not in use, by dropping or rejecting packets that do not get DNAT'd by kube-proxy. Unless set to \"Disabled\", in which case such routing loops continue to be allowed. [Default: Drop]","type":"string"},"sidecarAccelerationEnabled":{"description":"SidecarAccelerationEnabled enables experimental sidecar acceleration [Default: false]","type":"boolean"},"usageReportingEnabled":{"description":"UsageReportingEnabled reports anonymous Calico version number and cluster size to projectcalico.org. Logs warnings returned by the usage server. For example, if a significant security vulnerability has been discovered in the version of Calico being used. [Default: true]","type":"boolean"},"usageReportingInitialDelay":{"description":"UsageReportingInitialDelay controls the minimum delay before Felix makes a report. [Default: 300s]","type":"string"},"usageReportingInterval":{"description":"UsageReportingInterval controls the interval at which Felix makes reports. [Default: 86400s]","type":"string"},"useInternalDataplaneDriver":{"description":"UseInternalDataplaneDriver, if true, Felix will use its internal dataplane programming logic.  If false, it will launch an external dataplane driver and communicate with it over protobuf.","type":"boolean"},"vxlanEnabled":{"description":"VXLANEnabled overrides whether Felix should create the VXLAN tunnel device for VXLAN networking. Optional as Felix determines this based on the existing IP pools. [Default: nil (unset)]","type":"boolean"},"vxlanMTU":{"description":"VXLANMTU is the MTU to set on the IPv4 VXLAN tunnel device. See Configuring MTU [Default: 1410]","type":"integer"},"vxlanMTUV6":{"description":"VXLANMTUV6 is the MTU to set on the IPv6 VXLAN tunnel device. See Configuring MTU [Default: 1390]","type":"integer"},"vxlanPort":{"type":"integer"},"vxlanVNI":{"type":"integer"},"wireguardEnabled":{"description":"WireguardEnabled controls whether Wireguard is enabled. [Default: false]","type":"boolean"},"wireguardHostEncryptionEnabled":{"description":"WireguardHostEncryptionEnabled controls whether Wireguard host-to-host encryption is enabled. [Default: false]","type":"boolean"},"wireguardInterfaceName":{"description":"WireguardInterfaceName specifies the name to use for the Wireguard interface. [Default: wg.calico]","type":"string"},"wireguardKeepAlive":{"description":"WireguardKeepAlive controls Wireguard PersistentKeepalive option. Set 0 to disable. [Default: 0]","type":"string"},"wireguardListeningPort":{"description":"WireguardListeningPort controls the listening port used by Wireguard. [Default: 51820]","type":"integer"},"wireguardMTU":{"description":"WireguardMTU controls the MTU on the Wireguard interface. See Configuring MTU [Default: 1420]","type":"integer"},"wireguardRoutingRulePriority":{"description":"WireguardRoutingRulePriority controls the priority value to use for the Wireguard routing rule. [Default: 99]","type":"integer"},"workloadSourceSpoofing":{"description":"WorkloadSourceSpoofing controls whether pods can use the allowedSourcePrefixes annotation to send traffic with a source IP address that is not theirs. This is disabled by default. When set to \"Any\", pods can request any prefix.","type":"string"},"xdpEnabled":{"description":"XDPEnabled enables XDP acceleration for suitable untracked incoming deny rules. [Default: true]","type":"boolean"},"xdpRefreshInterval":{"description":"XDPRefreshInterval is the period at which Felix re-checks all XDP state to ensure that no other process has accidentally broken Calico's BPF maps or attached programs. Set to 0 to disable XDP refresh. [Default: 90s]","type":"string"}},"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: felixconfigurations.crd.projectcalico.org
    resourceVersion: "88"
    uid: 2233ab02-86ec-4040-adeb-2a013b8700a7
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: FelixConfiguration
      listKind: FelixConfigurationList
      plural: felixconfigurations
      singular: felixconfiguration
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: Felix Configuration contains the configuration for Felix.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: FelixConfigurationSpec contains the values of the Felix
                configuration.
              properties:
                allowIPIPPacketsFromWorkloads:
                  description: 'AllowIPIPPacketsFromWorkloads controls whether Felix
                    will add a rule to drop IPIP encapsulated traffic from workloads
                    [Default: false]'
                  type: boolean
                allowVXLANPacketsFromWorkloads:
                  description: 'AllowVXLANPacketsFromWorkloads controls whether Felix
                    will add a rule to drop VXLAN encapsulated traffic from workloads
                    [Default: false]'
                  type: boolean
                awsSrcDstCheck:
                  description: 'Set source-destination-check on AWS EC2 instances.
                    Accepted value must be one of "DoNothing", "Enable" or "Disable".
                    [Default: DoNothing]'
                  enum:
                  - DoNothing
                  - Enable
                  - Disable
                  type: string
                bpfConnectTimeLoadBalancingEnabled:
                  description: 'BPFConnectTimeLoadBalancingEnabled when in BPF mode,
                    controls whether Felix installs the connection-time load balancer.  The
                    connect-time load balancer is required for the host to be able
                    to reach Kubernetes services and it improves the performance of
                    pod-to-service connections.  The only reason to disable it is
                    for debugging purposes.  [Default: true]'
                  type: boolean
                bpfDataIfacePattern:
                  description: BPFDataIfacePattern is a regular expression that controls
                    which interfaces Felix should attach BPF programs to in order
                    to catch traffic to/from the network.  This needs to match the
                    interfaces that Calico workload traffic flows over as well as
                    any interfaces that handle incoming traffic to nodeports and services
                    from outside the cluster.  It should not match the workload interfaces
                    (usually named cali...).
                  type: string
                bpfDisableUnprivileged:
                  description: 'BPFDisableUnprivileged, if enabled, Felix sets the
                    kernel.unprivileged_bpf_disabled sysctl to disable unprivileged
                    use of BPF.  This ensures that unprivileged users cannot access
                    Calico''s BPF maps and cannot insert their own BPF programs to
                    interfere with Calico''s. [Default: true]'
                  type: boolean
                bpfEnabled:
                  description: 'BPFEnabled, if enabled Felix will use the BPF dataplane.
                    [Default: false]'
                  type: boolean
                bpfEnforceRPF:
                  description: 'BPFEnforceRPF enforce strict RPF on all interfaces
                    with BPF programs regardless of what is the per-interfaces or
                    global setting. Possible values are Disabled or Strict. [Default:
                    Strict]'
                  type: string
                bpfExtToServiceConnmark:
                  description: 'BPFExtToServiceConnmark in BPF mode, control a 32bit
                    mark that is set on connections from an external client to a local
                    service. This mark allows us to control how packets of that connection
                    are routed within the host and how is routing interpreted by RPF
                    check. [Default: 0]'
                  type: integer
                bpfExternalServiceMode:
                  description: 'BPFExternalServiceMode in BPF mode, controls how connections
                    from outside the cluster to services (node ports and cluster IPs)
                    are forwarded to remote workloads.  If set to "Tunnel" then both
                    request and response traffic is tunneled to the remote node.  If
                    set to "DSR", the request traffic is tunneled but the response
                    traffic is sent directly from the remote node.  In "DSR" mode,
                    the remote node appears to use the IP of the ingress node; this
                    requires a permissive L2 network.  [Default: Tunnel]'
                  type: string
                bpfKubeProxyEndpointSlicesEnabled:
                  description: BPFKubeProxyEndpointSlicesEnabled in BPF mode, controls
                    whether Felix's embedded kube-proxy accepts EndpointSlices or
                    not.
                  type: boolean
                bpfKubeProxyIptablesCleanupEnabled:
                  description: 'BPFKubeProxyIptablesCleanupEnabled, if enabled in
                    BPF mode, Felix will proactively clean up the upstream Kubernetes
                    kube-proxy''s iptables chains.  Should only be enabled if kube-proxy
                    is not running.  [Default: true]'
                  type: boolean
                bpfKubeProxyMinSyncPeriod:
                  description: 'BPFKubeProxyMinSyncPeriod, in BPF mode, controls the
                    minimum time between updates to the dataplane for Felix''s embedded
                    kube-proxy.  Lower values give reduced set-up latency.  Higher
                    values reduce Felix CPU usage by batching up more work.  [Default:
                    1s]'
                  type: string
                bpfLogLevel:
                  description: 'BPFLogLevel controls the log level of the BPF programs
                    when in BPF dataplane mode.  One of "Off", "Info", or "Debug".  The
                    logs are emitted to the BPF trace pipe, accessible with the command
                    `tc exec bpf debug`. [Default: Off].'
                  type: string
                bpfMapSizeConntrack:
                  description: 'BPFMapSizeConntrack sets the size for the conntrack
                    map.  This map must be large enough to hold an entry for each
                    active connection.  Warning: changing the size of the conntrack
                    map can cause disruption.'
                  type: integer
                bpfMapSizeIPSets:
                  description: BPFMapSizeIPSets sets the size for ipsets map.  The
                    IP sets map must be large enough to hold an entry for each endpoint
                    matched by every selector in the source/destination matches in
                    network policy.  Selectors such as "all()" can result in large
                    numbers of entries (one entry per endpoint in that case).
                  type: integer
                bpfMapSizeNATAffinity:
                  type: integer
                bpfMapSizeNATBackend:
                  description: BPFMapSizeNATBackend sets the size for nat back end
                    map. This is the total number of endpoints. This is mostly more
                    than the size of the number of services.
                  type: integer
                bpfMapSizeNATFrontend:
                  description: BPFMapSizeNATFrontend sets the size for nat front end
                    map. FrontendMap should be large enough to hold an entry for each
                    nodeport, external IP and each port in each service.
                  type: integer
                bpfMapSizeRoute:
                  description: BPFMapSizeRoute sets the size for the routes map.  The
                    routes map should be large enough to hold one entry per workload
                    and a handful of entries per host (enough to cover its own IPs
                    and tunnel IPs).
                  type: integer
                bpfPSNATPorts:
                  anyOf:
                  - type: integer
                  - type: string
                  description: 'BPFPSNATPorts sets the range from which we randomly
                    pick a port if there is a source port collision. This should be
                    within the ephemeral range as defined by RFC 6056 (1024–65535)
                    and preferably outside the  ephemeral ranges used by common operating
                    systems. Linux uses 32768–60999, while others mostly use the IANA
                    defined range 49152–65535. It is not necessarily a problem if
                    this range overlaps with the operating systems. Both ends of the
                    range are inclusive. [Default: 20000:29999]'
                  pattern: ^.*
                  x-kubernetes-int-or-string: true
                chainInsertMode:
                  description: 'ChainInsertMode controls whether Felix hooks the kernel''s
                    top-level iptables chains by inserting a rule at the top of the
                    chain or by appending a rule at the bottom. insert is the safe
                    default since it prevents Calico''s rules from being bypassed.
                    If you switch to append mode, be sure that the other rules in
                    the chains signal acceptance by falling through to the Calico
                    rules, otherwise the Calico policy will be bypassed. [Default:
                    insert]'
                  type: string
                dataplaneDriver:
                  description: DataplaneDriver filename of the external dataplane
                    driver to use.  Only used if UseInternalDataplaneDriver is set
                    to false.
                  type: string
                dataplaneWatchdogTimeout:
                  description: 'DataplaneWatchdogTimeout is the readiness/liveness
                    timeout used for Felix''s (internal) dataplane driver. Increase
                    this value if you experience spurious non-ready or non-live events
                    when Felix is under heavy load. Decrease the value to get felix
                    to report non-live or non-ready more quickly. [Default: 90s]'
                  type: string
                debugDisableLogDropping:
                  type: boolean
                debugMemoryProfilePath:
                  type: string
                debugSimulateCalcGraphHangAfter:
                  type: string
                debugSimulateDataplaneHangAfter:
                  type: string
                defaultEndpointToHostAction:
                  description: 'DefaultEndpointToHostAction controls what happens
                    to traffic that goes from a workload endpoint to the host itself
                    (after the traffic hits the endpoint egress policy). By default
                    Calico blocks traffic from workload endpoints to the host itself
                    with an iptables "DROP" action. If you want to allow some or all
                    traffic from endpoint to host, set this parameter to RETURN or
                    ACCEPT. Use RETURN if you have your own rules in the iptables
                    "INPUT" chain; Calico will insert its rules at the top of that
                    chain, then "RETURN" packets to the "INPUT" chain once it has
                    completed processing workload endpoint egress policy. Use ACCEPT
                    to unconditionally accept packets from workloads after processing
                    workload endpoint egress policy. [Default: Drop]'
                  type: string
                deviceRouteProtocol:
                  description: This defines the route protocol added to programmed
                    device routes, by default this will be RTPROT_BOOT when left blank.
                  type: integer
                deviceRouteSourceAddress:
                  description: This is the IPv4 source address to use on programmed
                    device routes. By default the source address is left blank, leaving
                    the kernel to choose the source address used.
                  type: string
                deviceRouteSourceAddressIPv6:
                  description: This is the IPv6 source address to use on programmed
                    device routes. By default the source address is left blank, leaving
                    the kernel to choose the source address used.
                  type: string
                disableConntrackInvalidCheck:
                  type: boolean
                endpointReportingDelay:
                  type: string
                endpointReportingEnabled:
                  type: boolean
                externalNodesList:
                  description: ExternalNodesCIDRList is a list of CIDR's of external-non-calico-nodes
                    which may source tunnel traffic and have the tunneled traffic
                    be accepted at calico nodes.
                  items:
                    type: string
                  type: array
                failsafeInboundHostPorts:
                  description: 'FailsafeInboundHostPorts is a list of UDP/TCP ports
                    and CIDRs that Felix will allow incoming traffic to host endpoints
                    on irrespective of the security policy. This is useful to avoid
                    accidentally cutting off a host with incorrect configuration.
                    For back-compatibility, if the protocol is not specified, it defaults
                    to "tcp". If a CIDR is not specified, it will allow traffic from
                    all addresses. To disable all inbound host ports, use the value
                    none. The default value allows ssh access and DHCP. [Default:
                    tcp:22, udp:68, tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666,
                    tcp:6667]'
                  items:
                    description: ProtoPort is combination of protocol, port, and CIDR.
                      Protocol and port must be specified.
                    properties:
                      net:
                        type: string
                      port:
                        type: integer
                      protocol:
                        type: string
                    required:
                    - port
                    - protocol
                    type: object
                  type: array
                failsafeOutboundHostPorts:
                  description: 'FailsafeOutboundHostPorts is a list of UDP/TCP ports
                    and CIDRs that Felix will allow outgoing traffic from host endpoints
                    to irrespective of the security policy. This is useful to avoid
                    accidentally cutting off a host with incorrect configuration.
                    For back-compatibility, if the protocol is not specified, it defaults
                    to "tcp". If a CIDR is not specified, it will allow traffic from
                    all addresses. To disable all outbound host ports, use the value
                    none. The default value opens etcd''s standard ports to ensure
                    that Felix does not get cut off from etcd as well as allowing
                    DHCP and DNS. [Default: tcp:179, tcp:2379, tcp:2380, tcp:6443,
                    tcp:6666, tcp:6667, udp:53, udp:67]'
                  items:
                    description: ProtoPort is combination of protocol, port, and CIDR.
                      Protocol and port must be specified.
                    properties:
                      net:
                        type: string
                      port:
                        type: integer
                      protocol:
                        type: string
                    required:
                    - port
                    - protocol
                    type: object
                  type: array
                featureDetectOverride:
                  description: FeatureDetectOverride is used to override the feature
                    detection. Values are specified in a comma separated list with
                    no spaces, example; "SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=".
                    "true" or "false" will force the feature, empty or omitted values
                    are auto-detected.
                  type: string
                floatingIPs:
                  description: FloatingIPs configures whether or not Felix will program
                    floating IP addresses.
                  enum:
                  - Enabled
                  - Disabled
                  type: string
                genericXDPEnabled:
                  description: 'GenericXDPEnabled enables Generic XDP so network cards
                    that don''t support XDP offload or driver modes can use XDP. This
                    is not recommended since it doesn''t provide better performance
                    than iptables. [Default: false]'
                  type: boolean
                healthEnabled:
                  type: boolean
                healthHost:
                  type: string
                healthPort:
                  type: integer
                interfaceExclude:
                  description: 'InterfaceExclude is a comma-separated list of interfaces
                    that Felix should exclude when monitoring for host endpoints.
                    The default value ensures that Felix ignores Kubernetes'' IPVS
                    dummy interface, which is used internally by kube-proxy. If you
                    want to exclude multiple interface names using a single value,
                    the list supports regular expressions. For regular expressions
                    you must wrap the value with ''/''. For example having values
                    ''/^kube/,veth1'' will exclude all interfaces that begin with
                    ''kube'' and also the interface ''veth1''. [Default: kube-ipvs0]'
                  type: string
                interfacePrefix:
                  description: 'InterfacePrefix is the interface name prefix that
                    identifies workload endpoints and so distinguishes them from host
                    endpoint interfaces. Note: in environments other than bare metal,
                    the orchestrators configure this appropriately. For example our
                    Kubernetes and Docker integrations set the ''cali'' value, and
                    our OpenStack integration sets the ''tap'' value. [Default: cali]'
                  type: string
                interfaceRefreshInterval:
                  description: InterfaceRefreshInterval is the period at which Felix
                    rescans local interfaces to verify their state. The rescan can
                    be disabled by setting the interval to 0.
                  type: string
                ipipEnabled:
                  description: 'IPIPEnabled overrides whether Felix should configure
                    an IPIP interface on the host. Optional as Felix determines this
                    based on the existing IP pools. [Default: nil (unset)]'
                  type: boolean
                ipipMTU:
                  description: 'IPIPMTU is the MTU to set on the tunnel device. See
                    Configuring MTU [Default: 1440]'
                  type: integer
                ipsetsRefreshInterval:
                  description: 'IpsetsRefreshInterval is the period at which Felix
                    re-checks all iptables state to ensure that no other process has
                    accidentally broken Calico''s rules. Set to 0 to disable iptables
                    refresh. [Default: 90s]'
                  type: string
                iptablesBackend:
                  description: IptablesBackend specifies which backend of iptables
                    will be used. The default is legacy.
                  type: string
                iptablesFilterAllowAction:
                  type: string
                iptablesLockFilePath:
                  description: 'IptablesLockFilePath is the location of the iptables
                    lock file. You may need to change this if the lock file is not
                    in its standard location (for example if you have mapped it into
                    Felix''s container at a different path). [Default: /run/xtables.lock]'
                  type: string
                iptablesLockProbeInterval:
                  description: 'IptablesLockProbeInterval is the time that Felix will
                    wait between attempts to acquire the iptables lock if it is not
                    available. Lower values make Felix more responsive when the lock
                    is contended, but use more CPU. [Default: 50ms]'
                  type: string
                iptablesLockTimeout:
                  description: 'IptablesLockTimeout is the time that Felix will wait
                    for the iptables lock, or 0, to disable. To use this feature,
                    Felix must share the iptables lock file with all other processes
                    that also take the lock. When running Felix inside a container,
                    this requires the /run directory of the host to be mounted into
                    the calico/node or calico/felix container. [Default: 0s disabled]'
                  type: string
                iptablesMangleAllowAction:
                  type: string
                iptablesMarkMask:
                  description: 'IptablesMarkMask is the mask that Felix selects its
                    IPTables Mark bits from. Should be a 32 bit hexadecimal number
                    with at least 8 bits set, none of which clash with any other mark
                    bits in use on the system. [Default: 0xff000000]'
                  format: int32
                  type: integer
                iptablesNATOutgoingInterfaceFilter:
                  type: string
                iptablesPostWriteCheckInterval:
                  description: 'IptablesPostWriteCheckInterval is the period after
                    Felix has done a write to the dataplane that it schedules an extra
                    read back in order to check the write was not clobbered by another
                    process. This should only occur if another application on the
                    system doesn''t respect the iptables lock. [Default: 1s]'
                  type: string
                iptablesRefreshInterval:
                  description: 'IptablesRefreshInterval is the period at which Felix
                    re-checks the IP sets in the dataplane to ensure that no other
                    process has accidentally broken Calico''s rules. Set to 0 to disable
                    IP sets refresh. Note: the default for this value is lower than
                    the other refresh intervals as a workaround for a Linux kernel
                    bug that was fixed in kernel version 4.11. If you are using v4.11
                    or greater you may want to set this to, a higher value to reduce
                    Felix CPU usage. [Default: 10s]'
                  type: string
                ipv6Support:
                  description: IPv6Support controls whether Felix enables support
                    for IPv6 (if supported by the in-use dataplane).
                  type: boolean
                kubeNodePortRanges:
                  description: 'KubeNodePortRanges holds list of port ranges used
                    for service node ports. Only used if felix detects kube-proxy
                    running in ipvs mode. Felix uses these ranges to separate host
                    and workload traffic. [Default: 30000:32767].'
                  items:
                    anyOf:
                    - type: integer
                    - type: string
                    pattern: ^.*
                    x-kubernetes-int-or-string: true
                  type: array
                logDebugFilenameRegex:
                  description: LogDebugFilenameRegex controls which source code files
                    have their Debug log output included in the logs. Only logs from
                    files with names that match the given regular expression are included.  The
                    filter only applies to Debug level logs.
                  type: string
                logFilePath:
                  description: 'LogFilePath is the full path to the Felix log. Set
                    to none to disable file logging. [Default: /var/log/calico/felix.log]'
                  type: string
                logPrefix:
                  description: 'LogPrefix is the log prefix that Felix uses when rendering
                    LOG rules. [Default: calico-packet]'
                  type: string
                logSeverityFile:
                  description: 'LogSeverityFile is the log severity above which logs
                    are sent to the log file. [Default: Info]'
                  type: string
                logSeverityScreen:
                  description: 'LogSeverityScreen is the log severity above which
                    logs are sent to the stdout. [Default: Info]'
                  type: string
                logSeveritySys:
                  description: 'LogSeveritySys is the log severity above which logs
                    are sent to the syslog. Set to None for no logging to syslog.
                    [Default: Info]'
                  type: string
                maxIpsetSize:
                  type: integer
                metadataAddr:
                  description: 'MetadataAddr is the IP address or domain name of the
                    server that can answer VM queries for cloud-init metadata. In
                    OpenStack, this corresponds to the machine running nova-api (or
                    in Ubuntu, nova-api-metadata). A value of none (case insensitive)
                    means that Felix should not set up any NAT rule for the metadata
                    path. [Default: 127.0.0.1]'
                  type: string
                metadataPort:
                  description: 'MetadataPort is the port of the metadata server. This,
                    combined with global.MetadataAddr (if not ''None''), is used to
                    set up a NAT rule, from 169.254.169.254:80 to MetadataAddr:MetadataPort.
                    In most cases this should not need to be changed [Default: 8775].'
                  type: integer
                mtuIfacePattern:
                  description: MTUIfacePattern is a regular expression that controls
                    which interfaces Felix should scan in order to calculate the host's
                    MTU. This should not match workload interfaces (usually named
                    cali...).
                  type: string
                natOutgoingAddress:
                  description: NATOutgoingAddress specifies an address to use when
                    performing source NAT for traffic in a natOutgoing pool that is
                    leaving the network. By default the address used is an address
                    on the interface the traffic is leaving on (ie it uses the iptables
                    MASQUERADE target)
                  type: string
                natPortRange:
                  anyOf:
                  - type: integer
                  - type: string
                  description: NATPortRange specifies the range of ports that is used
                    for port mapping when doing outgoing NAT. When unset the default
                    behavior of the network stack is used.
                  pattern: ^.*
                  x-kubernetes-int-or-string: true
                netlinkTimeout:
                  type: string
                openstackRegion:
                  description: 'OpenstackRegion is the name of the region that a particular
                    Felix belongs to. In a multi-region Calico/OpenStack deployment,
                    this must be configured somehow for each Felix (here in the datamodel,
                    or in felix.cfg or the environment on each compute node), and
                    must match the [calico] openstack_region value configured in neutron.conf
                    on each node. [Default: Empty]'
                  type: string
                policySyncPathPrefix:
                  description: 'PolicySyncPathPrefix is used to by Felix to communicate
                    policy changes to external services, like Application layer policy.
                    [Default: Empty]'
                  type: string
                prometheusGoMetricsEnabled:
                  description: 'PrometheusGoMetricsEnabled disables Go runtime metrics
                    collection, which the Prometheus client does by default, when
                    set to false. This reduces the number of metrics reported, reducing
                    Prometheus load. [Default: true]'
                  type: boolean
                prometheusMetricsEnabled:
                  description: 'PrometheusMetricsEnabled enables the Prometheus metrics
                    server in Felix if set to true. [Default: false]'
                  type: boolean
                prometheusMetricsHost:
                  description: 'PrometheusMetricsHost is the host that the Prometheus
                    metrics server should bind to. [Default: empty]'
                  type: string
                prometheusMetricsPort:
                  description: 'PrometheusMetricsPort is the TCP port that the Prometheus
                    metrics server should bind to. [Default: 9091]'
                  type: integer
                prometheusProcessMetricsEnabled:
                  description: 'PrometheusProcessMetricsEnabled disables process metrics
                    collection, which the Prometheus client does by default, when
                    set to false. This reduces the number of metrics reported, reducing
                    Prometheus load. [Default: true]'
                  type: boolean
                prometheusWireGuardMetricsEnabled:
                  description: 'PrometheusWireGuardMetricsEnabled disables wireguard
                    metrics collection, which the Prometheus client does by default,
                    when set to false. This reduces the number of metrics reported,
                    reducing Prometheus load. [Default: true]'
                  type: boolean
                removeExternalRoutes:
                  description: Whether or not to remove device routes that have not
                    been programmed by Felix. Disabling this will allow external applications
                    to also add device routes. This is enabled by default which means
                    we will remove externally added routes.
                  type: boolean
                reportingInterval:
                  description: 'ReportingInterval is the interval at which Felix reports
                    its status into the datastore or 0 to disable. Must be non-zero
                    in OpenStack deployments. [Default: 30s]'
                  type: string
                reportingTTL:
                  description: 'ReportingTTL is the time-to-live setting for process-wide
                    status reports. [Default: 90s]'
                  type: string
                routeRefreshInterval:
                  description: 'RouteRefreshInterval is the period at which Felix
                    re-checks the routes in the dataplane to ensure that no other
                    process has accidentally broken Calico''s rules. Set to 0 to disable
                    route refresh. [Default: 90s]'
                  type: string
                routeSource:
                  description: 'RouteSource configures where Felix gets its routing
                    information. - WorkloadIPs: use workload endpoints to construct
                    routes. - CalicoIPAM: the default - use IPAM data to construct
                    routes.'
                  type: string
                routeTableRange:
                  description: Deprecated in favor of RouteTableRanges. Calico programs
                    additional Linux route tables for various purposes. RouteTableRange
                    specifies the indices of the route tables that Calico should use.
                  properties:
                    max:
                      type: integer
                    min:
                      type: integer
                  required:
                  - max
                  - min
                  type: object
                routeTableRanges:
                  description: Calico programs additional Linux route tables for various
                    purposes. RouteTableRanges specifies a set of table index ranges
                    that Calico should use. Deprecates`RouteTableRange`, overrides
                    `RouteTableRange`.
                  items:
                    properties:
                      max:
                        type: integer
                      min:
                        type: integer
                    required:
                    - max
                    - min
                    type: object
                  type: array
                serviceLoopPrevention:
                  description: 'When service IP advertisement is enabled, prevent
                    routing loops to service IPs that are not in use, by dropping
                    or rejecting packets that do not get DNAT''d by kube-proxy. Unless
                    set to "Disabled", in which case such routing loops continue to
                    be allowed. [Default: Drop]'
                  type: string
                sidecarAccelerationEnabled:
                  description: 'SidecarAccelerationEnabled enables experimental sidecar
                    acceleration [Default: false]'
                  type: boolean
                usageReportingEnabled:
                  description: 'UsageReportingEnabled reports anonymous Calico version
                    number and cluster size to projectcalico.org. Logs warnings returned
                    by the usage server. For example, if a significant security vulnerability
                    has been discovered in the version of Calico being used. [Default:
                    true]'
                  type: boolean
                usageReportingInitialDelay:
                  description: 'UsageReportingInitialDelay controls the minimum delay
                    before Felix makes a report. [Default: 300s]'
                  type: string
                usageReportingInterval:
                  description: 'UsageReportingInterval controls the interval at which
                    Felix makes reports. [Default: 86400s]'
                  type: string
                useInternalDataplaneDriver:
                  description: UseInternalDataplaneDriver, if true, Felix will use
                    its internal dataplane programming logic.  If false, it will launch
                    an external dataplane driver and communicate with it over protobuf.
                  type: boolean
                vxlanEnabled:
                  description: 'VXLANEnabled overrides whether Felix should create
                    the VXLAN tunnel device for VXLAN networking. Optional as Felix
                    determines this based on the existing IP pools. [Default: nil
                    (unset)]'
                  type: boolean
                vxlanMTU:
                  description: 'VXLANMTU is the MTU to set on the IPv4 VXLAN tunnel
                    device. See Configuring MTU [Default: 1410]'
                  type: integer
                vxlanMTUV6:
                  description: 'VXLANMTUV6 is the MTU to set on the IPv6 VXLAN tunnel
                    device. See Configuring MTU [Default: 1390]'
                  type: integer
                vxlanPort:
                  type: integer
                vxlanVNI:
                  type: integer
                wireguardEnabled:
                  description: 'WireguardEnabled controls whether Wireguard is enabled.
                    [Default: false]'
                  type: boolean
                wireguardHostEncryptionEnabled:
                  description: 'WireguardHostEncryptionEnabled controls whether Wireguard
                    host-to-host encryption is enabled. [Default: false]'
                  type: boolean
                wireguardInterfaceName:
                  description: 'WireguardInterfaceName specifies the name to use for
                    the Wireguard interface. [Default: wg.calico]'
                  type: string
                wireguardKeepAlive:
                  description: 'WireguardKeepAlive controls Wireguard PersistentKeepalive
                    option. Set 0 to disable. [Default: 0]'
                  type: string
                wireguardListeningPort:
                  description: 'WireguardListeningPort controls the listening port
                    used by Wireguard. [Default: 51820]'
                  type: integer
                wireguardMTU:
                  description: 'WireguardMTU controls the MTU on the Wireguard interface.
                    See Configuring MTU [Default: 1420]'
                  type: integer
                wireguardRoutingRulePriority:
                  description: 'WireguardRoutingRulePriority controls the priority
                    value to use for the Wireguard routing rule. [Default: 99]'
                  type: integer
                workloadSourceSpoofing:
                  description: WorkloadSourceSpoofing controls whether pods can use
                    the allowedSourcePrefixes annotation to send traffic with a source
                    IP address that is not theirs. This is disabled by default. When
                    set to "Any", pods can request any prefix.
                  type: string
                xdpEnabled:
                  description: 'XDPEnabled enables XDP acceleration for suitable untracked
                    incoming deny rules. [Default: true]'
                  type: boolean
                xdpRefreshInterval:
                  description: 'XDPRefreshInterval is the period at which Felix re-checks
                    all XDP state to ensure that no other process has accidentally
                    broken Calico''s BPF maps or attached programs. Set to 0 to disable
                    XDP refresh. [Default: 90s]'
                  type: string
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: FelixConfiguration
      listKind: FelixConfigurationList
      plural: felixconfigurations
      singular: felixconfiguration
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"globalnetworkpolicies.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"GlobalNetworkPolicy","listKind":"GlobalNetworkPolicyList","plural":"globalnetworkpolicies","singular":"globalnetworkpolicy"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"properties":{"applyOnForward":{"description":"ApplyOnForward indicates to apply the rules in this policy on forward traffic.","type":"boolean"},"doNotTrack":{"description":"DoNotTrack indicates whether packets matched by the rules in this policy should go through the data plane's connection tracking, such as Linux conntrack.  If True, the rules in this policy are applied before any data plane connection tracking, and packets allowed by this policy are marked as not to be tracked.","type":"boolean"},"egress":{"description":"The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.","items":{"description":"A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching. \n Each positive match criteria has a negated version, prefixed with \"Not\". All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.","properties":{"action":{"type":"string"},"destination":{"description":"Destination contains the match criteria that apply to destination entity.","properties":{"namespaceSelector":{"description":"NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.","type":"string"},"nets":{"description":"Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.","items":{"type":"string"},"type":"array"},"notNets":{"description":"NotNets is the negated version of the Nets field.","items":{"type":"string"},"type":"array"},"notPorts":{"description":"NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"notSelector":{"description":"NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.","type":"string"},"ports":{"description":"Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"selector":{"description":"Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.","type":"string"},"serviceAccounts":{"description":"ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.","properties":{"names":{"description":"Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.","items":{"type":"string"},"type":"array"},"selector":{"description":"Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.","type":"string"}},"type":"object"},"services":{"description":"Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.","properties":{"name":{"description":"Name specifies the name of a Kubernetes Service to match.","type":"string"},"namespace":{"description":"Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.","type":"string"}},"type":"object"}},"type":"object"},"http":{"description":"HTTP contains match criteria that apply to HTTP requests.","properties":{"methods":{"description":"Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.","items":{"type":"string"},"type":"array"},"paths":{"description":"Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.","items":{"description":"HTTPPath specifies an HTTP path to match. It may be either of the form: exact: \u003cpath\u003e: which matches the path exactly or prefix: \u003cpath-prefix\u003e: which matches the path prefix","properties":{"exact":{"type":"string"},"prefix":{"type":"string"}},"type":"object"},"type":"array"}},"type":"object"},"icmp":{"description":"ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\".","properties":{"code":{"description":"Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.","type":"integer"},"type":{"description":"Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).","type":"integer"}},"type":"object"},"ipVersion":{"description":"IPVersion is an optional field that restricts the rule to only match a specific IP version.","type":"integer"},"metadata":{"description":"Metadata contains additional information for this rule","properties":{"annotations":{"additionalProperties":{"type":"string"},"description":"Annotations is a set of key value pairs that give extra information about the rule","type":"object"}},"type":"object"},"notICMP":{"description":"NotICMP is the negated version of the ICMP field.","properties":{"code":{"description":"Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.","type":"integer"},"type":{"description":"Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).","type":"integer"}},"type":"object"},"notProtocol":{"anyOf":[{"type":"integer"},{"type":"string"}],"description":"NotProtocol is the negated version of the Protocol field.","pattern":"^.*","x-kubernetes-int-or-string":true},"protocol":{"anyOf":[{"type":"integer"},{"type":"string"}],"description":"Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). \n Must be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\" or an integer in the range 1-255.","pattern":"^.*","x-kubernetes-int-or-string":true},"source":{"description":"Source contains the match criteria that apply to source entity.","properties":{"namespaceSelector":{"description":"NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.","type":"string"},"nets":{"description":"Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.","items":{"type":"string"},"type":"array"},"notNets":{"description":"NotNets is the negated version of the Nets field.","items":{"type":"string"},"type":"array"},"notPorts":{"description":"NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"notSelector":{"description":"NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.","type":"string"},"ports":{"description":"Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"selector":{"description":"Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.","type":"string"},"serviceAccounts":{"description":"ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.","properties":{"names":{"description":"Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.","items":{"type":"string"},"type":"array"},"selector":{"description":"Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.","type":"string"}},"type":"object"},"services":{"description":"Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.","properties":{"name":{"description":"Name specifies the name of a Kubernetes Service to match.","type":"string"},"namespace":{"description":"Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.","type":"string"}},"type":"object"}},"type":"object"}},"required":["action"],"type":"object"},"type":"array"},"ingress":{"description":"The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.","items":{"description":"A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching. \n Each positive match criteria has a negated version, prefixed with \"Not\". All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.","properties":{"action":{"type":"string"},"destination":{"description":"Destination contains the match criteria that apply to destination entity.","properties":{"namespaceSelector":{"description":"NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.","type":"string"},"nets":{"description":"Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.","items":{"type":"string"},"type":"array"},"notNets":{"description":"NotNets is the negated version of the Nets field.","items":{"type":"string"},"type":"array"},"notPorts":{"description":"NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"notSelector":{"description":"NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.","type":"string"},"ports":{"description":"Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"selector":{"description":"Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.","type":"string"},"serviceAccounts":{"description":"ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.","properties":{"names":{"description":"Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.","items":{"type":"string"},"type":"array"},"selector":{"description":"Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.","type":"string"}},"type":"object"},"services":{"description":"Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.","properties":{"name":{"description":"Name specifies the name of a Kubernetes Service to match.","type":"string"},"namespace":{"description":"Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.","type":"string"}},"type":"object"}},"type":"object"},"http":{"description":"HTTP contains match criteria that apply to HTTP requests.","properties":{"methods":{"description":"Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.","items":{"type":"string"},"type":"array"},"paths":{"description":"Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.","items":{"description":"HTTPPath specifies an HTTP path to match. It may be either of the form: exact: \u003cpath\u003e: which matches the path exactly or prefix: \u003cpath-prefix\u003e: which matches the path prefix","properties":{"exact":{"type":"string"},"prefix":{"type":"string"}},"type":"object"},"type":"array"}},"type":"object"},"icmp":{"description":"ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\".","properties":{"code":{"description":"Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.","type":"integer"},"type":{"description":"Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).","type":"integer"}},"type":"object"},"ipVersion":{"description":"IPVersion is an optional field that restricts the rule to only match a specific IP version.","type":"integer"},"metadata":{"description":"Metadata contains additional information for this rule","properties":{"annotations":{"additionalProperties":{"type":"string"},"description":"Annotations is a set of key value pairs that give extra information about the rule","type":"object"}},"type":"object"},"notICMP":{"description":"NotICMP is the negated version of the ICMP field.","properties":{"code":{"description":"Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.","type":"integer"},"type":{"description":"Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).","type":"integer"}},"type":"object"},"notProtocol":{"anyOf":[{"type":"integer"},{"type":"string"}],"description":"NotProtocol is the negated version of the Protocol field.","pattern":"^.*","x-kubernetes-int-or-string":true},"protocol":{"anyOf":[{"type":"integer"},{"type":"string"}],"description":"Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). \n Must be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\" or an integer in the range 1-255.","pattern":"^.*","x-kubernetes-int-or-string":true},"source":{"description":"Source contains the match criteria that apply to source entity.","properties":{"namespaceSelector":{"description":"NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.","type":"string"},"nets":{"description":"Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.","items":{"type":"string"},"type":"array"},"notNets":{"description":"NotNets is the negated version of the Nets field.","items":{"type":"string"},"type":"array"},"notPorts":{"description":"NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"notSelector":{"description":"NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.","type":"string"},"ports":{"description":"Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"selector":{"description":"Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.","type":"string"},"serviceAccounts":{"description":"ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.","properties":{"names":{"description":"Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.","items":{"type":"string"},"type":"array"},"selector":{"description":"Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.","type":"string"}},"type":"object"},"services":{"description":"Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.","properties":{"name":{"description":"Name specifies the name of a Kubernetes Service to match.","type":"string"},"namespace":{"description":"Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.","type":"string"}},"type":"object"}},"type":"object"}},"required":["action"],"type":"object"},"type":"array"},"namespaceSelector":{"description":"NamespaceSelector is an optional field for an expression used to select a pod based on namespaces.","type":"string"},"order":{"description":"Order is an optional field that specifies the order in which the policy is applied. Policies with higher \"order\" are applied after those with lower order.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy \"Name\".","type":"number"},"preDNAT":{"description":"PreDNAT indicates to apply the rules in this policy before any DNAT.","type":"boolean"},"selector":{"description":"The selector is an expression used to pick pick out the endpoints that the policy should be applied to. \n Selector expressions follow this syntax: \n \tlabel == \"string_literal\"  -\u003e  comparison, e.g. my_label == \"foo bar\" \tlabel != \"string_literal\"   -\u003e  not equal; also matches if label is not present \tlabel in { \"a\", \"b\", \"c\", ... }  -\u003e  true if the value of label X is one of \"a\", \"b\", \"c\" \tlabel not in { \"a\", \"b\", \"c\", ... }  -\u003e  true if the value of label X is not one of \"a\", \"b\", \"c\" \thas(label_name)  -\u003e True if that label is present \t! expr -\u003e negation of expr \texpr \u0026\u0026 expr  -\u003e Short-circuit and \texpr || expr  -\u003e Short-circuit or \t( expr ) -\u003e parens for grouping \tall() or the empty selector -\u003e matches all endpoints. \n Label names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters. \n Examples (with made-up labels): \n \ttype == \"webserver\" \u0026\u0026 deployment == \"prod\" \ttype in {\"frontend\", \"backend\"} \tdeployment != \"dev\" \t! has(label_name)","type":"string"},"serviceAccountSelector":{"description":"ServiceAccountSelector is an optional field for an expression used to select a pod based on service accounts.","type":"string"},"types":{"description":"Types indicates whether this policy applies to ingress, or to egress, or to both.  When not explicitly specified (and so the value on creation is empty or nil), Calico defaults Types according to what Ingress and Egress rules are present in the policy.  The default is: \n - [ PolicyTypeIngress ], if there are no Egress rules (including the case where there are   also no Ingress rules) \n - [ PolicyTypeEgress ], if there are Egress rules but no Ingress rules \n - [ PolicyTypeIngress, PolicyTypeEgress ], if there are both Ingress and Egress rules. \n When the policy is read back again, Types will always be one of these values, never empty or nil.","items":{"description":"PolicyType enumerates the possible values of the PolicySpec Types field.","type":"string"},"type":"array"}},"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: globalnetworkpolicies.crd.projectcalico.org
    resourceVersion: "95"
    uid: 7dc59e50-11b5-4b25-95ed-18fa972f88a1
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: GlobalNetworkPolicy
      listKind: GlobalNetworkPolicyList
      plural: globalnetworkpolicies
      singular: globalnetworkpolicy
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              properties:
                applyOnForward:
                  description: ApplyOnForward indicates to apply the rules in this
                    policy on forward traffic.
                  type: boolean
                doNotTrack:
                  description: DoNotTrack indicates whether packets matched by the
                    rules in this policy should go through the data plane's connection
                    tracking, such as Linux conntrack.  If True, the rules in this
                    policy are applied before any data plane connection tracking,
                    and packets allowed by this policy are marked as not to be tracked.
                  type: boolean
                egress:
                  description: The ordered set of egress rules.  Each rule contains
                    a set of packet match criteria and a corresponding action to apply.
                  items:
                    description: "A Rule encapsulates a set of match criteria and
                      an action.  Both selector-based security Policy and security
                      Profiles reference rules - separated out as a list of rules
                      for both ingress and egress packet matching. \n Each positive
                      match criteria has a negated version, prefixed with \"Not\".
                      All the match criteria within a rule must be satisfied for a
                      packet to match. A single rule can contain the positive and
                      negative version of a match and both must be satisfied for the
                      rule to match."
                    properties:
                      action:
                        type: string
                      destination:
                        description: Destination contains the match criteria that
                          apply to destination entity.
                        properties:
                          namespaceSelector:
                            description: "NamespaceSelector is an optional field that
                              contains a selector expression. Only traffic that originates
                              from (or terminates at) endpoints within the selected
                              namespaces will be matched. When both NamespaceSelector
                              and another selector are defined on the same rule, then
                              only workload endpoints that are matched by both selectors
                              will be selected by the rule. \n For NetworkPolicy,
                              an empty NamespaceSelector implies that the Selector
                              is limited to selecting only workload endpoints in the
                              same namespace as the NetworkPolicy. \n For NetworkPolicy,
                              `global()` NamespaceSelector implies that the Selector
                              is limited to selecting only GlobalNetworkSet or HostEndpoint.
                              \n For GlobalNetworkPolicy, an empty NamespaceSelector
                              implies the Selector applies to workload endpoints across
                              all namespaces."
                            type: string
                          nets:
                            description: Nets is an optional field that restricts
                              the rule to only apply to traffic that originates from
                              (or terminates at) IP addresses in any of the given
                              subnets.
                            items:
                              type: string
                            type: array
                          notNets:
                            description: NotNets is the negated version of the Nets
                              field.
                            items:
                              type: string
                            type: array
                          notPorts:
                            description: NotPorts is the negated version of the Ports
                              field. Since only some protocols have ports, if any
                              ports are specified it requires the Protocol match in
                              the Rule to be set to "TCP" or "UDP".
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          notSelector:
                            description: NotSelector is the negated version of the
                              Selector field.  See Selector field for subtleties with
                              negated selectors.
                            type: string
                          ports:
                            description: "Ports is an optional field that restricts
                              the rule to only apply to traffic that has a source
                              (destination) port that matches one of these ranges/values.
                              This value is a list of integers or strings that represent
                              ranges of ports. \n Since only some protocols have ports,
                              if any ports are specified it requires the Protocol
                              match in the Rule to be set to \"TCP\" or \"UDP\"."
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          selector:
                            description: "Selector is an optional field that contains
                              a selector expression (see Policy for sample syntax).
                              \ Only traffic that originates from (terminates at)
                              endpoints matching the selector will be matched. \n
                              Note that: in addition to the negated version of the
                              Selector (see NotSelector below), the selector expression
                              syntax itself supports negation.  The two types of negation
                              are subtly different. One negates the set of matched
                              endpoints, the other negates the whole match: \n \tSelector
                              = \"!has(my_label)\" matches packets that are from other
                              Calico-controlled \tendpoints that do not have the label
                              \"my_label\". \n \tNotSelector = \"has(my_label)\" matches
                              packets that are not from Calico-controlled \tendpoints
                              that do have the label \"my_label\". \n The effect is
                              that the latter will accept packets from non-Calico
                              sources whereas the former is limited to packets from
                              Calico-controlled endpoints."
                            type: string
                          serviceAccounts:
                            description: ServiceAccounts is an optional field that
                              restricts the rule to only apply to traffic that originates
                              from (or terminates at) a pod running as a matching
                              service account.
                            properties:
                              names:
                                description: Names is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account whose name is in the list.
                                items:
                                  type: string
                                type: array
                              selector:
                                description: Selector is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account that matches the given label selector. If
                                  both Names and Selector are specified then they
                                  are AND'ed.
                                type: string
                            type: object
                          services:
                            description: "Services is an optional field that contains
                              options for matching Kubernetes Services. If specified,
                              only traffic that originates from or terminates at endpoints
                              within the selected service(s) will be matched, and
                              only to/from each endpoint's port. \n Services cannot
                              be specified on the same rule as Selector, NotSelector,
                              NamespaceSelector, Nets, NotNets or ServiceAccounts.
                              \n Ports and NotPorts can only be specified with Services
                              on ingress rules."
                            properties:
                              name:
                                description: Name specifies the name of a Kubernetes
                                  Service to match.
                                type: string
                              namespace:
                                description: Namespace specifies the namespace of
                                  the given Service. If left empty, the rule will
                                  match within this policy's namespace.
                                type: string
                            type: object
                        type: object
                      http:
                        description: HTTP contains match criteria that apply to HTTP
                          requests.
                        properties:
                          methods:
                            description: Methods is an optional field that restricts
                              the rule to apply only to HTTP requests that use one
                              of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple
                              methods are OR'd together.
                            items:
                              type: string
                            type: array
                          paths:
                            description: 'Paths is an optional field that restricts
                              the rule to apply to HTTP requests that use one of the
                              listed HTTP Paths. Multiple paths are OR''d together.
                              e.g: - exact: /foo - prefix: /bar NOTE: Each entry may
                              ONLY specify either a `exact` or a `prefix` match. The
                              validator will check for it.'
                            items:
                              description: 'HTTPPath specifies an HTTP path to match.
                                It may be either of the form: exact: <path>: which
                                matches the path exactly or prefix: <path-prefix>:
                                which matches the path prefix'
                              properties:
                                exact:
                                  type: string
                                prefix:
                                  type: string
                              type: object
                            type: array
                        type: object
                      icmp:
                        description: ICMP is an optional field that restricts the
                          rule to apply to a specific type and code of ICMP traffic.  This
                          should only be specified if the Protocol field is set to
                          "ICMP" or "ICMPv6".
                        properties:
                          code:
                            description: Match on a specific ICMP code.  If specified,
                              the Type value must also be specified. This is a technical
                              limitation imposed by the kernel's iptables firewall,
                              which Calico uses to enforce the rule.
                            type: integer
                          type:
                            description: Match on a specific ICMP type.  For example
                              a value of 8 refers to ICMP Echo Request (i.e. pings).
                            type: integer
                        type: object
                      ipVersion:
                        description: IPVersion is an optional field that restricts
                          the rule to only match a specific IP version.
                        type: integer
                      metadata:
                        description: Metadata contains additional information for
                          this rule
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: Annotations is a set of key value pairs that
                              give extra information about the rule
                            type: object
                        type: object
                      notICMP:
                        description: NotICMP is the negated version of the ICMP field.
                        properties:
                          code:
                            description: Match on a specific ICMP code.  If specified,
                              the Type value must also be specified. This is a technical
                              limitation imposed by the kernel's iptables firewall,
                              which Calico uses to enforce the rule.
                            type: integer
                          type:
                            description: Match on a specific ICMP type.  For example
                              a value of 8 refers to ICMP Echo Request (i.e. pings).
                            type: integer
                        type: object
                      notProtocol:
                        anyOf:
                        - type: integer
                        - type: string
                        description: NotProtocol is the negated version of the Protocol
                          field.
                        pattern: ^.*
                        x-kubernetes-int-or-string: true
                      protocol:
                        anyOf:
                        - type: integer
                        - type: string
                        description: "Protocol is an optional field that restricts
                          the rule to only apply to traffic of a specific IP protocol.
                          Required if any of the EntityRules contain Ports (because
                          ports only apply to certain protocols). \n Must be one of
                          these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\",
                          \"SCTP\", \"UDPLite\" or an integer in the range 1-255."
                        pattern: ^.*
                        x-kubernetes-int-or-string: true
                      source:
                        description: Source contains the match criteria that apply
                          to source entity.
                        properties:
                          namespaceSelector:
                            description: "NamespaceSelector is an optional field that
                              contains a selector expression. Only traffic that originates
                              from (or terminates at) endpoints within the selected
                              namespaces will be matched. When both NamespaceSelector
                              and another selector are defined on the same rule, then
                              only workload endpoints that are matched by both selectors
                              will be selected by the rule. \n For NetworkPolicy,
                              an empty NamespaceSelector implies that the Selector
                              is limited to selecting only workload endpoints in the
                              same namespace as the NetworkPolicy. \n For NetworkPolicy,
                              `global()` NamespaceSelector implies that the Selector
                              is limited to selecting only GlobalNetworkSet or HostEndpoint.
                              \n For GlobalNetworkPolicy, an empty NamespaceSelector
                              implies the Selector applies to workload endpoints across
                              all namespaces."
                            type: string
                          nets:
                            description: Nets is an optional field that restricts
                              the rule to only apply to traffic that originates from
                              (or terminates at) IP addresses in any of the given
                              subnets.
                            items:
                              type: string
                            type: array
                          notNets:
                            description: NotNets is the negated version of the Nets
                              field.
                            items:
                              type: string
                            type: array
                          notPorts:
                            description: NotPorts is the negated version of the Ports
                              field. Since only some protocols have ports, if any
                              ports are specified it requires the Protocol match in
                              the Rule to be set to "TCP" or "UDP".
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          notSelector:
                            description: NotSelector is the negated version of the
                              Selector field.  See Selector field for subtleties with
                              negated selectors.
                            type: string
                          ports:
                            description: "Ports is an optional field that restricts
                              the rule to only apply to traffic that has a source
                              (destination) port that matches one of these ranges/values.
                              This value is a list of integers or strings that represent
                              ranges of ports. \n Since only some protocols have ports,
                              if any ports are specified it requires the Protocol
                              match in the Rule to be set to \"TCP\" or \"UDP\"."
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          selector:
                            description: "Selector is an optional field that contains
                              a selector expression (see Policy for sample syntax).
                              \ Only traffic that originates from (terminates at)
                              endpoints matching the selector will be matched. \n
                              Note that: in addition to the negated version of the
                              Selector (see NotSelector below), the selector expression
                              syntax itself supports negation.  The two types of negation
                              are subtly different. One negates the set of matched
                              endpoints, the other negates the whole match: \n \tSelector
                              = \"!has(my_label)\" matches packets that are from other
                              Calico-controlled \tendpoints that do not have the label
                              \"my_label\". \n \tNotSelector = \"has(my_label)\" matches
                              packets that are not from Calico-controlled \tendpoints
                              that do have the label \"my_label\". \n The effect is
                              that the latter will accept packets from non-Calico
                              sources whereas the former is limited to packets from
                              Calico-controlled endpoints."
                            type: string
                          serviceAccounts:
                            description: ServiceAccounts is an optional field that
                              restricts the rule to only apply to traffic that originates
                              from (or terminates at) a pod running as a matching
                              service account.
                            properties:
                              names:
                                description: Names is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account whose name is in the list.
                                items:
                                  type: string
                                type: array
                              selector:
                                description: Selector is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account that matches the given label selector. If
                                  both Names and Selector are specified then they
                                  are AND'ed.
                                type: string
                            type: object
                          services:
                            description: "Services is an optional field that contains
                              options for matching Kubernetes Services. If specified,
                              only traffic that originates from or terminates at endpoints
                              within the selected service(s) will be matched, and
                              only to/from each endpoint's port. \n Services cannot
                              be specified on the same rule as Selector, NotSelector,
                              NamespaceSelector, Nets, NotNets or ServiceAccounts.
                              \n Ports and NotPorts can only be specified with Services
                              on ingress rules."
                            properties:
                              name:
                                description: Name specifies the name of a Kubernetes
                                  Service to match.
                                type: string
                              namespace:
                                description: Namespace specifies the namespace of
                                  the given Service. If left empty, the rule will
                                  match within this policy's namespace.
                                type: string
                            type: object
                        type: object
                    required:
                    - action
                    type: object
                  type: array
                ingress:
                  description: The ordered set of ingress rules.  Each rule contains
                    a set of packet match criteria and a corresponding action to apply.
                  items:
                    description: "A Rule encapsulates a set of match criteria and
                      an action.  Both selector-based security Policy and security
                      Profiles reference rules - separated out as a list of rules
                      for both ingress and egress packet matching. \n Each positive
                      match criteria has a negated version, prefixed with \"Not\".
                      All the match criteria within a rule must be satisfied for a
                      packet to match. A single rule can contain the positive and
                      negative version of a match and both must be satisfied for the
                      rule to match."
                    properties:
                      action:
                        type: string
                      destination:
                        description: Destination contains the match criteria that
                          apply to destination entity.
                        properties:
                          namespaceSelector:
                            description: "NamespaceSelector is an optional field that
                              contains a selector expression. Only traffic that originates
                              from (or terminates at) endpoints within the selected
                              namespaces will be matched. When both NamespaceSelector
                              and another selector are defined on the same rule, then
                              only workload endpoints that are matched by both selectors
                              will be selected by the rule. \n For NetworkPolicy,
                              an empty NamespaceSelector implies that the Selector
                              is limited to selecting only workload endpoints in the
                              same namespace as the NetworkPolicy. \n For NetworkPolicy,
                              `global()` NamespaceSelector implies that the Selector
                              is limited to selecting only GlobalNetworkSet or HostEndpoint.
                              \n For GlobalNetworkPolicy, an empty NamespaceSelector
                              implies the Selector applies to workload endpoints across
                              all namespaces."
                            type: string
                          nets:
                            description: Nets is an optional field that restricts
                              the rule to only apply to traffic that originates from
                              (or terminates at) IP addresses in any of the given
                              subnets.
                            items:
                              type: string
                            type: array
                          notNets:
                            description: NotNets is the negated version of the Nets
                              field.
                            items:
                              type: string
                            type: array
                          notPorts:
                            description: NotPorts is the negated version of the Ports
                              field. Since only some protocols have ports, if any
                              ports are specified it requires the Protocol match in
                              the Rule to be set to "TCP" or "UDP".
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          notSelector:
                            description: NotSelector is the negated version of the
                              Selector field.  See Selector field for subtleties with
                              negated selectors.
                            type: string
                          ports:
                            description: "Ports is an optional field that restricts
                              the rule to only apply to traffic that has a source
                              (destination) port that matches one of these ranges/values.
                              This value is a list of integers or strings that represent
                              ranges of ports. \n Since only some protocols have ports,
                              if any ports are specified it requires the Protocol
                              match in the Rule to be set to \"TCP\" or \"UDP\"."
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          selector:
                            description: "Selector is an optional field that contains
                              a selector expression (see Policy for sample syntax).
                              \ Only traffic that originates from (terminates at)
                              endpoints matching the selector will be matched. \n
                              Note that: in addition to the negated version of the
                              Selector (see NotSelector below), the selector expression
                              syntax itself supports negation.  The two types of negation
                              are subtly different. One negates the set of matched
                              endpoints, the other negates the whole match: \n \tSelector
                              = \"!has(my_label)\" matches packets that are from other
                              Calico-controlled \tendpoints that do not have the label
                              \"my_label\". \n \tNotSelector = \"has(my_label)\" matches
                              packets that are not from Calico-controlled \tendpoints
                              that do have the label \"my_label\". \n The effect is
                              that the latter will accept packets from non-Calico
                              sources whereas the former is limited to packets from
                              Calico-controlled endpoints."
                            type: string
                          serviceAccounts:
                            description: ServiceAccounts is an optional field that
                              restricts the rule to only apply to traffic that originates
                              from (or terminates at) a pod running as a matching
                              service account.
                            properties:
                              names:
                                description: Names is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account whose name is in the list.
                                items:
                                  type: string
                                type: array
                              selector:
                                description: Selector is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account that matches the given label selector. If
                                  both Names and Selector are specified then they
                                  are AND'ed.
                                type: string
                            type: object
                          services:
                            description: "Services is an optional field that contains
                              options for matching Kubernetes Services. If specified,
                              only traffic that originates from or terminates at endpoints
                              within the selected service(s) will be matched, and
                              only to/from each endpoint's port. \n Services cannot
                              be specified on the same rule as Selector, NotSelector,
                              NamespaceSelector, Nets, NotNets or ServiceAccounts.
                              \n Ports and NotPorts can only be specified with Services
                              on ingress rules."
                            properties:
                              name:
                                description: Name specifies the name of a Kubernetes
                                  Service to match.
                                type: string
                              namespace:
                                description: Namespace specifies the namespace of
                                  the given Service. If left empty, the rule will
                                  match within this policy's namespace.
                                type: string
                            type: object
                        type: object
                      http:
                        description: HTTP contains match criteria that apply to HTTP
                          requests.
                        properties:
                          methods:
                            description: Methods is an optional field that restricts
                              the rule to apply only to HTTP requests that use one
                              of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple
                              methods are OR'd together.
                            items:
                              type: string
                            type: array
                          paths:
                            description: 'Paths is an optional field that restricts
                              the rule to apply to HTTP requests that use one of the
                              listed HTTP Paths. Multiple paths are OR''d together.
                              e.g: - exact: /foo - prefix: /bar NOTE: Each entry may
                              ONLY specify either a `exact` or a `prefix` match. The
                              validator will check for it.'
                            items:
                              description: 'HTTPPath specifies an HTTP path to match.
                                It may be either of the form: exact: <path>: which
                                matches the path exactly or prefix: <path-prefix>:
                                which matches the path prefix'
                              properties:
                                exact:
                                  type: string
                                prefix:
                                  type: string
                              type: object
                            type: array
                        type: object
                      icmp:
                        description: ICMP is an optional field that restricts the
                          rule to apply to a specific type and code of ICMP traffic.  This
                          should only be specified if the Protocol field is set to
                          "ICMP" or "ICMPv6".
                        properties:
                          code:
                            description: Match on a specific ICMP code.  If specified,
                              the Type value must also be specified. This is a technical
                              limitation imposed by the kernel's iptables firewall,
                              which Calico uses to enforce the rule.
                            type: integer
                          type:
                            description: Match on a specific ICMP type.  For example
                              a value of 8 refers to ICMP Echo Request (i.e. pings).
                            type: integer
                        type: object
                      ipVersion:
                        description: IPVersion is an optional field that restricts
                          the rule to only match a specific IP version.
                        type: integer
                      metadata:
                        description: Metadata contains additional information for
                          this rule
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: Annotations is a set of key value pairs that
                              give extra information about the rule
                            type: object
                        type: object
                      notICMP:
                        description: NotICMP is the negated version of the ICMP field.
                        properties:
                          code:
                            description: Match on a specific ICMP code.  If specified,
                              the Type value must also be specified. This is a technical
                              limitation imposed by the kernel's iptables firewall,
                              which Calico uses to enforce the rule.
                            type: integer
                          type:
                            description: Match on a specific ICMP type.  For example
                              a value of 8 refers to ICMP Echo Request (i.e. pings).
                            type: integer
                        type: object
                      notProtocol:
                        anyOf:
                        - type: integer
                        - type: string
                        description: NotProtocol is the negated version of the Protocol
                          field.
                        pattern: ^.*
                        x-kubernetes-int-or-string: true
                      protocol:
                        anyOf:
                        - type: integer
                        - type: string
                        description: "Protocol is an optional field that restricts
                          the rule to only apply to traffic of a specific IP protocol.
                          Required if any of the EntityRules contain Ports (because
                          ports only apply to certain protocols). \n Must be one of
                          these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\",
                          \"SCTP\", \"UDPLite\" or an integer in the range 1-255."
                        pattern: ^.*
                        x-kubernetes-int-or-string: true
                      source:
                        description: Source contains the match criteria that apply
                          to source entity.
                        properties:
                          namespaceSelector:
                            description: "NamespaceSelector is an optional field that
                              contains a selector expression. Only traffic that originates
                              from (or terminates at) endpoints within the selected
                              namespaces will be matched. When both NamespaceSelector
                              and another selector are defined on the same rule, then
                              only workload endpoints that are matched by both selectors
                              will be selected by the rule. \n For NetworkPolicy,
                              an empty NamespaceSelector implies that the Selector
                              is limited to selecting only workload endpoints in the
                              same namespace as the NetworkPolicy. \n For NetworkPolicy,
                              `global()` NamespaceSelector implies that the Selector
                              is limited to selecting only GlobalNetworkSet or HostEndpoint.
                              \n For GlobalNetworkPolicy, an empty NamespaceSelector
                              implies the Selector applies to workload endpoints across
                              all namespaces."
                            type: string
                          nets:
                            description: Nets is an optional field that restricts
                              the rule to only apply to traffic that originates from
                              (or terminates at) IP addresses in any of the given
                              subnets.
                            items:
                              type: string
                            type: array
                          notNets:
                            description: NotNets is the negated version of the Nets
                              field.
                            items:
                              type: string
                            type: array
                          notPorts:
                            description: NotPorts is the negated version of the Ports
                              field. Since only some protocols have ports, if any
                              ports are specified it requires the Protocol match in
                              the Rule to be set to "TCP" or "UDP".
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          notSelector:
                            description: NotSelector is the negated version of the
                              Selector field.  See Selector field for subtleties with
                              negated selectors.
                            type: string
                          ports:
                            description: "Ports is an optional field that restricts
                              the rule to only apply to traffic that has a source
                              (destination) port that matches one of these ranges/values.
                              This value is a list of integers or strings that represent
                              ranges of ports. \n Since only some protocols have ports,
                              if any ports are specified it requires the Protocol
                              match in the Rule to be set to \"TCP\" or \"UDP\"."
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          selector:
                            description: "Selector is an optional field that contains
                              a selector expression (see Policy for sample syntax).
                              \ Only traffic that originates from (terminates at)
                              endpoints matching the selector will be matched. \n
                              Note that: in addition to the negated version of the
                              Selector (see NotSelector below), the selector expression
                              syntax itself supports negation.  The two types of negation
                              are subtly different. One negates the set of matched
                              endpoints, the other negates the whole match: \n \tSelector
                              = \"!has(my_label)\" matches packets that are from other
                              Calico-controlled \tendpoints that do not have the label
                              \"my_label\". \n \tNotSelector = \"has(my_label)\" matches
                              packets that are not from Calico-controlled \tendpoints
                              that do have the label \"my_label\". \n The effect is
                              that the latter will accept packets from non-Calico
                              sources whereas the former is limited to packets from
                              Calico-controlled endpoints."
                            type: string
                          serviceAccounts:
                            description: ServiceAccounts is an optional field that
                              restricts the rule to only apply to traffic that originates
                              from (or terminates at) a pod running as a matching
                              service account.
                            properties:
                              names:
                                description: Names is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account whose name is in the list.
                                items:
                                  type: string
                                type: array
                              selector:
                                description: Selector is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account that matches the given label selector. If
                                  both Names and Selector are specified then they
                                  are AND'ed.
                                type: string
                            type: object
                          services:
                            description: "Services is an optional field that contains
                              options for matching Kubernetes Services. If specified,
                              only traffic that originates from or terminates at endpoints
                              within the selected service(s) will be matched, and
                              only to/from each endpoint's port. \n Services cannot
                              be specified on the same rule as Selector, NotSelector,
                              NamespaceSelector, Nets, NotNets or ServiceAccounts.
                              \n Ports and NotPorts can only be specified with Services
                              on ingress rules."
                            properties:
                              name:
                                description: Name specifies the name of a Kubernetes
                                  Service to match.
                                type: string
                              namespace:
                                description: Namespace specifies the namespace of
                                  the given Service. If left empty, the rule will
                                  match within this policy's namespace.
                                type: string
                            type: object
                        type: object
                    required:
                    - action
                    type: object
                  type: array
                namespaceSelector:
                  description: NamespaceSelector is an optional field for an expression
                    used to select a pod based on namespaces.
                  type: string
                order:
                  description: Order is an optional field that specifies the order
                    in which the policy is applied. Policies with higher "order" are
                    applied after those with lower order.  If the order is omitted,
                    it may be considered to be "infinite" - i.e. the policy will be
                    applied last.  Policies with identical order will be applied in
                    alphanumerical order based on the Policy "Name".
                  type: number
                preDNAT:
                  description: PreDNAT indicates to apply the rules in this policy
                    before any DNAT.
                  type: boolean
                selector:
                  description: "The selector is an expression used to pick pick out
                    the endpoints that the policy should be applied to. \n Selector
                    expressions follow this syntax: \n \tlabel == \"string_literal\"
                    \ ->  comparison, e.g. my_label == \"foo bar\" \tlabel != \"string_literal\"
                    \  ->  not equal; also matches if label is not present \tlabel
                    in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label
                    X is one of \"a\", \"b\", \"c\" \tlabel not in { \"a\", \"b\",
                    \"c\", ... }  ->  true if the value of label X is not one of \"a\",
                    \"b\", \"c\" \thas(label_name)  -> True if that label is present
                    \t! expr -> negation of expr \texpr && expr  -> Short-circuit
                    and \texpr || expr  -> Short-circuit or \t( expr ) -> parens for
                    grouping \tall() or the empty selector -> matches all endpoints.
                    \n Label names are allowed to contain alphanumerics, -, _ and
                    /. String literals are more permissive but they do not support
                    escape characters. \n Examples (with made-up labels): \n \ttype
                    == \"webserver\" && deployment == \"prod\" \ttype in {\"frontend\",
                    \"backend\"} \tdeployment != \"dev\" \t! has(label_name)"
                  type: string
                serviceAccountSelector:
                  description: ServiceAccountSelector is an optional field for an
                    expression used to select a pod based on service accounts.
                  type: string
                types:
                  description: "Types indicates whether this policy applies to ingress,
                    or to egress, or to both.  When not explicitly specified (and
                    so the value on creation is empty or nil), Calico defaults Types
                    according to what Ingress and Egress rules are present in the
                    policy.  The default is: \n - [ PolicyTypeIngress ], if there
                    are no Egress rules (including the case where there are   also
                    no Ingress rules) \n - [ PolicyTypeEgress ], if there are Egress
                    rules but no Ingress rules \n - [ PolicyTypeIngress, PolicyTypeEgress
                    ], if there are both Ingress and Egress rules. \n When the policy
                    is read back again, Types will always be one of these values,
                    never empty or nil."
                  items:
                    description: PolicyType enumerates the possible values of the
                      PolicySpec Types field.
                    type: string
                  type: array
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: GlobalNetworkPolicy
      listKind: GlobalNetworkPolicyList
      plural: globalnetworkpolicies
      singular: globalnetworkpolicy
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"globalnetworksets.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"GlobalNetworkSet","listKind":"GlobalNetworkSetList","plural":"globalnetworksets","singular":"globalnetworkset"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"description":"GlobalNetworkSet contains a set of arbitrary IP sub-networks/CIDRs that share labels to allow rules to refer to them via selectors.  The labels of GlobalNetworkSet are not namespaced.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"GlobalNetworkSetSpec contains the specification for a NetworkSet resource.","properties":{"nets":{"description":"The list of IP networks that belong to this set.","items":{"type":"string"},"type":"array"}},"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: globalnetworksets.crd.projectcalico.org
    resourceVersion: "98"
    uid: 7f887b2f-d757-4be2-8946-048ef8cecf1f
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: GlobalNetworkSet
      listKind: GlobalNetworkSetList
      plural: globalnetworksets
      singular: globalnetworkset
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: GlobalNetworkSet contains a set of arbitrary IP sub-networks/CIDRs
            that share labels to allow rules to refer to them via selectors.  The
            labels of GlobalNetworkSet are not namespaced.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: GlobalNetworkSetSpec contains the specification for a NetworkSet
                resource.
              properties:
                nets:
                  description: The list of IP networks that belong to this set.
                  items:
                    type: string
                  type: array
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: GlobalNetworkSet
      listKind: GlobalNetworkSetList
      plural: globalnetworksets
      singular: globalnetworkset
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"hostendpoints.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"HostEndpoint","listKind":"HostEndpointList","plural":"hostendpoints","singular":"hostendpoint"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"HostEndpointSpec contains the specification for a HostEndpoint resource.","properties":{"expectedIPs":{"description":"The expected IP addresses (IPv4 and IPv6) of the endpoint. If \"InterfaceName\" is not present, Calico will look for an interface matching any of the IPs in the list and apply policy to that. Note: \tWhen using the selector match criteria in an ingress or egress security Policy \tor Profile, Calico converts the selector into a set of IP addresses. For host \tendpoints, the ExpectedIPs field is used for that purpose. (If only the interface \tname is specified, Calico does not learn the IPs of the interface for use in match \tcriteria.)","items":{"type":"string"},"type":"array"},"interfaceName":{"description":"Either \"*\", or the name of a specific Linux interface to apply policy to; or empty.  \"*\" indicates that this HostEndpoint governs all traffic to, from or through the default network namespace of the host named by the \"Node\" field; entering and leaving that namespace via any interface, including those from/to non-host-networked local workloads. \n If InterfaceName is not \"*\", this HostEndpoint only governs traffic that enters or leaves the host through the specific interface named by InterfaceName, or - when InterfaceName is empty - through the specific interface that has one of the IPs in ExpectedIPs. Therefore, when InterfaceName is empty, at least one expected IP must be specified.  Only external interfaces (such as \"eth0\") are supported here; it isn't possible for a HostEndpoint to protect traffic through a specific local workload interface. \n Note: Only some kinds of policy are implemented for \"*\" HostEndpoints; initially just pre-DNAT policy.  Please check Calico documentation for the latest position.","type":"string"},"node":{"description":"The node name identifying the Calico node instance.","type":"string"},"ports":{"description":"Ports contains the endpoint's named ports, which may be referenced in security policy rules.","items":{"properties":{"name":{"type":"string"},"port":{"type":"integer"},"protocol":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true}},"required":["name","port","protocol"],"type":"object"},"type":"array"},"profiles":{"description":"A list of identifiers of security Profile objects that apply to this endpoint. Each profile is applied in the order that they appear in this list.  Profile rules are applied after the selector-based security policy.","items":{"type":"string"},"type":"array"}},"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: hostendpoints.crd.projectcalico.org
    resourceVersion: "101"
    uid: 2befe86d-a852-4e51-95bc-4bb82e72857e
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: HostEndpoint
      listKind: HostEndpointList
      plural: hostendpoints
      singular: hostendpoint
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: HostEndpointSpec contains the specification for a HostEndpoint
                resource.
              properties:
                expectedIPs:
                  description: "The expected IP addresses (IPv4 and IPv6) of the endpoint.
                    If \"InterfaceName\" is not present, Calico will look for an interface
                    matching any of the IPs in the list and apply policy to that.
                    Note: \tWhen using the selector match criteria in an ingress or
                    egress security Policy \tor Profile, Calico converts the selector
                    into a set of IP addresses. For host \tendpoints, the ExpectedIPs
                    field is used for that purpose. (If only the interface \tname
                    is specified, Calico does not learn the IPs of the interface for
                    use in match \tcriteria.)"
                  items:
                    type: string
                  type: array
                interfaceName:
                  description: "Either \"*\", or the name of a specific Linux interface
                    to apply policy to; or empty.  \"*\" indicates that this HostEndpoint
                    governs all traffic to, from or through the default network namespace
                    of the host named by the \"Node\" field; entering and leaving
                    that namespace via any interface, including those from/to non-host-networked
                    local workloads. \n If InterfaceName is not \"*\", this HostEndpoint
                    only governs traffic that enters or leaves the host through the
                    specific interface named by InterfaceName, or - when InterfaceName
                    is empty - through the specific interface that has one of the
                    IPs in ExpectedIPs. Therefore, when InterfaceName is empty, at
                    least one expected IP must be specified.  Only external interfaces
                    (such as \"eth0\") are supported here; it isn't possible for a
                    HostEndpoint to protect traffic through a specific local workload
                    interface. \n Note: Only some kinds of policy are implemented
                    for \"*\" HostEndpoints; initially just pre-DNAT policy.  Please
                    check Calico documentation for the latest position."
                  type: string
                node:
                  description: The node name identifying the Calico node instance.
                  type: string
                ports:
                  description: Ports contains the endpoint's named ports, which may
                    be referenced in security policy rules.
                  items:
                    properties:
                      name:
                        type: string
                      port:
                        type: integer
                      protocol:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^.*
                        x-kubernetes-int-or-string: true
                    required:
                    - name
                    - port
                    - protocol
                    type: object
                  type: array
                profiles:
                  description: A list of identifiers of security Profile objects that
                    apply to this endpoint. Each profile is applied in the order that
                    they appear in this list.  Profile rules are applied after the
                    selector-based security policy.
                  items:
                    type: string
                  type: array
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: HostEndpoint
      listKind: HostEndpointList
      plural: hostendpoints
      singular: hostendpoint
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"ipamblocks.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"IPAMBlock","listKind":"IPAMBlockList","plural":"ipamblocks","singular":"ipamblock"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"IPAMBlockSpec contains the specification for an IPAMBlock resource.","properties":{"affinity":{"description":"Affinity of the block, if this block has one. If set, it will be of the form \"host:\u003chostname\u003e\". If not set, this block is not affine to a host.","type":"string"},"allocations":{"description":"Array of allocations in-use within this block. nil entries mean the allocation is free. For non-nil entries at index i, the index is the ordinal of the allocation within this block and the value is the index of the associated attributes in the Attributes array.","items":{"nullable":true,"type":"integer"},"type":"array"},"attributes":{"description":"Attributes is an array of arbitrary metadata associated with allocations in the block. To find attributes for a given allocation, use the value of the allocation's entry in the Allocations array as the index of the element in this array.","items":{"properties":{"handle_id":{"type":"string"},"secondary":{"additionalProperties":{"type":"string"},"type":"object"}},"type":"object"},"type":"array"},"cidr":{"description":"The block's CIDR.","type":"string"},"deleted":{"description":"Deleted is an internal boolean used to workaround a limitation in the Kubernetes API whereby deletion will not return a conflict error if the block has been updated. It should not be set manually.","type":"boolean"},"sequenceNumber":{"default":0,"description":"We store a sequence number that is updated each time the block is written. Each allocation will also store the sequence number of the block at the time of its creation. When releasing an IP, passing the sequence number associated with the allocation allows us to protect against a race condition and ensure the IP hasn't been released and re-allocated since the release request.","format":"int64","type":"integer"},"sequenceNumberForAllocation":{"additionalProperties":{"format":"int64","type":"integer"},"description":"Map of allocated ordinal within the block to sequence number of the block at the time of allocation. Kubernetes does not allow numerical keys for maps, so the key is cast to a string.","type":"object"},"strictAffinity":{"description":"StrictAffinity on the IPAMBlock is deprecated and no longer used by the code. Use IPAMConfig StrictAffinity instead.","type":"boolean"},"unallocated":{"description":"Unallocated is an ordered list of allocations which are free in the block.","items":{"type":"integer"},"type":"array"}},"required":["allocations","attributes","cidr","strictAffinity","unallocated"],"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: ipamblocks.crd.projectcalico.org
    resourceVersion: "104"
    uid: 3708f402-ccc0-46c7-a0a3-41d2c7c07250
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: IPAMBlock
      listKind: IPAMBlockList
      plural: ipamblocks
      singular: ipamblock
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: IPAMBlockSpec contains the specification for an IPAMBlock
                resource.
              properties:
                affinity:
                  description: Affinity of the block, if this block has one. If set,
                    it will be of the form "host:<hostname>". If not set, this block
                    is not affine to a host.
                  type: string
                allocations:
                  description: Array of allocations in-use within this block. nil
                    entries mean the allocation is free. For non-nil entries at index
                    i, the index is the ordinal of the allocation within this block
                    and the value is the index of the associated attributes in the
                    Attributes array.
                  items:
                    nullable: true
                    type: integer
                  type: array
                attributes:
                  description: Attributes is an array of arbitrary metadata associated
                    with allocations in the block. To find attributes for a given
                    allocation, use the value of the allocation's entry in the Allocations
                    array as the index of the element in this array.
                  items:
                    properties:
                      handle_id:
                        type: string
                      secondary:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                  type: array
                cidr:
                  description: The block's CIDR.
                  type: string
                deleted:
                  description: Deleted is an internal boolean used to workaround a
                    limitation in the Kubernetes API whereby deletion will not return
                    a conflict error if the block has been updated. It should not
                    be set manually.
                  type: boolean
                sequenceNumber:
                  default: 0
                  description: We store a sequence number that is updated each time
                    the block is written. Each allocation will also store the sequence
                    number of the block at the time of its creation. When releasing
                    an IP, passing the sequence number associated with the allocation
                    allows us to protect against a race condition and ensure the IP
                    hasn't been released and re-allocated since the release request.
                  format: int64
                  type: integer
                sequenceNumberForAllocation:
                  additionalProperties:
                    format: int64
                    type: integer
                  description: Map of allocated ordinal within the block to sequence
                    number of the block at the time of allocation. Kubernetes does
                    not allow numerical keys for maps, so the key is cast to a string.
                  type: object
                strictAffinity:
                  description: StrictAffinity on the IPAMBlock is deprecated and no
                    longer used by the code. Use IPAMConfig StrictAffinity instead.
                  type: boolean
                unallocated:
                  description: Unallocated is an ordered list of allocations which
                    are free in the block.
                  items:
                    type: integer
                  type: array
              required:
              - allocations
              - attributes
              - cidr
              - strictAffinity
              - unallocated
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: IPAMBlock
      listKind: IPAMBlockList
      plural: ipamblocks
      singular: ipamblock
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"ipamconfigs.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"IPAMConfig","listKind":"IPAMConfigList","plural":"ipamconfigs","singular":"ipamconfig"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"IPAMConfigSpec contains the specification for an IPAMConfig resource.","properties":{"autoAllocateBlocks":{"type":"boolean"},"maxBlocksPerHost":{"description":"MaxBlocksPerHost, if non-zero, is the max number of blocks that can be affine to each host.","type":"integer"},"strictAffinity":{"type":"boolean"}},"required":["autoAllocateBlocks","strictAffinity"],"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: ipamconfigs.crd.projectcalico.org
    resourceVersion: "107"
    uid: 633e679b-3f30-4ab3-8e6d-52a01d51356e
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: IPAMConfig
      listKind: IPAMConfigList
      plural: ipamconfigs
      singular: ipamconfig
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: IPAMConfigSpec contains the specification for an IPAMConfig
                resource.
              properties:
                autoAllocateBlocks:
                  type: boolean
                maxBlocksPerHost:
                  description: MaxBlocksPerHost, if non-zero, is the max number of
                    blocks that can be affine to each host.
                  type: integer
                strictAffinity:
                  type: boolean
              required:
              - autoAllocateBlocks
              - strictAffinity
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: IPAMConfig
      listKind: IPAMConfigList
      plural: ipamconfigs
      singular: ipamconfig
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"ipamhandles.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"IPAMHandle","listKind":"IPAMHandleList","plural":"ipamhandles","singular":"ipamhandle"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"IPAMHandleSpec contains the specification for an IPAMHandle resource.","properties":{"block":{"additionalProperties":{"type":"integer"},"type":"object"},"deleted":{"type":"boolean"},"handleID":{"type":"string"}},"required":["block","handleID"],"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: ipamhandles.crd.projectcalico.org
    resourceVersion: "109"
    uid: 8186ad27-6f34-4326-839c-d8a6bee3b1e5
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: IPAMHandle
      listKind: IPAMHandleList
      plural: ipamhandles
      singular: ipamhandle
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: IPAMHandleSpec contains the specification for an IPAMHandle
                resource.
              properties:
                block:
                  additionalProperties:
                    type: integer
                  type: object
                deleted:
                  type: boolean
                handleID:
                  type: string
              required:
              - block
              - handleID
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: IPAMHandle
      listKind: IPAMHandleList
      plural: ipamhandles
      singular: ipamhandle
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"ippools.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"IPPool","listKind":"IPPoolList","plural":"ippools","singular":"ippool"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"IPPoolSpec contains the specification for an IPPool resource.","properties":{"allowedUses":{"description":"AllowedUse controls what the IP pool will be used for.  If not specified or empty, defaults to [\"Tunnel\", \"Workload\"] for back-compatibility","items":{"type":"string"},"type":"array"},"blockSize":{"description":"The block size to use for IP address assignments from this pool. Defaults to 26 for IPv4 and 122 for IPv6.","type":"integer"},"cidr":{"description":"The pool CIDR.","type":"string"},"disableBGPExport":{"description":"Disable exporting routes from this IP Pool's CIDR over BGP. [Default: false]","type":"boolean"},"disabled":{"description":"When disabled is true, Calico IPAM will not assign addresses from this pool.","type":"boolean"},"ipip":{"description":"Deprecated: this field is only used for APIv1 backwards compatibility. Setting this field is not allowed, this field is for internal use only.","properties":{"enabled":{"description":"When enabled is true, ipip tunneling will be used to deliver packets to destinations within this pool.","type":"boolean"},"mode":{"description":"The IPIP mode.  This can be one of \"always\" or \"cross-subnet\".  A mode of \"always\" will also use IPIP tunneling for routing to destination IP addresses within this pool.  A mode of \"cross-subnet\" will only use IPIP tunneling when the destination node is on a different subnet to the originating node.  The default value (if not specified) is \"always\".","type":"string"}},"type":"object"},"ipipMode":{"description":"Contains configuration for IPIP tunneling for this pool. If not specified, then this is defaulted to \"Never\" (i.e. IPIP tunneling is disabled).","type":"string"},"nat-outgoing":{"description":"Deprecated: this field is only used for APIv1 backwards compatibility. Setting this field is not allowed, this field is for internal use only.","type":"boolean"},"natOutgoing":{"description":"When nat-outgoing is true, packets sent from Calico networked containers in this pool to destinations outside of this pool will be masqueraded.","type":"boolean"},"nodeSelector":{"description":"Allows IPPool to allocate for a specific node by label selector.","type":"string"},"vxlanMode":{"description":"Contains configuration for VXLAN tunneling for this pool. If not specified, then this is defaulted to \"Never\" (i.e. VXLAN tunneling is disabled).","type":"string"}},"required":["cidr"],"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: ippools.crd.projectcalico.org
    resourceVersion: "112"
    uid: 654ed36e-e09a-4879-bb75-2a9528a16c2b
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: IPPool
      listKind: IPPoolList
      plural: ippools
      singular: ippool
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: IPPoolSpec contains the specification for an IPPool resource.
              properties:
                allowedUses:
                  description: AllowedUse controls what the IP pool will be used for.  If
                    not specified or empty, defaults to ["Tunnel", "Workload"] for
                    back-compatibility
                  items:
                    type: string
                  type: array
                blockSize:
                  description: The block size to use for IP address assignments from
                    this pool. Defaults to 26 for IPv4 and 122 for IPv6.
                  type: integer
                cidr:
                  description: The pool CIDR.
                  type: string
                disableBGPExport:
                  description: 'Disable exporting routes from this IP Pool''s CIDR
                    over BGP. [Default: false]'
                  type: boolean
                disabled:
                  description: When disabled is true, Calico IPAM will not assign
                    addresses from this pool.
                  type: boolean
                ipip:
                  description: 'Deprecated: this field is only used for APIv1 backwards
                    compatibility. Setting this field is not allowed, this field is
                    for internal use only.'
                  properties:
                    enabled:
                      description: When enabled is true, ipip tunneling will be used
                        to deliver packets to destinations within this pool.
                      type: boolean
                    mode:
                      description: The IPIP mode.  This can be one of "always" or
                        "cross-subnet".  A mode of "always" will also use IPIP tunneling
                        for routing to destination IP addresses within this pool.  A
                        mode of "cross-subnet" will only use IPIP tunneling when the
                        destination node is on a different subnet to the originating
                        node.  The default value (if not specified) is "always".
                      type: string
                  type: object
                ipipMode:
                  description: Contains configuration for IPIP tunneling for this
                    pool. If not specified, then this is defaulted to "Never" (i.e.
                    IPIP tunneling is disabled).
                  type: string
                nat-outgoing:
                  description: 'Deprecated: this field is only used for APIv1 backwards
                    compatibility. Setting this field is not allowed, this field is
                    for internal use only.'
                  type: boolean
                natOutgoing:
                  description: When nat-outgoing is true, packets sent from Calico
                    networked containers in this pool to destinations outside of this
                    pool will be masqueraded.
                  type: boolean
                nodeSelector:
                  description: Allows IPPool to allocate for a specific node by label
                    selector.
                  type: string
                vxlanMode:
                  description: Contains configuration for VXLAN tunneling for this
                    pool. If not specified, then this is defaulted to "Never" (i.e.
                    VXLAN tunneling is disabled).
                  type: string
              required:
              - cidr
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: IPPool
      listKind: IPPoolList
      plural: ippools
      singular: ippool
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: (devel)
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"(devel)"},"creationTimestamp":null,"name":"ipreservations.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"IPReservation","listKind":"IPReservationList","plural":"ipreservations","singular":"ipreservation"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"IPReservationSpec contains the specification for an IPReservation resource.","properties":{"reservedCIDRs":{"description":"ReservedCIDRs is a list of CIDRs and/or IP addresses that Calico IPAM will exclude from new allocations.","items":{"type":"string"},"type":"array"}},"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: ipreservations.crd.projectcalico.org
    resourceVersion: "114"
    uid: 6140cb8c-2ece-4755-87a1-208a4364253b
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: IPReservation
      listKind: IPReservationList
      plural: ipreservations
      singular: ipreservation
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: IPReservationSpec contains the specification for an IPReservation
                resource.
              properties:
                reservedCIDRs:
                  description: ReservedCIDRs is a list of CIDRs and/or IP addresses
                    that Calico IPAM will exclude from new allocations.
                  items:
                    type: string
                  type: array
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: IPReservation
      listKind: IPReservationList
      plural: ipreservations
      singular: ipreservation
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"kubecontrollersconfigurations.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"KubeControllersConfiguration","listKind":"KubeControllersConfigurationList","plural":"kubecontrollersconfigurations","singular":"kubecontrollersconfiguration"},"scope":"Cluster","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"KubeControllersConfigurationSpec contains the values of the Kubernetes controllers configuration.","properties":{"controllers":{"description":"Controllers enables and configures individual Kubernetes controllers","properties":{"namespace":{"description":"Namespace enables and configures the namespace controller. Enabled by default, set to nil to disable.","properties":{"reconcilerPeriod":{"description":"ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]","type":"string"}},"type":"object"},"node":{"description":"Node enables and configures the node controller. Enabled by default, set to nil to disable.","properties":{"hostEndpoint":{"description":"HostEndpoint controls syncing nodes to host endpoints. Disabled by default, set to nil to disable.","properties":{"autoCreate":{"description":"AutoCreate enables automatic creation of host endpoints for every node. [Default: Disabled]","type":"string"}},"type":"object"},"leakGracePeriod":{"description":"LeakGracePeriod is the period used by the controller to determine if an IP address has been leaked. Set to 0 to disable IP garbage collection. [Default: 15m]","type":"string"},"reconcilerPeriod":{"description":"ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]","type":"string"},"syncLabels":{"description":"SyncLabels controls whether to copy Kubernetes node labels to Calico nodes. [Default: Enabled]","type":"string"}},"type":"object"},"policy":{"description":"Policy enables and configures the policy controller. Enabled by default, set to nil to disable.","properties":{"reconcilerPeriod":{"description":"ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]","type":"string"}},"type":"object"},"serviceAccount":{"description":"ServiceAccount enables and configures the service account controller. Enabled by default, set to nil to disable.","properties":{"reconcilerPeriod":{"description":"ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]","type":"string"}},"type":"object"},"workloadEndpoint":{"description":"WorkloadEndpoint enables and configures the workload endpoint controller. Enabled by default, set to nil to disable.","properties":{"reconcilerPeriod":{"description":"ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]","type":"string"}},"type":"object"}},"type":"object"},"debugProfilePort":{"description":"DebugProfilePort configures the port to serve memory and cpu profiles on. If not specified, profiling is disabled.","format":"int32","type":"integer"},"etcdV3CompactionPeriod":{"description":"EtcdV3CompactionPeriod is the period between etcdv3 compaction requests. Set to 0 to disable. [Default: 10m]","type":"string"},"healthChecks":{"description":"HealthChecks enables or disables support for health checks [Default: Enabled]","type":"string"},"logSeverityScreen":{"description":"LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]","type":"string"},"prometheusMetricsPort":{"description":"PrometheusMetricsPort is the TCP port that the Prometheus metrics server should bind to. Set to 0 to disable. [Default: 9094]","type":"integer"}},"required":["controllers"],"type":"object"},"status":{"description":"KubeControllersConfigurationStatus represents the status of the configuration. It's useful for admins to be able to see the actual config that was applied, which can be modified by environment variables on the kube-controllers process.","properties":{"environmentVars":{"additionalProperties":{"type":"string"},"description":"EnvironmentVars contains the environment variables on the kube-controllers that influenced the RunningConfig.","type":"object"},"runningConfig":{"description":"RunningConfig contains the effective config that is running in the kube-controllers pod, after merging the API resource with any environment variables.","properties":{"controllers":{"description":"Controllers enables and configures individual Kubernetes controllers","properties":{"namespace":{"description":"Namespace enables and configures the namespace controller. Enabled by default, set to nil to disable.","properties":{"reconcilerPeriod":{"description":"ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]","type":"string"}},"type":"object"},"node":{"description":"Node enables and configures the node controller. Enabled by default, set to nil to disable.","properties":{"hostEndpoint":{"description":"HostEndpoint controls syncing nodes to host endpoints. Disabled by default, set to nil to disable.","properties":{"autoCreate":{"description":"AutoCreate enables automatic creation of host endpoints for every node. [Default: Disabled]","type":"string"}},"type":"object"},"leakGracePeriod":{"description":"LeakGracePeriod is the period used by the controller to determine if an IP address has been leaked. Set to 0 to disable IP garbage collection. [Default: 15m]","type":"string"},"reconcilerPeriod":{"description":"ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]","type":"string"},"syncLabels":{"description":"SyncLabels controls whether to copy Kubernetes node labels to Calico nodes. [Default: Enabled]","type":"string"}},"type":"object"},"policy":{"description":"Policy enables and configures the policy controller. Enabled by default, set to nil to disable.","properties":{"reconcilerPeriod":{"description":"ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]","type":"string"}},"type":"object"},"serviceAccount":{"description":"ServiceAccount enables and configures the service account controller. Enabled by default, set to nil to disable.","properties":{"reconcilerPeriod":{"description":"ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]","type":"string"}},"type":"object"},"workloadEndpoint":{"description":"WorkloadEndpoint enables and configures the workload endpoint controller. Enabled by default, set to nil to disable.","properties":{"reconcilerPeriod":{"description":"ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]","type":"string"}},"type":"object"}},"type":"object"},"debugProfilePort":{"description":"DebugProfilePort configures the port to serve memory and cpu profiles on. If not specified, profiling is disabled.","format":"int32","type":"integer"},"etcdV3CompactionPeriod":{"description":"EtcdV3CompactionPeriod is the period between etcdv3 compaction requests. Set to 0 to disable. [Default: 10m]","type":"string"},"healthChecks":{"description":"HealthChecks enables or disables support for health checks [Default: Enabled]","type":"string"},"logSeverityScreen":{"description":"LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]","type":"string"},"prometheusMetricsPort":{"description":"PrometheusMetricsPort is the TCP port that the Prometheus metrics server should bind to. Set to 0 to disable. [Default: 9094]","type":"integer"}},"required":["controllers"],"type":"object"}},"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: kubecontrollersconfigurations.crd.projectcalico.org
    resourceVersion: "117"
    uid: aca45ac7-88b7-4f01-9120-6925a754dbe5
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: KubeControllersConfiguration
      listKind: KubeControllersConfigurationList
      plural: kubecontrollersconfigurations
      singular: kubecontrollersconfiguration
    scope: Cluster
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: KubeControllersConfigurationSpec contains the values of
                the Kubernetes controllers configuration.
              properties:
                controllers:
                  description: Controllers enables and configures individual Kubernetes
                    controllers
                  properties:
                    namespace:
                      description: Namespace enables and configures the namespace
                        controller. Enabled by default, set to nil to disable.
                      properties:
                        reconcilerPeriod:
                          description: 'ReconcilerPeriod is the period to perform
                            reconciliation with the Calico datastore. [Default: 5m]'
                          type: string
                      type: object
                    node:
                      description: Node enables and configures the node controller.
                        Enabled by default, set to nil to disable.
                      properties:
                        hostEndpoint:
                          description: HostEndpoint controls syncing nodes to host
                            endpoints. Disabled by default, set to nil to disable.
                          properties:
                            autoCreate:
                              description: 'AutoCreate enables automatic creation
                                of host endpoints for every node. [Default: Disabled]'
                              type: string
                          type: object
                        leakGracePeriod:
                          description: 'LeakGracePeriod is the period used by the
                            controller to determine if an IP address has been leaked.
                            Set to 0 to disable IP garbage collection. [Default: 15m]'
                          type: string
                        reconcilerPeriod:
                          description: 'ReconcilerPeriod is the period to perform
                            reconciliation with the Calico datastore. [Default: 5m]'
                          type: string
                        syncLabels:
                          description: 'SyncLabels controls whether to copy Kubernetes
                            node labels to Calico nodes. [Default: Enabled]'
                          type: string
                      type: object
                    policy:
                      description: Policy enables and configures the policy controller.
                        Enabled by default, set to nil to disable.
                      properties:
                        reconcilerPeriod:
                          description: 'ReconcilerPeriod is the period to perform
                            reconciliation with the Calico datastore. [Default: 5m]'
                          type: string
                      type: object
                    serviceAccount:
                      description: ServiceAccount enables and configures the service
                        account controller. Enabled by default, set to nil to disable.
                      properties:
                        reconcilerPeriod:
                          description: 'ReconcilerPeriod is the period to perform
                            reconciliation with the Calico datastore. [Default: 5m]'
                          type: string
                      type: object
                    workloadEndpoint:
                      description: WorkloadEndpoint enables and configures the workload
                        endpoint controller. Enabled by default, set to nil to disable.
                      properties:
                        reconcilerPeriod:
                          description: 'ReconcilerPeriod is the period to perform
                            reconciliation with the Calico datastore. [Default: 5m]'
                          type: string
                      type: object
                  type: object
                debugProfilePort:
                  description: DebugProfilePort configures the port to serve memory
                    and cpu profiles on. If not specified, profiling is disabled.
                  format: int32
                  type: integer
                etcdV3CompactionPeriod:
                  description: 'EtcdV3CompactionPeriod is the period between etcdv3
                    compaction requests. Set to 0 to disable. [Default: 10m]'
                  type: string
                healthChecks:
                  description: 'HealthChecks enables or disables support for health
                    checks [Default: Enabled]'
                  type: string
                logSeverityScreen:
                  description: 'LogSeverityScreen is the log severity above which
                    logs are sent to the stdout. [Default: Info]'
                  type: string
                prometheusMetricsPort:
                  description: 'PrometheusMetricsPort is the TCP port that the Prometheus
                    metrics server should bind to. Set to 0 to disable. [Default:
                    9094]'
                  type: integer
              required:
              - controllers
              type: object
            status:
              description: KubeControllersConfigurationStatus represents the status
                of the configuration. It's useful for admins to be able to see the
                actual config that was applied, which can be modified by environment
                variables on the kube-controllers process.
              properties:
                environmentVars:
                  additionalProperties:
                    type: string
                  description: EnvironmentVars contains the environment variables
                    on the kube-controllers that influenced the RunningConfig.
                  type: object
                runningConfig:
                  description: RunningConfig contains the effective config that is
                    running in the kube-controllers pod, after merging the API resource
                    with any environment variables.
                  properties:
                    controllers:
                      description: Controllers enables and configures individual Kubernetes
                        controllers
                      properties:
                        namespace:
                          description: Namespace enables and configures the namespace
                            controller. Enabled by default, set to nil to disable.
                          properties:
                            reconcilerPeriod:
                              description: 'ReconcilerPeriod is the period to perform
                                reconciliation with the Calico datastore. [Default:
                                5m]'
                              type: string
                          type: object
                        node:
                          description: Node enables and configures the node controller.
                            Enabled by default, set to nil to disable.
                          properties:
                            hostEndpoint:
                              description: HostEndpoint controls syncing nodes to
                                host endpoints. Disabled by default, set to nil to
                                disable.
                              properties:
                                autoCreate:
                                  description: 'AutoCreate enables automatic creation
                                    of host endpoints for every node. [Default: Disabled]'
                                  type: string
                              type: object
                            leakGracePeriod:
                              description: 'LeakGracePeriod is the period used by
                                the controller to determine if an IP address has been
                                leaked. Set to 0 to disable IP garbage collection.
                                [Default: 15m]'
                              type: string
                            reconcilerPeriod:
                              description: 'ReconcilerPeriod is the period to perform
                                reconciliation with the Calico datastore. [Default:
                                5m]'
                              type: string
                            syncLabels:
                              description: 'SyncLabels controls whether to copy Kubernetes
                                node labels to Calico nodes. [Default: Enabled]'
                              type: string
                          type: object
                        policy:
                          description: Policy enables and configures the policy controller.
                            Enabled by default, set to nil to disable.
                          properties:
                            reconcilerPeriod:
                              description: 'ReconcilerPeriod is the period to perform
                                reconciliation with the Calico datastore. [Default:
                                5m]'
                              type: string
                          type: object
                        serviceAccount:
                          description: ServiceAccount enables and configures the service
                            account controller. Enabled by default, set to nil to
                            disable.
                          properties:
                            reconcilerPeriod:
                              description: 'ReconcilerPeriod is the period to perform
                                reconciliation with the Calico datastore. [Default:
                                5m]'
                              type: string
                          type: object
                        workloadEndpoint:
                          description: WorkloadEndpoint enables and configures the
                            workload endpoint controller. Enabled by default, set
                            to nil to disable.
                          properties:
                            reconcilerPeriod:
                              description: 'ReconcilerPeriod is the period to perform
                                reconciliation with the Calico datastore. [Default:
                                5m]'
                              type: string
                          type: object
                      type: object
                    debugProfilePort:
                      description: DebugProfilePort configures the port to serve memory
                        and cpu profiles on. If not specified, profiling is disabled.
                      format: int32
                      type: integer
                    etcdV3CompactionPeriod:
                      description: 'EtcdV3CompactionPeriod is the period between etcdv3
                        compaction requests. Set to 0 to disable. [Default: 10m]'
                      type: string
                    healthChecks:
                      description: 'HealthChecks enables or disables support for health
                        checks [Default: Enabled]'
                      type: string
                    logSeverityScreen:
                      description: 'LogSeverityScreen is the log severity above which
                        logs are sent to the stdout. [Default: Info]'
                      type: string
                    prometheusMetricsPort:
                      description: 'PrometheusMetricsPort is the TCP port that the
                        Prometheus metrics server should bind to. Set to 0 to disable.
                        [Default: 9094]'
                      type: integer
                  required:
                  - controllers
                  type: object
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: KubeControllersConfiguration
      listKind: KubeControllersConfigurationList
      plural: kubecontrollersconfigurations
      singular: kubecontrollersconfiguration
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"networkpolicies.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"NetworkPolicy","listKind":"NetworkPolicyList","plural":"networkpolicies","singular":"networkpolicy"},"scope":"Namespaced","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"properties":{"egress":{"description":"The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.","items":{"description":"A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching. \n Each positive match criteria has a negated version, prefixed with \"Not\". All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.","properties":{"action":{"type":"string"},"destination":{"description":"Destination contains the match criteria that apply to destination entity.","properties":{"namespaceSelector":{"description":"NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.","type":"string"},"nets":{"description":"Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.","items":{"type":"string"},"type":"array"},"notNets":{"description":"NotNets is the negated version of the Nets field.","items":{"type":"string"},"type":"array"},"notPorts":{"description":"NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"notSelector":{"description":"NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.","type":"string"},"ports":{"description":"Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"selector":{"description":"Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.","type":"string"},"serviceAccounts":{"description":"ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.","properties":{"names":{"description":"Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.","items":{"type":"string"},"type":"array"},"selector":{"description":"Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.","type":"string"}},"type":"object"},"services":{"description":"Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.","properties":{"name":{"description":"Name specifies the name of a Kubernetes Service to match.","type":"string"},"namespace":{"description":"Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.","type":"string"}},"type":"object"}},"type":"object"},"http":{"description":"HTTP contains match criteria that apply to HTTP requests.","properties":{"methods":{"description":"Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.","items":{"type":"string"},"type":"array"},"paths":{"description":"Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.","items":{"description":"HTTPPath specifies an HTTP path to match. It may be either of the form: exact: \u003cpath\u003e: which matches the path exactly or prefix: \u003cpath-prefix\u003e: which matches the path prefix","properties":{"exact":{"type":"string"},"prefix":{"type":"string"}},"type":"object"},"type":"array"}},"type":"object"},"icmp":{"description":"ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\".","properties":{"code":{"description":"Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.","type":"integer"},"type":{"description":"Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).","type":"integer"}},"type":"object"},"ipVersion":{"description":"IPVersion is an optional field that restricts the rule to only match a specific IP version.","type":"integer"},"metadata":{"description":"Metadata contains additional information for this rule","properties":{"annotations":{"additionalProperties":{"type":"string"},"description":"Annotations is a set of key value pairs that give extra information about the rule","type":"object"}},"type":"object"},"notICMP":{"description":"NotICMP is the negated version of the ICMP field.","properties":{"code":{"description":"Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.","type":"integer"},"type":{"description":"Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).","type":"integer"}},"type":"object"},"notProtocol":{"anyOf":[{"type":"integer"},{"type":"string"}],"description":"NotProtocol is the negated version of the Protocol field.","pattern":"^.*","x-kubernetes-int-or-string":true},"protocol":{"anyOf":[{"type":"integer"},{"type":"string"}],"description":"Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). \n Must be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\" or an integer in the range 1-255.","pattern":"^.*","x-kubernetes-int-or-string":true},"source":{"description":"Source contains the match criteria that apply to source entity.","properties":{"namespaceSelector":{"description":"NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.","type":"string"},"nets":{"description":"Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.","items":{"type":"string"},"type":"array"},"notNets":{"description":"NotNets is the negated version of the Nets field.","items":{"type":"string"},"type":"array"},"notPorts":{"description":"NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"notSelector":{"description":"NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.","type":"string"},"ports":{"description":"Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"selector":{"description":"Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.","type":"string"},"serviceAccounts":{"description":"ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.","properties":{"names":{"description":"Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.","items":{"type":"string"},"type":"array"},"selector":{"description":"Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.","type":"string"}},"type":"object"},"services":{"description":"Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.","properties":{"name":{"description":"Name specifies the name of a Kubernetes Service to match.","type":"string"},"namespace":{"description":"Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.","type":"string"}},"type":"object"}},"type":"object"}},"required":["action"],"type":"object"},"type":"array"},"ingress":{"description":"The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.","items":{"description":"A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching. \n Each positive match criteria has a negated version, prefixed with \"Not\". All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.","properties":{"action":{"type":"string"},"destination":{"description":"Destination contains the match criteria that apply to destination entity.","properties":{"namespaceSelector":{"description":"NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.","type":"string"},"nets":{"description":"Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.","items":{"type":"string"},"type":"array"},"notNets":{"description":"NotNets is the negated version of the Nets field.","items":{"type":"string"},"type":"array"},"notPorts":{"description":"NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"notSelector":{"description":"NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.","type":"string"},"ports":{"description":"Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"selector":{"description":"Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.","type":"string"},"serviceAccounts":{"description":"ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.","properties":{"names":{"description":"Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.","items":{"type":"string"},"type":"array"},"selector":{"description":"Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.","type":"string"}},"type":"object"},"services":{"description":"Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.","properties":{"name":{"description":"Name specifies the name of a Kubernetes Service to match.","type":"string"},"namespace":{"description":"Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.","type":"string"}},"type":"object"}},"type":"object"},"http":{"description":"HTTP contains match criteria that apply to HTTP requests.","properties":{"methods":{"description":"Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.","items":{"type":"string"},"type":"array"},"paths":{"description":"Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.","items":{"description":"HTTPPath specifies an HTTP path to match. It may be either of the form: exact: \u003cpath\u003e: which matches the path exactly or prefix: \u003cpath-prefix\u003e: which matches the path prefix","properties":{"exact":{"type":"string"},"prefix":{"type":"string"}},"type":"object"},"type":"array"}},"type":"object"},"icmp":{"description":"ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\".","properties":{"code":{"description":"Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.","type":"integer"},"type":{"description":"Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).","type":"integer"}},"type":"object"},"ipVersion":{"description":"IPVersion is an optional field that restricts the rule to only match a specific IP version.","type":"integer"},"metadata":{"description":"Metadata contains additional information for this rule","properties":{"annotations":{"additionalProperties":{"type":"string"},"description":"Annotations is a set of key value pairs that give extra information about the rule","type":"object"}},"type":"object"},"notICMP":{"description":"NotICMP is the negated version of the ICMP field.","properties":{"code":{"description":"Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.","type":"integer"},"type":{"description":"Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).","type":"integer"}},"type":"object"},"notProtocol":{"anyOf":[{"type":"integer"},{"type":"string"}],"description":"NotProtocol is the negated version of the Protocol field.","pattern":"^.*","x-kubernetes-int-or-string":true},"protocol":{"anyOf":[{"type":"integer"},{"type":"string"}],"description":"Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). \n Must be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\" or an integer in the range 1-255.","pattern":"^.*","x-kubernetes-int-or-string":true},"source":{"description":"Source contains the match criteria that apply to source entity.","properties":{"namespaceSelector":{"description":"NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. \n For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. \n For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. \n For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.","type":"string"},"nets":{"description":"Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.","items":{"type":"string"},"type":"array"},"notNets":{"description":"NotNets is the negated version of the Nets field.","items":{"type":"string"},"type":"array"},"notPorts":{"description":"NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"notSelector":{"description":"NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.","type":"string"},"ports":{"description":"Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. \n Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".","items":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^.*","x-kubernetes-int-or-string":true},"type":"array"},"selector":{"description":"Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. \n Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: \n \tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled \tendpoints that do not have the label \"my_label\". \n \tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled \tendpoints that do have the label \"my_label\". \n The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.","type":"string"},"serviceAccounts":{"description":"ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.","properties":{"names":{"description":"Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.","items":{"type":"string"},"type":"array"},"selector":{"description":"Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.","type":"string"}},"type":"object"},"services":{"description":"Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. \n Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. \n Ports and NotPorts can only be specified with Services on ingress rules.","properties":{"name":{"description":"Name specifies the name of a Kubernetes Service to match.","type":"string"},"namespace":{"description":"Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.","type":"string"}},"type":"object"}},"type":"object"}},"required":["action"],"type":"object"},"type":"array"},"order":{"description":"Order is an optional field that specifies the order in which the policy is applied. Policies with higher \"order\" are applied after those with lower order.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy \"Name\".","type":"number"},"selector":{"description":"The selector is an expression used to pick pick out the endpoints that the policy should be applied to. \n Selector expressions follow this syntax: \n \tlabel == \"string_literal\"  -\u003e  comparison, e.g. my_label == \"foo bar\" \tlabel != \"string_literal\"   -\u003e  not equal; also matches if label is not present \tlabel in { \"a\", \"b\", \"c\", ... }  -\u003e  true if the value of label X is one of \"a\", \"b\", \"c\" \tlabel not in { \"a\", \"b\", \"c\", ... }  -\u003e  true if the value of label X is not one of \"a\", \"b\", \"c\" \thas(label_name)  -\u003e True if that label is present \t! expr -\u003e negation of expr \texpr \u0026\u0026 expr  -\u003e Short-circuit and \texpr || expr  -\u003e Short-circuit or \t( expr ) -\u003e parens for grouping \tall() or the empty selector -\u003e matches all endpoints. \n Label names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters. \n Examples (with made-up labels): \n \ttype == \"webserver\" \u0026\u0026 deployment == \"prod\" \ttype in {\"frontend\", \"backend\"} \tdeployment != \"dev\" \t! has(label_name)","type":"string"},"serviceAccountSelector":{"description":"ServiceAccountSelector is an optional field for an expression used to select a pod based on service accounts.","type":"string"},"types":{"description":"Types indicates whether this policy applies to ingress, or to egress, or to both.  When not explicitly specified (and so the value on creation is empty or nil), Calico defaults Types according to what Ingress and Egress are present in the policy.  The default is: \n - [ PolicyTypeIngress ], if there are no Egress rules (including the case where there are   also no Ingress rules) \n - [ PolicyTypeEgress ], if there are Egress rules but no Ingress rules \n - [ PolicyTypeIngress, PolicyTypeEgress ], if there are both Ingress and Egress rules. \n When the policy is read back again, Types will always be one of these values, never empty or nil.","items":{"description":"PolicyType enumerates the possible values of the PolicySpec Types field.","type":"string"},"type":"array"}},"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: networkpolicies.crd.projectcalico.org
    resourceVersion: "121"
    uid: 42c4d80e-735d-4f38-b121-5998220c1b18
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: NetworkPolicy
      listKind: NetworkPolicyList
      plural: networkpolicies
      singular: networkpolicy
    scope: Namespaced
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              properties:
                egress:
                  description: The ordered set of egress rules.  Each rule contains
                    a set of packet match criteria and a corresponding action to apply.
                  items:
                    description: "A Rule encapsulates a set of match criteria and
                      an action.  Both selector-based security Policy and security
                      Profiles reference rules - separated out as a list of rules
                      for both ingress and egress packet matching. \n Each positive
                      match criteria has a negated version, prefixed with \"Not\".
                      All the match criteria within a rule must be satisfied for a
                      packet to match. A single rule can contain the positive and
                      negative version of a match and both must be satisfied for the
                      rule to match."
                    properties:
                      action:
                        type: string
                      destination:
                        description: Destination contains the match criteria that
                          apply to destination entity.
                        properties:
                          namespaceSelector:
                            description: "NamespaceSelector is an optional field that
                              contains a selector expression. Only traffic that originates
                              from (or terminates at) endpoints within the selected
                              namespaces will be matched. When both NamespaceSelector
                              and another selector are defined on the same rule, then
                              only workload endpoints that are matched by both selectors
                              will be selected by the rule. \n For NetworkPolicy,
                              an empty NamespaceSelector implies that the Selector
                              is limited to selecting only workload endpoints in the
                              same namespace as the NetworkPolicy. \n For NetworkPolicy,
                              `global()` NamespaceSelector implies that the Selector
                              is limited to selecting only GlobalNetworkSet or HostEndpoint.
                              \n For GlobalNetworkPolicy, an empty NamespaceSelector
                              implies the Selector applies to workload endpoints across
                              all namespaces."
                            type: string
                          nets:
                            description: Nets is an optional field that restricts
                              the rule to only apply to traffic that originates from
                              (or terminates at) IP addresses in any of the given
                              subnets.
                            items:
                              type: string
                            type: array
                          notNets:
                            description: NotNets is the negated version of the Nets
                              field.
                            items:
                              type: string
                            type: array
                          notPorts:
                            description: NotPorts is the negated version of the Ports
                              field. Since only some protocols have ports, if any
                              ports are specified it requires the Protocol match in
                              the Rule to be set to "TCP" or "UDP".
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          notSelector:
                            description: NotSelector is the negated version of the
                              Selector field.  See Selector field for subtleties with
                              negated selectors.
                            type: string
                          ports:
                            description: "Ports is an optional field that restricts
                              the rule to only apply to traffic that has a source
                              (destination) port that matches one of these ranges/values.
                              This value is a list of integers or strings that represent
                              ranges of ports. \n Since only some protocols have ports,
                              if any ports are specified it requires the Protocol
                              match in the Rule to be set to \"TCP\" or \"UDP\"."
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          selector:
                            description: "Selector is an optional field that contains
                              a selector expression (see Policy for sample syntax).
                              \ Only traffic that originates from (terminates at)
                              endpoints matching the selector will be matched. \n
                              Note that: in addition to the negated version of the
                              Selector (see NotSelector below), the selector expression
                              syntax itself supports negation.  The two types of negation
                              are subtly different. One negates the set of matched
                              endpoints, the other negates the whole match: \n \tSelector
                              = \"!has(my_label)\" matches packets that are from other
                              Calico-controlled \tendpoints that do not have the label
                              \"my_label\". \n \tNotSelector = \"has(my_label)\" matches
                              packets that are not from Calico-controlled \tendpoints
                              that do have the label \"my_label\". \n The effect is
                              that the latter will accept packets from non-Calico
                              sources whereas the former is limited to packets from
                              Calico-controlled endpoints."
                            type: string
                          serviceAccounts:
                            description: ServiceAccounts is an optional field that
                              restricts the rule to only apply to traffic that originates
                              from (or terminates at) a pod running as a matching
                              service account.
                            properties:
                              names:
                                description: Names is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account whose name is in the list.
                                items:
                                  type: string
                                type: array
                              selector:
                                description: Selector is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account that matches the given label selector. If
                                  both Names and Selector are specified then they
                                  are AND'ed.
                                type: string
                            type: object
                          services:
                            description: "Services is an optional field that contains
                              options for matching Kubernetes Services. If specified,
                              only traffic that originates from or terminates at endpoints
                              within the selected service(s) will be matched, and
                              only to/from each endpoint's port. \n Services cannot
                              be specified on the same rule as Selector, NotSelector,
                              NamespaceSelector, Nets, NotNets or ServiceAccounts.
                              \n Ports and NotPorts can only be specified with Services
                              on ingress rules."
                            properties:
                              name:
                                description: Name specifies the name of a Kubernetes
                                  Service to match.
                                type: string
                              namespace:
                                description: Namespace specifies the namespace of
                                  the given Service. If left empty, the rule will
                                  match within this policy's namespace.
                                type: string
                            type: object
                        type: object
                      http:
                        description: HTTP contains match criteria that apply to HTTP
                          requests.
                        properties:
                          methods:
                            description: Methods is an optional field that restricts
                              the rule to apply only to HTTP requests that use one
                              of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple
                              methods are OR'd together.
                            items:
                              type: string
                            type: array
                          paths:
                            description: 'Paths is an optional field that restricts
                              the rule to apply to HTTP requests that use one of the
                              listed HTTP Paths. Multiple paths are OR''d together.
                              e.g: - exact: /foo - prefix: /bar NOTE: Each entry may
                              ONLY specify either a `exact` or a `prefix` match. The
                              validator will check for it.'
                            items:
                              description: 'HTTPPath specifies an HTTP path to match.
                                It may be either of the form: exact: <path>: which
                                matches the path exactly or prefix: <path-prefix>:
                                which matches the path prefix'
                              properties:
                                exact:
                                  type: string
                                prefix:
                                  type: string
                              type: object
                            type: array
                        type: object
                      icmp:
                        description: ICMP is an optional field that restricts the
                          rule to apply to a specific type and code of ICMP traffic.  This
                          should only be specified if the Protocol field is set to
                          "ICMP" or "ICMPv6".
                        properties:
                          code:
                            description: Match on a specific ICMP code.  If specified,
                              the Type value must also be specified. This is a technical
                              limitation imposed by the kernel's iptables firewall,
                              which Calico uses to enforce the rule.
                            type: integer
                          type:
                            description: Match on a specific ICMP type.  For example
                              a value of 8 refers to ICMP Echo Request (i.e. pings).
                            type: integer
                        type: object
                      ipVersion:
                        description: IPVersion is an optional field that restricts
                          the rule to only match a specific IP version.
                        type: integer
                      metadata:
                        description: Metadata contains additional information for
                          this rule
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: Annotations is a set of key value pairs that
                              give extra information about the rule
                            type: object
                        type: object
                      notICMP:
                        description: NotICMP is the negated version of the ICMP field.
                        properties:
                          code:
                            description: Match on a specific ICMP code.  If specified,
                              the Type value must also be specified. This is a technical
                              limitation imposed by the kernel's iptables firewall,
                              which Calico uses to enforce the rule.
                            type: integer
                          type:
                            description: Match on a specific ICMP type.  For example
                              a value of 8 refers to ICMP Echo Request (i.e. pings).
                            type: integer
                        type: object
                      notProtocol:
                        anyOf:
                        - type: integer
                        - type: string
                        description: NotProtocol is the negated version of the Protocol
                          field.
                        pattern: ^.*
                        x-kubernetes-int-or-string: true
                      protocol:
                        anyOf:
                        - type: integer
                        - type: string
                        description: "Protocol is an optional field that restricts
                          the rule to only apply to traffic of a specific IP protocol.
                          Required if any of the EntityRules contain Ports (because
                          ports only apply to certain protocols). \n Must be one of
                          these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\",
                          \"SCTP\", \"UDPLite\" or an integer in the range 1-255."
                        pattern: ^.*
                        x-kubernetes-int-or-string: true
                      source:
                        description: Source contains the match criteria that apply
                          to source entity.
                        properties:
                          namespaceSelector:
                            description: "NamespaceSelector is an optional field that
                              contains a selector expression. Only traffic that originates
                              from (or terminates at) endpoints within the selected
                              namespaces will be matched. When both NamespaceSelector
                              and another selector are defined on the same rule, then
                              only workload endpoints that are matched by both selectors
                              will be selected by the rule. \n For NetworkPolicy,
                              an empty NamespaceSelector implies that the Selector
                              is limited to selecting only workload endpoints in the
                              same namespace as the NetworkPolicy. \n For NetworkPolicy,
                              `global()` NamespaceSelector implies that the Selector
                              is limited to selecting only GlobalNetworkSet or HostEndpoint.
                              \n For GlobalNetworkPolicy, an empty NamespaceSelector
                              implies the Selector applies to workload endpoints across
                              all namespaces."
                            type: string
                          nets:
                            description: Nets is an optional field that restricts
                              the rule to only apply to traffic that originates from
                              (or terminates at) IP addresses in any of the given
                              subnets.
                            items:
                              type: string
                            type: array
                          notNets:
                            description: NotNets is the negated version of the Nets
                              field.
                            items:
                              type: string
                            type: array
                          notPorts:
                            description: NotPorts is the negated version of the Ports
                              field. Since only some protocols have ports, if any
                              ports are specified it requires the Protocol match in
                              the Rule to be set to "TCP" or "UDP".
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          notSelector:
                            description: NotSelector is the negated version of the
                              Selector field.  See Selector field for subtleties with
                              negated selectors.
                            type: string
                          ports:
                            description: "Ports is an optional field that restricts
                              the rule to only apply to traffic that has a source
                              (destination) port that matches one of these ranges/values.
                              This value is a list of integers or strings that represent
                              ranges of ports. \n Since only some protocols have ports,
                              if any ports are specified it requires the Protocol
                              match in the Rule to be set to \"TCP\" or \"UDP\"."
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          selector:
                            description: "Selector is an optional field that contains
                              a selector expression (see Policy for sample syntax).
                              \ Only traffic that originates from (terminates at)
                              endpoints matching the selector will be matched. \n
                              Note that: in addition to the negated version of the
                              Selector (see NotSelector below), the selector expression
                              syntax itself supports negation.  The two types of negation
                              are subtly different. One negates the set of matched
                              endpoints, the other negates the whole match: \n \tSelector
                              = \"!has(my_label)\" matches packets that are from other
                              Calico-controlled \tendpoints that do not have the label
                              \"my_label\". \n \tNotSelector = \"has(my_label)\" matches
                              packets that are not from Calico-controlled \tendpoints
                              that do have the label \"my_label\". \n The effect is
                              that the latter will accept packets from non-Calico
                              sources whereas the former is limited to packets from
                              Calico-controlled endpoints."
                            type: string
                          serviceAccounts:
                            description: ServiceAccounts is an optional field that
                              restricts the rule to only apply to traffic that originates
                              from (or terminates at) a pod running as a matching
                              service account.
                            properties:
                              names:
                                description: Names is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account whose name is in the list.
                                items:
                                  type: string
                                type: array
                              selector:
                                description: Selector is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account that matches the given label selector. If
                                  both Names and Selector are specified then they
                                  are AND'ed.
                                type: string
                            type: object
                          services:
                            description: "Services is an optional field that contains
                              options for matching Kubernetes Services. If specified,
                              only traffic that originates from or terminates at endpoints
                              within the selected service(s) will be matched, and
                              only to/from each endpoint's port. \n Services cannot
                              be specified on the same rule as Selector, NotSelector,
                              NamespaceSelector, Nets, NotNets or ServiceAccounts.
                              \n Ports and NotPorts can only be specified with Services
                              on ingress rules."
                            properties:
                              name:
                                description: Name specifies the name of a Kubernetes
                                  Service to match.
                                type: string
                              namespace:
                                description: Namespace specifies the namespace of
                                  the given Service. If left empty, the rule will
                                  match within this policy's namespace.
                                type: string
                            type: object
                        type: object
                    required:
                    - action
                    type: object
                  type: array
                ingress:
                  description: The ordered set of ingress rules.  Each rule contains
                    a set of packet match criteria and a corresponding action to apply.
                  items:
                    description: "A Rule encapsulates a set of match criteria and
                      an action.  Both selector-based security Policy and security
                      Profiles reference rules - separated out as a list of rules
                      for both ingress and egress packet matching. \n Each positive
                      match criteria has a negated version, prefixed with \"Not\".
                      All the match criteria within a rule must be satisfied for a
                      packet to match. A single rule can contain the positive and
                      negative version of a match and both must be satisfied for the
                      rule to match."
                    properties:
                      action:
                        type: string
                      destination:
                        description: Destination contains the match criteria that
                          apply to destination entity.
                        properties:
                          namespaceSelector:
                            description: "NamespaceSelector is an optional field that
                              contains a selector expression. Only traffic that originates
                              from (or terminates at) endpoints within the selected
                              namespaces will be matched. When both NamespaceSelector
                              and another selector are defined on the same rule, then
                              only workload endpoints that are matched by both selectors
                              will be selected by the rule. \n For NetworkPolicy,
                              an empty NamespaceSelector implies that the Selector
                              is limited to selecting only workload endpoints in the
                              same namespace as the NetworkPolicy. \n For NetworkPolicy,
                              `global()` NamespaceSelector implies that the Selector
                              is limited to selecting only GlobalNetworkSet or HostEndpoint.
                              \n For GlobalNetworkPolicy, an empty NamespaceSelector
                              implies the Selector applies to workload endpoints across
                              all namespaces."
                            type: string
                          nets:
                            description: Nets is an optional field that restricts
                              the rule to only apply to traffic that originates from
                              (or terminates at) IP addresses in any of the given
                              subnets.
                            items:
                              type: string
                            type: array
                          notNets:
                            description: NotNets is the negated version of the Nets
                              field.
                            items:
                              type: string
                            type: array
                          notPorts:
                            description: NotPorts is the negated version of the Ports
                              field. Since only some protocols have ports, if any
                              ports are specified it requires the Protocol match in
                              the Rule to be set to "TCP" or "UDP".
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          notSelector:
                            description: NotSelector is the negated version of the
                              Selector field.  See Selector field for subtleties with
                              negated selectors.
                            type: string
                          ports:
                            description: "Ports is an optional field that restricts
                              the rule to only apply to traffic that has a source
                              (destination) port that matches one of these ranges/values.
                              This value is a list of integers or strings that represent
                              ranges of ports. \n Since only some protocols have ports,
                              if any ports are specified it requires the Protocol
                              match in the Rule to be set to \"TCP\" or \"UDP\"."
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          selector:
                            description: "Selector is an optional field that contains
                              a selector expression (see Policy for sample syntax).
                              \ Only traffic that originates from (terminates at)
                              endpoints matching the selector will be matched. \n
                              Note that: in addition to the negated version of the
                              Selector (see NotSelector below), the selector expression
                              syntax itself supports negation.  The two types of negation
                              are subtly different. One negates the set of matched
                              endpoints, the other negates the whole match: \n \tSelector
                              = \"!has(my_label)\" matches packets that are from other
                              Calico-controlled \tendpoints that do not have the label
                              \"my_label\". \n \tNotSelector = \"has(my_label)\" matches
                              packets that are not from Calico-controlled \tendpoints
                              that do have the label \"my_label\". \n The effect is
                              that the latter will accept packets from non-Calico
                              sources whereas the former is limited to packets from
                              Calico-controlled endpoints."
                            type: string
                          serviceAccounts:
                            description: ServiceAccounts is an optional field that
                              restricts the rule to only apply to traffic that originates
                              from (or terminates at) a pod running as a matching
                              service account.
                            properties:
                              names:
                                description: Names is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account whose name is in the list.
                                items:
                                  type: string
                                type: array
                              selector:
                                description: Selector is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account that matches the given label selector. If
                                  both Names and Selector are specified then they
                                  are AND'ed.
                                type: string
                            type: object
                          services:
                            description: "Services is an optional field that contains
                              options for matching Kubernetes Services. If specified,
                              only traffic that originates from or terminates at endpoints
                              within the selected service(s) will be matched, and
                              only to/from each endpoint's port. \n Services cannot
                              be specified on the same rule as Selector, NotSelector,
                              NamespaceSelector, Nets, NotNets or ServiceAccounts.
                              \n Ports and NotPorts can only be specified with Services
                              on ingress rules."
                            properties:
                              name:
                                description: Name specifies the name of a Kubernetes
                                  Service to match.
                                type: string
                              namespace:
                                description: Namespace specifies the namespace of
                                  the given Service. If left empty, the rule will
                                  match within this policy's namespace.
                                type: string
                            type: object
                        type: object
                      http:
                        description: HTTP contains match criteria that apply to HTTP
                          requests.
                        properties:
                          methods:
                            description: Methods is an optional field that restricts
                              the rule to apply only to HTTP requests that use one
                              of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple
                              methods are OR'd together.
                            items:
                              type: string
                            type: array
                          paths:
                            description: 'Paths is an optional field that restricts
                              the rule to apply to HTTP requests that use one of the
                              listed HTTP Paths. Multiple paths are OR''d together.
                              e.g: - exact: /foo - prefix: /bar NOTE: Each entry may
                              ONLY specify either a `exact` or a `prefix` match. The
                              validator will check for it.'
                            items:
                              description: 'HTTPPath specifies an HTTP path to match.
                                It may be either of the form: exact: <path>: which
                                matches the path exactly or prefix: <path-prefix>:
                                which matches the path prefix'
                              properties:
                                exact:
                                  type: string
                                prefix:
                                  type: string
                              type: object
                            type: array
                        type: object
                      icmp:
                        description: ICMP is an optional field that restricts the
                          rule to apply to a specific type and code of ICMP traffic.  This
                          should only be specified if the Protocol field is set to
                          "ICMP" or "ICMPv6".
                        properties:
                          code:
                            description: Match on a specific ICMP code.  If specified,
                              the Type value must also be specified. This is a technical
                              limitation imposed by the kernel's iptables firewall,
                              which Calico uses to enforce the rule.
                            type: integer
                          type:
                            description: Match on a specific ICMP type.  For example
                              a value of 8 refers to ICMP Echo Request (i.e. pings).
                            type: integer
                        type: object
                      ipVersion:
                        description: IPVersion is an optional field that restricts
                          the rule to only match a specific IP version.
                        type: integer
                      metadata:
                        description: Metadata contains additional information for
                          this rule
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: Annotations is a set of key value pairs that
                              give extra information about the rule
                            type: object
                        type: object
                      notICMP:
                        description: NotICMP is the negated version of the ICMP field.
                        properties:
                          code:
                            description: Match on a specific ICMP code.  If specified,
                              the Type value must also be specified. This is a technical
                              limitation imposed by the kernel's iptables firewall,
                              which Calico uses to enforce the rule.
                            type: integer
                          type:
                            description: Match on a specific ICMP type.  For example
                              a value of 8 refers to ICMP Echo Request (i.e. pings).
                            type: integer
                        type: object
                      notProtocol:
                        anyOf:
                        - type: integer
                        - type: string
                        description: NotProtocol is the negated version of the Protocol
                          field.
                        pattern: ^.*
                        x-kubernetes-int-or-string: true
                      protocol:
                        anyOf:
                        - type: integer
                        - type: string
                        description: "Protocol is an optional field that restricts
                          the rule to only apply to traffic of a specific IP protocol.
                          Required if any of the EntityRules contain Ports (because
                          ports only apply to certain protocols). \n Must be one of
                          these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\",
                          \"SCTP\", \"UDPLite\" or an integer in the range 1-255."
                        pattern: ^.*
                        x-kubernetes-int-or-string: true
                      source:
                        description: Source contains the match criteria that apply
                          to source entity.
                        properties:
                          namespaceSelector:
                            description: "NamespaceSelector is an optional field that
                              contains a selector expression. Only traffic that originates
                              from (or terminates at) endpoints within the selected
                              namespaces will be matched. When both NamespaceSelector
                              and another selector are defined on the same rule, then
                              only workload endpoints that are matched by both selectors
                              will be selected by the rule. \n For NetworkPolicy,
                              an empty NamespaceSelector implies that the Selector
                              is limited to selecting only workload endpoints in the
                              same namespace as the NetworkPolicy. \n For NetworkPolicy,
                              `global()` NamespaceSelector implies that the Selector
                              is limited to selecting only GlobalNetworkSet or HostEndpoint.
                              \n For GlobalNetworkPolicy, an empty NamespaceSelector
                              implies the Selector applies to workload endpoints across
                              all namespaces."
                            type: string
                          nets:
                            description: Nets is an optional field that restricts
                              the rule to only apply to traffic that originates from
                              (or terminates at) IP addresses in any of the given
                              subnets.
                            items:
                              type: string
                            type: array
                          notNets:
                            description: NotNets is the negated version of the Nets
                              field.
                            items:
                              type: string
                            type: array
                          notPorts:
                            description: NotPorts is the negated version of the Ports
                              field. Since only some protocols have ports, if any
                              ports are specified it requires the Protocol match in
                              the Rule to be set to "TCP" or "UDP".
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          notSelector:
                            description: NotSelector is the negated version of the
                              Selector field.  See Selector field for subtleties with
                              negated selectors.
                            type: string
                          ports:
                            description: "Ports is an optional field that restricts
                              the rule to only apply to traffic that has a source
                              (destination) port that matches one of these ranges/values.
                              This value is a list of integers or strings that represent
                              ranges of ports. \n Since only some protocols have ports,
                              if any ports are specified it requires the Protocol
                              match in the Rule to be set to \"TCP\" or \"UDP\"."
                            items:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^.*
                              x-kubernetes-int-or-string: true
                            type: array
                          selector:
                            description: "Selector is an optional field that contains
                              a selector expression (see Policy for sample syntax).
                              \ Only traffic that originates from (terminates at)
                              endpoints matching the selector will be matched. \n
                              Note that: in addition to the negated version of the
                              Selector (see NotSelector below), the selector expression
                              syntax itself supports negation.  The two types of negation
                              are subtly different. One negates the set of matched
                              endpoints, the other negates the whole match: \n \tSelector
                              = \"!has(my_label)\" matches packets that are from other
                              Calico-controlled \tendpoints that do not have the label
                              \"my_label\". \n \tNotSelector = \"has(my_label)\" matches
                              packets that are not from Calico-controlled \tendpoints
                              that do have the label \"my_label\". \n The effect is
                              that the latter will accept packets from non-Calico
                              sources whereas the former is limited to packets from
                              Calico-controlled endpoints."
                            type: string
                          serviceAccounts:
                            description: ServiceAccounts is an optional field that
                              restricts the rule to only apply to traffic that originates
                              from (or terminates at) a pod running as a matching
                              service account.
                            properties:
                              names:
                                description: Names is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account whose name is in the list.
                                items:
                                  type: string
                                type: array
                              selector:
                                description: Selector is an optional field that restricts
                                  the rule to only apply to traffic that originates
                                  from (or terminates at) a pod running as a service
                                  account that matches the given label selector. If
                                  both Names and Selector are specified then they
                                  are AND'ed.
                                type: string
                            type: object
                          services:
                            description: "Services is an optional field that contains
                              options for matching Kubernetes Services. If specified,
                              only traffic that originates from or terminates at endpoints
                              within the selected service(s) will be matched, and
                              only to/from each endpoint's port. \n Services cannot
                              be specified on the same rule as Selector, NotSelector,
                              NamespaceSelector, Nets, NotNets or ServiceAccounts.
                              \n Ports and NotPorts can only be specified with Services
                              on ingress rules."
                            properties:
                              name:
                                description: Name specifies the name of a Kubernetes
                                  Service to match.
                                type: string
                              namespace:
                                description: Namespace specifies the namespace of
                                  the given Service. If left empty, the rule will
                                  match within this policy's namespace.
                                type: string
                            type: object
                        type: object
                    required:
                    - action
                    type: object
                  type: array
                order:
                  description: Order is an optional field that specifies the order
                    in which the policy is applied. Policies with higher "order" are
                    applied after those with lower order.  If the order is omitted,
                    it may be considered to be "infinite" - i.e. the policy will be
                    applied last.  Policies with identical order will be applied in
                    alphanumerical order based on the Policy "Name".
                  type: number
                selector:
                  description: "The selector is an expression used to pick pick out
                    the endpoints that the policy should be applied to. \n Selector
                    expressions follow this syntax: \n \tlabel == \"string_literal\"
                    \ ->  comparison, e.g. my_label == \"foo bar\" \tlabel != \"string_literal\"
                    \  ->  not equal; also matches if label is not present \tlabel
                    in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label
                    X is one of \"a\", \"b\", \"c\" \tlabel not in { \"a\", \"b\",
                    \"c\", ... }  ->  true if the value of label X is not one of \"a\",
                    \"b\", \"c\" \thas(label_name)  -> True if that label is present
                    \t! expr -> negation of expr \texpr && expr  -> Short-circuit
                    and \texpr || expr  -> Short-circuit or \t( expr ) -> parens for
                    grouping \tall() or the empty selector -> matches all endpoints.
                    \n Label names are allowed to contain alphanumerics, -, _ and
                    /. String literals are more permissive but they do not support
                    escape characters. \n Examples (with made-up labels): \n \ttype
                    == \"webserver\" && deployment == \"prod\" \ttype in {\"frontend\",
                    \"backend\"} \tdeployment != \"dev\" \t! has(label_name)"
                  type: string
                serviceAccountSelector:
                  description: ServiceAccountSelector is an optional field for an
                    expression used to select a pod based on service accounts.
                  type: string
                types:
                  description: "Types indicates whether this policy applies to ingress,
                    or to egress, or to both.  When not explicitly specified (and
                    so the value on creation is empty or nil), Calico defaults Types
                    according to what Ingress and Egress are present in the policy.
                    \ The default is: \n - [ PolicyTypeIngress ], if there are no
                    Egress rules (including the case where there are   also no Ingress
                    rules) \n - [ PolicyTypeEgress ], if there are Egress rules but
                    no Ingress rules \n - [ PolicyTypeIngress, PolicyTypeEgress ],
                    if there are both Ingress and Egress rules. \n When the policy
                    is read back again, Types will always be one of these values,
                    never empty or nil."
                  items:
                    description: PolicyType enumerates the possible values of the
                      PolicySpec Types field.
                    type: string
                  type: array
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: NetworkPolicy
      listKind: NetworkPolicyList
      plural: networkpolicies
      singular: networkpolicy
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"name":"networksets.crd.projectcalico.org"},"spec":{"group":"crd.projectcalico.org","names":{"kind":"NetworkSet","listKind":"NetworkSetList","plural":"networksets","singular":"networkset"},"scope":"Namespaced","versions":[{"name":"v1","schema":{"openAPIV3Schema":{"description":"NetworkSet is the Namespaced-equivalent of the GlobalNetworkSet.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"NetworkSetSpec contains the specification for a NetworkSet resource.","properties":{"nets":{"description":"The list of IP networks that belong to this set.","items":{"type":"string"},"type":"array"}},"type":"object"}},"type":"object"}},"served":true,"storage":true}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T01:27:49Z"
    generation: 1
    name: networksets.crd.projectcalico.org
    resourceVersion: "123"
    uid: 8e24e1bb-1464-40ed-b814-1a6141d384f8
  spec:
    conversion:
      strategy: None
    group: crd.projectcalico.org
    names:
      kind: NetworkSet
      listKind: NetworkSetList
      plural: networksets
      singular: networkset
    scope: Namespaced
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: NetworkSet is the Namespaced-equivalent of the GlobalNetworkSet.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: NetworkSetSpec contains the specification for a NetworkSet
                resource.
              properties:
                nets:
                  description: The list of IP networks that belong to this set.
                  items:
                    type: string
                  type: array
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: NetworkSet
      listKind: NetworkSetList
      plural: networksets
      singular: networkset
    conditions:
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T01:27:49Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephobjectrealms.ceph.rook.io
    resourceVersion: "7527"
    uid: 1351d471-4fbf-4c1a-93d2-7f2199808d4d
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephObjectRealm
      listKind: CephObjectRealmList
      plural: cephobjectrealms
      shortNames:
      - cephor
      singular: cephobjectrealm
    scope: Namespaced
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: CephObjectRealm represents a Ceph Object Store Gateway Realm
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: ObjectRealmSpec represent the spec of an ObjectRealm
              nullable: true
              properties:
                pull:
                  description: PullSpec represents the pulling specification of a
                    Ceph Object Storage Gateway Realm
                  properties:
                    endpoint:
                      pattern: ^https*://
                      type: string
                  type: object
              type: object
            status:
              description: Status represents the status of an object
              properties:
                conditions:
                  items:
                    description: Condition represents a status condition on any Rook-Ceph
                      Custom Resource.
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        format: date-time
                        type: string
                      message:
                        type: string
                      reason:
                        description: ConditionReason is a reason for a condition
                        type: string
                      status:
                        type: string
                      type:
                        description: ConditionType represent a resource's status
                        type: string
                    type: object
                  type: array
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  type: string
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephObjectRealm
      listKind: CephObjectRealmList
      plural: cephobjectrealms
      shortNames:
      - cephor
      singular: cephobjectrealm
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephbuckettopics.ceph.rook.io
    resourceVersion: "7531"
    uid: e88cf39c-62e4-410f-83be-b79bea22e761
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephBucketTopic
      listKind: CephBucketTopicList
      plural: cephbuckettopics
      shortNames:
      - cephbt
      singular: cephbuckettopic
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.phase
        name: Phase
        type: string
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: CephBucketTopic represents a Ceph Object Topic for Bucket Notifications
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: BucketTopicSpec represent the spec of a Bucket Topic
              properties:
                endpoint:
                  description: Contains the endpoint spec of the topic
                  properties:
                    amqp:
                      description: Spec of AMQP endpoint
                      properties:
                        ackLevel:
                          default: broker
                          description: The ack level required for this topic (none/broker/routeable)
                          enum:
                          - none
                          - broker
                          - routeable
                          type: string
                        disableVerifySSL:
                          description: Indicate whether the server certificate is
                            validated by the client or not
                          type: boolean
                        exchange:
                          description: Name of the exchange that is used to route
                            messages based on topics
                          minLength: 1
                          type: string
                        uri:
                          description: The URI of the AMQP endpoint to push notification
                            to
                          minLength: 1
                          type: string
                      required:
                      - exchange
                      - uri
                      type: object
                    http:
                      description: Spec of HTTP endpoint
                      properties:
                        disableVerifySSL:
                          description: Indicate whether the server certificate is
                            validated by the client or not
                          type: boolean
                        sendCloudEvents:
                          description: 'Send the notifications with the CloudEvents
                            header: https://github.com/cloudevents/spec/blob/main/cloudevents/adapters/aws-s3.md'
                          type: boolean
                        uri:
                          description: The URI of the HTTP endpoint to push notification
                            to
                          minLength: 1
                          type: string
                      required:
                      - uri
                      type: object
                    kafka:
                      description: Spec of Kafka endpoint
                      properties:
                        ackLevel:
                          default: broker
                          description: The ack level required for this topic (none/broker)
                          enum:
                          - none
                          - broker
                          type: string
                        disableVerifySSL:
                          description: Indicate whether the server certificate is
                            validated by the client or not
                          type: boolean
                        mechanism:
                          default: PLAIN
                          description: The authentication mechanism for this topic
                            (PLAIN/SCRAM-SHA-512/SCRAM-SHA-256/GSSAPI/OAUTHBEARER)
                          enum:
                          - PLAIN
                          - SCRAM-SHA-512
                          - SCRAM-SHA-256
                          - GSSAPI
                          - OAUTHBEARER
                          type: string
                        passwordSecretRef:
                          description: The kafka password to use for authentication
                          properties:
                            key:
                              description: The key of the secret to select from.  Must
                                be a valid secret key.
                              type: string
                            name:
                              default: ""
                              description: |-
                                Name of the referent.
                                This field is effectively required, but due to backwards compatibility is
                                allowed to be empty. Instances of this type with an empty value here are
                                almost certainly wrong.
                                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              type: string
                            optional:
                              description: Specify whether the Secret or its key must
                                be defined
                              type: boolean
                          required:
                          - key
                          type: object
                          x-kubernetes-map-type: atomic
                        uri:
                          description: The URI of the Kafka endpoint to push notification
                            to
                          minLength: 1
                          type: string
                        useSSL:
                          description: Indicate whether to use SSL when communicating
                            with the broker
                          type: boolean
                        userSecretRef:
                          description: The kafka user name to use for authentication
                          properties:
                            key:
                              description: The key of the secret to select from.  Must
                                be a valid secret key.
                              type: string
                            name:
                              default: ""
                              description: |-
                                Name of the referent.
                                This field is effectively required, but due to backwards compatibility is
                                allowed to be empty. Instances of this type with an empty value here are
                                almost certainly wrong.
                                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              type: string
                            optional:
                              description: Specify whether the Secret or its key must
                                be defined
                              type: boolean
                          required:
                          - key
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                      - uri
                      type: object
                  type: object
                objectStoreName:
                  description: The name of the object store on which to define the
                    topic
                  minLength: 1
                  type: string
                objectStoreNamespace:
                  description: The namespace of the object store on which to define
                    the topic
                  minLength: 1
                  type: string
                opaqueData:
                  description: Data which is sent in each event
                  type: string
                persistent:
                  description: Indication whether notifications to this endpoint are
                    persistent or not
                  type: boolean
              required:
              - endpoint
              - objectStoreName
              - objectStoreNamespace
              type: object
            status:
              description: BucketTopicStatus represents the Status of a CephBucketTopic
              properties:
                ARN:
                  description: The ARN of the topic generated by the RGW
                  nullable: true
                  type: string
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  type: string
                secrets:
                  items:
                    properties:
                      name:
                        description: name is unique within a namespace to reference
                          a secret resource.
                        type: string
                      namespace:
                        description: namespace defines the space within which the
                          secret name must be unique.
                        type: string
                      resourceVersion:
                        type: string
                      uid:
                        description: |-
                          UID is a type that holds unique ID values, including UUIDs.  Because we
                          don't ONLY use UUIDs, this is an alias to string.  Being a type captures
                          intent and helps make sure that UIDs and names do not get conflated.
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  type: array
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephBucketTopic
      listKind: CephBucketTopicList
      plural: cephbuckettopics
      shortNames:
      - cephbt
      singular: cephbuckettopic
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: objectbucketclaims.objectbucket.io
    resourceVersion: "7545"
    uid: bf97924e-f94e-42de-b9dc-e8e2773bfd1e
  spec:
    conversion:
      strategy: None
    group: objectbucket.io
    names:
      kind: ObjectBucketClaim
      listKind: ObjectBucketClaimList
      plural: objectbucketclaims
      shortNames:
      - obc
      - obcs
      singular: objectbucketclaim
    scope: Namespaced
    versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            spec:
              properties:
                additionalConfig:
                  nullable: true
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                bucketName:
                  type: string
                generateBucketName:
                  type: string
                objectBucketName:
                  type: string
                storageClassName:
                  type: string
              type: object
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: ObjectBucketClaim
      listKind: ObjectBucketClaimList
      plural: objectbucketclaims
      shortNames:
      - obc
      - obcs
      singular: objectbucketclaim
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephobjectzonegroups.ceph.rook.io
    resourceVersion: "7557"
    uid: 5e20d095-58d9-404f-b0aa-df9624aa726d
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephObjectZoneGroup
      listKind: CephObjectZoneGroupList
      plural: cephobjectzonegroups
      shortNames:
      - cephozg
      singular: cephobjectzonegroup
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.phase
        name: Phase
        type: string
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: CephObjectZoneGroup represents a Ceph Object Store Gateway
            Zone Group
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: ObjectZoneGroupSpec represent the spec of an ObjectZoneGroup
              properties:
                realm:
                  description: The display name for the ceph users
                  type: string
              required:
              - realm
              type: object
            status:
              description: Status represents the status of an object
              properties:
                conditions:
                  items:
                    description: Condition represents a status condition on any Rook-Ceph
                      Custom Resource.
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        format: date-time
                        type: string
                      message:
                        type: string
                      reason:
                        description: ConditionReason is a reason for a condition
                        type: string
                      status:
                        type: string
                      type:
                        description: ConditionType represent a resource's status
                        type: string
                    type: object
                  type: array
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  type: string
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephObjectZoneGroup
      listKind: CephObjectZoneGroupList
      plural: cephobjectzonegroups
      shortNames:
      - cephozg
      singular: cephobjectzonegroup
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: objectbuckets.objectbucket.io
    resourceVersion: "7566"
    uid: 73c7fe7a-bfd2-4b5f-84ee-6a1238e74d68
  spec:
    conversion:
      strategy: None
    group: objectbucket.io
    names:
      kind: ObjectBucket
      listKind: ObjectBucketList
      plural: objectbuckets
      shortNames:
      - ob
      - obs
      singular: objectbucket
    scope: Cluster
    versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            spec:
              properties:
                additionalState:
                  nullable: true
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                authentication:
                  items:
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  nullable: true
                  type: object
                claimRef:
                  nullable: true
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                endpoint:
                  nullable: true
                  properties:
                    additionalConfig:
                      nullable: true
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    bucketHost:
                      type: string
                    bucketName:
                      type: string
                    bucketPort:
                      format: int32
                      type: integer
                    region:
                      type: string
                    subRegion:
                      type: string
                  type: object
                reclaimPolicy:
                  type: string
                storageClassName:
                  type: string
              type: object
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: ObjectBucket
      listKind: ObjectBucketList
      plural: objectbuckets
      shortNames:
      - ob
      - obs
      singular: objectbucket
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephbucketnotifications.ceph.rook.io
    resourceVersion: "7576"
    uid: ba00f7c2-473c-4b27-9a5a-2963b5e928b8
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephBucketNotification
      listKind: CephBucketNotificationList
      plural: cephbucketnotifications
      shortNames:
      - cephbn
      singular: cephbucketnotification
    scope: Namespaced
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: CephBucketNotification represents a Bucket Notifications
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: BucketNotificationSpec represent the spec of a Bucket Notification
              properties:
                events:
                  description: List of events that should trigger the notification
                  items:
                    description: BucketNotificationSpec represent the event type of
                      the bucket notification
                    enum:
                    - s3:ObjectCreated:*
                    - s3:ObjectCreated:Put
                    - s3:ObjectCreated:Post
                    - s3:ObjectCreated:Copy
                    - s3:ObjectCreated:CompleteMultipartUpload
                    - s3:ObjectRemoved:*
                    - s3:ObjectRemoved:Delete
                    - s3:ObjectRemoved:DeleteMarkerCreated
                    type: string
                  type: array
                filter:
                  description: Spec of notification filter
                  properties:
                    keyFilters:
                      description: Filters based on the object's key
                      items:
                        description: NotificationKeyFilterRule represent a single
                          key rule in the Notification Filter spec
                        properties:
                          name:
                            description: Name of the filter - prefix/suffix/regex
                            enum:
                            - prefix
                            - suffix
                            - regex
                            type: string
                          value:
                            description: Value to filter on
                            type: string
                        required:
                        - name
                        - value
                        type: object
                      type: array
                    metadataFilters:
                      description: Filters based on the object's metadata
                      items:
                        description: NotificationFilterRule represent a single rule
                          in the Notification Filter spec
                        properties:
                          name:
                            description: Name of the metadata or tag
                            minLength: 1
                            type: string
                          value:
                            description: Value to filter on
                            type: string
                        required:
                        - name
                        - value
                        type: object
                      type: array
                    tagFilters:
                      description: Filters based on the object's tags
                      items:
                        description: NotificationFilterRule represent a single rule
                          in the Notification Filter spec
                        properties:
                          name:
                            description: Name of the metadata or tag
                            minLength: 1
                            type: string
                          value:
                            description: Value to filter on
                            type: string
                        required:
                        - name
                        - value
                        type: object
                      type: array
                  type: object
                topic:
                  description: The name of the topic associated with this notification
                  minLength: 1
                  type: string
              required:
              - topic
              type: object
            status:
              description: Status represents the status of an object
              properties:
                conditions:
                  items:
                    description: Condition represents a status condition on any Rook-Ceph
                      Custom Resource.
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        format: date-time
                        type: string
                      message:
                        type: string
                      reason:
                        description: ConditionReason is a reason for a condition
                        type: string
                      status:
                        type: string
                      type:
                        description: ConditionType represent a resource's status
                        type: string
                    type: object
                  type: array
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  type: string
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephBucketNotification
      listKind: CephBucketNotificationList
      plural: cephbucketnotifications
      shortNames:
      - cephbn
      singular: cephbucketnotification
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephobjectstoreusers.ceph.rook.io
    resourceVersion: "7579"
    uid: 84808dfd-fee5-4908-ae50-423f6824e029
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephObjectStoreUser
      listKind: CephObjectStoreUserList
      plural: cephobjectstoreusers
      shortNames:
      - rcou
      - objectuser
      - cephosu
      singular: cephobjectstoreuser
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.phase
        name: Phase
        type: string
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: CephObjectStoreUser represents a Ceph Object Store Gateway
            User
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: ObjectStoreUserSpec represent the spec of an Objectstoreuser
              properties:
                capabilities:
                  description: Additional admin-level capabilities for the Ceph object
                    store user
                  nullable: true
                  properties:
                    amz-cache:
                      description: Add capabilities for user to send request to RGW
                        Cache API header. Documented in https://docs.ceph.com/en/latest/radosgw/rgw-cache/#cache-api
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    bilog:
                      description: Add capabilities for user to change bucket index
                        logging. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    bucket:
                      description: Admin capabilities to read/write Ceph object store
                        buckets. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    buckets:
                      description: Admin capabilities to read/write Ceph object store
                        buckets. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    datalog:
                      description: Add capabilities for user to change data logging.
                        Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    info:
                      description: Admin capabilities to read/write information about
                        the user. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    mdlog:
                      description: Add capabilities for user to change metadata logging.
                        Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    metadata:
                      description: Admin capabilities to read/write Ceph object store
                        metadata. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    oidc-provider:
                      description: Add capabilities for user to change oidc provider.
                        Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    ratelimit:
                      description: Add capabilities for user to set rate limiter for
                        user and bucket. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    roles:
                      description: Admin capabilities to read/write roles for user.
                        Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    usage:
                      description: Admin capabilities to read/write Ceph object store
                        usage. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    user:
                      description: Admin capabilities to read/write Ceph object store
                        users. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    user-policy:
                      description: Add capabilities for user to change user policies.
                        Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    users:
                      description: Admin capabilities to read/write Ceph object store
                        users. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                    zone:
                      description: Admin capabilities to read/write Ceph object store
                        zones. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
                      enum:
                      - '*'
                      - read
                      - write
                      - read, write
                      type: string
                  type: object
                clusterNamespace:
                  description: The namespace where the parent CephCluster and CephObjectStore
                    are found
                  type: string
                displayName:
                  description: The display name for the ceph users
                  type: string
                keys:
                  description: |-
                    Allows specifying credentials for the user. If not provided, the operator
                    will generate them.
                  items:
                    description: |-
                      ObjectUserKey defines a set of rgw user access credentials to be retrieved
                      from secret resources.
                    properties:
                      accessKeyRef:
                        description: Secret key selector for the access_key (commonly
                          referred to as AWS_ACCESS_KEY_ID).
                        properties:
                          key:
                            description: The key of the secret to select from.  Must
                              be a valid secret key.
                            type: string
                          name:
                            default: ""
                            description: |-
                              Name of the referent.
                              This field is effectively required, but due to backwards compatibility is
                              allowed to be empty. Instances of this type with an empty value here are
                              almost certainly wrong.
                              More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            type: string
                          optional:
                            description: Specify whether the Secret or its key must
                              be defined
                            type: boolean
                        required:
                        - key
                        type: object
                        x-kubernetes-map-type: atomic
                      secretKeyRef:
                        description: Secret key selector for the secret_key (commonly
                          referred to as AWS_SECRET_ACCESS_KEY).
                        properties:
                          key:
                            description: The key of the secret to select from.  Must
                              be a valid secret key.
                            type: string
                          name:
                            default: ""
                            description: |-
                              Name of the referent.
                              This field is effectively required, but due to backwards compatibility is
                              allowed to be empty. Instances of this type with an empty value here are
                              almost certainly wrong.
                              More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            type: string
                          optional:
                            description: Specify whether the Secret or its key must
                              be defined
                            type: boolean
                        required:
                        - key
                        type: object
                        x-kubernetes-map-type: atomic
                    type: object
                  type: array
                quotas:
                  description: ObjectUserQuotaSpec can be used to set quotas for the
                    object store user to limit their usage. See the [Ceph docs](https://docs.ceph.com/en/latest/radosgw/admin/?#quota-management)
                    for more
                  nullable: true
                  properties:
                    maxBuckets:
                      description: Maximum bucket limit for the ceph user
                      nullable: true
                      type: integer
                    maxObjects:
                      description: Maximum number of objects across all the user's
                        buckets
                      format: int64
                      nullable: true
                      type: integer
                    maxSize:
                      anyOf:
                      - type: integer
                      - type: string
                      description: |-
                        Maximum size limit of all objects across all the user's buckets
                        See https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity for more info.
                      nullable: true
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                  type: object
                store:
                  description: The store the user will be created in
                  type: string
              type: object
            status:
              description: ObjectStoreUserStatus represents the status Ceph Object
                Store Gateway User
              properties:
                info:
                  additionalProperties:
                    type: string
                  nullable: true
                  type: object
                keys:
                  items:
                    properties:
                      name:
                        description: name is unique within a namespace to reference
                          a secret resource.
                        type: string
                      namespace:
                        description: namespace defines the space within which the
                          secret name must be unique.
                        type: string
                      resourceVersion:
                        type: string
                      uid:
                        description: |-
                          UID is a type that holds unique ID values, including UUIDs.  Because we
                          don't ONLY use UUIDs, this is an alias to string.  Being a type captures
                          intent and helps make sure that UIDs and names do not get conflated.
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  nullable: true
                  type: array
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  type: string
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephObjectStoreUser
      listKind: CephObjectStoreUserList
      plural: cephobjectstoreusers
      shortNames:
      - rcou
      - objectuser
      - cephosu
      singular: cephobjectstoreuser
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephcosidrivers.ceph.rook.io
    resourceVersion: "7582"
    uid: 80514a10-39e4-484a-9990-392914030ffb
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephCOSIDriver
      listKind: CephCOSIDriverList
      plural: cephcosidrivers
      shortNames:
      - cephcosi
      singular: cephcosidriver
    scope: Namespaced
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: CephCOSIDriver represents the CRD for the Ceph COSI Driver
            Deployment
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: Spec represents the specification of a Ceph COSI Driver
              properties:
                deploymentStrategy:
                  description: DeploymentStrategy is the strategy to use to deploy
                    the COSI driver.
                  enum:
                  - Never
                  - Auto
                  - Always
                  type: string
                image:
                  description: Image is the container image to run the Ceph COSI driver
                  type: string
                objectProvisionerImage:
                  description: ObjectProvisionerImage is the container image to run
                    the COSI driver sidecar
                  type: string
                placement:
                  properties:
                    nodeAffinity:
                      properties:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              preference:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchFields:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                type: object
                                x-kubernetes-map-type: atomic
                              weight:
                                format: int32
                                type: integer
                            required:
                            - preference
                            - weight
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                        requiredDuringSchedulingIgnoredDuringExecution:
                          properties:
                            nodeSelectorTerms:
                              items:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchFields:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                type: object
                                x-kubernetes-map-type: atomic
                              type: array
                              x-kubernetes-list-type: atomic
                          required:
                          - nodeSelectorTerms
                          type: object
                          x-kubernetes-map-type: atomic
                      type: object
                    podAffinity:
                      properties:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              podAffinityTerm:
                                properties:
                                  labelSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  matchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  mismatchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  namespaceSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  namespaces:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  topologyKey:
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              weight:
                                format: int32
                                type: integer
                            required:
                            - podAffinityTerm
                            - weight
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                        requiredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              labelSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              matchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              mismatchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              namespaceSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              namespaces:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              topologyKey:
                                type: string
                            required:
                            - topologyKey
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                      type: object
                    podAntiAffinity:
                      properties:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              podAffinityTerm:
                                properties:
                                  labelSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  matchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  mismatchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  namespaceSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  namespaces:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  topologyKey:
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              weight:
                                format: int32
                                type: integer
                            required:
                            - podAffinityTerm
                            - weight
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                        requiredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              labelSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              matchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              mismatchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              namespaceSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              namespaces:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              topologyKey:
                                type: string
                            required:
                            - topologyKey
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                      type: object
                    tolerations:
                      items:
                        properties:
                          effect:
                            type: string
                          key:
                            type: string
                          operator:
                            type: string
                          tolerationSeconds:
                            format: int64
                            type: integer
                          value:
                            type: string
                        type: object
                      type: array
                    topologySpreadConstraints:
                      items:
                        properties:
                          labelSelector:
                            properties:
                              matchExpressions:
                                items:
                                  properties:
                                    key:
                                      type: string
                                    operator:
                                      type: string
                                    values:
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                                x-kubernetes-list-type: atomic
                              matchLabels:
                                additionalProperties:
                                  type: string
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          matchLabelKeys:
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          maxSkew:
                            format: int32
                            type: integer
                          minDomains:
                            format: int32
                            type: integer
                          nodeAffinityPolicy:
                            type: string
                          nodeTaintsPolicy:
                            type: string
                          topologyKey:
                            type: string
                          whenUnsatisfiable:
                            type: string
                        required:
                        - maxSkew
                        - topologyKey
                        - whenUnsatisfiable
                        type: object
                      type: array
                  type: object
                resources:
                  description: Resources is the resource requirements for the COSI
                    driver
                  properties:
                    claims:
                      description: |-
                        Claims lists the names of resources, defined in spec.resourceClaims,
                        that are used by this container.

                        This is an alpha field and requires enabling the
                        DynamicResourceAllocation feature gate.

                        This field is immutable. It can only be set for containers.
                      items:
                        description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                        properties:
                          name:
                            description: |-
                              Name must match the name of one entry in pod.spec.resourceClaims of
                              the Pod where this field is used. It makes that resource available
                              inside a container.
                            type: string
                          request:
                            description: |-
                              Request is the name chosen for a request in the referenced claim.
                              If empty, everything from the claim is made available, otherwise
                              only the result of this request.
                            type: string
                        required:
                        - name
                        type: object
                      type: array
                      x-kubernetes-list-map-keys:
                      - name
                      x-kubernetes-list-type: map
                    limits:
                      additionalProperties:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: |-
                        Limits describes the maximum amount of compute resources allowed.
                        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                      type: object
                    requests:
                      additionalProperties:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: |-
                        Requests describes the minimum amount of compute resources required.
                        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                        otherwise to an implementation-defined value. Requests cannot exceed Limits.
                        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                      type: object
                  type: object
              type: object
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: CephCOSIDriver
      listKind: CephCOSIDriverList
      plural: cephcosidrivers
      shortNames:
      - cephcosi
      singular: cephcosidriver
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephblockpools.ceph.rook.io
    resourceVersion: "7587"
    uid: 620bf342-a542-4d44-b376-3c3430c41c33
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephBlockPool
      listKind: CephBlockPoolList
      plural: cephblockpools
      shortNames:
      - cephbp
      singular: cephblockpool
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.phase
        name: Phase
        type: string
      - jsonPath: .status.info.type
        name: Type
        type: string
      - jsonPath: .status.info.failureDomain
        name: FailureDomain
        type: string
      - jsonPath: .spec.replicated.size
        name: Replication
        priority: 1
        type: integer
      - jsonPath: .spec.erasureCoded.codingChunks
        name: EC-CodingChunks
        priority: 1
        type: integer
      - jsonPath: .spec.erasureCoded.dataChunks
        name: EC-DataChunks
        priority: 1
        type: integer
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: CephBlockPool represents a Ceph Storage Pool
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: |-
                NamedBlockPoolSpec allows a block pool to be created with a non-default name.
                This is more specific than the NamedPoolSpec so we get schema validation on the
                allowed pool names that can be specified.
              properties:
                application:
                  description: The application name to set on the pool. Only expected
                    to be set for rgw pools.
                  type: string
                compressionMode:
                  description: |-
                    DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
                    The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
                    Do NOT set a default value for kubebuilder as this will override the Parameters
                  enum:
                  - none
                  - passive
                  - aggressive
                  - force
                  - ""
                  nullable: true
                  type: string
                crushRoot:
                  description: The root of the crush hierarchy utilized by the pool
                  nullable: true
                  type: string
                deviceClass:
                  description: The device class the OSD should set to for use in the
                    pool
                  nullable: true
                  type: string
                enableCrushUpdates:
                  description: Allow rook operator to change the pool CRUSH tunables
                    once the pool is created
                  type: boolean
                enableRBDStats:
                  description: EnableRBDStats is used to enable gathering of statistics
                    for all RBD images in the pool
                  type: boolean
                erasureCoded:
                  description: The erasure code settings
                  properties:
                    algorithm:
                      description: The algorithm for erasure coding
                      type: string
                    codingChunks:
                      description: |-
                        Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                        This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
                      minimum: 0
                      type: integer
                    dataChunks:
                      description: |-
                        Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                        The number of chunks required to recover an object when any single OSD is lost is the same
                        as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
                      minimum: 0
                      type: integer
                  required:
                  - codingChunks
                  - dataChunks
                  type: object
                failureDomain:
                  description: 'The failure domain: osd/host/(region or zone if available)
                    - technically also any type in the crush map'
                  type: string
                mirroring:
                  description: The mirroring settings
                  properties:
                    enabled:
                      description: Enabled whether this pool is mirrored or not
                      type: boolean
                    mode:
                      description: 'Mode is the mirroring mode: pool, image or init-only.'
                      enum:
                      - pool
                      - image
                      - init-only
                      type: string
                    peers:
                      description: Peers represents the peers spec
                      nullable: true
                      properties:
                        secretNames:
                          description: SecretNames represents the Kubernetes Secret
                            names to add rbd-mirror or cephfs-mirror peers
                          items:
                            type: string
                          type: array
                      type: object
                    snapshotSchedules:
                      description: SnapshotSchedules is the scheduling of snapshot
                        for mirrored images/pools
                      items:
                        description: SnapshotScheduleSpec represents the snapshot
                          scheduling settings of a mirrored pool
                        properties:
                          interval:
                            description: Interval represent the periodicity of the
                              snapshot.
                            type: string
                          path:
                            description: Path is the path to snapshot, only valid
                              for CephFS
                            type: string
                          startTime:
                            description: StartTime indicates when to start the snapshot
                            type: string
                        type: object
                      type: array
                  type: object
                name:
                  description: The desired name of the pool if different from the
                    CephBlockPool CR name.
                  enum:
                  - .rgw.root
                  - .nfs
                  - .mgr
                  type: string
                parameters:
                  additionalProperties:
                    type: string
                  description: Parameters is a list of properties to enable on a given
                    pool
                  nullable: true
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                quotas:
                  description: The quota settings
                  nullable: true
                  properties:
                    maxBytes:
                      description: |-
                        MaxBytes represents the quota in bytes
                        Deprecated in favor of MaxSize
                      format: int64
                      type: integer
                    maxObjects:
                      description: MaxObjects represents the quota in objects
                      format: int64
                      type: integer
                    maxSize:
                      description: MaxSize represents the quota in bytes as a string
                      pattern: ^[0-9]+[\.]?[0-9]*([KMGTPE]i|[kMGTPE])?$
                      type: string
                  type: object
                replicated:
                  description: The replication settings
                  properties:
                    hybridStorage:
                      description: HybridStorage represents hybrid storage tier settings
                      nullable: true
                      properties:
                        primaryDeviceClass:
                          description: PrimaryDeviceClass represents high performance
                            tier (for example SSD or NVME) for Primary OSD
                          minLength: 1
                          type: string
                        secondaryDeviceClass:
                          description: SecondaryDeviceClass represents low performance
                            tier (for example HDDs) for remaining OSDs
                          minLength: 1
                          type: string
                      required:
                      - primaryDeviceClass
                      - secondaryDeviceClass
                      type: object
                    replicasPerFailureDomain:
                      description: ReplicasPerFailureDomain the number of replica
                        in the specified failure domain
                      minimum: 1
                      type: integer
                    requireSafeReplicaSize:
                      description: RequireSafeReplicaSize if false allows you to set
                        replica 1
                      type: boolean
                    size:
                      description: Size - Number of copies per object in a replicated
                        storage pool, including the object itself (required for replicated
                        pool type)
                      minimum: 0
                      type: integer
                    subFailureDomain:
                      description: SubFailureDomain the name of the sub-failure domain
                      type: string
                    targetSizeRatio:
                      description: TargetSizeRatio gives a hint (%) to Ceph in terms
                        of expected consumption of the total cluster capacity
                      minimum: 0
                      type: number
                  required:
                  - size
                  type: object
                statusCheck:
                  description: The mirroring statusCheck
                  properties:
                    mirror:
                      description: HealthCheckSpec represents the health check of
                        an object store bucket
                      nullable: true
                      properties:
                        disabled:
                          type: boolean
                        interval:
                          description: Interval is the internal in second or minute
                            for the health check to run like 60s for 60 seconds
                          type: string
                        timeout:
                          type: string
                      type: object
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
              type: object
            status:
              description: CephBlockPoolStatus represents the mirroring status of
                Ceph Storage Pool
              properties:
                conditions:
                  items:
                    description: Condition represents a status condition on any Rook-Ceph
                      Custom Resource.
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        format: date-time
                        type: string
                      message:
                        type: string
                      reason:
                        description: ConditionReason is a reason for a condition
                        type: string
                      status:
                        type: string
                      type:
                        description: ConditionType represent a resource's status
                        type: string
                    type: object
                  type: array
                info:
                  additionalProperties:
                    type: string
                  nullable: true
                  type: object
                mirroringInfo:
                  description: MirroringInfoSpec is the status of the pool/radosnamespace
                    mirroring
                  properties:
                    details:
                      type: string
                    lastChanged:
                      type: string
                    lastChecked:
                      type: string
                    mode:
                      description: Mode is the mirroring mode
                      type: string
                    peers:
                      description: Peers are the list of peer sites connected to that
                        cluster
                      items:
                        description: PeersSpec contains peer details
                        properties:
                          client_name:
                            description: ClientName is the CephX user used to connect
                              to the peer
                            type: string
                          direction:
                            description: Direction is the peer mirroring direction
                            type: string
                          mirror_uuid:
                            description: MirrorUUID is the mirror UUID
                            type: string
                          site_name:
                            description: SiteName is the current site name
                            type: string
                          uuid:
                            description: UUID is the peer UUID
                            type: string
                        type: object
                      type: array
                    site_name:
                      description: SiteName is the current site name
                      type: string
                  type: object
                mirroringStatus:
                  description: MirroringStatusSpec is the status of the pool/radosNamespace
                    mirroring
                  properties:
                    details:
                      description: Details contains potential status errors
                      type: string
                    lastChanged:
                      description: LastChanged is the last time time the status last
                        changed
                      type: string
                    lastChecked:
                      description: LastChecked is the last time time the status was
                        checked
                      type: string
                    summary:
                      description: Summary is the mirroring status summary
                      properties:
                        daemon_health:
                          description: DaemonHealth is the health of the mirroring
                            daemon
                          type: string
                        group_health:
                          description: GroupHealth is the health of the mirrored image
                            group
                          nullable: true
                          type: string
                        group_states:
                          description: GroupStates is the various state for all mirrored
                            image groups
                          nullable: true
                          properties:
                            error:
                              description: Error is when the mirroring state is errored
                              type: integer
                            replaying:
                              description: Replaying is when the replay of the mirroring
                                journal is on-going
                              type: integer
                            starting_replay:
                              description: StartingReplay is when the replay of the
                                mirroring journal starts
                              type: integer
                            stopped:
                              description: Stopped is when the mirroring state is
                                stopped
                              type: integer
                            stopping_replay:
                              description: StopReplaying is when the replay of the
                                mirroring journal stops
                              type: integer
                            syncing:
                              description: Syncing is when the image is syncing
                              type: integer
                            unknown:
                              description: Unknown is when the mirroring state is
                                unknown
                              type: integer
                          type: object
                        health:
                          description: Health is the mirroring health
                          type: string
                        image_health:
                          description: ImageHealth is the health of the mirrored image
                          type: string
                        image_states:
                          description: ImageStates is the various state for all mirrored
                            images
                          nullable: true
                          properties:
                            error:
                              description: Error is when the mirroring state is errored
                              type: integer
                            replaying:
                              description: Replaying is when the replay of the mirroring
                                journal is on-going
                              type: integer
                            starting_replay:
                              description: StartingReplay is when the replay of the
                                mirroring journal starts
                              type: integer
                            stopped:
                              description: Stopped is when the mirroring state is
                                stopped
                              type: integer
                            stopping_replay:
                              description: StopReplaying is when the replay of the
                                mirroring journal stops
                              type: integer
                            syncing:
                              description: Syncing is when the image is syncing
                              type: integer
                            unknown:
                              description: Unknown is when the mirroring state is
                                unknown
                              type: integer
                          type: object
                        states:
                          description: States is the various state for all mirrored
                            images
                          nullable: true
                          properties:
                            error:
                              description: Error is when the mirroring state is errored
                              type: integer
                            replaying:
                              description: Replaying is when the replay of the mirroring
                                journal is on-going
                              type: integer
                            starting_replay:
                              description: StartingReplay is when the replay of the
                                mirroring journal starts
                              type: integer
                            stopped:
                              description: Stopped is when the mirroring state is
                                stopped
                              type: integer
                            stopping_replay:
                              description: StopReplaying is when the replay of the
                                mirroring journal stops
                              type: integer
                            syncing:
                              description: Syncing is when the image is syncing
                              type: integer
                            unknown:
                              description: Unknown is when the mirroring state is
                                unknown
                              type: integer
                          type: object
                      type: object
                  type: object
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  description: ConditionType represent a resource's status
                  type: string
                poolID:
                  description: optional
                  type: integer
                snapshotScheduleStatus:
                  description: SnapshotScheduleStatusSpec is the status of the snapshot
                    schedule
                  properties:
                    details:
                      description: Details contains potential status errors
                      type: string
                    lastChanged:
                      description: LastChanged is the last time time the status last
                        changed
                      type: string
                    lastChecked:
                      description: LastChecked is the last time time the status was
                        checked
                      type: string
                    snapshotSchedules:
                      description: SnapshotSchedules is the list of snapshots scheduled
                      items:
                        description: SnapshotSchedulesSpec is the list of snapshot
                          scheduled for images in a pool
                        properties:
                          image:
                            description: Image is the mirrored image
                            type: string
                          items:
                            description: Items is the list schedules times for a given
                              snapshot
                            items:
                              description: SnapshotSchedule is a schedule
                              properties:
                                interval:
                                  description: Interval is the interval in which snapshots
                                    will be taken
                                  type: string
                                start_time:
                                  description: StartTime is the snapshot starting
                                    time
                                  type: string
                              type: object
                            type: array
                          namespace:
                            description: Namespace is the RADOS namespace the image
                              is part of
                            type: string
                          pool:
                            description: Pool is the pool name
                            type: string
                        type: object
                      nullable: true
                      type: array
                  type: object
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephBlockPool
      listKind: CephBlockPoolList
      plural: cephblockpools
      shortNames:
      - cephbp
      singular: cephblockpool
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephfilesystemmirrors.ceph.rook.io
    resourceVersion: "7595"
    uid: aa234db7-c0b2-4884-8f82-4f9a8f74f618
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephFilesystemMirror
      listKind: CephFilesystemMirrorList
      plural: cephfilesystemmirrors
      shortNames:
      - cephfsm
      singular: cephfilesystemmirror
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.phase
        name: Phase
        type: string
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: CephFilesystemMirror is the Ceph Filesystem Mirror object definition
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: FilesystemMirroringSpec is the filesystem mirroring specification
              properties:
                annotations:
                  additionalProperties:
                    type: string
                  description: The annotations-related configuration to add/set on
                    each Pod related object.
                  nullable: true
                  type: object
                labels:
                  additionalProperties:
                    type: string
                  description: The labels-related configuration to add/set on each
                    Pod related object.
                  nullable: true
                  type: object
                placement:
                  nullable: true
                  properties:
                    nodeAffinity:
                      properties:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              preference:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchFields:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                type: object
                                x-kubernetes-map-type: atomic
                              weight:
                                format: int32
                                type: integer
                            required:
                            - preference
                            - weight
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                        requiredDuringSchedulingIgnoredDuringExecution:
                          properties:
                            nodeSelectorTerms:
                              items:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchFields:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                type: object
                                x-kubernetes-map-type: atomic
                              type: array
                              x-kubernetes-list-type: atomic
                          required:
                          - nodeSelectorTerms
                          type: object
                          x-kubernetes-map-type: atomic
                      type: object
                    podAffinity:
                      properties:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              podAffinityTerm:
                                properties:
                                  labelSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  matchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  mismatchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  namespaceSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  namespaces:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  topologyKey:
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              weight:
                                format: int32
                                type: integer
                            required:
                            - podAffinityTerm
                            - weight
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                        requiredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              labelSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              matchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              mismatchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              namespaceSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              namespaces:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              topologyKey:
                                type: string
                            required:
                            - topologyKey
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                      type: object
                    podAntiAffinity:
                      properties:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              podAffinityTerm:
                                properties:
                                  labelSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  matchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  mismatchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  namespaceSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  namespaces:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  topologyKey:
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              weight:
                                format: int32
                                type: integer
                            required:
                            - podAffinityTerm
                            - weight
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                        requiredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              labelSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              matchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              mismatchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              namespaceSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              namespaces:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              topologyKey:
                                type: string
                            required:
                            - topologyKey
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                      type: object
                    tolerations:
                      items:
                        properties:
                          effect:
                            type: string
                          key:
                            type: string
                          operator:
                            type: string
                          tolerationSeconds:
                            format: int64
                            type: integer
                          value:
                            type: string
                        type: object
                      type: array
                    topologySpreadConstraints:
                      items:
                        properties:
                          labelSelector:
                            properties:
                              matchExpressions:
                                items:
                                  properties:
                                    key:
                                      type: string
                                    operator:
                                      type: string
                                    values:
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                                x-kubernetes-list-type: atomic
                              matchLabels:
                                additionalProperties:
                                  type: string
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          matchLabelKeys:
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          maxSkew:
                            format: int32
                            type: integer
                          minDomains:
                            format: int32
                            type: integer
                          nodeAffinityPolicy:
                            type: string
                          nodeTaintsPolicy:
                            type: string
                          topologyKey:
                            type: string
                          whenUnsatisfiable:
                            type: string
                        required:
                        - maxSkew
                        - topologyKey
                        - whenUnsatisfiable
                        type: object
                      type: array
                  type: object
                priorityClassName:
                  description: PriorityClassName sets priority class on the cephfs-mirror
                    pods
                  type: string
                resources:
                  description: The resource requirements for the cephfs-mirror pods
                  nullable: true
                  properties:
                    claims:
                      description: |-
                        Claims lists the names of resources, defined in spec.resourceClaims,
                        that are used by this container.

                        This is an alpha field and requires enabling the
                        DynamicResourceAllocation feature gate.

                        This field is immutable. It can only be set for containers.
                      items:
                        description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                        properties:
                          name:
                            description: |-
                              Name must match the name of one entry in pod.spec.resourceClaims of
                              the Pod where this field is used. It makes that resource available
                              inside a container.
                            type: string
                          request:
                            description: |-
                              Request is the name chosen for a request in the referenced claim.
                              If empty, everything from the claim is made available, otherwise
                              only the result of this request.
                            type: string
                        required:
                        - name
                        type: object
                      type: array
                      x-kubernetes-list-map-keys:
                      - name
                      x-kubernetes-list-type: map
                    limits:
                      additionalProperties:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: |-
                        Limits describes the maximum amount of compute resources allowed.
                        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                      type: object
                    requests:
                      additionalProperties:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: |-
                        Requests describes the minimum amount of compute resources required.
                        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                        otherwise to an implementation-defined value. Requests cannot exceed Limits.
                        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                      type: object
                  type: object
              type: object
            status:
              description: Status represents the status of an object
              properties:
                conditions:
                  items:
                    description: Condition represents a status condition on any Rook-Ceph
                      Custom Resource.
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        format: date-time
                        type: string
                      message:
                        type: string
                      reason:
                        description: ConditionReason is a reason for a condition
                        type: string
                      status:
                        type: string
                      type:
                        description: ConditionType represent a resource's status
                        type: string
                    type: object
                  type: array
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  type: string
              type: object
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephFilesystemMirror
      listKind: CephFilesystemMirrorList
      plural: cephfilesystemmirrors
      shortNames:
      - cephfsm
      singular: cephfilesystemmirror
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephrbdmirrors.ceph.rook.io
    resourceVersion: "7599"
    uid: 77b0d183-736a-4aa0-ada9-c39f441a7f1d
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephRBDMirror
      listKind: CephRBDMirrorList
      plural: cephrbdmirrors
      shortNames:
      - cephrbdm
      singular: cephrbdmirror
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.phase
        name: Phase
        type: string
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: CephRBDMirror represents a Ceph RBD Mirror
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: RBDMirroringSpec represents the specification of an RBD
                mirror daemon
              properties:
                annotations:
                  additionalProperties:
                    type: string
                  description: The annotations-related configuration to add/set on
                    each Pod related object.
                  nullable: true
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                count:
                  description: Count represents the number of rbd mirror instance
                    to run
                  minimum: 1
                  type: integer
                labels:
                  additionalProperties:
                    type: string
                  description: The labels-related configuration to add/set on each
                    Pod related object.
                  nullable: true
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                peers:
                  description: Peers represents the peers spec
                  nullable: true
                  properties:
                    secretNames:
                      description: SecretNames represents the Kubernetes Secret names
                        to add rbd-mirror or cephfs-mirror peers
                      items:
                        type: string
                      type: array
                  type: object
                placement:
                  nullable: true
                  properties:
                    nodeAffinity:
                      properties:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              preference:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchFields:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                type: object
                                x-kubernetes-map-type: atomic
                              weight:
                                format: int32
                                type: integer
                            required:
                            - preference
                            - weight
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                        requiredDuringSchedulingIgnoredDuringExecution:
                          properties:
                            nodeSelectorTerms:
                              items:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchFields:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                type: object
                                x-kubernetes-map-type: atomic
                              type: array
                              x-kubernetes-list-type: atomic
                          required:
                          - nodeSelectorTerms
                          type: object
                          x-kubernetes-map-type: atomic
                      type: object
                    podAffinity:
                      properties:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              podAffinityTerm:
                                properties:
                                  labelSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  matchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  mismatchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  namespaceSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  namespaces:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  topologyKey:
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              weight:
                                format: int32
                                type: integer
                            required:
                            - podAffinityTerm
                            - weight
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                        requiredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              labelSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              matchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              mismatchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              namespaceSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              namespaces:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              topologyKey:
                                type: string
                            required:
                            - topologyKey
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                      type: object
                    podAntiAffinity:
                      properties:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              podAffinityTerm:
                                properties:
                                  labelSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  matchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  mismatchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  namespaceSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  namespaces:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  topologyKey:
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              weight:
                                format: int32
                                type: integer
                            required:
                            - podAffinityTerm
                            - weight
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                        requiredDuringSchedulingIgnoredDuringExecution:
                          items:
                            properties:
                              labelSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              matchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              mismatchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              namespaceSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              namespaces:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              topologyKey:
                                type: string
                            required:
                            - topologyKey
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                      type: object
                    tolerations:
                      items:
                        properties:
                          effect:
                            type: string
                          key:
                            type: string
                          operator:
                            type: string
                          tolerationSeconds:
                            format: int64
                            type: integer
                          value:
                            type: string
                        type: object
                      type: array
                    topologySpreadConstraints:
                      items:
                        properties:
                          labelSelector:
                            properties:
                              matchExpressions:
                                items:
                                  properties:
                                    key:
                                      type: string
                                    operator:
                                      type: string
                                    values:
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                                x-kubernetes-list-type: atomic
                              matchLabels:
                                additionalProperties:
                                  type: string
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          matchLabelKeys:
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          maxSkew:
                            format: int32
                            type: integer
                          minDomains:
                            format: int32
                            type: integer
                          nodeAffinityPolicy:
                            type: string
                          nodeTaintsPolicy:
                            type: string
                          topologyKey:
                            type: string
                          whenUnsatisfiable:
                            type: string
                        required:
                        - maxSkew
                        - topologyKey
                        - whenUnsatisfiable
                        type: object
                      type: array
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                priorityClassName:
                  description: PriorityClassName sets priority class on the rbd mirror
                    pods
                  type: string
                resources:
                  description: The resource requirements for the rbd mirror pods
                  nullable: true
                  properties:
                    claims:
                      description: |-
                        Claims lists the names of resources, defined in spec.resourceClaims,
                        that are used by this container.

                        This is an alpha field and requires enabling the
                        DynamicResourceAllocation feature gate.

                        This field is immutable. It can only be set for containers.
                      items:
                        description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                        properties:
                          name:
                            description: |-
                              Name must match the name of one entry in pod.spec.resourceClaims of
                              the Pod where this field is used. It makes that resource available
                              inside a container.
                            type: string
                          request:
                            description: |-
                              Request is the name chosen for a request in the referenced claim.
                              If empty, everything from the claim is made available, otherwise
                              only the result of this request.
                            type: string
                        required:
                        - name
                        type: object
                      type: array
                      x-kubernetes-list-map-keys:
                      - name
                      x-kubernetes-list-type: map
                    limits:
                      additionalProperties:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: |-
                        Limits describes the maximum amount of compute resources allowed.
                        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                      type: object
                    requests:
                      additionalProperties:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: |-
                        Requests describes the minimum amount of compute resources required.
                        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                        otherwise to an implementation-defined value. Requests cannot exceed Limits.
                        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                      type: object
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
              required:
              - count
              type: object
            status:
              description: Status represents the status of an object
              properties:
                conditions:
                  items:
                    description: Condition represents a status condition on any Rook-Ceph
                      Custom Resource.
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        format: date-time
                        type: string
                      message:
                        type: string
                      reason:
                        description: ConditionReason is a reason for a condition
                        type: string
                      status:
                        type: string
                      type:
                        description: ConditionType represent a resource's status
                        type: string
                    type: object
                  type: array
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  type: string
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephRBDMirror
      listKind: CephRBDMirrorList
      plural: cephrbdmirrors
      shortNames:
      - cephrbdm
      singular: cephrbdmirror
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephclients.ceph.rook.io
    resourceVersion: "7602"
    uid: daaeb01e-9aa6-42d2-ac3c-c3e401be09db
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephClient
      listKind: CephClientList
      plural: cephclients
      shortNames:
      - cephcl
      singular: cephclient
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.phase
        name: Phase
        type: string
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: CephClient represents a Ceph Client
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: Spec represents the specification of a Ceph Client
              properties:
                caps:
                  additionalProperties:
                    type: string
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                name:
                  type: string
                removeSecret:
                  description: |-
                    RemoveSecret indicates whether the current secret for this ceph client should be removed or not.
                    If true, the K8s secret will be deleted, but the cephx keyring will remain until the CR is deleted.
                  type: boolean
                secretName:
                  description: |-
                    SecretName is the name of the secret created for this ceph client.
                    If not specified, the default name is "rook-ceph-client-" as a prefix to the CR name.
                  type: string
                  x-kubernetes-validations:
                  - message: SecretName is immutable and cannot be changed
                    rule: self == oldSelf
              required:
              - caps
              type: object
            status:
              description: Status represents the status of a Ceph Client
              properties:
                info:
                  additionalProperties:
                    type: string
                  nullable: true
                  type: object
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  description: ConditionType represent a resource's status
                  type: string
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephClient
      listKind: CephClientList
      plural: cephclients
      shortNames:
      - cephcl
      singular: cephclient
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephblockpoolradosnamespaces.ceph.rook.io
    resourceVersion: "7604"
    uid: d0a5848e-1ac0-4011-8381-154b0c8f81be
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephBlockPoolRadosNamespace
      listKind: CephBlockPoolRadosNamespaceList
      plural: cephblockpoolradosnamespaces
      shortNames:
      - cephbprns
      - cephrns
      singular: cephblockpoolradosnamespace
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.phase
        name: Phase
        type: string
      - description: Name of the Ceph BlockPool
        jsonPath: .spec.blockPoolName
        name: BlockPool
        type: string
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: CephBlockPoolRadosNamespace represents a Ceph BlockPool Rados
            Namespace
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: Spec represents the specification of a Ceph BlockPool Rados
                Namespace
              properties:
                blockPoolName:
                  description: |-
                    BlockPoolName is the name of Ceph BlockPool. Typically it's the name of
                    the CephBlockPool CR.
                  type: string
                  x-kubernetes-validations:
                  - message: blockPoolName is immutable
                    rule: self == oldSelf
                mirroring:
                  description: Mirroring configuration of CephBlockPoolRadosNamespace
                  properties:
                    mode:
                      description: Mode is the mirroring mode; either pool or image.
                      enum:
                      - ""
                      - pool
                      - image
                      type: string
                    remoteNamespace:
                      description: RemoteNamespace is the name of the CephBlockPoolRadosNamespace
                        on the secondary cluster CephBlockPool
                      type: string
                    snapshotSchedules:
                      description: SnapshotSchedules is the scheduling of snapshot
                        for mirrored images
                      items:
                        description: SnapshotScheduleSpec represents the snapshot
                          scheduling settings of a mirrored pool
                        properties:
                          interval:
                            description: Interval represent the periodicity of the
                              snapshot.
                            type: string
                          path:
                            description: Path is the path to snapshot, only valid
                              for CephFS
                            type: string
                          startTime:
                            description: StartTime indicates when to start the snapshot
                            type: string
                        type: object
                      type: array
                  required:
                  - mode
                  type: object
                name:
                  description: The name of the CephBlockPoolRadosNamespaceSpec namespace.
                    If not set, the default is the name of the CR.
                  type: string
                  x-kubernetes-validations:
                  - message: name is immutable
                    rule: self == oldSelf
              required:
              - blockPoolName
              type: object
            status:
              description: Status represents the status of a CephBlockPool Rados Namespace
              properties:
                conditions:
                  items:
                    description: Condition represents a status condition on any Rook-Ceph
                      Custom Resource.
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        format: date-time
                        type: string
                      message:
                        type: string
                      reason:
                        description: ConditionReason is a reason for a condition
                        type: string
                      status:
                        type: string
                      type:
                        description: ConditionType represent a resource's status
                        type: string
                    type: object
                  type: array
                info:
                  additionalProperties:
                    type: string
                  nullable: true
                  type: object
                mirroringInfo:
                  description: MirroringInfoSpec is the status of the pool/radosnamespace
                    mirroring
                  properties:
                    details:
                      type: string
                    lastChanged:
                      type: string
                    lastChecked:
                      type: string
                    mode:
                      description: Mode is the mirroring mode
                      type: string
                    peers:
                      description: Peers are the list of peer sites connected to that
                        cluster
                      items:
                        description: PeersSpec contains peer details
                        properties:
                          client_name:
                            description: ClientName is the CephX user used to connect
                              to the peer
                            type: string
                          direction:
                            description: Direction is the peer mirroring direction
                            type: string
                          mirror_uuid:
                            description: MirrorUUID is the mirror UUID
                            type: string
                          site_name:
                            description: SiteName is the current site name
                            type: string
                          uuid:
                            description: UUID is the peer UUID
                            type: string
                        type: object
                      type: array
                    site_name:
                      description: SiteName is the current site name
                      type: string
                  type: object
                mirroringStatus:
                  description: MirroringStatusSpec is the status of the pool/radosNamespace
                    mirroring
                  properties:
                    details:
                      description: Details contains potential status errors
                      type: string
                    lastChanged:
                      description: LastChanged is the last time time the status last
                        changed
                      type: string
                    lastChecked:
                      description: LastChecked is the last time time the status was
                        checked
                      type: string
                    summary:
                      description: Summary is the mirroring status summary
                      properties:
                        daemon_health:
                          description: DaemonHealth is the health of the mirroring
                            daemon
                          type: string
                        group_health:
                          description: GroupHealth is the health of the mirrored image
                            group
                          nullable: true
                          type: string
                        group_states:
                          description: GroupStates is the various state for all mirrored
                            image groups
                          nullable: true
                          properties:
                            error:
                              description: Error is when the mirroring state is errored
                              type: integer
                            replaying:
                              description: Replaying is when the replay of the mirroring
                                journal is on-going
                              type: integer
                            starting_replay:
                              description: StartingReplay is when the replay of the
                                mirroring journal starts
                              type: integer
                            stopped:
                              description: Stopped is when the mirroring state is
                                stopped
                              type: integer
                            stopping_replay:
                              description: StopReplaying is when the replay of the
                                mirroring journal stops
                              type: integer
                            syncing:
                              description: Syncing is when the image is syncing
                              type: integer
                            unknown:
                              description: Unknown is when the mirroring state is
                                unknown
                              type: integer
                          type: object
                        health:
                          description: Health is the mirroring health
                          type: string
                        image_health:
                          description: ImageHealth is the health of the mirrored image
                          type: string
                        image_states:
                          description: ImageStates is the various state for all mirrored
                            images
                          nullable: true
                          properties:
                            error:
                              description: Error is when the mirroring state is errored
                              type: integer
                            replaying:
                              description: Replaying is when the replay of the mirroring
                                journal is on-going
                              type: integer
                            starting_replay:
                              description: StartingReplay is when the replay of the
                                mirroring journal starts
                              type: integer
                            stopped:
                              description: Stopped is when the mirroring state is
                                stopped
                              type: integer
                            stopping_replay:
                              description: StopReplaying is when the replay of the
                                mirroring journal stops
                              type: integer
                            syncing:
                              description: Syncing is when the image is syncing
                              type: integer
                            unknown:
                              description: Unknown is when the mirroring state is
                                unknown
                              type: integer
                          type: object
                        states:
                          description: States is the various state for all mirrored
                            images
                          nullable: true
                          properties:
                            error:
                              description: Error is when the mirroring state is errored
                              type: integer
                            replaying:
                              description: Replaying is when the replay of the mirroring
                                journal is on-going
                              type: integer
                            starting_replay:
                              description: StartingReplay is when the replay of the
                                mirroring journal starts
                              type: integer
                            stopped:
                              description: Stopped is when the mirroring state is
                                stopped
                              type: integer
                            stopping_replay:
                              description: StopReplaying is when the replay of the
                                mirroring journal stops
                              type: integer
                            syncing:
                              description: Syncing is when the image is syncing
                              type: integer
                            unknown:
                              description: Unknown is when the mirroring state is
                                unknown
                              type: integer
                          type: object
                      type: object
                  type: object
                phase:
                  description: ConditionType represent a resource's status
                  type: string
                snapshotScheduleStatus:
                  description: SnapshotScheduleStatusSpec is the status of the snapshot
                    schedule
                  properties:
                    details:
                      description: Details contains potential status errors
                      type: string
                    lastChanged:
                      description: LastChanged is the last time time the status last
                        changed
                      type: string
                    lastChecked:
                      description: LastChecked is the last time time the status was
                        checked
                      type: string
                    snapshotSchedules:
                      description: SnapshotSchedules is the list of snapshots scheduled
                      items:
                        description: SnapshotSchedulesSpec is the list of snapshot
                          scheduled for images in a pool
                        properties:
                          image:
                            description: Image is the mirrored image
                            type: string
                          items:
                            description: Items is the list schedules times for a given
                              snapshot
                            items:
                              description: SnapshotSchedule is a schedule
                              properties:
                                interval:
                                  description: Interval is the interval in which snapshots
                                    will be taken
                                  type: string
                                start_time:
                                  description: StartTime is the snapshot starting
                                    time
                                  type: string
                              type: object
                            type: array
                          namespace:
                            description: Namespace is the RADOS namespace the image
                              is part of
                            type: string
                          pool:
                            description: Pool is the pool name
                            type: string
                        type: object
                      nullable: true
                      type: array
                  type: object
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephBlockPoolRadosNamespace
      listKind: CephBlockPoolRadosNamespaceList
      plural: cephblockpoolradosnamespaces
      shortNames:
      - cephbprns
      - cephrns
      singular: cephblockpoolradosnamespace
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephobjectzones.ceph.rook.io
    resourceVersion: "7606"
    uid: 2203a5e7-df40-470a-942d-793720b50ee2
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephObjectZone
      listKind: CephObjectZoneList
      plural: cephobjectzones
      shortNames:
      - cephoz
      singular: cephobjectzone
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.phase
        name: Phase
        type: string
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: CephObjectZone represents a Ceph Object Store Gateway Zone
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: ObjectZoneSpec represent the spec of an ObjectZone
              properties:
                customEndpoints:
                  description: |-
                    If this zone cannot be accessed from other peer Ceph clusters via the ClusterIP Service
                    endpoint created by Rook, you must set this to the externally reachable endpoint(s). You may
                    include the port in the definition. For example: "https://my-object-store.my-domain.net:443".
                    In many cases, you should set this to the endpoint of the ingress resource that makes the
                    CephObjectStore associated with this CephObjectStoreZone reachable to peer clusters.
                    The list can have one or more endpoints pointing to different RGW servers in the zone.

                    If a CephObjectStore endpoint is omitted from this list, that object store's gateways will
                    not receive multisite replication data
                    (see CephObjectStore.spec.gateway.disableMultisiteSyncTraffic).
                  items:
                    type: string
                  nullable: true
                  type: array
                dataPool:
                  description: The data pool settings
                  nullable: true
                  properties:
                    application:
                      description: The application name to set on the pool. Only expected
                        to be set for rgw pools.
                      type: string
                    compressionMode:
                      description: |-
                        DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
                        The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
                        Do NOT set a default value for kubebuilder as this will override the Parameters
                      enum:
                      - none
                      - passive
                      - aggressive
                      - force
                      - ""
                      nullable: true
                      type: string
                    crushRoot:
                      description: The root of the crush hierarchy utilized by the
                        pool
                      nullable: true
                      type: string
                    deviceClass:
                      description: The device class the OSD should set to for use
                        in the pool
                      nullable: true
                      type: string
                    enableCrushUpdates:
                      description: Allow rook operator to change the pool CRUSH tunables
                        once the pool is created
                      type: boolean
                    enableRBDStats:
                      description: EnableRBDStats is used to enable gathering of statistics
                        for all RBD images in the pool
                      type: boolean
                    erasureCoded:
                      description: The erasure code settings
                      properties:
                        algorithm:
                          description: The algorithm for erasure coding
                          type: string
                        codingChunks:
                          description: |-
                            Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                            This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
                          minimum: 0
                          type: integer
                        dataChunks:
                          description: |-
                            Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                            The number of chunks required to recover an object when any single OSD is lost is the same
                            as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
                          minimum: 0
                          type: integer
                      required:
                      - codingChunks
                      - dataChunks
                      type: object
                    failureDomain:
                      description: 'The failure domain: osd/host/(region or zone if
                        available) - technically also any type in the crush map'
                      type: string
                    mirroring:
                      description: The mirroring settings
                      properties:
                        enabled:
                          description: Enabled whether this pool is mirrored or not
                          type: boolean
                        mode:
                          description: 'Mode is the mirroring mode: pool, image or
                            init-only.'
                          enum:
                          - pool
                          - image
                          - init-only
                          type: string
                        peers:
                          description: Peers represents the peers spec
                          nullable: true
                          properties:
                            secretNames:
                              description: SecretNames represents the Kubernetes Secret
                                names to add rbd-mirror or cephfs-mirror peers
                              items:
                                type: string
                              type: array
                          type: object
                        snapshotSchedules:
                          description: SnapshotSchedules is the scheduling of snapshot
                            for mirrored images/pools
                          items:
                            description: SnapshotScheduleSpec represents the snapshot
                              scheduling settings of a mirrored pool
                            properties:
                              interval:
                                description: Interval represent the periodicity of
                                  the snapshot.
                                type: string
                              path:
                                description: Path is the path to snapshot, only valid
                                  for CephFS
                                type: string
                              startTime:
                                description: StartTime indicates when to start the
                                  snapshot
                                type: string
                            type: object
                          type: array
                      type: object
                    parameters:
                      additionalProperties:
                        type: string
                      description: Parameters is a list of properties to enable on
                        a given pool
                      nullable: true
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    quotas:
                      description: The quota settings
                      nullable: true
                      properties:
                        maxBytes:
                          description: |-
                            MaxBytes represents the quota in bytes
                            Deprecated in favor of MaxSize
                          format: int64
                          type: integer
                        maxObjects:
                          description: MaxObjects represents the quota in objects
                          format: int64
                          type: integer
                        maxSize:
                          description: MaxSize represents the quota in bytes as a
                            string
                          pattern: ^[0-9]+[\.]?[0-9]*([KMGTPE]i|[kMGTPE])?$
                          type: string
                      type: object
                    replicated:
                      description: The replication settings
                      properties:
                        hybridStorage:
                          description: HybridStorage represents hybrid storage tier
                            settings
                          nullable: true
                          properties:
                            primaryDeviceClass:
                              description: PrimaryDeviceClass represents high performance
                                tier (for example SSD or NVME) for Primary OSD
                              minLength: 1
                              type: string
                            secondaryDeviceClass:
                              description: SecondaryDeviceClass represents low performance
                                tier (for example HDDs) for remaining OSDs
                              minLength: 1
                              type: string
                          required:
                          - primaryDeviceClass
                          - secondaryDeviceClass
                          type: object
                        replicasPerFailureDomain:
                          description: ReplicasPerFailureDomain the number of replica
                            in the specified failure domain
                          minimum: 1
                          type: integer
                        requireSafeReplicaSize:
                          description: RequireSafeReplicaSize if false allows you
                            to set replica 1
                          type: boolean
                        size:
                          description: Size - Number of copies per object in a replicated
                            storage pool, including the object itself (required for
                            replicated pool type)
                          minimum: 0
                          type: integer
                        subFailureDomain:
                          description: SubFailureDomain the name of the sub-failure
                            domain
                          type: string
                        targetSizeRatio:
                          description: TargetSizeRatio gives a hint (%) to Ceph in
                            terms of expected consumption of the total cluster capacity
                          minimum: 0
                          type: number
                      required:
                      - size
                      type: object
                    statusCheck:
                      description: The mirroring statusCheck
                      properties:
                        mirror:
                          description: HealthCheckSpec represents the health check
                            of an object store bucket
                          nullable: true
                          properties:
                            disabled:
                              type: boolean
                            interval:
                              description: Interval is the internal in second or minute
                                for the health check to run like 60s for 60 seconds
                              type: string
                            timeout:
                              type: string
                          type: object
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  type: object
                metadataPool:
                  description: The metadata pool settings
                  nullable: true
                  properties:
                    application:
                      description: The application name to set on the pool. Only expected
                        to be set for rgw pools.
                      type: string
                    compressionMode:
                      description: |-
                        DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
                        The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
                        Do NOT set a default value for kubebuilder as this will override the Parameters
                      enum:
                      - none
                      - passive
                      - aggressive
                      - force
                      - ""
                      nullable: true
                      type: string
                    crushRoot:
                      description: The root of the crush hierarchy utilized by the
                        pool
                      nullable: true
                      type: string
                    deviceClass:
                      description: The device class the OSD should set to for use
                        in the pool
                      nullable: true
                      type: string
                    enableCrushUpdates:
                      description: Allow rook operator to change the pool CRUSH tunables
                        once the pool is created
                      type: boolean
                    enableRBDStats:
                      description: EnableRBDStats is used to enable gathering of statistics
                        for all RBD images in the pool
                      type: boolean
                    erasureCoded:
                      description: The erasure code settings
                      properties:
                        algorithm:
                          description: The algorithm for erasure coding
                          type: string
                        codingChunks:
                          description: |-
                            Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                            This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
                          minimum: 0
                          type: integer
                        dataChunks:
                          description: |-
                            Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                            The number of chunks required to recover an object when any single OSD is lost is the same
                            as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
                          minimum: 0
                          type: integer
                      required:
                      - codingChunks
                      - dataChunks
                      type: object
                    failureDomain:
                      description: 'The failure domain: osd/host/(region or zone if
                        available) - technically also any type in the crush map'
                      type: string
                    mirroring:
                      description: The mirroring settings
                      properties:
                        enabled:
                          description: Enabled whether this pool is mirrored or not
                          type: boolean
                        mode:
                          description: 'Mode is the mirroring mode: pool, image or
                            init-only.'
                          enum:
                          - pool
                          - image
                          - init-only
                          type: string
                        peers:
                          description: Peers represents the peers spec
                          nullable: true
                          properties:
                            secretNames:
                              description: SecretNames represents the Kubernetes Secret
                                names to add rbd-mirror or cephfs-mirror peers
                              items:
                                type: string
                              type: array
                          type: object
                        snapshotSchedules:
                          description: SnapshotSchedules is the scheduling of snapshot
                            for mirrored images/pools
                          items:
                            description: SnapshotScheduleSpec represents the snapshot
                              scheduling settings of a mirrored pool
                            properties:
                              interval:
                                description: Interval represent the periodicity of
                                  the snapshot.
                                type: string
                              path:
                                description: Path is the path to snapshot, only valid
                                  for CephFS
                                type: string
                              startTime:
                                description: StartTime indicates when to start the
                                  snapshot
                                type: string
                            type: object
                          type: array
                      type: object
                    parameters:
                      additionalProperties:
                        type: string
                      description: Parameters is a list of properties to enable on
                        a given pool
                      nullable: true
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    quotas:
                      description: The quota settings
                      nullable: true
                      properties:
                        maxBytes:
                          description: |-
                            MaxBytes represents the quota in bytes
                            Deprecated in favor of MaxSize
                          format: int64
                          type: integer
                        maxObjects:
                          description: MaxObjects represents the quota in objects
                          format: int64
                          type: integer
                        maxSize:
                          description: MaxSize represents the quota in bytes as a
                            string
                          pattern: ^[0-9]+[\.]?[0-9]*([KMGTPE]i|[kMGTPE])?$
                          type: string
                      type: object
                    replicated:
                      description: The replication settings
                      properties:
                        hybridStorage:
                          description: HybridStorage represents hybrid storage tier
                            settings
                          nullable: true
                          properties:
                            primaryDeviceClass:
                              description: PrimaryDeviceClass represents high performance
                                tier (for example SSD or NVME) for Primary OSD
                              minLength: 1
                              type: string
                            secondaryDeviceClass:
                              description: SecondaryDeviceClass represents low performance
                                tier (for example HDDs) for remaining OSDs
                              minLength: 1
                              type: string
                          required:
                          - primaryDeviceClass
                          - secondaryDeviceClass
                          type: object
                        replicasPerFailureDomain:
                          description: ReplicasPerFailureDomain the number of replica
                            in the specified failure domain
                          minimum: 1
                          type: integer
                        requireSafeReplicaSize:
                          description: RequireSafeReplicaSize if false allows you
                            to set replica 1
                          type: boolean
                        size:
                          description: Size - Number of copies per object in a replicated
                            storage pool, including the object itself (required for
                            replicated pool type)
                          minimum: 0
                          type: integer
                        subFailureDomain:
                          description: SubFailureDomain the name of the sub-failure
                            domain
                          type: string
                        targetSizeRatio:
                          description: TargetSizeRatio gives a hint (%) to Ceph in
                            terms of expected consumption of the total cluster capacity
                          minimum: 0
                          type: number
                      required:
                      - size
                      type: object
                    statusCheck:
                      description: The mirroring statusCheck
                      properties:
                        mirror:
                          description: HealthCheckSpec represents the health check
                            of an object store bucket
                          nullable: true
                          properties:
                            disabled:
                              type: boolean
                            interval:
                              description: Interval is the internal in second or minute
                                for the health check to run like 60s for 60 seconds
                              type: string
                            timeout:
                              type: string
                          type: object
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  type: object
                preservePoolsOnDelete:
                  default: true
                  description: Preserve pools on object zone deletion
                  type: boolean
                sharedPools:
                  description: The pool information when configuring RADOS namespaces
                    in existing pools.
                  nullable: true
                  properties:
                    dataPoolName:
                      description: The data pool used for creating RADOS namespaces
                        in the object store
                      type: string
                      x-kubernetes-validations:
                      - message: object store shared data pool is immutable
                        rule: self == oldSelf
                    metadataPoolName:
                      description: The metadata pool used for creating RADOS namespaces
                        in the object store
                      type: string
                      x-kubernetes-validations:
                      - message: object store shared metadata pool is immutable
                        rule: self == oldSelf
                    poolPlacements:
                      description: |-
                        PoolPlacements control which Pools are associated with a particular RGW bucket.
                        Once PoolPlacements are defined, RGW client will be able to associate pool
                        with ObjectStore bucket by providing "<LocationConstraint>" during s3 bucket creation
                        or "X-Storage-Policy" header during swift container creation.
                        See: https://docs.ceph.com/en/latest/radosgw/placement/#placement-targets
                        PoolPlacement with name: "default" will be used as a default pool if no option
                        is provided during bucket creation.
                        If default placement is not provided, spec.sharedPools.dataPoolName and spec.sharedPools.MetadataPoolName will be used as default pools.
                        If spec.sharedPools are also empty, then RGW pools (spec.dataPool and spec.metadataPool) will be used as defaults.
                      items:
                        properties:
                          dataNonECPoolName:
                            description: |-
                              The data pool used to store ObjectStore data that cannot use erasure coding (ex: multi-part uploads).
                              If dataPoolName is not erasure coded, then there is no need for dataNonECPoolName.
                            type: string
                          dataPoolName:
                            description: The data pool used to store ObjectStore objects
                              data.
                            minLength: 1
                            type: string
                          default:
                            description: |-
                              Sets given placement as default. Only one placement in the list can be marked as default.
                              Default is false.
                            type: boolean
                          metadataPoolName:
                            description: The metadata pool used to store ObjectStore
                              bucket index.
                            minLength: 1
                            type: string
                          name:
                            description: Pool placement name. Name can be arbitrary.
                              Placement with name "default" will be used as default.
                            minLength: 1
                            pattern: ^[a-zA-Z0-9._/-]+$
                            type: string
                          storageClasses:
                            description: |-
                              StorageClasses can be selected by user to override dataPoolName during object creation.
                              Each placement has default STANDARD StorageClass pointing to dataPoolName.
                              This list allows defining additional StorageClasses on top of default STANDARD storage class.
                            items:
                              properties:
                                dataPoolName:
                                  description: DataPoolName is the data pool used
                                    to store ObjectStore objects data.
                                  minLength: 1
                                  type: string
                                name:
                                  description: |-
                                    Name is the StorageClass name. Ceph allows arbitrary name for StorageClasses,
                                    however most clients/libs insist on AWS names so it is recommended to use
                                    one of the valid x-amz-storage-class values for better compatibility:
                                    REDUCED_REDUNDANCY | STANDARD_IA | ONEZONE_IA | INTELLIGENT_TIERING | GLACIER | DEEP_ARCHIVE | OUTPOSTS | GLACIER_IR | SNOW | EXPRESS_ONEZONE
                                    See AWS docs: https://aws.amazon.com/de/s3/storage-classes/
                                  minLength: 1
                                  pattern: ^[a-zA-Z0-9._/-]+$
                                  type: string
                              required:
                              - dataPoolName
                              - name
                              type: object
                            type: array
                        required:
                        - dataPoolName
                        - metadataPoolName
                        - name
                        type: object
                      type: array
                    preserveRadosNamespaceDataOnDelete:
                      description: Whether the RADOS namespaces should be preserved
                        on deletion of the object store
                      type: boolean
                  type: object
                zoneGroup:
                  description: The display name for the ceph users
                  type: string
              required:
              - zoneGroup
              type: object
            status:
              description: Status represents the status of an object
              properties:
                conditions:
                  items:
                    description: Condition represents a status condition on any Rook-Ceph
                      Custom Resource.
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        format: date-time
                        type: string
                      message:
                        type: string
                      reason:
                        description: ConditionReason is a reason for a condition
                        type: string
                      status:
                        type: string
                      type:
                        description: ConditionType represent a resource's status
                        type: string
                    type: object
                  type: array
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  type: string
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephObjectZone
      listKind: CephObjectZoneList
      plural: cephobjectzones
      shortNames:
      - cephoz
      singular: cephobjectzone
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephfilesystemsubvolumegroups.ceph.rook.io
    resourceVersion: "7608"
    uid: fa8fcc9c-92b5-45b6-9dbc-df8e690ba2d5
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephFilesystemSubVolumeGroup
      listKind: CephFilesystemSubVolumeGroupList
      plural: cephfilesystemsubvolumegroups
      shortNames:
      - cephfssvg
      - cephsvg
      singular: cephfilesystemsubvolumegroup
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.phase
        name: Phase
        type: string
      - description: Name of the CephFileSystem
        jsonPath: .spec.filesystemName
        name: Filesystem
        type: string
      - jsonPath: .spec.quota
        name: Quota
        type: string
      - jsonPath: .status.info.pinning
        name: Pinning
        priority: 1
        type: string
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: CephFilesystemSubVolumeGroup represents a Ceph Filesystem SubVolumeGroup
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: Spec represents the specification of a Ceph Filesystem
                SubVolumeGroup
              properties:
                dataPoolName:
                  description: The data pool name for the Ceph Filesystem subvolume
                    group layout, if the default CephFS pool is not desired.
                  type: string
                filesystemName:
                  description: |-
                    FilesystemName is the name of Ceph Filesystem SubVolumeGroup volume name. Typically it's the name of
                    the CephFilesystem CR. If not coming from the CephFilesystem CR, it can be retrieved from the
                    list of Ceph Filesystem volumes with `ceph fs volume ls`. To learn more about Ceph Filesystem
                    abstractions see https://docs.ceph.com/en/latest/cephfs/fs-volumes/#fs-volumes-and-subvolumes
                  type: string
                  x-kubernetes-validations:
                  - message: filesystemName is immutable
                    rule: self == oldSelf
                name:
                  description: The name of the subvolume group. If not set, the default
                    is the name of the subvolumeGroup CR.
                  type: string
                  x-kubernetes-validations:
                  - message: name is immutable
                    rule: self == oldSelf
                pinning:
                  description: |-
                    Pinning configuration of CephFilesystemSubVolumeGroup,
                    reference https://docs.ceph.com/en/latest/cephfs/fs-volumes/#pinning-subvolumes-and-subvolume-groups
                    only one out of (export, distributed, random) can be set at a time
                  properties:
                    distributed:
                      maximum: 1
                      minimum: 0
                      nullable: true
                      type: integer
                    export:
                      maximum: 256
                      minimum: -1
                      nullable: true
                      type: integer
                    random:
                      maximum: 1
                      minimum: 0
                      nullable: true
                      type: number
                  type: object
                  x-kubernetes-validations:
                  - message: only one pinning type should be set
                    rule: (has(self.export) && !has(self.distributed) && !has(self.random))
                      || (!has(self.export) && has(self.distributed) && !has(self.random))
                      || (!has(self.export) && !has(self.distributed) && has(self.random))
                      || (!has(self.export) && !has(self.distributed) && !has(self.random))
                quota:
                  anyOf:
                  - type: integer
                  - type: string
                  description: Quota size of the Ceph Filesystem subvolume group.
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
              required:
              - filesystemName
              type: object
            status:
              description: Status represents the status of a CephFilesystem SubvolumeGroup
              properties:
                info:
                  additionalProperties:
                    type: string
                  nullable: true
                  type: object
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  description: ConditionType represent a resource's status
                  type: string
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephFilesystemSubVolumeGroup
      listKind: CephFilesystemSubVolumeGroupList
      plural: cephfilesystemsubvolumegroups
      shortNames:
      - cephfssvg
      - cephsvg
      singular: cephfilesystemsubvolumegroup
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephfilesystems.ceph.rook.io
    resourceVersion: "7610"
    uid: 07a6a7cc-e91e-493e-8221-648436958b2e
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephFilesystem
      listKind: CephFilesystemList
      plural: cephfilesystems
      shortNames:
      - cephfs
      singular: cephfilesystem
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - description: Number of desired active MDS daemons
        jsonPath: .spec.metadataServer.activeCount
        name: ActiveMDS
        type: string
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      - jsonPath: .status.phase
        name: Phase
        type: string
      name: v1
      schema:
        openAPIV3Schema:
          description: CephFilesystem represents a Ceph Filesystem
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: FilesystemSpec represents the spec of a file system
              properties:
                dataPools:
                  description: The data pool settings, with optional predefined pool
                    name.
                  items:
                    description: NamedPoolSpec represents the named ceph pool spec
                    properties:
                      application:
                        description: The application name to set on the pool. Only
                          expected to be set for rgw pools.
                        type: string
                      compressionMode:
                        description: |-
                          DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
                          The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
                          Do NOT set a default value for kubebuilder as this will override the Parameters
                        enum:
                        - none
                        - passive
                        - aggressive
                        - force
                        - ""
                        nullable: true
                        type: string
                      crushRoot:
                        description: The root of the crush hierarchy utilized by the
                          pool
                        nullable: true
                        type: string
                      deviceClass:
                        description: The device class the OSD should set to for use
                          in the pool
                        nullable: true
                        type: string
                      enableCrushUpdates:
                        description: Allow rook operator to change the pool CRUSH
                          tunables once the pool is created
                        type: boolean
                      enableRBDStats:
                        description: EnableRBDStats is used to enable gathering of
                          statistics for all RBD images in the pool
                        type: boolean
                      erasureCoded:
                        description: The erasure code settings
                        properties:
                          algorithm:
                            description: The algorithm for erasure coding
                            type: string
                          codingChunks:
                            description: |-
                              Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                              This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
                            minimum: 0
                            type: integer
                          dataChunks:
                            description: |-
                              Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                              The number of chunks required to recover an object when any single OSD is lost is the same
                              as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
                            minimum: 0
                            type: integer
                        required:
                        - codingChunks
                        - dataChunks
                        type: object
                      failureDomain:
                        description: 'The failure domain: osd/host/(region or zone
                          if available) - technically also any type in the crush map'
                        type: string
                      mirroring:
                        description: The mirroring settings
                        properties:
                          enabled:
                            description: Enabled whether this pool is mirrored or
                              not
                            type: boolean
                          mode:
                            description: 'Mode is the mirroring mode: pool, image
                              or init-only.'
                            enum:
                            - pool
                            - image
                            - init-only
                            type: string
                          peers:
                            description: Peers represents the peers spec
                            nullable: true
                            properties:
                              secretNames:
                                description: SecretNames represents the Kubernetes
                                  Secret names to add rbd-mirror or cephfs-mirror
                                  peers
                                items:
                                  type: string
                                type: array
                            type: object
                          snapshotSchedules:
                            description: SnapshotSchedules is the scheduling of snapshot
                              for mirrored images/pools
                            items:
                              description: SnapshotScheduleSpec represents the snapshot
                                scheduling settings of a mirrored pool
                              properties:
                                interval:
                                  description: Interval represent the periodicity
                                    of the snapshot.
                                  type: string
                                path:
                                  description: Path is the path to snapshot, only
                                    valid for CephFS
                                  type: string
                                startTime:
                                  description: StartTime indicates when to start the
                                    snapshot
                                  type: string
                              type: object
                            type: array
                        type: object
                      name:
                        description: Name of the pool
                        type: string
                      parameters:
                        additionalProperties:
                          type: string
                        description: Parameters is a list of properties to enable
                          on a given pool
                        nullable: true
                        type: object
                        x-kubernetes-preserve-unknown-fields: true
                      quotas:
                        description: The quota settings
                        nullable: true
                        properties:
                          maxBytes:
                            description: |-
                              MaxBytes represents the quota in bytes
                              Deprecated in favor of MaxSize
                            format: int64
                            type: integer
                          maxObjects:
                            description: MaxObjects represents the quota in objects
                            format: int64
                            type: integer
                          maxSize:
                            description: MaxSize represents the quota in bytes as
                              a string
                            pattern: ^[0-9]+[\.]?[0-9]*([KMGTPE]i|[kMGTPE])?$
                            type: string
                        type: object
                      replicated:
                        description: The replication settings
                        properties:
                          hybridStorage:
                            description: HybridStorage represents hybrid storage tier
                              settings
                            nullable: true
                            properties:
                              primaryDeviceClass:
                                description: PrimaryDeviceClass represents high performance
                                  tier (for example SSD or NVME) for Primary OSD
                                minLength: 1
                                type: string
                              secondaryDeviceClass:
                                description: SecondaryDeviceClass represents low performance
                                  tier (for example HDDs) for remaining OSDs
                                minLength: 1
                                type: string
                            required:
                            - primaryDeviceClass
                            - secondaryDeviceClass
                            type: object
                          replicasPerFailureDomain:
                            description: ReplicasPerFailureDomain the number of replica
                              in the specified failure domain
                            minimum: 1
                            type: integer
                          requireSafeReplicaSize:
                            description: RequireSafeReplicaSize if false allows you
                              to set replica 1
                            type: boolean
                          size:
                            description: Size - Number of copies per object in a replicated
                              storage pool, including the object itself (required
                              for replicated pool type)
                            minimum: 0
                            type: integer
                          subFailureDomain:
                            description: SubFailureDomain the name of the sub-failure
                              domain
                            type: string
                          targetSizeRatio:
                            description: TargetSizeRatio gives a hint (%) to Ceph
                              in terms of expected consumption of the total cluster
                              capacity
                            minimum: 0
                            type: number
                        required:
                        - size
                        type: object
                      statusCheck:
                        description: The mirroring statusCheck
                        properties:
                          mirror:
                            description: HealthCheckSpec represents the health check
                              of an object store bucket
                            nullable: true
                            properties:
                              disabled:
                                type: boolean
                              interval:
                                description: Interval is the internal in second or
                                  minute for the health check to run like 60s for
                                  60 seconds
                                type: string
                              timeout:
                                type: string
                            type: object
                        type: object
                        x-kubernetes-preserve-unknown-fields: true
                    type: object
                  nullable: true
                  type: array
                metadataPool:
                  description: The metadata pool settings
                  nullable: true
                  properties:
                    application:
                      description: The application name to set on the pool. Only expected
                        to be set for rgw pools.
                      type: string
                    compressionMode:
                      description: |-
                        DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
                        The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
                        Do NOT set a default value for kubebuilder as this will override the Parameters
                      enum:
                      - none
                      - passive
                      - aggressive
                      - force
                      - ""
                      nullable: true
                      type: string
                    crushRoot:
                      description: The root of the crush hierarchy utilized by the
                        pool
                      nullable: true
                      type: string
                    deviceClass:
                      description: The device class the OSD should set to for use
                        in the pool
                      nullable: true
                      type: string
                    enableCrushUpdates:
                      description: Allow rook operator to change the pool CRUSH tunables
                        once the pool is created
                      type: boolean
                    enableRBDStats:
                      description: EnableRBDStats is used to enable gathering of statistics
                        for all RBD images in the pool
                      type: boolean
                    erasureCoded:
                      description: The erasure code settings
                      properties:
                        algorithm:
                          description: The algorithm for erasure coding
                          type: string
                        codingChunks:
                          description: |-
                            Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                            This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
                          minimum: 0
                          type: integer
                        dataChunks:
                          description: |-
                            Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                            The number of chunks required to recover an object when any single OSD is lost is the same
                            as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
                          minimum: 0
                          type: integer
                      required:
                      - codingChunks
                      - dataChunks
                      type: object
                    failureDomain:
                      description: 'The failure domain: osd/host/(region or zone if
                        available) - technically also any type in the crush map'
                      type: string
                    mirroring:
                      description: The mirroring settings
                      properties:
                        enabled:
                          description: Enabled whether this pool is mirrored or not
                          type: boolean
                        mode:
                          description: 'Mode is the mirroring mode: pool, image or
                            init-only.'
                          enum:
                          - pool
                          - image
                          - init-only
                          type: string
                        peers:
                          description: Peers represents the peers spec
                          nullable: true
                          properties:
                            secretNames:
                              description: SecretNames represents the Kubernetes Secret
                                names to add rbd-mirror or cephfs-mirror peers
                              items:
                                type: string
                              type: array
                          type: object
                        snapshotSchedules:
                          description: SnapshotSchedules is the scheduling of snapshot
                            for mirrored images/pools
                          items:
                            description: SnapshotScheduleSpec represents the snapshot
                              scheduling settings of a mirrored pool
                            properties:
                              interval:
                                description: Interval represent the periodicity of
                                  the snapshot.
                                type: string
                              path:
                                description: Path is the path to snapshot, only valid
                                  for CephFS
                                type: string
                              startTime:
                                description: StartTime indicates when to start the
                                  snapshot
                                type: string
                            type: object
                          type: array
                      type: object
                    name:
                      description: Name of the pool
                      type: string
                    parameters:
                      additionalProperties:
                        type: string
                      description: Parameters is a list of properties to enable on
                        a given pool
                      nullable: true
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    quotas:
                      description: The quota settings
                      nullable: true
                      properties:
                        maxBytes:
                          description: |-
                            MaxBytes represents the quota in bytes
                            Deprecated in favor of MaxSize
                          format: int64
                          type: integer
                        maxObjects:
                          description: MaxObjects represents the quota in objects
                          format: int64
                          type: integer
                        maxSize:
                          description: MaxSize represents the quota in bytes as a
                            string
                          pattern: ^[0-9]+[\.]?[0-9]*([KMGTPE]i|[kMGTPE])?$
                          type: string
                      type: object
                    replicated:
                      description: The replication settings
                      properties:
                        hybridStorage:
                          description: HybridStorage represents hybrid storage tier
                            settings
                          nullable: true
                          properties:
                            primaryDeviceClass:
                              description: PrimaryDeviceClass represents high performance
                                tier (for example SSD or NVME) for Primary OSD
                              minLength: 1
                              type: string
                            secondaryDeviceClass:
                              description: SecondaryDeviceClass represents low performance
                                tier (for example HDDs) for remaining OSDs
                              minLength: 1
                              type: string
                          required:
                          - primaryDeviceClass
                          - secondaryDeviceClass
                          type: object
                        replicasPerFailureDomain:
                          description: ReplicasPerFailureDomain the number of replica
                            in the specified failure domain
                          minimum: 1
                          type: integer
                        requireSafeReplicaSize:
                          description: RequireSafeReplicaSize if false allows you
                            to set replica 1
                          type: boolean
                        size:
                          description: Size - Number of copies per object in a replicated
                            storage pool, including the object itself (required for
                            replicated pool type)
                          minimum: 0
                          type: integer
                        subFailureDomain:
                          description: SubFailureDomain the name of the sub-failure
                            domain
                          type: string
                        targetSizeRatio:
                          description: TargetSizeRatio gives a hint (%) to Ceph in
                            terms of expected consumption of the total cluster capacity
                          minimum: 0
                          type: number
                      required:
                      - size
                      type: object
                    statusCheck:
                      description: The mirroring statusCheck
                      properties:
                        mirror:
                          description: HealthCheckSpec represents the health check
                            of an object store bucket
                          nullable: true
                          properties:
                            disabled:
                              type: boolean
                            interval:
                              description: Interval is the internal in second or minute
                                for the health check to run like 60s for 60 seconds
                              type: string
                            timeout:
                              type: string
                          type: object
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  type: object
                metadataServer:
                  description: The mds pod info
                  properties:
                    activeCount:
                      description: The number of metadata servers that are active.
                        The remaining servers in the cluster will be in standby mode.
                      format: int32
                      maximum: 50
                      minimum: 1
                      type: integer
                    activeStandby:
                      description: |-
                        Whether each active MDS instance will have an active standby with a warm metadata cache for faster failover.
                        If false, standbys will still be available, but will not have a warm metadata cache.
                      type: boolean
                    annotations:
                      additionalProperties:
                        type: string
                      description: The annotations-related configuration to add/set
                        on each Pod related object.
                      nullable: true
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    labels:
                      additionalProperties:
                        type: string
                      description: The labels-related configuration to add/set on
                        each Pod related object.
                      nullable: true
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    livenessProbe:
                      description: ProbeSpec is a wrapper around Probe so it can be
                        enabled or disabled for a Ceph daemon
                      properties:
                        disabled:
                          description: Disabled determines whether probe is disable
                            or not
                          type: boolean
                        probe:
                          description: |-
                            Probe describes a health check to be performed against a container to determine whether it is
                            alive or ready to receive traffic.
                          properties:
                            exec:
                              description: Exec specifies a command to execute in
                                the container.
                              properties:
                                command:
                                  description: |-
                                    Command is the command line to execute inside the container, the working directory for the
                                    command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
                                    not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
                                    a shell, you need to explicitly call out to that shell.
                                    Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                              type: object
                            failureThreshold:
                              description: |-
                                Minimum consecutive failures for the probe to be considered failed after having succeeded.
                                Defaults to 3. Minimum value is 1.
                              format: int32
                              type: integer
                            grpc:
                              description: GRPC specifies a GRPC HealthCheckRequest.
                              properties:
                                port:
                                  description: Port number of the gRPC service. Number
                                    must be in the range 1 to 65535.
                                  format: int32
                                  type: integer
                                service:
                                  default: ""
                                  description: |-
                                    Service is the name of the service to place in the gRPC HealthCheckRequest
                                    (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                                    If this is not specified, the default behavior is defined by gRPC.
                                  type: string
                              required:
                              - port
                              type: object
                            httpGet:
                              description: HTTPGet specifies an HTTP GET request to
                                perform.
                              properties:
                                host:
                                  description: |-
                                    Host name to connect to, defaults to the pod IP. You probably want to set
                                    "Host" in httpHeaders instead.
                                  type: string
                                httpHeaders:
                                  description: Custom headers to set in the request.
                                    HTTP allows repeated headers.
                                  items:
                                    description: HTTPHeader describes a custom header
                                      to be used in HTTP probes
                                    properties:
                                      name:
                                        description: |-
                                          The header field name.
                                          This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                        type: string
                                      value:
                                        description: The header field value
                                        type: string
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                                  x-kubernetes-list-type: atomic
                                path:
                                  description: Path to access on the HTTP server.
                                  type: string
                                port:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: |-
                                    Name or number of the port to access on the container.
                                    Number must be in the range 1 to 65535.
                                    Name must be an IANA_SVC_NAME.
                                  x-kubernetes-int-or-string: true
                                scheme:
                                  description: |-
                                    Scheme to use for connecting to the host.
                                    Defaults to HTTP.
                                  type: string
                              required:
                              - port
                              type: object
                            initialDelaySeconds:
                              description: |-
                                Number of seconds after the container has started before liveness probes are initiated.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                              format: int32
                              type: integer
                            periodSeconds:
                              description: |-
                                How often (in seconds) to perform the probe.
                                Default to 10 seconds. Minimum value is 1.
                              format: int32
                              type: integer
                            successThreshold:
                              description: |-
                                Minimum consecutive successes for the probe to be considered successful after having failed.
                                Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                              format: int32
                              type: integer
                            tcpSocket:
                              description: TCPSocket specifies a connection to a TCP
                                port.
                              properties:
                                host:
                                  description: 'Optional: Host name to connect to,
                                    defaults to the pod IP.'
                                  type: string
                                port:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: |-
                                    Number or name of the port to access on the container.
                                    Number must be in the range 1 to 65535.
                                    Name must be an IANA_SVC_NAME.
                                  x-kubernetes-int-or-string: true
                              required:
                              - port
                              type: object
                            terminationGracePeriodSeconds:
                              format: int64
                              type: integer
                            timeoutSeconds:
                              description: |-
                                Number of seconds after which the probe times out.
                                Defaults to 1 second. Minimum value is 1.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                              format: int32
                              type: integer
                          type: object
                      type: object
                    placement:
                      nullable: true
                      properties:
                        nodeAffinity:
                          properties:
                            preferredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  preference:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchFields:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  weight:
                                    format: int32
                                    type: integer
                                required:
                                - preference
                                - weight
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                            requiredDuringSchedulingIgnoredDuringExecution:
                              properties:
                                nodeSelectorTerms:
                                  items:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchFields:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  type: array
                                  x-kubernetes-list-type: atomic
                              required:
                              - nodeSelectorTerms
                              type: object
                              x-kubernetes-map-type: atomic
                          type: object
                        podAffinity:
                          properties:
                            preferredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  podAffinityTerm:
                                    properties:
                                      labelSelector:
                                        properties:
                                          matchExpressions:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                operator:
                                                  type: string
                                                values:
                                                  items:
                                                    type: string
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      matchLabelKeys:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      mismatchLabelKeys:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      namespaceSelector:
                                        properties:
                                          matchExpressions:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                operator:
                                                  type: string
                                                values:
                                                  items:
                                                    type: string
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaces:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      topologyKey:
                                        type: string
                                    required:
                                    - topologyKey
                                    type: object
                                  weight:
                                    format: int32
                                    type: integer
                                required:
                                - podAffinityTerm
                                - weight
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                            requiredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  labelSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  matchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  mismatchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  namespaceSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  namespaces:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  topologyKey:
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                          type: object
                        podAntiAffinity:
                          properties:
                            preferredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  podAffinityTerm:
                                    properties:
                                      labelSelector:
                                        properties:
                                          matchExpressions:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                operator:
                                                  type: string
                                                values:
                                                  items:
                                                    type: string
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      matchLabelKeys:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      mismatchLabelKeys:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      namespaceSelector:
                                        properties:
                                          matchExpressions:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                operator:
                                                  type: string
                                                values:
                                                  items:
                                                    type: string
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaces:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      topologyKey:
                                        type: string
                                    required:
                                    - topologyKey
                                    type: object
                                  weight:
                                    format: int32
                                    type: integer
                                required:
                                - podAffinityTerm
                                - weight
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                            requiredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  labelSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  matchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  mismatchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  namespaceSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  namespaces:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  topologyKey:
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                          type: object
                        tolerations:
                          items:
                            properties:
                              effect:
                                type: string
                              key:
                                type: string
                              operator:
                                type: string
                              tolerationSeconds:
                                format: int64
                                type: integer
                              value:
                                type: string
                            type: object
                          type: array
                        topologySpreadConstraints:
                          items:
                            properties:
                              labelSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              matchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              maxSkew:
                                format: int32
                                type: integer
                              minDomains:
                                format: int32
                                type: integer
                              nodeAffinityPolicy:
                                type: string
                              nodeTaintsPolicy:
                                type: string
                              topologyKey:
                                type: string
                              whenUnsatisfiable:
                                type: string
                            required:
                            - maxSkew
                            - topologyKey
                            - whenUnsatisfiable
                            type: object
                          type: array
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    priorityClassName:
                      description: PriorityClassName sets priority classes on components
                      type: string
                    resources:
                      description: The resource requirements for the mds pods
                      nullable: true
                      properties:
                        claims:
                          description: |-
                            Claims lists the names of resources, defined in spec.resourceClaims,
                            that are used by this container.

                            This is an alpha field and requires enabling the
                            DynamicResourceAllocation feature gate.

                            This field is immutable. It can only be set for containers.
                          items:
                            description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                            properties:
                              name:
                                description: |-
                                  Name must match the name of one entry in pod.spec.resourceClaims of
                                  the Pod where this field is used. It makes that resource available
                                  inside a container.
                                type: string
                              request:
                                description: |-
                                  Request is the name chosen for a request in the referenced claim.
                                  If empty, everything from the claim is made available, otherwise
                                  only the result of this request.
                                type: string
                            required:
                            - name
                            type: object
                          type: array
                          x-kubernetes-list-map-keys:
                          - name
                          x-kubernetes-list-type: map
                        limits:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: |-
                            Limits describes the maximum amount of compute resources allowed.
                            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                          type: object
                        requests:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: |-
                            Requests describes the minimum amount of compute resources required.
                            If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                            otherwise to an implementation-defined value. Requests cannot exceed Limits.
                            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                          type: object
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    startupProbe:
                      description: ProbeSpec is a wrapper around Probe so it can be
                        enabled or disabled for a Ceph daemon
                      properties:
                        disabled:
                          description: Disabled determines whether probe is disable
                            or not
                          type: boolean
                        probe:
                          description: |-
                            Probe describes a health check to be performed against a container to determine whether it is
                            alive or ready to receive traffic.
                          properties:
                            exec:
                              description: Exec specifies a command to execute in
                                the container.
                              properties:
                                command:
                                  description: |-
                                    Command is the command line to execute inside the container, the working directory for the
                                    command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
                                    not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
                                    a shell, you need to explicitly call out to that shell.
                                    Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                              type: object
                            failureThreshold:
                              description: |-
                                Minimum consecutive failures for the probe to be considered failed after having succeeded.
                                Defaults to 3. Minimum value is 1.
                              format: int32
                              type: integer
                            grpc:
                              description: GRPC specifies a GRPC HealthCheckRequest.
                              properties:
                                port:
                                  description: Port number of the gRPC service. Number
                                    must be in the range 1 to 65535.
                                  format: int32
                                  type: integer
                                service:
                                  default: ""
                                  description: |-
                                    Service is the name of the service to place in the gRPC HealthCheckRequest
                                    (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                                    If this is not specified, the default behavior is defined by gRPC.
                                  type: string
                              required:
                              - port
                              type: object
                            httpGet:
                              description: HTTPGet specifies an HTTP GET request to
                                perform.
                              properties:
                                host:
                                  description: |-
                                    Host name to connect to, defaults to the pod IP. You probably want to set
                                    "Host" in httpHeaders instead.
                                  type: string
                                httpHeaders:
                                  description: Custom headers to set in the request.
                                    HTTP allows repeated headers.
                                  items:
                                    description: HTTPHeader describes a custom header
                                      to be used in HTTP probes
                                    properties:
                                      name:
                                        description: |-
                                          The header field name.
                                          This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                        type: string
                                      value:
                                        description: The header field value
                                        type: string
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                                  x-kubernetes-list-type: atomic
                                path:
                                  description: Path to access on the HTTP server.
                                  type: string
                                port:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: |-
                                    Name or number of the port to access on the container.
                                    Number must be in the range 1 to 65535.
                                    Name must be an IANA_SVC_NAME.
                                  x-kubernetes-int-or-string: true
                                scheme:
                                  description: |-
                                    Scheme to use for connecting to the host.
                                    Defaults to HTTP.
                                  type: string
                              required:
                              - port
                              type: object
                            initialDelaySeconds:
                              description: |-
                                Number of seconds after the container has started before liveness probes are initiated.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                              format: int32
                              type: integer
                            periodSeconds:
                              description: |-
                                How often (in seconds) to perform the probe.
                                Default to 10 seconds. Minimum value is 1.
                              format: int32
                              type: integer
                            successThreshold:
                              description: |-
                                Minimum consecutive successes for the probe to be considered successful after having failed.
                                Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                              format: int32
                              type: integer
                            tcpSocket:
                              description: TCPSocket specifies a connection to a TCP
                                port.
                              properties:
                                host:
                                  description: 'Optional: Host name to connect to,
                                    defaults to the pod IP.'
                                  type: string
                                port:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: |-
                                    Number or name of the port to access on the container.
                                    Number must be in the range 1 to 65535.
                                    Name must be an IANA_SVC_NAME.
                                  x-kubernetes-int-or-string: true
                              required:
                              - port
                              type: object
                            terminationGracePeriodSeconds:
                              format: int64
                              type: integer
                            timeoutSeconds:
                              description: |-
                                Number of seconds after which the probe times out.
                                Defaults to 1 second. Minimum value is 1.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                              format: int32
                              type: integer
                          type: object
                      type: object
                  required:
                  - activeCount
                  type: object
                mirroring:
                  description: The mirroring settings
                  nullable: true
                  properties:
                    enabled:
                      description: Enabled whether this filesystem is mirrored or
                        not
                      type: boolean
                    peers:
                      description: Peers represents the peers spec
                      nullable: true
                      properties:
                        secretNames:
                          description: SecretNames represents the Kubernetes Secret
                            names to add rbd-mirror or cephfs-mirror peers
                          items:
                            type: string
                          type: array
                      type: object
                    snapshotRetention:
                      description: |-
                        Retention is the retention policy for a snapshot schedule
                        One path has exactly one retention policy.
                        A policy can however contain multiple count-time period pairs in order to specify complex retention policies
                      items:
                        description: SnapshotScheduleRetentionSpec is a retention
                          policy
                        properties:
                          duration:
                            description: Duration represents the retention duration
                              for a snapshot
                            type: string
                          path:
                            description: Path is the path to snapshot
                            type: string
                        type: object
                      type: array
                    snapshotSchedules:
                      description: SnapshotSchedules is the scheduling of snapshot
                        for mirrored filesystems
                      items:
                        description: SnapshotScheduleSpec represents the snapshot
                          scheduling settings of a mirrored pool
                        properties:
                          interval:
                            description: Interval represent the periodicity of the
                              snapshot.
                            type: string
                          path:
                            description: Path is the path to snapshot, only valid
                              for CephFS
                            type: string
                          startTime:
                            description: StartTime indicates when to start the snapshot
                            type: string
                        type: object
                      type: array
                  type: object
                preserveFilesystemOnDelete:
                  description: Preserve the fs in the cluster on CephFilesystem CR
                    deletion. Setting this to true automatically implies PreservePoolsOnDelete
                    is true.
                  type: boolean
                preservePoolNames:
                  description: Preserve pool names as specified
                  type: boolean
                preservePoolsOnDelete:
                  description: Preserve pools on filesystem deletion
                  type: boolean
                statusCheck:
                  description: The mirroring statusCheck
                  properties:
                    mirror:
                      description: HealthCheckSpec represents the health check of
                        an object store bucket
                      nullable: true
                      properties:
                        disabled:
                          type: boolean
                        interval:
                          description: Interval is the internal in second or minute
                            for the health check to run like 60s for 60 seconds
                          type: string
                        timeout:
                          type: string
                      type: object
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
              required:
              - dataPools
              - metadataPool
              - metadataServer
              type: object
            status:
              description: CephFilesystemStatus represents the status of a Ceph Filesystem
              properties:
                conditions:
                  items:
                    description: Condition represents a status condition on any Rook-Ceph
                      Custom Resource.
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        format: date-time
                        type: string
                      message:
                        type: string
                      reason:
                        description: ConditionReason is a reason for a condition
                        type: string
                      status:
                        type: string
                      type:
                        description: ConditionType represent a resource's status
                        type: string
                    type: object
                  type: array
                info:
                  additionalProperties:
                    type: string
                  description: Use only info and put mirroringStatus in it?
                  nullable: true
                  type: object
                mirroringStatus:
                  description: MirroringStatus is the filesystem mirroring status
                  properties:
                    daemonsStatus:
                      description: PoolMirroringStatus is the mirroring status of
                        a filesystem
                      items:
                        description: FilesystemMirrorInfoSpec is the filesystem mirror
                          status of a given filesystem
                        properties:
                          daemon_id:
                            description: DaemonID is the cephfs-mirror name
                            type: integer
                          filesystems:
                            description: Filesystems is the list of filesystems managed
                              by a given cephfs-mirror daemon
                            items:
                              description: FilesystemsSpec is spec for the mirrored
                                filesystem
                              properties:
                                directory_count:
                                  description: DirectoryCount is the number of directories
                                    in the filesystem
                                  type: integer
                                filesystem_id:
                                  description: FilesystemID is the filesystem identifier
                                  type: integer
                                name:
                                  description: Name is name of the filesystem
                                  type: string
                                peers:
                                  description: Peers represents the mirroring peers
                                  items:
                                    description: FilesystemMirrorInfoPeerSpec is the
                                      specification of a filesystem peer mirror
                                    properties:
                                      remote:
                                        description: Remote are the remote cluster
                                          information
                                        properties:
                                          client_name:
                                            description: ClientName is cephx name
                                            type: string
                                          cluster_name:
                                            description: ClusterName is the name of
                                              the cluster
                                            type: string
                                          fs_name:
                                            description: FsName is the filesystem
                                              name
                                            type: string
                                        type: object
                                      stats:
                                        description: Stats are the stat a peer mirror
                                        properties:
                                          failure_count:
                                            description: FailureCount is the number
                                              of mirroring failure
                                            type: integer
                                          recovery_count:
                                            description: RecoveryCount is the number
                                              of recovery attempted after failures
                                            type: integer
                                        type: object
                                      uuid:
                                        description: UUID is the peer unique identifier
                                        type: string
                                    type: object
                                  type: array
                              type: object
                            type: array
                        type: object
                      nullable: true
                      type: array
                    details:
                      description: Details contains potential status errors
                      type: string
                    lastChanged:
                      description: LastChanged is the last time time the status last
                        changed
                      type: string
                    lastChecked:
                      description: LastChecked is the last time time the status was
                        checked
                      type: string
                  type: object
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  description: ConditionType represent a resource's status
                  type: string
                snapshotScheduleStatus:
                  description: FilesystemSnapshotScheduleStatusSpec is the status
                    of the snapshot schedule
                  properties:
                    details:
                      description: Details contains potential status errors
                      type: string
                    lastChanged:
                      description: LastChanged is the last time time the status last
                        changed
                      type: string
                    lastChecked:
                      description: LastChecked is the last time time the status was
                        checked
                      type: string
                    snapshotSchedules:
                      description: SnapshotSchedules is the list of snapshots scheduled
                      items:
                        description: FilesystemSnapshotSchedulesSpec is the list of
                          snapshot scheduled for images in a pool
                        properties:
                          fs:
                            description: Fs is the name of the Ceph Filesystem
                            type: string
                          path:
                            description: Path is the path on the filesystem
                            type: string
                          rel_path:
                            type: string
                          retention:
                            description: FilesystemSnapshotScheduleStatusRetention
                              is the retention specification for a filesystem snapshot
                              schedule
                            properties:
                              active:
                                description: Active is whether the scheduled is active
                                  or not
                                type: boolean
                              created:
                                description: Created is when the snapshot schedule
                                  was created
                                type: string
                              created_count:
                                description: CreatedCount is total amount of snapshots
                                type: integer
                              first:
                                description: First is when the first snapshot schedule
                                  was taken
                                type: string
                              last:
                                description: Last is when the last snapshot schedule
                                  was taken
                                type: string
                              last_pruned:
                                description: LastPruned is when the last snapshot
                                  schedule was pruned
                                type: string
                              pruned_count:
                                description: PrunedCount is total amount of pruned
                                  snapshots
                                type: integer
                              start:
                                description: Start is when the snapshot schedule starts
                                type: string
                            type: object
                          schedule:
                            type: string
                          subvol:
                            description: Subvol is the name of the sub volume
                            type: string
                        type: object
                      nullable: true
                      type: array
                  type: object
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephFilesystem
      listKind: CephFilesystemList
      plural: cephfilesystems
      shortNames:
      - cephfs
      singular: cephfilesystem
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephobjectstores.ceph.rook.io
    resourceVersion: "7612"
    uid: 366141f7-433b-461a-bbf8-f2bf5b92af45
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephObjectStore
      listKind: CephObjectStoreList
      plural: cephobjectstores
      shortNames:
      - cephos
      singular: cephobjectstore
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.phase
        name: Phase
        type: string
      - jsonPath: .status.info.endpoint
        name: Endpoint
        type: string
      - jsonPath: .status.info.secureEndpoint
        name: SecureEndpoint
        type: string
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: CephObjectStore represents a Ceph Object Store Gateway
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: ObjectStoreSpec represent the spec of a pool
              properties:
                allowUsersInNamespaces:
                  description: |-
                    The list of allowed namespaces in addition to the object store namespace
                    where ceph object store users may be created. Specify "*" to allow all
                    namespaces, otherwise list individual namespaces that are to be allowed.
                    This is useful for applications that need object store credentials
                    to be created in their own namespace, where neither OBCs nor COSI
                    is being used to create buckets. The default is empty.
                  items:
                    type: string
                  type: array
                auth:
                  description: The authentication configuration
                  properties:
                    keystone:
                      description: The spec for Keystone
                      nullable: true
                      properties:
                        acceptedRoles:
                          description: The roles requires to serve requests.
                          items:
                            type: string
                          type: array
                        implicitTenants:
                          description: Create new users in their own tenants of the
                            same name. Possible values are true, false, swift and
                            s3. The latter have the effect of splitting the identity
                            space such that only the indicated protocol will use implicit
                            tenants.
                          type: string
                        revocationInterval:
                          description: The number of seconds between token revocation
                            checks.
                          nullable: true
                          type: integer
                        serviceUserSecretName:
                          description: The name of the secret containing the credentials
                            for the service user account used by RGW. It has to be
                            in the same namespace as the object store resource.
                          type: string
                        tokenCacheSize:
                          description: The maximum number of entries in each Keystone
                            token cache.
                          nullable: true
                          type: integer
                        url:
                          description: The URL for the Keystone server.
                          type: string
                      required:
                      - acceptedRoles
                      - serviceUserSecretName
                      - url
                      type: object
                  type: object
                dataPool:
                  description: The data pool settings
                  nullable: true
                  properties:
                    application:
                      description: The application name to set on the pool. Only expected
                        to be set for rgw pools.
                      type: string
                    compressionMode:
                      description: |-
                        DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
                        The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
                        Do NOT set a default value for kubebuilder as this will override the Parameters
                      enum:
                      - none
                      - passive
                      - aggressive
                      - force
                      - ""
                      nullable: true
                      type: string
                    crushRoot:
                      description: The root of the crush hierarchy utilized by the
                        pool
                      nullable: true
                      type: string
                    deviceClass:
                      description: The device class the OSD should set to for use
                        in the pool
                      nullable: true
                      type: string
                    enableCrushUpdates:
                      description: Allow rook operator to change the pool CRUSH tunables
                        once the pool is created
                      type: boolean
                    enableRBDStats:
                      description: EnableRBDStats is used to enable gathering of statistics
                        for all RBD images in the pool
                      type: boolean
                    erasureCoded:
                      description: The erasure code settings
                      properties:
                        algorithm:
                          description: The algorithm for erasure coding
                          type: string
                        codingChunks:
                          description: |-
                            Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                            This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
                          minimum: 0
                          type: integer
                        dataChunks:
                          description: |-
                            Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                            The number of chunks required to recover an object when any single OSD is lost is the same
                            as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
                          minimum: 0
                          type: integer
                      required:
                      - codingChunks
                      - dataChunks
                      type: object
                    failureDomain:
                      description: 'The failure domain: osd/host/(region or zone if
                        available) - technically also any type in the crush map'
                      type: string
                    mirroring:
                      description: The mirroring settings
                      properties:
                        enabled:
                          description: Enabled whether this pool is mirrored or not
                          type: boolean
                        mode:
                          description: 'Mode is the mirroring mode: pool, image or
                            init-only.'
                          enum:
                          - pool
                          - image
                          - init-only
                          type: string
                        peers:
                          description: Peers represents the peers spec
                          nullable: true
                          properties:
                            secretNames:
                              description: SecretNames represents the Kubernetes Secret
                                names to add rbd-mirror or cephfs-mirror peers
                              items:
                                type: string
                              type: array
                          type: object
                        snapshotSchedules:
                          description: SnapshotSchedules is the scheduling of snapshot
                            for mirrored images/pools
                          items:
                            description: SnapshotScheduleSpec represents the snapshot
                              scheduling settings of a mirrored pool
                            properties:
                              interval:
                                description: Interval represent the periodicity of
                                  the snapshot.
                                type: string
                              path:
                                description: Path is the path to snapshot, only valid
                                  for CephFS
                                type: string
                              startTime:
                                description: StartTime indicates when to start the
                                  snapshot
                                type: string
                            type: object
                          type: array
                      type: object
                    parameters:
                      additionalProperties:
                        type: string
                      description: Parameters is a list of properties to enable on
                        a given pool
                      nullable: true
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    quotas:
                      description: The quota settings
                      nullable: true
                      properties:
                        maxBytes:
                          description: |-
                            MaxBytes represents the quota in bytes
                            Deprecated in favor of MaxSize
                          format: int64
                          type: integer
                        maxObjects:
                          description: MaxObjects represents the quota in objects
                          format: int64
                          type: integer
                        maxSize:
                          description: MaxSize represents the quota in bytes as a
                            string
                          pattern: ^[0-9]+[\.]?[0-9]*([KMGTPE]i|[kMGTPE])?$
                          type: string
                      type: object
                    replicated:
                      description: The replication settings
                      properties:
                        hybridStorage:
                          description: HybridStorage represents hybrid storage tier
                            settings
                          nullable: true
                          properties:
                            primaryDeviceClass:
                              description: PrimaryDeviceClass represents high performance
                                tier (for example SSD or NVME) for Primary OSD
                              minLength: 1
                              type: string
                            secondaryDeviceClass:
                              description: SecondaryDeviceClass represents low performance
                                tier (for example HDDs) for remaining OSDs
                              minLength: 1
                              type: string
                          required:
                          - primaryDeviceClass
                          - secondaryDeviceClass
                          type: object
                        replicasPerFailureDomain:
                          description: ReplicasPerFailureDomain the number of replica
                            in the specified failure domain
                          minimum: 1
                          type: integer
                        requireSafeReplicaSize:
                          description: RequireSafeReplicaSize if false allows you
                            to set replica 1
                          type: boolean
                        size:
                          description: Size - Number of copies per object in a replicated
                            storage pool, including the object itself (required for
                            replicated pool type)
                          minimum: 0
                          type: integer
                        subFailureDomain:
                          description: SubFailureDomain the name of the sub-failure
                            domain
                          type: string
                        targetSizeRatio:
                          description: TargetSizeRatio gives a hint (%) to Ceph in
                            terms of expected consumption of the total cluster capacity
                          minimum: 0
                          type: number
                      required:
                      - size
                      type: object
                    statusCheck:
                      description: The mirroring statusCheck
                      properties:
                        mirror:
                          description: HealthCheckSpec represents the health check
                            of an object store bucket
                          nullable: true
                          properties:
                            disabled:
                              type: boolean
                            interval:
                              description: Interval is the internal in second or minute
                                for the health check to run like 60s for 60 seconds
                              type: string
                            timeout:
                              type: string
                          type: object
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  type: object
                gateway:
                  description: The rgw pod info
                  nullable: true
                  properties:
                    additionalVolumeMounts:
                      description: |-
                        AdditionalVolumeMounts allows additional volumes to be mounted to the RGW pod.
                        The root directory for each additional volume mount is `/var/rgw`.
                        Example: for an additional mount at subPath `ldap`, mounted from a secret that has key
                        `bindpass.secret`, the file would reside at `/var/rgw/ldap/bindpass.secret`.
                      items:
                        description: |-
                          AdditionalVolumeMount represents the source from where additional files in pod containers
                          should come from and what subdirectory they are made available in.
                        properties:
                          subPath:
                            description: |-
                              SubPath defines the sub-path (subdirectory) of the directory root where the volumeSource will
                              be mounted. All files/keys in the volume source's volume will be mounted to the subdirectory.
                              This is not the same as the Kubernetes `subPath` volume mount option.
                              Each subPath definition must be unique and must not contain ':'.
                            minLength: 1
                            pattern: ^[^:]+$
                            type: string
                          volumeSource:
                            properties:
                              configMap:
                                properties:
                                  defaultMode:
                                    format: int32
                                    type: integer
                                  items:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        mode:
                                          format: int32
                                          type: integer
                                        path:
                                          type: string
                                      required:
                                      - key
                                      - path
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  name:
                                    default: ""
                                    type: string
                                  optional:
                                    type: boolean
                                type: object
                                x-kubernetes-map-type: atomic
                              emptyDir:
                                properties:
                                  medium:
                                    type: string
                                  sizeLimit:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                type: object
                              hostPath:
                                properties:
                                  path:
                                    type: string
                                  type:
                                    type: string
                                required:
                                - path
                                type: object
                              persistentVolumeClaim:
                                properties:
                                  claimName:
                                    type: string
                                  readOnly:
                                    type: boolean
                                required:
                                - claimName
                                type: object
                              projected:
                                properties:
                                  defaultMode:
                                    format: int32
                                    type: integer
                                  sources:
                                    items:
                                      properties:
                                        clusterTrustBundle:
                                          properties:
                                            labelSelector:
                                              properties:
                                                matchExpressions:
                                                  items:
                                                    properties:
                                                      key:
                                                        type: string
                                                      operator:
                                                        type: string
                                                      values:
                                                        items:
                                                          type: string
                                                        type: array
                                                        x-kubernetes-list-type: atomic
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            name:
                                              type: string
                                            optional:
                                              type: boolean
                                            path:
                                              type: string
                                            signerName:
                                              type: string
                                          required:
                                          - path
                                          type: object
                                        configMap:
                                          properties:
                                            items:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  mode:
                                                    format: int32
                                                    type: integer
                                                  path:
                                                    type: string
                                                required:
                                                - key
                                                - path
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            name:
                                              default: ""
                                              type: string
                                            optional:
                                              type: boolean
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        downwardAPI:
                                          properties:
                                            items:
                                              items:
                                                properties:
                                                  fieldRef:
                                                    properties:
                                                      apiVersion:
                                                        type: string
                                                      fieldPath:
                                                        type: string
                                                    required:
                                                    - fieldPath
                                                    type: object
                                                    x-kubernetes-map-type: atomic
                                                  mode:
                                                    format: int32
                                                    type: integer
                                                  path:
                                                    type: string
                                                  resourceFieldRef:
                                                    properties:
                                                      containerName:
                                                        type: string
                                                      divisor:
                                                        anyOf:
                                                        - type: integer
                                                        - type: string
                                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                        x-kubernetes-int-or-string: true
                                                      resource:
                                                        type: string
                                                    required:
                                                    - resource
                                                    type: object
                                                    x-kubernetes-map-type: atomic
                                                required:
                                                - path
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          type: object
                                        secret:
                                          properties:
                                            items:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  mode:
                                                    format: int32
                                                    type: integer
                                                  path:
                                                    type: string
                                                required:
                                                - key
                                                - path
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            name:
                                              default: ""
                                              type: string
                                            optional:
                                              type: boolean
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        serviceAccountToken:
                                          properties:
                                            audience:
                                              type: string
                                            expirationSeconds:
                                              format: int64
                                              type: integer
                                            path:
                                              type: string
                                          required:
                                          - path
                                          type: object
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                type: object
                              secret:
                                properties:
                                  defaultMode:
                                    format: int32
                                    type: integer
                                  items:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        mode:
                                          format: int32
                                          type: integer
                                        path:
                                          type: string
                                      required:
                                      - key
                                      - path
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  optional:
                                    type: boolean
                                  secretName:
                                    type: string
                                type: object
                            type: object
                        required:
                        - subPath
                        - volumeSource
                        type: object
                      type: array
                    annotations:
                      additionalProperties:
                        type: string
                      description: The annotations-related configuration to add/set
                        on each Pod related object.
                      nullable: true
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    caBundleRef:
                      description: The name of the secret that stores custom ca-bundle
                        with root and intermediate certificates.
                      nullable: true
                      type: string
                    dashboardEnabled:
                      description: Whether rgw dashboard is enabled for the rgw daemon.
                        If not set, the rgw dashboard will be enabled.
                      nullable: true
                      type: boolean
                      x-kubernetes-preserve-unknown-fields: true
                    disableMultisiteSyncTraffic:
                      description: |-
                        DisableMultisiteSyncTraffic, when true, prevents this object store's gateways from
                        transmitting multisite replication data. Note that this value does not affect whether
                        gateways receive multisite replication traffic: see ObjectZone.spec.customEndpoints for that.
                        If false or unset, this object store's gateways will be able to transmit multisite
                        replication data.
                      type: boolean
                    externalRgwEndpoints:
                      description: |-
                        ExternalRgwEndpoints points to external RGW endpoint(s). Multiple endpoints can be given, but
                        for stability of ObjectBucketClaims, we highly recommend that users give only a single
                        external RGW endpoint that is a load balancer that sends requests to the multiple RGWs.
                      items:
                        description: |-
                          EndpointAddress is a tuple that describes a single IP address or host name. This is a subset of
                          Kubernetes's v1.EndpointAddress.
                        properties:
                          hostname:
                            description: The DNS-addressable Hostname of this endpoint.
                              This field will be preferred over IP if both are given.
                            type: string
                          ip:
                            description: The IP of this endpoint. As a legacy behavior,
                              this supports being given a DNS-addressable hostname
                              as well.
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      nullable: true
                      type: array
                    hostNetwork:
                      description: Whether host networking is enabled for the rgw
                        daemon. If not set, the network settings from the cluster
                        CR will be applied.
                      nullable: true
                      type: boolean
                      x-kubernetes-preserve-unknown-fields: true
                    instances:
                      description: The number of pods in the rgw replicaset.
                      format: int32
                      nullable: true
                      type: integer
                    labels:
                      additionalProperties:
                        type: string
                      description: The labels-related configuration to add/set on
                        each Pod related object.
                      nullable: true
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    opsLogSidecar:
                      description: Enable enhanced operation Logs for S3 in a sidecar
                        named ops-log
                      nullable: true
                      properties:
                        resources:
                          description: Resources represents the way to specify resource
                            requirements for the ops-log sidecar
                          properties:
                            claims:
                              description: |-
                                Claims lists the names of resources, defined in spec.resourceClaims,
                                that are used by this container.

                                This is an alpha field and requires enabling the
                                DynamicResourceAllocation feature gate.

                                This field is immutable. It can only be set for containers.
                              items:
                                description: ResourceClaim references one entry in
                                  PodSpec.ResourceClaims.
                                properties:
                                  name:
                                    description: |-
                                      Name must match the name of one entry in pod.spec.resourceClaims of
                                      the Pod where this field is used. It makes that resource available
                                      inside a container.
                                    type: string
                                  request:
                                    description: |-
                                      Request is the name chosen for a request in the referenced claim.
                                      If empty, everything from the claim is made available, otherwise
                                      only the result of this request.
                                    type: string
                                required:
                                - name
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                              - name
                              x-kubernetes-list-type: map
                            limits:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: |-
                                Limits describes the maximum amount of compute resources allowed.
                                More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: |-
                                Requests describes the minimum amount of compute resources required.
                                If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                              type: object
                          type: object
                      type: object
                    placement:
                      nullable: true
                      properties:
                        nodeAffinity:
                          properties:
                            preferredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  preference:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchFields:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  weight:
                                    format: int32
                                    type: integer
                                required:
                                - preference
                                - weight
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                            requiredDuringSchedulingIgnoredDuringExecution:
                              properties:
                                nodeSelectorTerms:
                                  items:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchFields:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  type: array
                                  x-kubernetes-list-type: atomic
                              required:
                              - nodeSelectorTerms
                              type: object
                              x-kubernetes-map-type: atomic
                          type: object
                        podAffinity:
                          properties:
                            preferredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  podAffinityTerm:
                                    properties:
                                      labelSelector:
                                        properties:
                                          matchExpressions:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                operator:
                                                  type: string
                                                values:
                                                  items:
                                                    type: string
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      matchLabelKeys:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      mismatchLabelKeys:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      namespaceSelector:
                                        properties:
                                          matchExpressions:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                operator:
                                                  type: string
                                                values:
                                                  items:
                                                    type: string
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaces:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      topologyKey:
                                        type: string
                                    required:
                                    - topologyKey
                                    type: object
                                  weight:
                                    format: int32
                                    type: integer
                                required:
                                - podAffinityTerm
                                - weight
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                            requiredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  labelSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  matchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  mismatchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  namespaceSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  namespaces:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  topologyKey:
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                          type: object
                        podAntiAffinity:
                          properties:
                            preferredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  podAffinityTerm:
                                    properties:
                                      labelSelector:
                                        properties:
                                          matchExpressions:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                operator:
                                                  type: string
                                                values:
                                                  items:
                                                    type: string
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      matchLabelKeys:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      mismatchLabelKeys:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      namespaceSelector:
                                        properties:
                                          matchExpressions:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                operator:
                                                  type: string
                                                values:
                                                  items:
                                                    type: string
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaces:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      topologyKey:
                                        type: string
                                    required:
                                    - topologyKey
                                    type: object
                                  weight:
                                    format: int32
                                    type: integer
                                required:
                                - podAffinityTerm
                                - weight
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                            requiredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  labelSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  matchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  mismatchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  namespaceSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  namespaces:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  topologyKey:
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                          type: object
                        tolerations:
                          items:
                            properties:
                              effect:
                                type: string
                              key:
                                type: string
                              operator:
                                type: string
                              tolerationSeconds:
                                format: int64
                                type: integer
                              value:
                                type: string
                            type: object
                          type: array
                        topologySpreadConstraints:
                          items:
                            properties:
                              labelSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              matchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              maxSkew:
                                format: int32
                                type: integer
                              minDomains:
                                format: int32
                                type: integer
                              nodeAffinityPolicy:
                                type: string
                              nodeTaintsPolicy:
                                type: string
                              topologyKey:
                                type: string
                              whenUnsatisfiable:
                                type: string
                            required:
                            - maxSkew
                            - topologyKey
                            - whenUnsatisfiable
                            type: object
                          type: array
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    port:
                      description: The port the rgw service will be listening on (http)
                      format: int32
                      type: integer
                    priorityClassName:
                      description: PriorityClassName sets priority classes on the
                        rgw pods
                      type: string
                    readAffinity:
                      description: |-
                        ReadAffinity defines the RGW read affinity policy to optimize the read requests for the RGW clients
                        Note: Only supported from Ceph Tentacle (v20)
                      properties:
                        type:
                          description: |-
                            Type defines the RGW ReadAffinity type
                            localize: read from the nearest OSD based on crush location of the RGW client
                            balance: picks a random OSD from the PG's active set
                            default: read from the primary OSD
                          enum:
                          - localize
                          - balance
                          - default
                          type: string
                      required:
                      - type
                      type: object
                    resources:
                      description: The resource requirements for the rgw pods
                      nullable: true
                      properties:
                        claims:
                          description: |-
                            Claims lists the names of resources, defined in spec.resourceClaims,
                            that are used by this container.

                            This is an alpha field and requires enabling the
                            DynamicResourceAllocation feature gate.

                            This field is immutable. It can only be set for containers.
                          items:
                            description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                            properties:
                              name:
                                description: |-
                                  Name must match the name of one entry in pod.spec.resourceClaims of
                                  the Pod where this field is used. It makes that resource available
                                  inside a container.
                                type: string
                              request:
                                description: |-
                                  Request is the name chosen for a request in the referenced claim.
                                  If empty, everything from the claim is made available, otherwise
                                  only the result of this request.
                                type: string
                            required:
                            - name
                            type: object
                          type: array
                          x-kubernetes-list-map-keys:
                          - name
                          x-kubernetes-list-type: map
                        limits:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: |-
                            Limits describes the maximum amount of compute resources allowed.
                            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                          type: object
                        requests:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: |-
                            Requests describes the minimum amount of compute resources required.
                            If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                            otherwise to an implementation-defined value. Requests cannot exceed Limits.
                            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                          type: object
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    rgwCommandFlags:
                      additionalProperties:
                        type: string
                      description: |-
                        RgwCommandFlags sets Ceph RGW config values for the gateway clients that serve this object
                        store. Values are modified at RGW startup, resulting in RGW pod restarts.
                        This feature is intended for advanced users. It allows breaking configurations to be easily
                        applied. Use with caution.
                      nullable: true
                      type: object
                    rgwConfig:
                      additionalProperties:
                        type: string
                      description: |-
                        RgwConfig sets Ceph RGW config values for the gateway clients that serve this object store.
                        Values are modified at runtime without RGW restart.
                        This feature is intended for advanced users. It allows breaking configurations to be easily
                        applied. Use with caution.
                      nullable: true
                      type: object
                    rgwConfigFromSecret:
                      additionalProperties:
                        description: SecretKeySelector selects a key of a Secret.
                        properties:
                          key:
                            description: The key of the secret to select from.  Must
                              be a valid secret key.
                            type: string
                          name:
                            default: ""
                            description: |-
                              Name of the referent.
                              This field is effectively required, but due to backwards compatibility is
                              allowed to be empty. Instances of this type with an empty value here are
                              almost certainly wrong.
                              More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            type: string
                          optional:
                            description: Specify whether the Secret or its key must
                              be defined
                            type: boolean
                        required:
                        - key
                        type: object
                        x-kubernetes-map-type: atomic
                      description: |-
                        RgwConfigFromSecret works exactly like RgwConfig but takes config value from Secret Key reference.
                        Values are modified at runtime without RGW restart.
                        This feature is intended for advanced users. It allows breaking configurations to be easily
                        applied. Use with caution.
                      nullable: true
                      type: object
                    securePort:
                      description: The port the rgw service will be listening on (https)
                      format: int32
                      maximum: 65535
                      minimum: 0
                      nullable: true
                      type: integer
                    service:
                      description: The configuration related to add/set on each rgw
                        service.
                      nullable: true
                      properties:
                        annotations:
                          additionalProperties:
                            type: string
                          description: |-
                            The annotations-related configuration to add/set on each rgw service.
                            nullable
                            optional
                          type: object
                      type: object
                    sslCertificateRef:
                      description: The name of the secret that stores the ssl certificate
                        for secure rgw connections
                      nullable: true
                      type: string
                  type: object
                healthCheck:
                  description: The RGW health probes
                  nullable: true
                  properties:
                    readinessProbe:
                      description: ProbeSpec is a wrapper around Probe so it can be
                        enabled or disabled for a Ceph daemon
                      properties:
                        disabled:
                          description: Disabled determines whether probe is disable
                            or not
                          type: boolean
                        probe:
                          description: |-
                            Probe describes a health check to be performed against a container to determine whether it is
                            alive or ready to receive traffic.
                          properties:
                            exec:
                              description: Exec specifies a command to execute in
                                the container.
                              properties:
                                command:
                                  description: |-
                                    Command is the command line to execute inside the container, the working directory for the
                                    command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
                                    not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
                                    a shell, you need to explicitly call out to that shell.
                                    Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                              type: object
                            failureThreshold:
                              description: |-
                                Minimum consecutive failures for the probe to be considered failed after having succeeded.
                                Defaults to 3. Minimum value is 1.
                              format: int32
                              type: integer
                            grpc:
                              description: GRPC specifies a GRPC HealthCheckRequest.
                              properties:
                                port:
                                  description: Port number of the gRPC service. Number
                                    must be in the range 1 to 65535.
                                  format: int32
                                  type: integer
                                service:
                                  default: ""
                                  description: |-
                                    Service is the name of the service to place in the gRPC HealthCheckRequest
                                    (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                                    If this is not specified, the default behavior is defined by gRPC.
                                  type: string
                              required:
                              - port
                              type: object
                            httpGet:
                              description: HTTPGet specifies an HTTP GET request to
                                perform.
                              properties:
                                host:
                                  description: |-
                                    Host name to connect to, defaults to the pod IP. You probably want to set
                                    "Host" in httpHeaders instead.
                                  type: string
                                httpHeaders:
                                  description: Custom headers to set in the request.
                                    HTTP allows repeated headers.
                                  items:
                                    description: HTTPHeader describes a custom header
                                      to be used in HTTP probes
                                    properties:
                                      name:
                                        description: |-
                                          The header field name.
                                          This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                        type: string
                                      value:
                                        description: The header field value
                                        type: string
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                                  x-kubernetes-list-type: atomic
                                path:
                                  description: Path to access on the HTTP server.
                                  type: string
                                port:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: |-
                                    Name or number of the port to access on the container.
                                    Number must be in the range 1 to 65535.
                                    Name must be an IANA_SVC_NAME.
                                  x-kubernetes-int-or-string: true
                                scheme:
                                  description: |-
                                    Scheme to use for connecting to the host.
                                    Defaults to HTTP.
                                  type: string
                              required:
                              - port
                              type: object
                            initialDelaySeconds:
                              description: |-
                                Number of seconds after the container has started before liveness probes are initiated.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                              format: int32
                              type: integer
                            periodSeconds:
                              description: |-
                                How often (in seconds) to perform the probe.
                                Default to 10 seconds. Minimum value is 1.
                              format: int32
                              type: integer
                            successThreshold:
                              description: |-
                                Minimum consecutive successes for the probe to be considered successful after having failed.
                                Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                              format: int32
                              type: integer
                            tcpSocket:
                              description: TCPSocket specifies a connection to a TCP
                                port.
                              properties:
                                host:
                                  description: 'Optional: Host name to connect to,
                                    defaults to the pod IP.'
                                  type: string
                                port:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: |-
                                    Number or name of the port to access on the container.
                                    Number must be in the range 1 to 65535.
                                    Name must be an IANA_SVC_NAME.
                                  x-kubernetes-int-or-string: true
                              required:
                              - port
                              type: object
                            terminationGracePeriodSeconds:
                              format: int64
                              type: integer
                            timeoutSeconds:
                              description: |-
                                Number of seconds after which the probe times out.
                                Defaults to 1 second. Minimum value is 1.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                              format: int32
                              type: integer
                          type: object
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    startupProbe:
                      description: ProbeSpec is a wrapper around Probe so it can be
                        enabled or disabled for a Ceph daemon
                      properties:
                        disabled:
                          description: Disabled determines whether probe is disable
                            or not
                          type: boolean
                        probe:
                          description: |-
                            Probe describes a health check to be performed against a container to determine whether it is
                            alive or ready to receive traffic.
                          properties:
                            exec:
                              description: Exec specifies a command to execute in
                                the container.
                              properties:
                                command:
                                  description: |-
                                    Command is the command line to execute inside the container, the working directory for the
                                    command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
                                    not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
                                    a shell, you need to explicitly call out to that shell.
                                    Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                              type: object
                            failureThreshold:
                              description: |-
                                Minimum consecutive failures for the probe to be considered failed after having succeeded.
                                Defaults to 3. Minimum value is 1.
                              format: int32
                              type: integer
                            grpc:
                              description: GRPC specifies a GRPC HealthCheckRequest.
                              properties:
                                port:
                                  description: Port number of the gRPC service. Number
                                    must be in the range 1 to 65535.
                                  format: int32
                                  type: integer
                                service:
                                  default: ""
                                  description: |-
                                    Service is the name of the service to place in the gRPC HealthCheckRequest
                                    (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                                    If this is not specified, the default behavior is defined by gRPC.
                                  type: string
                              required:
                              - port
                              type: object
                            httpGet:
                              description: HTTPGet specifies an HTTP GET request to
                                perform.
                              properties:
                                host:
                                  description: |-
                                    Host name to connect to, defaults to the pod IP. You probably want to set
                                    "Host" in httpHeaders instead.
                                  type: string
                                httpHeaders:
                                  description: Custom headers to set in the request.
                                    HTTP allows repeated headers.
                                  items:
                                    description: HTTPHeader describes a custom header
                                      to be used in HTTP probes
                                    properties:
                                      name:
                                        description: |-
                                          The header field name.
                                          This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                        type: string
                                      value:
                                        description: The header field value
                                        type: string
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                                  x-kubernetes-list-type: atomic
                                path:
                                  description: Path to access on the HTTP server.
                                  type: string
                                port:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: |-
                                    Name or number of the port to access on the container.
                                    Number must be in the range 1 to 65535.
                                    Name must be an IANA_SVC_NAME.
                                  x-kubernetes-int-or-string: true
                                scheme:
                                  description: |-
                                    Scheme to use for connecting to the host.
                                    Defaults to HTTP.
                                  type: string
                              required:
                              - port
                              type: object
                            initialDelaySeconds:
                              description: |-
                                Number of seconds after the container has started before liveness probes are initiated.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                              format: int32
                              type: integer
                            periodSeconds:
                              description: |-
                                How often (in seconds) to perform the probe.
                                Default to 10 seconds. Minimum value is 1.
                              format: int32
                              type: integer
                            successThreshold:
                              description: |-
                                Minimum consecutive successes for the probe to be considered successful after having failed.
                                Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                              format: int32
                              type: integer
                            tcpSocket:
                              description: TCPSocket specifies a connection to a TCP
                                port.
                              properties:
                                host:
                                  description: 'Optional: Host name to connect to,
                                    defaults to the pod IP.'
                                  type: string
                                port:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: |-
                                    Number or name of the port to access on the container.
                                    Number must be in the range 1 to 65535.
                                    Name must be an IANA_SVC_NAME.
                                  x-kubernetes-int-or-string: true
                              required:
                              - port
                              type: object
                            terminationGracePeriodSeconds:
                              format: int64
                              type: integer
                            timeoutSeconds:
                              description: |-
                                Number of seconds after which the probe times out.
                                Defaults to 1 second. Minimum value is 1.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                              format: int32
                              type: integer
                          type: object
                      type: object
                  type: object
                hosting:
                  description: |-
                    Hosting settings for the object store.
                    A common use case for hosting configuration is to inform Rook of endpoints that support DNS
                    wildcards, which in turn allows virtual host-style bucket addressing.
                  nullable: true
                  properties:
                    advertiseEndpoint:
                      description: |-
                        AdvertiseEndpoint is the default endpoint Rook will return for resources dependent on this
                        object store. This endpoint will be returned to CephObjectStoreUsers, Object Bucket Claims,
                        and COSI Buckets/Accesses.
                        By default, Rook returns the endpoint for the object store's Kubernetes service using HTTPS
                        with `gateway.securePort` if it is defined (otherwise, HTTP with `gateway.port`).
                      nullable: true
                      properties:
                        dnsName:
                          description: |-
                            DnsName is the DNS name (in RFC-1123 format) of the endpoint.
                            If the DNS name corresponds to an endpoint with DNS wildcard support, do not include the
                            wildcard itself in the list of hostnames.
                            E.g., use "mystore.example.com" instead of "*.mystore.example.com".
                          minLength: 1
                          type: string
                        port:
                          description: Port is the port on which S3 connections can
                            be made for this endpoint.
                          format: int32
                          maximum: 65535
                          minimum: 1
                          type: integer
                        useTls:
                          description: UseTls defines whether the endpoint uses TLS
                            (HTTPS) or not (HTTP).
                          type: boolean
                      required:
                      - dnsName
                      - port
                      - useTls
                      type: object
                    dnsNames:
                      description: |-
                        A list of DNS host names on which object store gateways will accept client S3 connections.
                        When specified, object store gateways will reject client S3 connections to hostnames that are
                        not present in this list, so include all endpoints.
                        The object store's advertiseEndpoint and Kubernetes service endpoint, plus CephObjectZone
                        `customEndpoints` are automatically added to the list but may be set here again if desired.
                        Each DNS name must be valid according RFC-1123.
                        If the DNS name corresponds to an endpoint with DNS wildcard support, do not include the
                        wildcard itself in the list of hostnames.
                        E.g., use "mystore.example.com" instead of "*.mystore.example.com".
                      items:
                        type: string
                      type: array
                  type: object
                metadataPool:
                  description: The metadata pool settings
                  nullable: true
                  properties:
                    application:
                      description: The application name to set on the pool. Only expected
                        to be set for rgw pools.
                      type: string
                    compressionMode:
                      description: |-
                        DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
                        The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
                        Do NOT set a default value for kubebuilder as this will override the Parameters
                      enum:
                      - none
                      - passive
                      - aggressive
                      - force
                      - ""
                      nullable: true
                      type: string
                    crushRoot:
                      description: The root of the crush hierarchy utilized by the
                        pool
                      nullable: true
                      type: string
                    deviceClass:
                      description: The device class the OSD should set to for use
                        in the pool
                      nullable: true
                      type: string
                    enableCrushUpdates:
                      description: Allow rook operator to change the pool CRUSH tunables
                        once the pool is created
                      type: boolean
                    enableRBDStats:
                      description: EnableRBDStats is used to enable gathering of statistics
                        for all RBD images in the pool
                      type: boolean
                    erasureCoded:
                      description: The erasure code settings
                      properties:
                        algorithm:
                          description: The algorithm for erasure coding
                          type: string
                        codingChunks:
                          description: |-
                            Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                            This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
                          minimum: 0
                          type: integer
                        dataChunks:
                          description: |-
                            Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
                            The number of chunks required to recover an object when any single OSD is lost is the same
                            as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
                          minimum: 0
                          type: integer
                      required:
                      - codingChunks
                      - dataChunks
                      type: object
                    failureDomain:
                      description: 'The failure domain: osd/host/(region or zone if
                        available) - technically also any type in the crush map'
                      type: string
                    mirroring:
                      description: The mirroring settings
                      properties:
                        enabled:
                          description: Enabled whether this pool is mirrored or not
                          type: boolean
                        mode:
                          description: 'Mode is the mirroring mode: pool, image or
                            init-only.'
                          enum:
                          - pool
                          - image
                          - init-only
                          type: string
                        peers:
                          description: Peers represents the peers spec
                          nullable: true
                          properties:
                            secretNames:
                              description: SecretNames represents the Kubernetes Secret
                                names to add rbd-mirror or cephfs-mirror peers
                              items:
                                type: string
                              type: array
                          type: object
                        snapshotSchedules:
                          description: SnapshotSchedules is the scheduling of snapshot
                            for mirrored images/pools
                          items:
                            description: SnapshotScheduleSpec represents the snapshot
                              scheduling settings of a mirrored pool
                            properties:
                              interval:
                                description: Interval represent the periodicity of
                                  the snapshot.
                                type: string
                              path:
                                description: Path is the path to snapshot, only valid
                                  for CephFS
                                type: string
                              startTime:
                                description: StartTime indicates when to start the
                                  snapshot
                                type: string
                            type: object
                          type: array
                      type: object
                    parameters:
                      additionalProperties:
                        type: string
                      description: Parameters is a list of properties to enable on
                        a given pool
                      nullable: true
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    quotas:
                      description: The quota settings
                      nullable: true
                      properties:
                        maxBytes:
                          description: |-
                            MaxBytes represents the quota in bytes
                            Deprecated in favor of MaxSize
                          format: int64
                          type: integer
                        maxObjects:
                          description: MaxObjects represents the quota in objects
                          format: int64
                          type: integer
                        maxSize:
                          description: MaxSize represents the quota in bytes as a
                            string
                          pattern: ^[0-9]+[\.]?[0-9]*([KMGTPE]i|[kMGTPE])?$
                          type: string
                      type: object
                    replicated:
                      description: The replication settings
                      properties:
                        hybridStorage:
                          description: HybridStorage represents hybrid storage tier
                            settings
                          nullable: true
                          properties:
                            primaryDeviceClass:
                              description: PrimaryDeviceClass represents high performance
                                tier (for example SSD or NVME) for Primary OSD
                              minLength: 1
                              type: string
                            secondaryDeviceClass:
                              description: SecondaryDeviceClass represents low performance
                                tier (for example HDDs) for remaining OSDs
                              minLength: 1
                              type: string
                          required:
                          - primaryDeviceClass
                          - secondaryDeviceClass
                          type: object
                        replicasPerFailureDomain:
                          description: ReplicasPerFailureDomain the number of replica
                            in the specified failure domain
                          minimum: 1
                          type: integer
                        requireSafeReplicaSize:
                          description: RequireSafeReplicaSize if false allows you
                            to set replica 1
                          type: boolean
                        size:
                          description: Size - Number of copies per object in a replicated
                            storage pool, including the object itself (required for
                            replicated pool type)
                          minimum: 0
                          type: integer
                        subFailureDomain:
                          description: SubFailureDomain the name of the sub-failure
                            domain
                          type: string
                        targetSizeRatio:
                          description: TargetSizeRatio gives a hint (%) to Ceph in
                            terms of expected consumption of the total cluster capacity
                          minimum: 0
                          type: number
                      required:
                      - size
                      type: object
                    statusCheck:
                      description: The mirroring statusCheck
                      properties:
                        mirror:
                          description: HealthCheckSpec represents the health check
                            of an object store bucket
                          nullable: true
                          properties:
                            disabled:
                              type: boolean
                            interval:
                              description: Interval is the internal in second or minute
                                for the health check to run like 60s for 60 seconds
                              type: string
                            timeout:
                              type: string
                          type: object
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  type: object
                preservePoolsOnDelete:
                  description: Preserve pools on object store deletion
                  type: boolean
                protocols:
                  description: The protocol specification
                  properties:
                    enableAPIs:
                      description: |-
                        Represents RGW 'rgw_enable_apis' config option. See: https://docs.ceph.com/en/reef/radosgw/config-ref/#confval-rgw_enable_apis
                        If no value provided then all APIs will be enabled: s3, s3website, swift, swift_auth, admin, sts, iam, notifications
                        If enabled APIs are set, all remaining APIs will be disabled.
                        This option overrides S3.Enabled value.
                      items:
                        enum:
                        - s3
                        - s3website
                        - swift
                        - swift_auth
                        - admin
                        - sts
                        - iam
                        - notifications
                        type: string
                      nullable: true
                      type: array
                    s3:
                      description: The spec for S3
                      nullable: true
                      properties:
                        authUseKeystone:
                          description: Whether to use Keystone for authentication.
                            This option maps directly to the rgw_s3_auth_use_keystone
                            option. Enabling it allows generating S3 credentials via
                            an OpenStack API call, see the docs. If not given, the
                            defaults of the corresponding RGW option apply.
                          nullable: true
                          type: boolean
                        enabled:
                          description: |-
                            Deprecated: use protocol.enableAPIs instead.
                            Whether to enable S3. This defaults to true (even if protocols.s3 is not present in the CRD). This maintains backwards compatibility – by default S3 is enabled.
                          nullable: true
                          type: boolean
                      type: object
                    swift:
                      description: The spec for Swift
                      nullable: true
                      properties:
                        accountInUrl:
                          description: Whether or not the Swift account name should
                            be included in the Swift API URL. If set to false (the
                            default), then the Swift API will listen on a URL formed
                            like http://host:port/<rgw_swift_url_prefix>/v1. If set
                            to true, the Swift API URL will be http://host:port/<rgw_swift_url_prefix>/v1/AUTH_<account_name>.
                            You must set this option to true (and update the Keystone
                            service catalog) if you want radosgw to support publicly-readable
                            containers and temporary URLs.
                          nullable: true
                          type: boolean
                        urlPrefix:
                          description: The URL prefix for the Swift API, to distinguish
                            it from the S3 API endpoint. The default is swift, which
                            makes the Swift API available at the URL http://host:port/swift/v1
                            (or http://host:port/swift/v1/AUTH_%(tenant_id)s if rgw
                            swift account in url is enabled).
                          nullable: true
                          type: string
                        versioningEnabled:
                          description: Enables the Object Versioning of OpenStack
                            Object Storage API. This allows clients to put the X-Versions-Location
                            attribute on containers that should be versioned.
                          nullable: true
                          type: boolean
                      type: object
                  type: object
                security:
                  description: Security represents security settings
                  nullable: true
                  properties:
                    keyRotation:
                      description: KeyRotation defines options for Key Rotation.
                      nullable: true
                      properties:
                        enabled:
                          default: false
                          description: Enabled represents whether the key rotation
                            is enabled.
                          type: boolean
                        schedule:
                          description: Schedule represents the cron schedule for key
                            rotation.
                          type: string
                      type: object
                    kms:
                      description: KeyManagementService is the main Key Management
                        option
                      nullable: true
                      properties:
                        connectionDetails:
                          additionalProperties:
                            type: string
                          description: ConnectionDetails contains the KMS connection
                            details (address, port etc)
                          nullable: true
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        tokenSecretName:
                          description: TokenSecretName is the kubernetes secret containing
                            the KMS token
                          type: string
                      type: object
                    s3:
                      description: The settings for supporting AWS-SSE:S3 with RGW
                      nullable: true
                      properties:
                        connectionDetails:
                          additionalProperties:
                            type: string
                          description: ConnectionDetails contains the KMS connection
                            details (address, port etc)
                          nullable: true
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        tokenSecretName:
                          description: TokenSecretName is the kubernetes secret containing
                            the KMS token
                          type: string
                      type: object
                  type: object
                sharedPools:
                  description: The pool information when configuring RADOS namespaces
                    in existing pools.
                  nullable: true
                  properties:
                    dataPoolName:
                      description: The data pool used for creating RADOS namespaces
                        in the object store
                      type: string
                      x-kubernetes-validations:
                      - message: object store shared data pool is immutable
                        rule: self == oldSelf
                    metadataPoolName:
                      description: The metadata pool used for creating RADOS namespaces
                        in the object store
                      type: string
                      x-kubernetes-validations:
                      - message: object store shared metadata pool is immutable
                        rule: self == oldSelf
                    poolPlacements:
                      description: |-
                        PoolPlacements control which Pools are associated with a particular RGW bucket.
                        Once PoolPlacements are defined, RGW client will be able to associate pool
                        with ObjectStore bucket by providing "<LocationConstraint>" during s3 bucket creation
                        or "X-Storage-Policy" header during swift container creation.
                        See: https://docs.ceph.com/en/latest/radosgw/placement/#placement-targets
                        PoolPlacement with name: "default" will be used as a default pool if no option
                        is provided during bucket creation.
                        If default placement is not provided, spec.sharedPools.dataPoolName and spec.sharedPools.MetadataPoolName will be used as default pools.
                        If spec.sharedPools are also empty, then RGW pools (spec.dataPool and spec.metadataPool) will be used as defaults.
                      items:
                        properties:
                          dataNonECPoolName:
                            description: |-
                              The data pool used to store ObjectStore data that cannot use erasure coding (ex: multi-part uploads).
                              If dataPoolName is not erasure coded, then there is no need for dataNonECPoolName.
                            type: string
                          dataPoolName:
                            description: The data pool used to store ObjectStore objects
                              data.
                            minLength: 1
                            type: string
                          default:
                            description: |-
                              Sets given placement as default. Only one placement in the list can be marked as default.
                              Default is false.
                            type: boolean
                          metadataPoolName:
                            description: The metadata pool used to store ObjectStore
                              bucket index.
                            minLength: 1
                            type: string
                          name:
                            description: Pool placement name. Name can be arbitrary.
                              Placement with name "default" will be used as default.
                            minLength: 1
                            pattern: ^[a-zA-Z0-9._/-]+$
                            type: string
                          storageClasses:
                            description: |-
                              StorageClasses can be selected by user to override dataPoolName during object creation.
                              Each placement has default STANDARD StorageClass pointing to dataPoolName.
                              This list allows defining additional StorageClasses on top of default STANDARD storage class.
                            items:
                              properties:
                                dataPoolName:
                                  description: DataPoolName is the data pool used
                                    to store ObjectStore objects data.
                                  minLength: 1
                                  type: string
                                name:
                                  description: |-
                                    Name is the StorageClass name. Ceph allows arbitrary name for StorageClasses,
                                    however most clients/libs insist on AWS names so it is recommended to use
                                    one of the valid x-amz-storage-class values for better compatibility:
                                    REDUCED_REDUNDANCY | STANDARD_IA | ONEZONE_IA | INTELLIGENT_TIERING | GLACIER | DEEP_ARCHIVE | OUTPOSTS | GLACIER_IR | SNOW | EXPRESS_ONEZONE
                                    See AWS docs: https://aws.amazon.com/de/s3/storage-classes/
                                  minLength: 1
                                  pattern: ^[a-zA-Z0-9._/-]+$
                                  type: string
                              required:
                              - dataPoolName
                              - name
                              type: object
                            type: array
                        required:
                        - dataPoolName
                        - metadataPoolName
                        - name
                        type: object
                      type: array
                    preserveRadosNamespaceDataOnDelete:
                      description: Whether the RADOS namespaces should be preserved
                        on deletion of the object store
                      type: boolean
                  type: object
                zone:
                  description: The multisite info
                  nullable: true
                  properties:
                    name:
                      description: CephObjectStoreZone name this CephObjectStore is
                        part of
                      type: string
                  required:
                  - name
                  type: object
              type: object
            status:
              description: ObjectStoreStatus represents the status of a Ceph Object
                Store resource
              properties:
                conditions:
                  items:
                    description: Condition represents a status condition on any Rook-Ceph
                      Custom Resource.
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        format: date-time
                        type: string
                      message:
                        type: string
                      reason:
                        description: ConditionReason is a reason for a condition
                        type: string
                      status:
                        type: string
                      type:
                        description: ConditionType represent a resource's status
                        type: string
                    type: object
                  type: array
                endpoints:
                  properties:
                    insecure:
                      items:
                        type: string
                      nullable: true
                      type: array
                    secure:
                      items:
                        type: string
                      nullable: true
                      type: array
                  type: object
                info:
                  additionalProperties:
                    type: string
                  nullable: true
                  type: object
                message:
                  type: string
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  description: ConditionType represent a resource's status
                  type: string
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephObjectStore
      listKind: CephObjectStoreList
      plural: cephobjectstores
      shortNames:
      - cephos
      singular: cephobjectstore
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephnfses.ceph.rook.io
    resourceVersion: "7614"
    uid: 4568ee9f-721f-45ad-bfca-c11030b6e900
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephNFS
      listKind: CephNFSList
      plural: cephnfses
      shortNames:
      - nfs
      singular: cephnfs
    scope: Namespaced
    versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: CephNFS represents a Ceph NFS
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: NFSGaneshaSpec represents the spec of an nfs ganesha server
              properties:
                rados:
                  description: RADOS is the Ganesha RADOS specification
                  nullable: true
                  properties:
                    namespace:
                      description: |-
                        The namespace inside the Ceph pool (set by 'pool') where shared NFS-Ganesha config is stored.
                        This setting is deprecated as it is internally set to the name of the CephNFS.
                      type: string
                    pool:
                      description: |-
                        The Ceph pool used store the shared configuration for NFS-Ganesha daemons.
                        This setting is deprecated, as it is internally required to be ".nfs".
                      type: string
                  type: object
                security:
                  description: Security allows specifying security configurations
                    for the NFS cluster
                  nullable: true
                  properties:
                    kerberos:
                      description: Kerberos configures NFS-Ganesha to secure NFS client
                        connections with Kerberos.
                      nullable: true
                      properties:
                        configFiles:
                          description: |-
                            ConfigFiles defines where the Kerberos configuration should be sourced from. Config files
                            will be placed into the `/etc/krb5.conf.rook/` directory.

                            If this is left empty, Rook will not add any files. This allows you to manage the files
                            yourself however you wish. For example, you may build them into your custom Ceph container
                            image or use the Vault agent injector to securely add the files via annotations on the
                            CephNFS spec (passed to the NFS server pods).

                            Rook configures Kerberos to log to stderr. We suggest removing logging sections from config
                            files to avoid consuming unnecessary disk space from logging to files.
                          properties:
                            volumeSource:
                              properties:
                                configMap:
                                  properties:
                                    defaultMode:
                                      format: int32
                                      type: integer
                                    items:
                                      items:
                                        properties:
                                          key:
                                            type: string
                                          mode:
                                            format: int32
                                            type: integer
                                          path:
                                            type: string
                                        required:
                                        - key
                                        - path
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    name:
                                      default: ""
                                      type: string
                                    optional:
                                      type: boolean
                                  type: object
                                  x-kubernetes-map-type: atomic
                                emptyDir:
                                  properties:
                                    medium:
                                      type: string
                                    sizeLimit:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                  type: object
                                hostPath:
                                  properties:
                                    path:
                                      type: string
                                    type:
                                      type: string
                                  required:
                                  - path
                                  type: object
                                persistentVolumeClaim:
                                  properties:
                                    claimName:
                                      type: string
                                    readOnly:
                                      type: boolean
                                  required:
                                  - claimName
                                  type: object
                                projected:
                                  properties:
                                    defaultMode:
                                      format: int32
                                      type: integer
                                    sources:
                                      items:
                                        properties:
                                          clusterTrustBundle:
                                            properties:
                                              labelSelector:
                                                properties:
                                                  matchExpressions:
                                                    items:
                                                      properties:
                                                        key:
                                                          type: string
                                                        operator:
                                                          type: string
                                                        values:
                                                          items:
                                                            type: string
                                                          type: array
                                                          x-kubernetes-list-type: atomic
                                                      required:
                                                      - key
                                                      - operator
                                                      type: object
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                  matchLabels:
                                                    additionalProperties:
                                                      type: string
                                                    type: object
                                                type: object
                                                x-kubernetes-map-type: atomic
                                              name:
                                                type: string
                                              optional:
                                                type: boolean
                                              path:
                                                type: string
                                              signerName:
                                                type: string
                                            required:
                                            - path
                                            type: object
                                          configMap:
                                            properties:
                                              items:
                                                items:
                                                  properties:
                                                    key:
                                                      type: string
                                                    mode:
                                                      format: int32
                                                      type: integer
                                                    path:
                                                      type: string
                                                  required:
                                                  - key
                                                  - path
                                                  type: object
                                                type: array
                                                x-kubernetes-list-type: atomic
                                              name:
                                                default: ""
                                                type: string
                                              optional:
                                                type: boolean
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          downwardAPI:
                                            properties:
                                              items:
                                                items:
                                                  properties:
                                                    fieldRef:
                                                      properties:
                                                        apiVersion:
                                                          type: string
                                                        fieldPath:
                                                          type: string
                                                      required:
                                                      - fieldPath
                                                      type: object
                                                      x-kubernetes-map-type: atomic
                                                    mode:
                                                      format: int32
                                                      type: integer
                                                    path:
                                                      type: string
                                                    resourceFieldRef:
                                                      properties:
                                                        containerName:
                                                          type: string
                                                        divisor:
                                                          anyOf:
                                                          - type: integer
                                                          - type: string
                                                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                          x-kubernetes-int-or-string: true
                                                        resource:
                                                          type: string
                                                      required:
                                                      - resource
                                                      type: object
                                                      x-kubernetes-map-type: atomic
                                                  required:
                                                  - path
                                                  type: object
                                                type: array
                                                x-kubernetes-list-type: atomic
                                            type: object
                                          secret:
                                            properties:
                                              items:
                                                items:
                                                  properties:
                                                    key:
                                                      type: string
                                                    mode:
                                                      format: int32
                                                      type: integer
                                                    path:
                                                      type: string
                                                  required:
                                                  - key
                                                  - path
                                                  type: object
                                                type: array
                                                x-kubernetes-list-type: atomic
                                              name:
                                                default: ""
                                                type: string
                                              optional:
                                                type: boolean
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          serviceAccountToken:
                                            properties:
                                              audience:
                                                type: string
                                              expirationSeconds:
                                                format: int64
                                                type: integer
                                              path:
                                                type: string
                                            required:
                                            - path
                                            type: object
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                  type: object
                                secret:
                                  properties:
                                    defaultMode:
                                      format: int32
                                      type: integer
                                    items:
                                      items:
                                        properties:
                                          key:
                                            type: string
                                          mode:
                                            format: int32
                                            type: integer
                                          path:
                                            type: string
                                        required:
                                        - key
                                        - path
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    optional:
                                      type: boolean
                                    secretName:
                                      type: string
                                  type: object
                              type: object
                          type: object
                        domainName:
                          description: DomainName should be set to the Kerberos Realm.
                          type: string
                        keytabFile:
                          description: |-
                            KeytabFile defines where the Kerberos keytab should be sourced from. The keytab file will be
                            placed into `/etc/krb5.keytab`. If this is left empty, Rook will not add the file.
                            This allows you to manage the `krb5.keytab` file yourself however you wish. For example, you
                            may build it into your custom Ceph container image or use the Vault agent injector to
                            securely add the file via annotations on the CephNFS spec (passed to the NFS server pods).
                          properties:
                            volumeSource:
                              properties:
                                configMap:
                                  properties:
                                    defaultMode:
                                      format: int32
                                      type: integer
                                    items:
                                      items:
                                        properties:
                                          key:
                                            type: string
                                          mode:
                                            format: int32
                                            type: integer
                                          path:
                                            type: string
                                        required:
                                        - key
                                        - path
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    name:
                                      default: ""
                                      type: string
                                    optional:
                                      type: boolean
                                  type: object
                                  x-kubernetes-map-type: atomic
                                emptyDir:
                                  properties:
                                    medium:
                                      type: string
                                    sizeLimit:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                  type: object
                                hostPath:
                                  properties:
                                    path:
                                      type: string
                                    type:
                                      type: string
                                  required:
                                  - path
                                  type: object
                                persistentVolumeClaim:
                                  properties:
                                    claimName:
                                      type: string
                                    readOnly:
                                      type: boolean
                                  required:
                                  - claimName
                                  type: object
                                projected:
                                  properties:
                                    defaultMode:
                                      format: int32
                                      type: integer
                                    sources:
                                      items:
                                        properties:
                                          clusterTrustBundle:
                                            properties:
                                              labelSelector:
                                                properties:
                                                  matchExpressions:
                                                    items:
                                                      properties:
                                                        key:
                                                          type: string
                                                        operator:
                                                          type: string
                                                        values:
                                                          items:
                                                            type: string
                                                          type: array
                                                          x-kubernetes-list-type: atomic
                                                      required:
                                                      - key
                                                      - operator
                                                      type: object
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                  matchLabels:
                                                    additionalProperties:
                                                      type: string
                                                    type: object
                                                type: object
                                                x-kubernetes-map-type: atomic
                                              name:
                                                type: string
                                              optional:
                                                type: boolean
                                              path:
                                                type: string
                                              signerName:
                                                type: string
                                            required:
                                            - path
                                            type: object
                                          configMap:
                                            properties:
                                              items:
                                                items:
                                                  properties:
                                                    key:
                                                      type: string
                                                    mode:
                                                      format: int32
                                                      type: integer
                                                    path:
                                                      type: string
                                                  required:
                                                  - key
                                                  - path
                                                  type: object
                                                type: array
                                                x-kubernetes-list-type: atomic
                                              name:
                                                default: ""
                                                type: string
                                              optional:
                                                type: boolean
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          downwardAPI:
                                            properties:
                                              items:
                                                items:
                                                  properties:
                                                    fieldRef:
                                                      properties:
                                                        apiVersion:
                                                          type: string
                                                        fieldPath:
                                                          type: string
                                                      required:
                                                      - fieldPath
                                                      type: object
                                                      x-kubernetes-map-type: atomic
                                                    mode:
                                                      format: int32
                                                      type: integer
                                                    path:
                                                      type: string
                                                    resourceFieldRef:
                                                      properties:
                                                        containerName:
                                                          type: string
                                                        divisor:
                                                          anyOf:
                                                          - type: integer
                                                          - type: string
                                                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                          x-kubernetes-int-or-string: true
                                                        resource:
                                                          type: string
                                                      required:
                                                      - resource
                                                      type: object
                                                      x-kubernetes-map-type: atomic
                                                  required:
                                                  - path
                                                  type: object
                                                type: array
                                                x-kubernetes-list-type: atomic
                                            type: object
                                          secret:
                                            properties:
                                              items:
                                                items:
                                                  properties:
                                                    key:
                                                      type: string
                                                    mode:
                                                      format: int32
                                                      type: integer
                                                    path:
                                                      type: string
                                                  required:
                                                  - key
                                                  - path
                                                  type: object
                                                type: array
                                                x-kubernetes-list-type: atomic
                                              name:
                                                default: ""
                                                type: string
                                              optional:
                                                type: boolean
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          serviceAccountToken:
                                            properties:
                                              audience:
                                                type: string
                                              expirationSeconds:
                                                format: int64
                                                type: integer
                                              path:
                                                type: string
                                            required:
                                            - path
                                            type: object
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                  type: object
                                secret:
                                  properties:
                                    defaultMode:
                                      format: int32
                                      type: integer
                                    items:
                                      items:
                                        properties:
                                          key:
                                            type: string
                                          mode:
                                            format: int32
                                            type: integer
                                          path:
                                            type: string
                                        required:
                                        - key
                                        - path
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    optional:
                                      type: boolean
                                    secretName:
                                      type: string
                                  type: object
                              type: object
                          type: object
                        principalName:
                          default: nfs
                          description: |-
                            PrincipalName corresponds directly to NFS-Ganesha's NFS_KRB5:PrincipalName config. In
                            practice, this is the service prefix of the principal name. The default is "nfs".
                            This value is combined with (a) the namespace and name of the CephNFS (with a hyphen between)
                            and (b) the Realm configured in the user-provided krb5.conf to determine the full principal
                            name: <principalName>/<namespace>-<name>@<realm>. e.g., nfs/rook-ceph-my-nfs@example.net.
                            See https://github.com/nfs-ganesha/nfs-ganesha/wiki/RPCSEC_GSS for more detail.
                          type: string
                      type: object
                    sssd:
                      description: |-
                        SSSD enables integration with System Security Services Daemon (SSSD). SSSD can be used to
                        provide user ID mapping from a number of sources. See https://sssd.io for more information
                        about the SSSD project.
                      nullable: true
                      properties:
                        sidecar:
                          description: Sidecar tells Rook to run SSSD in a sidecar
                            alongside the NFS-Ganesha server in each NFS pod.
                          properties:
                            additionalFiles:
                              description: |-
                                AdditionalFiles defines any number of additional files that should be mounted into the SSSD
                                sidecar with a directory root of `/etc/sssd/rook-additional/`.
                                These files may be referenced by the sssd.conf config file.
                              items:
                                description: |-
                                  AdditionalVolumeMount represents the source from where additional files in pod containers
                                  should come from and what subdirectory they are made available in.
                                properties:
                                  subPath:
                                    description: |-
                                      SubPath defines the sub-path (subdirectory) of the directory root where the volumeSource will
                                      be mounted. All files/keys in the volume source's volume will be mounted to the subdirectory.
                                      This is not the same as the Kubernetes `subPath` volume mount option.
                                      Each subPath definition must be unique and must not contain ':'.
                                    minLength: 1
                                    pattern: ^[^:]+$
                                    type: string
                                  volumeSource:
                                    properties:
                                      configMap:
                                        properties:
                                          defaultMode:
                                            format: int32
                                            type: integer
                                          items:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                mode:
                                                  format: int32
                                                  type: integer
                                                path:
                                                  type: string
                                              required:
                                              - key
                                              - path
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          name:
                                            default: ""
                                            type: string
                                          optional:
                                            type: boolean
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      emptyDir:
                                        properties:
                                          medium:
                                            type: string
                                          sizeLimit:
                                            anyOf:
                                            - type: integer
                                            - type: string
                                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                            x-kubernetes-int-or-string: true
                                        type: object
                                      hostPath:
                                        properties:
                                          path:
                                            type: string
                                          type:
                                            type: string
                                        required:
                                        - path
                                        type: object
                                      persistentVolumeClaim:
                                        properties:
                                          claimName:
                                            type: string
                                          readOnly:
                                            type: boolean
                                        required:
                                        - claimName
                                        type: object
                                      projected:
                                        properties:
                                          defaultMode:
                                            format: int32
                                            type: integer
                                          sources:
                                            items:
                                              properties:
                                                clusterTrustBundle:
                                                  properties:
                                                    labelSelector:
                                                      properties:
                                                        matchExpressions:
                                                          items:
                                                            properties:
                                                              key:
                                                                type: string
                                                              operator:
                                                                type: string
                                                              values:
                                                                items:
                                                                  type: string
                                                                type: array
                                                                x-kubernetes-list-type: atomic
                                                            required:
                                                            - key
                                                            - operator
                                                            type: object
                                                          type: array
                                                          x-kubernetes-list-type: atomic
                                                        matchLabels:
                                                          additionalProperties:
                                                            type: string
                                                          type: object
                                                      type: object
                                                      x-kubernetes-map-type: atomic
                                                    name:
                                                      type: string
                                                    optional:
                                                      type: boolean
                                                    path:
                                                      type: string
                                                    signerName:
                                                      type: string
                                                  required:
                                                  - path
                                                  type: object
                                                configMap:
                                                  properties:
                                                    items:
                                                      items:
                                                        properties:
                                                          key:
                                                            type: string
                                                          mode:
                                                            format: int32
                                                            type: integer
                                                          path:
                                                            type: string
                                                        required:
                                                        - key
                                                        - path
                                                        type: object
                                                      type: array
                                                      x-kubernetes-list-type: atomic
                                                    name:
                                                      default: ""
                                                      type: string
                                                    optional:
                                                      type: boolean
                                                  type: object
                                                  x-kubernetes-map-type: atomic
                                                downwardAPI:
                                                  properties:
                                                    items:
                                                      items:
                                                        properties:
                                                          fieldRef:
                                                            properties:
                                                              apiVersion:
                                                                type: string
                                                              fieldPath:
                                                                type: string
                                                            required:
                                                            - fieldPath
                                                            type: object
                                                            x-kubernetes-map-type: atomic
                                                          mode:
                                                            format: int32
                                                            type: integer
                                                          path:
                                                            type: string
                                                          resourceFieldRef:
                                                            properties:
                                                              containerName:
                                                                type: string
                                                              divisor:
                                                                anyOf:
                                                                - type: integer
                                                                - type: string
                                                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                                x-kubernetes-int-or-string: true
                                                              resource:
                                                                type: string
                                                            required:
                                                            - resource
                                                            type: object
                                                            x-kubernetes-map-type: atomic
                                                        required:
                                                        - path
                                                        type: object
                                                      type: array
                                                      x-kubernetes-list-type: atomic
                                                  type: object
                                                secret:
                                                  properties:
                                                    items:
                                                      items:
                                                        properties:
                                                          key:
                                                            type: string
                                                          mode:
                                                            format: int32
                                                            type: integer
                                                          path:
                                                            type: string
                                                        required:
                                                        - key
                                                        - path
                                                        type: object
                                                      type: array
                                                      x-kubernetes-list-type: atomic
                                                    name:
                                                      default: ""
                                                      type: string
                                                    optional:
                                                      type: boolean
                                                  type: object
                                                  x-kubernetes-map-type: atomic
                                                serviceAccountToken:
                                                  properties:
                                                    audience:
                                                      type: string
                                                    expirationSeconds:
                                                      format: int64
                                                      type: integer
                                                    path:
                                                      type: string
                                                  required:
                                                  - path
                                                  type: object
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                        type: object
                                      secret:
                                        properties:
                                          defaultMode:
                                            format: int32
                                            type: integer
                                          items:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                mode:
                                                  format: int32
                                                  type: integer
                                                path:
                                                  type: string
                                              required:
                                              - key
                                              - path
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          optional:
                                            type: boolean
                                          secretName:
                                            type: string
                                        type: object
                                    type: object
                                required:
                                - subPath
                                - volumeSource
                                type: object
                              type: array
                            debugLevel:
                              description: |-
                                DebugLevel sets the debug level for SSSD. If unset or set to 0, Rook does nothing. Otherwise,
                                this may be a value between 1 and 10. See SSSD docs for more info:
                                https://sssd.io/troubleshooting/basics.html#sssd-debug-logs
                              maximum: 10
                              minimum: 0
                              type: integer
                            image:
                              description: Image defines the container image that
                                should be used for the SSSD sidecar.
                              minLength: 1
                              type: string
                            resources:
                              description: Resources allow specifying resource requests/limits
                                on the SSSD sidecar container.
                              properties:
                                claims:
                                  description: |-
                                    Claims lists the names of resources, defined in spec.resourceClaims,
                                    that are used by this container.

                                    This is an alpha field and requires enabling the
                                    DynamicResourceAllocation feature gate.

                                    This field is immutable. It can only be set for containers.
                                  items:
                                    description: ResourceClaim references one entry
                                      in PodSpec.ResourceClaims.
                                    properties:
                                      name:
                                        description: |-
                                          Name must match the name of one entry in pod.spec.resourceClaims of
                                          the Pod where this field is used. It makes that resource available
                                          inside a container.
                                        type: string
                                      request:
                                        description: |-
                                          Request is the name chosen for a request in the referenced claim.
                                          If empty, everything from the claim is made available, otherwise
                                          only the result of this request.
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  type: array
                                  x-kubernetes-list-map-keys:
                                  - name
                                  x-kubernetes-list-type: map
                                limits:
                                  additionalProperties:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                  description: |-
                                    Limits describes the maximum amount of compute resources allowed.
                                    More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                  type: object
                                requests:
                                  additionalProperties:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                  description: |-
                                    Requests describes the minimum amount of compute resources required.
                                    If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                    otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                    More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                  type: object
                              type: object
                            sssdConfigFile:
                              description: |-
                                SSSDConfigFile defines where the SSSD configuration should be sourced from. The config file
                                will be placed into `/etc/sssd/sssd.conf`. If this is left empty, Rook will not add the file.
                                This allows you to manage the `sssd.conf` file yourself however you wish. For example, you
                                may build it into your custom Ceph container image or use the Vault agent injector to
                                securely add the file via annotations on the CephNFS spec (passed to the NFS server pods).
                              properties:
                                volumeSource:
                                  properties:
                                    configMap:
                                      properties:
                                        defaultMode:
                                          format: int32
                                          type: integer
                                        items:
                                          items:
                                            properties:
                                              key:
                                                type: string
                                              mode:
                                                format: int32
                                                type: integer
                                              path:
                                                type: string
                                            required:
                                            - key
                                            - path
                                            type: object
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        name:
                                          default: ""
                                          type: string
                                        optional:
                                          type: boolean
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    emptyDir:
                                      properties:
                                        medium:
                                          type: string
                                        sizeLimit:
                                          anyOf:
                                          - type: integer
                                          - type: string
                                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                          x-kubernetes-int-or-string: true
                                      type: object
                                    hostPath:
                                      properties:
                                        path:
                                          type: string
                                        type:
                                          type: string
                                      required:
                                      - path
                                      type: object
                                    persistentVolumeClaim:
                                      properties:
                                        claimName:
                                          type: string
                                        readOnly:
                                          type: boolean
                                      required:
                                      - claimName
                                      type: object
                                    projected:
                                      properties:
                                        defaultMode:
                                          format: int32
                                          type: integer
                                        sources:
                                          items:
                                            properties:
                                              clusterTrustBundle:
                                                properties:
                                                  labelSelector:
                                                    properties:
                                                      matchExpressions:
                                                        items:
                                                          properties:
                                                            key:
                                                              type: string
                                                            operator:
                                                              type: string
                                                            values:
                                                              items:
                                                                type: string
                                                              type: array
                                                              x-kubernetes-list-type: atomic
                                                          required:
                                                          - key
                                                          - operator
                                                          type: object
                                                        type: array
                                                        x-kubernetes-list-type: atomic
                                                      matchLabels:
                                                        additionalProperties:
                                                          type: string
                                                        type: object
                                                    type: object
                                                    x-kubernetes-map-type: atomic
                                                  name:
                                                    type: string
                                                  optional:
                                                    type: boolean
                                                  path:
                                                    type: string
                                                  signerName:
                                                    type: string
                                                required:
                                                - path
                                                type: object
                                              configMap:
                                                properties:
                                                  items:
                                                    items:
                                                      properties:
                                                        key:
                                                          type: string
                                                        mode:
                                                          format: int32
                                                          type: integer
                                                        path:
                                                          type: string
                                                      required:
                                                      - key
                                                      - path
                                                      type: object
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                  name:
                                                    default: ""
                                                    type: string
                                                  optional:
                                                    type: boolean
                                                type: object
                                                x-kubernetes-map-type: atomic
                                              downwardAPI:
                                                properties:
                                                  items:
                                                    items:
                                                      properties:
                                                        fieldRef:
                                                          properties:
                                                            apiVersion:
                                                              type: string
                                                            fieldPath:
                                                              type: string
                                                          required:
                                                          - fieldPath
                                                          type: object
                                                          x-kubernetes-map-type: atomic
                                                        mode:
                                                          format: int32
                                                          type: integer
                                                        path:
                                                          type: string
                                                        resourceFieldRef:
                                                          properties:
                                                            containerName:
                                                              type: string
                                                            divisor:
                                                              anyOf:
                                                              - type: integer
                                                              - type: string
                                                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                              x-kubernetes-int-or-string: true
                                                            resource:
                                                              type: string
                                                          required:
                                                          - resource
                                                          type: object
                                                          x-kubernetes-map-type: atomic
                                                      required:
                                                      - path
                                                      type: object
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                type: object
                                              secret:
                                                properties:
                                                  items:
                                                    items:
                                                      properties:
                                                        key:
                                                          type: string
                                                        mode:
                                                          format: int32
                                                          type: integer
                                                        path:
                                                          type: string
                                                      required:
                                                      - key
                                                      - path
                                                      type: object
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                  name:
                                                    default: ""
                                                    type: string
                                                  optional:
                                                    type: boolean
                                                type: object
                                                x-kubernetes-map-type: atomic
                                              serviceAccountToken:
                                                properties:
                                                  audience:
                                                    type: string
                                                  expirationSeconds:
                                                    format: int64
                                                    type: integer
                                                  path:
                                                    type: string
                                                required:
                                                - path
                                                type: object
                                            type: object
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      type: object
                                    secret:
                                      properties:
                                        defaultMode:
                                          format: int32
                                          type: integer
                                        items:
                                          items:
                                            properties:
                                              key:
                                                type: string
                                              mode:
                                                format: int32
                                                type: integer
                                              path:
                                                type: string
                                            required:
                                            - key
                                            - path
                                            type: object
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        optional:
                                          type: boolean
                                        secretName:
                                          type: string
                                      type: object
                                  type: object
                              type: object
                          required:
                          - image
                          type: object
                      type: object
                  type: object
                server:
                  description: Server is the Ganesha Server specification
                  properties:
                    active:
                      description: The number of active Ganesha servers
                      type: integer
                    annotations:
                      additionalProperties:
                        type: string
                      description: The annotations-related configuration to add/set
                        on each Pod related object.
                      nullable: true
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    hostNetwork:
                      description: Whether host networking is enabled for the Ganesha
                        server. If not set, the network settings from the cluster
                        CR will be applied.
                      nullable: true
                      type: boolean
                    labels:
                      additionalProperties:
                        type: string
                      description: The labels-related configuration to add/set on
                        each Pod related object.
                      nullable: true
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    livenessProbe:
                      description: |-
                        A liveness-probe to verify that Ganesha server has valid run-time state.
                        If LivenessProbe.Disabled is false and LivenessProbe.Probe is nil uses default probe.
                      properties:
                        disabled:
                          description: Disabled determines whether probe is disable
                            or not
                          type: boolean
                        probe:
                          description: |-
                            Probe describes a health check to be performed against a container to determine whether it is
                            alive or ready to receive traffic.
                          properties:
                            exec:
                              description: Exec specifies a command to execute in
                                the container.
                              properties:
                                command:
                                  description: |-
                                    Command is the command line to execute inside the container, the working directory for the
                                    command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
                                    not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
                                    a shell, you need to explicitly call out to that shell.
                                    Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                              type: object
                            failureThreshold:
                              description: |-
                                Minimum consecutive failures for the probe to be considered failed after having succeeded.
                                Defaults to 3. Minimum value is 1.
                              format: int32
                              type: integer
                            grpc:
                              description: GRPC specifies a GRPC HealthCheckRequest.
                              properties:
                                port:
                                  description: Port number of the gRPC service. Number
                                    must be in the range 1 to 65535.
                                  format: int32
                                  type: integer
                                service:
                                  default: ""
                                  description: |-
                                    Service is the name of the service to place in the gRPC HealthCheckRequest
                                    (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                                    If this is not specified, the default behavior is defined by gRPC.
                                  type: string
                              required:
                              - port
                              type: object
                            httpGet:
                              description: HTTPGet specifies an HTTP GET request to
                                perform.
                              properties:
                                host:
                                  description: |-
                                    Host name to connect to, defaults to the pod IP. You probably want to set
                                    "Host" in httpHeaders instead.
                                  type: string
                                httpHeaders:
                                  description: Custom headers to set in the request.
                                    HTTP allows repeated headers.
                                  items:
                                    description: HTTPHeader describes a custom header
                                      to be used in HTTP probes
                                    properties:
                                      name:
                                        description: |-
                                          The header field name.
                                          This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                        type: string
                                      value:
                                        description: The header field value
                                        type: string
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                                  x-kubernetes-list-type: atomic
                                path:
                                  description: Path to access on the HTTP server.
                                  type: string
                                port:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: |-
                                    Name or number of the port to access on the container.
                                    Number must be in the range 1 to 65535.
                                    Name must be an IANA_SVC_NAME.
                                  x-kubernetes-int-or-string: true
                                scheme:
                                  description: |-
                                    Scheme to use for connecting to the host.
                                    Defaults to HTTP.
                                  type: string
                              required:
                              - port
                              type: object
                            initialDelaySeconds:
                              description: |-
                                Number of seconds after the container has started before liveness probes are initiated.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                              format: int32
                              type: integer
                            periodSeconds:
                              description: |-
                                How often (in seconds) to perform the probe.
                                Default to 10 seconds. Minimum value is 1.
                              format: int32
                              type: integer
                            successThreshold:
                              description: |-
                                Minimum consecutive successes for the probe to be considered successful after having failed.
                                Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                              format: int32
                              type: integer
                            tcpSocket:
                              description: TCPSocket specifies a connection to a TCP
                                port.
                              properties:
                                host:
                                  description: 'Optional: Host name to connect to,
                                    defaults to the pod IP.'
                                  type: string
                                port:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: |-
                                    Number or name of the port to access on the container.
                                    Number must be in the range 1 to 65535.
                                    Name must be an IANA_SVC_NAME.
                                  x-kubernetes-int-or-string: true
                              required:
                              - port
                              type: object
                            terminationGracePeriodSeconds:
                              format: int64
                              type: integer
                            timeoutSeconds:
                              description: |-
                                Number of seconds after which the probe times out.
                                Defaults to 1 second. Minimum value is 1.
                                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                              format: int32
                              type: integer
                          type: object
                      type: object
                    logLevel:
                      description: LogLevel set logging level
                      type: string
                    placement:
                      nullable: true
                      properties:
                        nodeAffinity:
                          properties:
                            preferredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  preference:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchFields:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  weight:
                                    format: int32
                                    type: integer
                                required:
                                - preference
                                - weight
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                            requiredDuringSchedulingIgnoredDuringExecution:
                              properties:
                                nodeSelectorTerms:
                                  items:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchFields:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  type: array
                                  x-kubernetes-list-type: atomic
                              required:
                              - nodeSelectorTerms
                              type: object
                              x-kubernetes-map-type: atomic
                          type: object
                        podAffinity:
                          properties:
                            preferredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  podAffinityTerm:
                                    properties:
                                      labelSelector:
                                        properties:
                                          matchExpressions:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                operator:
                                                  type: string
                                                values:
                                                  items:
                                                    type: string
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      matchLabelKeys:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      mismatchLabelKeys:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      namespaceSelector:
                                        properties:
                                          matchExpressions:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                operator:
                                                  type: string
                                                values:
                                                  items:
                                                    type: string
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaces:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      topologyKey:
                                        type: string
                                    required:
                                    - topologyKey
                                    type: object
                                  weight:
                                    format: int32
                                    type: integer
                                required:
                                - podAffinityTerm
                                - weight
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                            requiredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  labelSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  matchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  mismatchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  namespaceSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  namespaces:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  topologyKey:
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                          type: object
                        podAntiAffinity:
                          properties:
                            preferredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  podAffinityTerm:
                                    properties:
                                      labelSelector:
                                        properties:
                                          matchExpressions:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                operator:
                                                  type: string
                                                values:
                                                  items:
                                                    type: string
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      matchLabelKeys:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      mismatchLabelKeys:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      namespaceSelector:
                                        properties:
                                          matchExpressions:
                                            items:
                                              properties:
                                                key:
                                                  type: string
                                                operator:
                                                  type: string
                                                values:
                                                  items:
                                                    type: string
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaces:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      topologyKey:
                                        type: string
                                    required:
                                    - topologyKey
                                    type: object
                                  weight:
                                    format: int32
                                    type: integer
                                required:
                                - podAffinityTerm
                                - weight
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                            requiredDuringSchedulingIgnoredDuringExecution:
                              items:
                                properties:
                                  labelSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  matchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  mismatchLabelKeys:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  namespaceSelector:
                                    properties:
                                      matchExpressions:
                                        items:
                                          properties:
                                            key:
                                              type: string
                                            operator:
                                              type: string
                                            values:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  namespaces:
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  topologyKey:
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                          type: object
                        tolerations:
                          items:
                            properties:
                              effect:
                                type: string
                              key:
                                type: string
                              operator:
                                type: string
                              tolerationSeconds:
                                format: int64
                                type: integer
                              value:
                                type: string
                            type: object
                          type: array
                        topologySpreadConstraints:
                          items:
                            properties:
                              labelSelector:
                                properties:
                                  matchExpressions:
                                    items:
                                      properties:
                                        key:
                                          type: string
                                        operator:
                                          type: string
                                        values:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              matchLabelKeys:
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              maxSkew:
                                format: int32
                                type: integer
                              minDomains:
                                format: int32
                                type: integer
                              nodeAffinityPolicy:
                                type: string
                              nodeTaintsPolicy:
                                type: string
                              topologyKey:
                                type: string
                              whenUnsatisfiable:
                                type: string
                            required:
                            - maxSkew
                            - topologyKey
                            - whenUnsatisfiable
                            type: object
                          type: array
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    priorityClassName:
                      description: PriorityClassName sets the priority class on the
                        pods
                      type: string
                    resources:
                      description: Resources set resource requests and limits
                      nullable: true
                      properties:
                        claims:
                          description: |-
                            Claims lists the names of resources, defined in spec.resourceClaims,
                            that are used by this container.

                            This is an alpha field and requires enabling the
                            DynamicResourceAllocation feature gate.

                            This field is immutable. It can only be set for containers.
                          items:
                            description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                            properties:
                              name:
                                description: |-
                                  Name must match the name of one entry in pod.spec.resourceClaims of
                                  the Pod where this field is used. It makes that resource available
                                  inside a container.
                                type: string
                              request:
                                description: |-
                                  Request is the name chosen for a request in the referenced claim.
                                  If empty, everything from the claim is made available, otherwise
                                  only the result of this request.
                                type: string
                            required:
                            - name
                            type: object
                          type: array
                          x-kubernetes-list-map-keys:
                          - name
                          x-kubernetes-list-type: map
                        limits:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: |-
                            Limits describes the maximum amount of compute resources allowed.
                            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                          type: object
                        requests:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: |-
                            Requests describes the minimum amount of compute resources required.
                            If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                            otherwise to an implementation-defined value. Requests cannot exceed Limits.
                            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                          type: object
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  required:
                  - active
                  type: object
              required:
              - server
              type: object
            status:
              description: Status represents the status of an object
              properties:
                conditions:
                  items:
                    description: Condition represents a status condition on any Rook-Ceph
                      Custom Resource.
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        format: date-time
                        type: string
                      message:
                        type: string
                      reason:
                        description: ConditionReason is a reason for a condition
                        type: string
                      status:
                        type: string
                      type:
                        description: ConditionType represent a resource's status
                        type: string
                    type: object
                  type: array
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  type: string
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephNFS
      listKind: CephNFSList
      plural: cephnfses
      shortNames:
      - nfs
      singular: cephnfs
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.16.1
      helm.sh/resource-policy: keep
      meta.helm.sh/release-name: rook-ceph
      meta.helm.sh/release-namespace: rook-ceph
    creationTimestamp: "2025-07-31T03:05:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: cephclusters.ceph.rook.io
    resourceVersion: "7615"
    uid: 6879f2a5-c8b9-44f0-8dc5-2695df7acd34
  spec:
    conversion:
      strategy: None
    group: ceph.rook.io
    names:
      kind: CephCluster
      listKind: CephClusterList
      plural: cephclusters
      shortNames:
      - ceph
      singular: cephcluster
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - description: Directory used on the K8s nodes
        jsonPath: .spec.dataDirHostPath
        name: DataDirHostPath
        type: string
      - description: Number of MONs
        jsonPath: .spec.mon.count
        name: MonCount
        type: string
      - jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      - jsonPath: .status.phase
        name: Phase
        type: string
      - description: Message
        jsonPath: .status.message
        name: Message
        type: string
      - description: Ceph Health
        jsonPath: .status.ceph.health
        name: Health
        type: string
      - jsonPath: .spec.external.enable
        name: External
        type: boolean
      - description: Ceph FSID
        jsonPath: .status.ceph.fsid
        name: FSID
        type: string
      name: v1
      schema:
        openAPIV3Schema:
          description: CephCluster is a Ceph storage cluster
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: ClusterSpec represents the specification of Ceph Cluster
              properties:
                annotations:
                  additionalProperties:
                    additionalProperties:
                      type: string
                    description: Annotations are annotations
                    type: object
                  description: The annotations-related configuration to add/set on
                    each Pod related object.
                  nullable: true
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                cephConfig:
                  additionalProperties:
                    additionalProperties:
                      type: string
                    type: object
                  description: Ceph Config options
                  nullable: true
                  type: object
                cephConfigFromSecret:
                  additionalProperties:
                    additionalProperties:
                      description: SecretKeySelector selects a key of a Secret.
                      properties:
                        key:
                          description: The key of the secret to select from.  Must
                            be a valid secret key.
                          type: string
                        name:
                          default: ""
                          description: |-
                            Name of the referent.
                            This field is effectively required, but due to backwards compatibility is
                            allowed to be empty. Instances of this type with an empty value here are
                            almost certainly wrong.
                            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          type: string
                        optional:
                          description: Specify whether the Secret or its key must
                            be defined
                          type: boolean
                      required:
                      - key
                      type: object
                      x-kubernetes-map-type: atomic
                    type: object
                  description: CephConfigFromSecret works exactly like CephConfig
                    but takes config value from Secret Key reference.
                  nullable: true
                  type: object
                cephVersion:
                  description: The version information that instructs Rook to orchestrate
                    a particular version of Ceph.
                  nullable: true
                  properties:
                    allowUnsupported:
                      description: Whether to allow unsupported versions (do not set
                        to true in production)
                      type: boolean
                    image:
                      description: |-
                        Image is the container image used to launch the ceph daemons, such as quay.io/ceph/ceph:<tag>
                        The full list of images can be found at https://quay.io/repository/ceph/ceph?tab=tags
                      type: string
                    imagePullPolicy:
                      description: |-
                        ImagePullPolicy describes a policy for if/when to pull a container image
                        One of Always, Never, IfNotPresent.
                      enum:
                      - IfNotPresent
                      - Always
                      - Never
                      - ""
                      type: string
                  type: object
                cleanupPolicy:
                  description: |-
                    Indicates user intent when deleting a cluster; blocks orchestration and should not be set if cluster
                    deletion is not imminent.
                  nullable: true
                  properties:
                    allowUninstallWithVolumes:
                      description: AllowUninstallWithVolumes defines whether we can
                        proceed with the uninstall if they are RBD images still present
                      type: boolean
                    confirmation:
                      description: Confirmation represents the cleanup confirmation
                      nullable: true
                      pattern: ^$|^yes-really-destroy-data$
                      type: string
                    sanitizeDisks:
                      description: SanitizeDisks represents way we sanitize disks
                      nullable: true
                      properties:
                        dataSource:
                          description: DataSource is the data source to use to sanitize
                            the disk with
                          enum:
                          - zero
                          - random
                          type: string
                        iteration:
                          description: Iteration is the number of pass to apply the
                            sanitizing
                          format: int32
                          type: integer
                        method:
                          description: Method is the method we use to sanitize disks
                          enum:
                          - complete
                          - quick
                          type: string
                      type: object
                    wipeDevicesFromOtherClusters:
                      description: |-
                        WipeDevicesFromOtherClusters wipes the OSD disks belonging to other clusters. This is useful in scenarios where ceph cluster
                        was reinstalled but OSD disk still contains the metadata from previous ceph cluster.
                      type: boolean
                  type: object
                continueUpgradeAfterChecksEvenIfNotHealthy:
                  description: ContinueUpgradeAfterChecksEvenIfNotHealthy defines
                    if an upgrade should continue even if PGs are not clean
                  type: boolean
                crashCollector:
                  description: A spec for the crash controller
                  nullable: true
                  properties:
                    daysToRetain:
                      description: DaysToRetain represents the number of days to retain
                        crash until they get pruned
                      type: integer
                    disable:
                      description: Disable determines whether we should enable the
                        crash collector
                      type: boolean
                  type: object
                csi:
                  description: CSI Driver Options applied per cluster.
                  properties:
                    cephfs:
                      description: CephFS defines CSI Driver settings for CephFS driver.
                      properties:
                        fuseMountOptions:
                          description: FuseMountOptions defines the mount options
                            for ceph fuse mounter.
                          type: string
                        kernelMountOptions:
                          description: KernelMountOptions defines the mount options
                            for kernel mounter.
                          type: string
                      type: object
                    readAffinity:
                      description: ReadAffinity defines the read affinity settings
                        for CSI driver.
                      properties:
                        crushLocationLabels:
                          description: |-
                            CrushLocationLabels defines which node labels to use
                            as CRUSH location. This should correspond to the values set in
                            the CRUSH map.
                          items:
                            type: string
                          type: array
                        enabled:
                          description: Enables read affinity for CSI driver.
                          type: boolean
                      type: object
                    skipUserCreation:
                      description: |-
                        SkipUserCreation determines whether CSI users and their associated secrets should be skipped.
                        If set to true, the user must manually manage these secrets.
                      type: boolean
                  type: object
                dashboard:
                  description: Dashboard settings
                  nullable: true
                  properties:
                    enabled:
                      description: Enabled determines whether to enable the dashboard
                      type: boolean
                    port:
                      description: Port is the dashboard webserver port
                      maximum: 65535
                      minimum: 0
                      type: integer
                    prometheusEndpoint:
                      description: Endpoint for the Prometheus host
                      type: string
                    prometheusEndpointSSLVerify:
                      description: Whether to verify the ssl endpoint for prometheus.
                        Set to false for a self-signed cert.
                      type: boolean
                    ssl:
                      description: SSL determines whether SSL should be used
                      type: boolean
                    urlPrefix:
                      description: URLPrefix is a prefix for all URLs to use the dashboard
                        with a reverse proxy
                      type: string
                  type: object
                dataDirHostPath:
                  description: The path on the host where config and data can be persisted
                  pattern: ^/(\S+)
                  type: string
                  x-kubernetes-validations:
                  - message: DataDirHostPath is immutable
                    rule: self == oldSelf
                disruptionManagement:
                  description: A spec for configuring disruption management.
                  nullable: true
                  properties:
                    machineDisruptionBudgetNamespace:
                      description: Deprecated. Namespace to look for MDBs by the machineDisruptionBudgetController
                      type: string
                    manageMachineDisruptionBudgets:
                      description: Deprecated. This enables management of machinedisruptionbudgets.
                      type: boolean
                    managePodBudgets:
                      description: This enables management of poddisruptionbudgets
                      type: boolean
                    osdMaintenanceTimeout:
                      description: |-
                        OSDMaintenanceTimeout sets how many additional minutes the DOWN/OUT interval is for drained failure domains
                        it only works if managePodBudgets is true.
                        the default is 30 minutes
                      format: int64
                      type: integer
                    pgHealthCheckTimeout:
                      description: 'DEPRECATED: PGHealthCheckTimeout is no longer
                        implemented'
                      format: int64
                      type: integer
                    pgHealthyRegex:
                      description: |-
                        PgHealthyRegex is the regular expression that is used to determine which PG states should be considered healthy.
                        The default is `^(active\+clean|active\+clean\+scrubbing|active\+clean\+scrubbing\+deep)$`
                      type: string
                  type: object
                external:
                  description: |-
                    Whether the Ceph Cluster is running external to this Kubernetes cluster
                    mon, mgr, osd, mds, and discover daemons will not be created for external clusters.
                  nullable: true
                  properties:
                    enable:
                      description: Enable determines whether external mode is enabled
                        or not
                      type: boolean
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                healthCheck:
                  description: Internal daemon healthchecks and liveness probe
                  nullable: true
                  properties:
                    daemonHealth:
                      description: DaemonHealth is the health check for a given daemon
                      nullable: true
                      properties:
                        mon:
                          description: Monitor represents the health check settings
                            for the Ceph monitor
                          nullable: true
                          properties:
                            disabled:
                              type: boolean
                            interval:
                              description: Interval is the internal in second or minute
                                for the health check to run like 60s for 60 seconds
                              type: string
                            timeout:
                              type: string
                          type: object
                        osd:
                          description: ObjectStorageDaemon represents the health check
                            settings for the Ceph OSDs
                          nullable: true
                          properties:
                            disabled:
                              type: boolean
                            interval:
                              description: Interval is the internal in second or minute
                                for the health check to run like 60s for 60 seconds
                              type: string
                            timeout:
                              type: string
                          type: object
                        status:
                          description: Status represents the health check settings
                            for the Ceph health
                          nullable: true
                          properties:
                            disabled:
                              type: boolean
                            interval:
                              description: Interval is the internal in second or minute
                                for the health check to run like 60s for 60 seconds
                              type: string
                            timeout:
                              type: string
                          type: object
                      type: object
                    livenessProbe:
                      additionalProperties:
                        description: ProbeSpec is a wrapper around Probe so it can
                          be enabled or disabled for a Ceph daemon
                        properties:
                          disabled:
                            description: Disabled determines whether probe is disable
                              or not
                            type: boolean
                          probe:
                            description: |-
                              Probe describes a health check to be performed against a container to determine whether it is
                              alive or ready to receive traffic.
                            properties:
                              exec:
                                description: Exec specifies a command to execute in
                                  the container.
                                properties:
                                  command:
                                    description: |-
                                      Command is the command line to execute inside the container, the working directory for the
                                      command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
                                      not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
                                      a shell, you need to explicitly call out to that shell.
                                      Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                type: object
                              failureThreshold:
                                description: |-
                                  Minimum consecutive failures for the probe to be considered failed after having succeeded.
                                  Defaults to 3. Minimum value is 1.
                                format: int32
                                type: integer
                              grpc:
                                description: GRPC specifies a GRPC HealthCheckRequest.
                                properties:
                                  port:
                                    description: Port number of the gRPC service.
                                      Number must be in the range 1 to 65535.
                                    format: int32
                                    type: integer
                                  service:
                                    default: ""
                                    description: |-
                                      Service is the name of the service to place in the gRPC HealthCheckRequest
                                      (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                                      If this is not specified, the default behavior is defined by gRPC.
                                    type: string
                                required:
                                - port
                                type: object
                              httpGet:
                                description: HTTPGet specifies an HTTP GET request
                                  to perform.
                                properties:
                                  host:
                                    description: |-
                                      Host name to connect to, defaults to the pod IP. You probably want to set
                                      "Host" in httpHeaders instead.
                                    type: string
                                  httpHeaders:
                                    description: Custom headers to set in the request.
                                      HTTP allows repeated headers.
                                    items:
                                      description: HTTPHeader describes a custom header
                                        to be used in HTTP probes
                                      properties:
                                        name:
                                          description: |-
                                            The header field name.
                                            This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                          type: string
                                        value:
                                          description: The header field value
                                          type: string
                                      required:
                                      - name
                                      - value
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  path:
                                    description: Path to access on the HTTP server.
                                    type: string
                                  port:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    description: |-
                                      Name or number of the port to access on the container.
                                      Number must be in the range 1 to 65535.
                                      Name must be an IANA_SVC_NAME.
                                    x-kubernetes-int-or-string: true
                                  scheme:
                                    description: |-
                                      Scheme to use for connecting to the host.
                                      Defaults to HTTP.
                                    type: string
                                required:
                                - port
                                type: object
                              initialDelaySeconds:
                                description: |-
                                  Number of seconds after the container has started before liveness probes are initiated.
                                  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                format: int32
                                type: integer
                              periodSeconds:
                                description: |-
                                  How often (in seconds) to perform the probe.
                                  Default to 10 seconds. Minimum value is 1.
                                format: int32
                                type: integer
                              successThreshold:
                                description: |-
                                  Minimum consecutive successes for the probe to be considered successful after having failed.
                                  Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                format: int32
                                type: integer
                              tcpSocket:
                                description: TCPSocket specifies a connection to a
                                  TCP port.
                                properties:
                                  host:
                                    description: 'Optional: Host name to connect to,
                                      defaults to the pod IP.'
                                    type: string
                                  port:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    description: |-
                                      Number or name of the port to access on the container.
                                      Number must be in the range 1 to 65535.
                                      Name must be an IANA_SVC_NAME.
                                    x-kubernetes-int-or-string: true
                                required:
                                - port
                                type: object
                              terminationGracePeriodSeconds:
                                format: int64
                                type: integer
                              timeoutSeconds:
                                description: |-
                                  Number of seconds after which the probe times out.
                                  Defaults to 1 second. Minimum value is 1.
                                  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                format: int32
                                type: integer
                            type: object
                        type: object
                      description: LivenessProbe allows changing the livenessProbe
                        configuration for a given daemon
                      type: object
                    startupProbe:
                      additionalProperties:
                        description: ProbeSpec is a wrapper around Probe so it can
                          be enabled or disabled for a Ceph daemon
                        properties:
                          disabled:
                            description: Disabled determines whether probe is disable
                              or not
                            type: boolean
                          probe:
                            description: |-
                              Probe describes a health check to be performed against a container to determine whether it is
                              alive or ready to receive traffic.
                            properties:
                              exec:
                                description: Exec specifies a command to execute in
                                  the container.
                                properties:
                                  command:
                                    description: |-
                                      Command is the command line to execute inside the container, the working directory for the
                                      command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
                                      not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
                                      a shell, you need to explicitly call out to that shell.
                                      Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                type: object
                              failureThreshold:
                                description: |-
                                  Minimum consecutive failures for the probe to be considered failed after having succeeded.
                                  Defaults to 3. Minimum value is 1.
                                format: int32
                                type: integer
                              grpc:
                                description: GRPC specifies a GRPC HealthCheckRequest.
                                properties:
                                  port:
                                    description: Port number of the gRPC service.
                                      Number must be in the range 1 to 65535.
                                    format: int32
                                    type: integer
                                  service:
                                    default: ""
                                    description: |-
                                      Service is the name of the service to place in the gRPC HealthCheckRequest
                                      (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                                      If this is not specified, the default behavior is defined by gRPC.
                                    type: string
                                required:
                                - port
                                type: object
                              httpGet:
                                description: HTTPGet specifies an HTTP GET request
                                  to perform.
                                properties:
                                  host:
                                    description: |-
                                      Host name to connect to, defaults to the pod IP. You probably want to set
                                      "Host" in httpHeaders instead.
                                    type: string
                                  httpHeaders:
                                    description: Custom headers to set in the request.
                                      HTTP allows repeated headers.
                                    items:
                                      description: HTTPHeader describes a custom header
                                        to be used in HTTP probes
                                      properties:
                                        name:
                                          description: |-
                                            The header field name.
                                            This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                          type: string
                                        value:
                                          description: The header field value
                                          type: string
                                      required:
                                      - name
                                      - value
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  path:
                                    description: Path to access on the HTTP server.
                                    type: string
                                  port:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    description: |-
                                      Name or number of the port to access on the container.
                                      Number must be in the range 1 to 65535.
                                      Name must be an IANA_SVC_NAME.
                                    x-kubernetes-int-or-string: true
                                  scheme:
                                    description: |-
                                      Scheme to use for connecting to the host.
                                      Defaults to HTTP.
                                    type: string
                                required:
                                - port
                                type: object
                              initialDelaySeconds:
                                description: |-
                                  Number of seconds after the container has started before liveness probes are initiated.
                                  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                format: int32
                                type: integer
                              periodSeconds:
                                description: |-
                                  How often (in seconds) to perform the probe.
                                  Default to 10 seconds. Minimum value is 1.
                                format: int32
                                type: integer
                              successThreshold:
                                description: |-
                                  Minimum consecutive successes for the probe to be considered successful after having failed.
                                  Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                                format: int32
                                type: integer
                              tcpSocket:
                                description: TCPSocket specifies a connection to a
                                  TCP port.
                                properties:
                                  host:
                                    description: 'Optional: Host name to connect to,
                                      defaults to the pod IP.'
                                    type: string
                                  port:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    description: |-
                                      Number or name of the port to access on the container.
                                      Number must be in the range 1 to 65535.
                                      Name must be an IANA_SVC_NAME.
                                    x-kubernetes-int-or-string: true
                                required:
                                - port
                                type: object
                              terminationGracePeriodSeconds:
                                format: int64
                                type: integer
                              timeoutSeconds:
                                description: |-
                                  Number of seconds after which the probe times out.
                                  Defaults to 1 second. Minimum value is 1.
                                  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                                format: int32
                                type: integer
                            type: object
                        type: object
                      description: StartupProbe allows changing the startupProbe configuration
                        for a given daemon
                      type: object
                  type: object
                labels:
                  additionalProperties:
                    additionalProperties:
                      type: string
                    description: Labels are label for a given daemons
                    type: object
                  description: The labels-related configuration to add/set on each
                    Pod related object.
                  nullable: true
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                logCollector:
                  description: Logging represents loggings settings
                  nullable: true
                  properties:
                    enabled:
                      description: Enabled represents whether the log collector is
                        enabled
                      type: boolean
                    maxLogSize:
                      anyOf:
                      - type: integer
                      - type: string
                      description: MaxLogSize is the maximum size of the log per ceph
                        daemons. Must be at least 1M.
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    periodicity:
                      description: Periodicity is the periodicity of the log rotation.
                      pattern: ^$|^(hourly|daily|weekly|monthly|1h|24h|1d)$
                      type: string
                  type: object
                mgr:
                  description: A spec for mgr related options
                  nullable: true
                  properties:
                    allowMultiplePerNode:
                      description: AllowMultiplePerNode allows to run multiple managers
                        on the same node (not recommended)
                      type: boolean
                    count:
                      description: Count is the number of manager daemons to run
                      maximum: 5
                      minimum: 0
                      type: integer
                    modules:
                      description: Modules is the list of ceph manager modules to
                        enable/disable
                      items:
                        description: Module represents mgr modules that the user wants
                          to enable or disable
                        properties:
                          enabled:
                            description: Enabled determines whether a module should
                              be enabled or not
                            type: boolean
                          name:
                            description: Name is the name of the ceph manager module
                            type: string
                          settings:
                            description: Settings to further configure the module
                            properties:
                              balancerMode:
                                description: BalancerMode sets the `balancer` module
                                  with different modes like `upmap`, `crush-compact`
                                  etc
                                enum:
                                - ""
                                - crush-compat
                                - upmap
                                - read
                                - upmap-read
                                type: string
                            type: object
                        type: object
                      nullable: true
                      type: array
                  type: object
                mon:
                  description: A spec for mon related options
                  nullable: true
                  properties:
                    allowMultiplePerNode:
                      description: AllowMultiplePerNode determines if we can run multiple
                        monitors on the same node (not recommended)
                      type: boolean
                    count:
                      description: Count is the number of Ceph monitors
                      maximum: 9
                      minimum: 0
                      type: integer
                    externalMonIDs:
                      description: |-
                        ExternalMonIDs - optional list of monitor IDs which are deployed externally and not managed by Rook.
                        If set, Rook will not remove mons with given IDs from quorum.
                        This parameter is used only for local Rook cluster running in normal mode
                        and will be ignored if external or stretched mode is used.
                        leading
                      items:
                        type: string
                      type: array
                    failureDomainLabel:
                      type: string
                    stretchCluster:
                      description: StretchCluster is the stretch cluster specification
                      properties:
                        failureDomainLabel:
                          description: 'FailureDomainLabel the failure domain name
                            (e,g: zone)'
                          type: string
                        subFailureDomain:
                          description: SubFailureDomain is the failure domain within
                            a zone
                          type: string
                        zones:
                          description: Zones is the list of zones
                          items:
                            description: MonZoneSpec represents the specification
                              of a zone in a Ceph Cluster
                            properties:
                              arbiter:
                                description: Arbiter determines if the zone contains
                                  the arbiter used for stretch cluster mode
                                type: boolean
                              name:
                                description: Name is the name of the zone
                                type: string
                              volumeClaimTemplate:
                                description: VolumeClaimTemplate is the PVC template
                                properties:
                                  metadata:
                                    description: |-
                                      Standard object's metadata.
                                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                                    properties:
                                      annotations:
                                        additionalProperties:
                                          type: string
                                        type: object
                                      finalizers:
                                        items:
                                          type: string
                                        type: array
                                      labels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                      name:
                                        type: string
                                      namespace:
                                        type: string
                                    type: object
                                  spec:
                                    description: |-
                                      spec defines the desired characteristics of a volume requested by a pod author.
                                      More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                                    properties:
                                      accessModes:
                                        description: |-
                                          accessModes contains the desired access modes the volume should have.
                                          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      dataSource:
                                        description: |-
                                          dataSource field can be used to specify either:
                                          * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                                          * An existing PVC (PersistentVolumeClaim)
                                          If the provisioner or an external controller can support the specified data source,
                                          it will create a new volume based on the contents of the specified data source.
                                          When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
                                          and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
                                          If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                                        properties:
                                          apiGroup:
                                            description: |-
                                              APIGroup is the group for the resource being referenced.
                                              If APIGroup is not specified, the specified Kind must be in the core API group.
                                              For any other third-party types, APIGroup is required.
                                            type: string
                                          kind:
                                            description: Kind is the type of resource
                                              being referenced
                                            type: string
                                          name:
                                            description: Name is the name of resource
                                              being referenced
                                            type: string
                                        required:
                                        - kind
                                        - name
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      dataSourceRef:
                                        description: |-
                                          dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
                                          volume is desired. This may be any object from a non-empty API group (non
                                          core object) or a PersistentVolumeClaim object.
                                          When this field is specified, volume binding will only succeed if the type of
                                          the specified object matches some installed volume populator or dynamic
                                          provisioner.
                                          This field will replace the functionality of the dataSource field and as such
                                          if both fields are non-empty, they must have the same value. For backwards
                                          compatibility, when namespace isn't specified in dataSourceRef,
                                          both fields (dataSource and dataSourceRef) will be set to the same
                                          value automatically if one of them is empty and the other is non-empty.
                                          When namespace is specified in dataSourceRef,
                                          dataSource isn't set to the same value and must be empty.
                                          There are three important differences between dataSource and dataSourceRef:
                                          * While dataSource only allows two specific types of objects, dataSourceRef
                                            allows any non-core object, as well as PersistentVolumeClaim objects.
                                          * While dataSource ignores disallowed values (dropping them), dataSourceRef
                                            preserves all values, and generates an error if a disallowed value is
                                            specified.
                                          * While dataSource only allows local objects, dataSourceRef allows objects
                                            in any namespaces.
                                          (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
                                          (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                        properties:
                                          apiGroup:
                                            description: |-
                                              APIGroup is the group for the resource being referenced.
                                              If APIGroup is not specified, the specified Kind must be in the core API group.
                                              For any other third-party types, APIGroup is required.
                                            type: string
                                          kind:
                                            description: Kind is the type of resource
                                              being referenced
                                            type: string
                                          name:
                                            description: Name is the name of resource
                                              being referenced
                                            type: string
                                          namespace:
                                            description: |-
                                              Namespace is the namespace of resource being referenced
                                              Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
                                              (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                            type: string
                                        required:
                                        - kind
                                        - name
                                        type: object
                                      resources:
                                        description: |-
                                          resources represents the minimum resources the volume should have.
                                          If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
                                          that are lower than previous value but must still be higher than capacity recorded in the
                                          status field of the claim.
                                          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                                        properties:
                                          limits:
                                            additionalProperties:
                                              anyOf:
                                              - type: integer
                                              - type: string
                                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                              x-kubernetes-int-or-string: true
                                            description: |-
                                              Limits describes the maximum amount of compute resources allowed.
                                              More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                            type: object
                                          requests:
                                            additionalProperties:
                                              anyOf:
                                              - type: integer
                                              - type: string
                                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                              x-kubernetes-int-or-string: true
                                            description: |-
                                              Requests describes the minimum amount of compute resources required.
                                              If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                              otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                              More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                            type: object
                                        type: object
                                      selector:
                                        description: selector is a label query over
                                          volumes to consider for binding.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list
                                              of label selector requirements. The
                                              requirements are ANDed.
                                            items:
                                              description: |-
                                                A label selector requirement is a selector that contains values, a key, and an operator that
                                                relates the key and values.
                                              properties:
                                                key:
                                                  description: key is the label key
                                                    that the selector applies to.
                                                  type: string
                                                operator:
                                                  description: |-
                                                    operator represents a key's relationship to a set of values.
                                                    Valid operators are In, NotIn, Exists and DoesNotExist.
                                                  type: string
                                                values:
                                                  description: |-
                                                    values is an array of string values. If the operator is In or NotIn,
                                                    the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                            x-kubernetes-list-type: atomic
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: |-
                                              matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions, whose key field is "key", the
                                              operator is "In", and the values array contains only "value". The requirements are ANDed.
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      storageClassName:
                                        description: |-
                                          storageClassName is the name of the StorageClass required by the claim.
                                          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                                        type: string
                                      volumeAttributesClassName:
                                        description: |-
                                          volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
                                          If specified, the CSI driver will create or update the volume with the attributes defined
                                          in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
                                          it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
                                          will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
                                          If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
                                          will be set by the persistentvolume controller if it exists.
                                          If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
                                          set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
                                          exists.
                                          More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
                                          (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
                                        type: string
                                      volumeMode:
                                        description: |-
                                          volumeMode defines what type of volume is required by the claim.
                                          Value of Filesystem is implied when not included in claim spec.
                                        type: string
                                      volumeName:
                                        description: volumeName is the binding reference
                                          to the PersistentVolume backing this claim.
                                        type: string
                                    type: object
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                            type: object
                          nullable: true
                          type: array
                      type: object
                    volumeClaimTemplate:
                      description: VolumeClaimTemplate is the PVC definition
                      properties:
                        metadata:
                          description: |-
                            Standard object's metadata.
                            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              type: object
                            finalizers:
                              items:
                                type: string
                              type: array
                            labels:
                              additionalProperties:
                                type: string
                              type: object
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        spec:
                          description: |-
                            spec defines the desired characteristics of a volume requested by a pod author.
                            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                          properties:
                            accessModes:
                              description: |-
                                accessModes contains the desired access modes the volume should have.
                                More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            dataSource:
                              description: |-
                                dataSource field can be used to specify either:
                                * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                                * An existing PVC (PersistentVolumeClaim)
                                If the provisioner or an external controller can support the specified data source,
                                it will create a new volume based on the contents of the specified data source.
                                When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
                                and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
                                If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                              properties:
                                apiGroup:
                                  description: |-
                                    APIGroup is the group for the resource being referenced.
                                    If APIGroup is not specified, the specified Kind must be in the core API group.
                                    For any other third-party types, APIGroup is required.
                                  type: string
                                kind:
                                  description: Kind is the type of resource being
                                    referenced
                                  type: string
                                name:
                                  description: Name is the name of resource being
                                    referenced
                                  type: string
                              required:
                              - kind
                              - name
                              type: object
                              x-kubernetes-map-type: atomic
                            dataSourceRef:
                              description: |-
                                dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
                                volume is desired. This may be any object from a non-empty API group (non
                                core object) or a PersistentVolumeClaim object.
                                When this field is specified, volume binding will only succeed if the type of
                                the specified object matches some installed volume populator or dynamic
                                provisioner.
                                This field will replace the functionality of the dataSource field and as such
                                if both fields are non-empty, they must have the same value. For backwards
                                compatibility, when namespace isn't specified in dataSourceRef,
                                both fields (dataSource and dataSourceRef) will be set to the same
                                value automatically if one of them is empty and the other is non-empty.
                                When namespace is specified in dataSourceRef,
                                dataSource isn't set to the same value and must be empty.
                                There are three important differences between dataSource and dataSourceRef:
                                * While dataSource only allows two specific types of objects, dataSourceRef
                                  allows any non-core object, as well as PersistentVolumeClaim objects.
                                * While dataSource ignores disallowed values (dropping them), dataSourceRef
                                  preserves all values, and generates an error if a disallowed value is
                                  specified.
                                * While dataSource only allows local objects, dataSourceRef allows objects
                                  in any namespaces.
                                (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
                                (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                              properties:
                                apiGroup:
                                  description: |-
                                    APIGroup is the group for the resource being referenced.
                                    If APIGroup is not specified, the specified Kind must be in the core API group.
                                    For any other third-party types, APIGroup is required.
                                  type: string
                                kind:
                                  description: Kind is the type of resource being
                                    referenced
                                  type: string
                                name:
                                  description: Name is the name of resource being
                                    referenced
                                  type: string
                                namespace:
                                  description: |-
                                    Namespace is the namespace of resource being referenced
                                    Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
                                    (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                  type: string
                              required:
                              - kind
                              - name
                              type: object
                            resources:
                              description: |-
                                resources represents the minimum resources the volume should have.
                                If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
                                that are lower than previous value but must still be higher than capacity recorded in the
                                status field of the claim.
                                More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                              properties:
                                limits:
                                  additionalProperties:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                  description: |-
                                    Limits describes the maximum amount of compute resources allowed.
                                    More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                  type: object
                                requests:
                                  additionalProperties:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                  description: |-
                                    Requests describes the minimum amount of compute resources required.
                                    If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                    otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                    More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                  type: object
                              type: object
                            selector:
                              description: selector is a label query over volumes
                                to consider for binding.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label
                                    selector requirements. The requirements are ANDed.
                                  items:
                                    description: |-
                                      A label selector requirement is a selector that contains values, a key, and an operator that
                                      relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the
                                          selector applies to.
                                        type: string
                                      operator:
                                        description: |-
                                          operator represents a key's relationship to a set of values.
                                          Valid operators are In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: |-
                                          values is an array of string values. If the operator is In or NotIn,
                                          the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                          the values array must be empty. This array is replaced during a strategic
                                          merge patch.
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                  x-kubernetes-list-type: atomic
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: |-
                                    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                    map is equivalent to an element of matchExpressions, whose key field is "key", the
                                    operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  type: object
                              type: object
                              x-kubernetes-map-type: atomic
                            storageClassName:
                              description: |-
                                storageClassName is the name of the StorageClass required by the claim.
                                More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                              type: string
                            volumeAttributesClassName:
                              description: |-
                                volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
                                If specified, the CSI driver will create or update the volume with the attributes defined
                                in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
                                it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
                                will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
                                If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
                                will be set by the persistentvolume controller if it exists.
                                If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
                                set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
                                exists.
                                More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
                                (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
                              type: string
                            volumeMode:
                              description: |-
                                volumeMode defines what type of volume is required by the claim.
                                Value of Filesystem is implied when not included in claim spec.
                              type: string
                            volumeName:
                              description: volumeName is the binding reference to
                                the PersistentVolume backing this claim.
                              type: string
                          type: object
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    zones:
                      description: Zones are specified when we want to provide zonal
                        awareness to mons
                      items:
                        description: MonZoneSpec represents the specification of a
                          zone in a Ceph Cluster
                        properties:
                          arbiter:
                            description: Arbiter determines if the zone contains the
                              arbiter used for stretch cluster mode
                            type: boolean
                          name:
                            description: Name is the name of the zone
                            type: string
                          volumeClaimTemplate:
                            description: VolumeClaimTemplate is the PVC template
                            properties:
                              metadata:
                                description: |-
                                  Standard object's metadata.
                                  More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                                properties:
                                  annotations:
                                    additionalProperties:
                                      type: string
                                    type: object
                                  finalizers:
                                    items:
                                      type: string
                                    type: array
                                  labels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                  name:
                                    type: string
                                  namespace:
                                    type: string
                                type: object
                              spec:
                                description: |-
                                  spec defines the desired characteristics of a volume requested by a pod author.
                                  More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                                properties:
                                  accessModes:
                                    description: |-
                                      accessModes contains the desired access modes the volume should have.
                                      More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  dataSource:
                                    description: |-
                                      dataSource field can be used to specify either:
                                      * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                                      * An existing PVC (PersistentVolumeClaim)
                                      If the provisioner or an external controller can support the specified data source,
                                      it will create a new volume based on the contents of the specified data source.
                                      When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
                                      and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
                                      If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                                    properties:
                                      apiGroup:
                                        description: |-
                                          APIGroup is the group for the resource being referenced.
                                          If APIGroup is not specified, the specified Kind must be in the core API group.
                                          For any other third-party types, APIGroup is required.
                                        type: string
                                      kind:
                                        description: Kind is the type of resource
                                          being referenced
                                        type: string
                                      name:
                                        description: Name is the name of resource
                                          being referenced
                                        type: string
                                    required:
                                    - kind
                                    - name
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  dataSourceRef:
                                    description: |-
                                      dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
                                      volume is desired. This may be any object from a non-empty API group (non
                                      core object) or a PersistentVolumeClaim object.
                                      When this field is specified, volume binding will only succeed if the type of
                                      the specified object matches some installed volume populator or dynamic
                                      provisioner.
                                      This field will replace the functionality of the dataSource field and as such
                                      if both fields are non-empty, they must have the same value. For backwards
                                      compatibility, when namespace isn't specified in dataSourceRef,
                                      both fields (dataSource and dataSourceRef) will be set to the same
                                      value automatically if one of them is empty and the other is non-empty.
                                      When namespace is specified in dataSourceRef,
                                      dataSource isn't set to the same value and must be empty.
                                      There are three important differences between dataSource and dataSourceRef:
                                      * While dataSource only allows two specific types of objects, dataSourceRef
                                        allows any non-core object, as well as PersistentVolumeClaim objects.
                                      * While dataSource ignores disallowed values (dropping them), dataSourceRef
                                        preserves all values, and generates an error if a disallowed value is
                                        specified.
                                      * While dataSource only allows local objects, dataSourceRef allows objects
                                        in any namespaces.
                                      (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
                                      (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                    properties:
                                      apiGroup:
                                        description: |-
                                          APIGroup is the group for the resource being referenced.
                                          If APIGroup is not specified, the specified Kind must be in the core API group.
                                          For any other third-party types, APIGroup is required.
                                        type: string
                                      kind:
                                        description: Kind is the type of resource
                                          being referenced
                                        type: string
                                      name:
                                        description: Name is the name of resource
                                          being referenced
                                        type: string
                                      namespace:
                                        description: |-
                                          Namespace is the namespace of resource being referenced
                                          Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
                                          (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                        type: string
                                    required:
                                    - kind
                                    - name
                                    type: object
                                  resources:
                                    description: |-
                                      resources represents the minimum resources the volume should have.
                                      If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
                                      that are lower than previous value but must still be higher than capacity recorded in the
                                      status field of the claim.
                                      More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                                    properties:
                                      limits:
                                        additionalProperties:
                                          anyOf:
                                          - type: integer
                                          - type: string
                                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                          x-kubernetes-int-or-string: true
                                        description: |-
                                          Limits describes the maximum amount of compute resources allowed.
                                          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                        type: object
                                      requests:
                                        additionalProperties:
                                          anyOf:
                                          - type: integer
                                          - type: string
                                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                          x-kubernetes-int-or-string: true
                                        description: |-
                                          Requests describes the minimum amount of compute resources required.
                                          If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                          otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                        type: object
                                    type: object
                                  selector:
                                    description: selector is a label query over volumes
                                      to consider for binding.
                                    properties:
                                      matchExpressions:
                                        description: matchExpressions is a list of
                                          label selector requirements. The requirements
                                          are ANDed.
                                        items:
                                          description: |-
                                            A label selector requirement is a selector that contains values, a key, and an operator that
                                            relates the key and values.
                                          properties:
                                            key:
                                              description: key is the label key that
                                                the selector applies to.
                                              type: string
                                            operator:
                                              description: |-
                                                operator represents a key's relationship to a set of values.
                                                Valid operators are In, NotIn, Exists and DoesNotExist.
                                              type: string
                                            values:
                                              description: |-
                                                values is an array of string values. If the operator is In or NotIn,
                                                the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                the values array must be empty. This array is replaced during a strategic
                                                merge patch.
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                        x-kubernetes-list-type: atomic
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        description: |-
                                          matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                          map is equivalent to an element of matchExpressions, whose key field is "key", the
                                          operator is "In", and the values array contains only "value". The requirements are ANDed.
                                        type: object
                                    type: object
                                    x-kubernetes-map-type: atomic
                                  storageClassName:
                                    description: |-
                                      storageClassName is the name of the StorageClass required by the claim.
                                      More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                                    type: string
                                  volumeAttributesClassName:
                                    description: |-
                                      volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
                                      If specified, the CSI driver will create or update the volume with the attributes defined
                                      in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
                                      it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
                                      will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
                                      If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
                                      will be set by the persistentvolume controller if it exists.
                                      If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
                                      set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
                                      exists.
                                      More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
                                      (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
                                    type: string
                                  volumeMode:
                                    description: |-
                                      volumeMode defines what type of volume is required by the claim.
                                      Value of Filesystem is implied when not included in claim spec.
                                    type: string
                                  volumeName:
                                    description: volumeName is the binding reference
                                      to the PersistentVolume backing this claim.
                                    type: string
                                type: object
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        type: object
                      type: array
                  type: object
                  x-kubernetes-validations:
                  - message: zones must be less than or equal to count
                    rule: '!has(self.zones) || (has(self.zones) && (size(self.zones)
                      <= self.count))'
                  - message: stretchCluster zones must be equal to 3
                    rule: '!has(self.stretchCluster) || (has(self.stretchCluster)
                      && (size(self.stretchCluster.zones) > 0) && (size(self.stretchCluster.zones)
                      == 3))'
                monitoring:
                  description: Prometheus based Monitoring settings
                  nullable: true
                  properties:
                    enabled:
                      description: |-
                        Enabled determines whether to create the prometheus rules for the ceph cluster. If true, the prometheus
                        types must exist or the creation will fail. Default is false.
                      type: boolean
                    exporter:
                      description: Ceph exporter configuration
                      properties:
                        hostNetwork:
                          description: Whether host networking is enabled for CephExporter.
                            If not set, the network settings from CephCluster.spec.networking
                            will be applied.
                          nullable: true
                          type: boolean
                        perfCountersPrioLimit:
                          default: 5
                          description: Only performance counters greater than or equal
                            to this option are fetched
                          format: int64
                          type: integer
                        statsPeriodSeconds:
                          default: 5
                          description: Time to wait before sending requests again
                            to exporter server (seconds)
                          format: int64
                          type: integer
                      type: object
                    externalMgrEndpoints:
                      description: ExternalMgrEndpoints points to an existing Ceph
                        prometheus exporter endpoint
                      items:
                        description: EndpointAddress is a tuple that describes single
                          IP address.
                        properties:
                          hostname:
                            description: The Hostname of this endpoint
                            type: string
                          ip:
                            description: |-
                              The IP of this endpoint.
                              May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10),
                              or link-local multicast (224.0.0.0/24 or ff02::/16).
                            type: string
                          nodeName:
                            description: 'Optional: Node hosting this endpoint. This
                              can be used to determine endpoints local to a node.'
                            type: string
                          targetRef:
                            description: Reference to object providing the endpoint.
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: |-
                                  If referring to a piece of an object instead of an entire object, this string
                                  should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                  For example, if the object reference is to a container within a pod, this would take on a value like:
                                  "spec.containers{name}" (where "name" refers to the name of the container that triggered
                                  the event) or if no container name is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only to have some well-defined way of
                                  referencing a part of an object.
                                type: string
                              kind:
                                description: |-
                                  Kind of the referent.
                                  More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                                type: string
                              name:
                                description: |-
                                  Name of the referent.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                type: string
                              namespace:
                                description: |-
                                  Namespace of the referent.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                type: string
                              resourceVersion:
                                description: |-
                                  Specific resourceVersion to which this reference is made, if any.
                                  More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                                type: string
                              uid:
                                description: |-
                                  UID of the referent.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                        - ip
                        type: object
                        x-kubernetes-map-type: atomic
                      nullable: true
                      type: array
                    externalMgrPrometheusPort:
                      description: ExternalMgrPrometheusPort Prometheus exporter port
                      maximum: 65535
                      minimum: 0
                      type: integer
                    interval:
                      description: Interval determines prometheus scrape interval
                      type: string
                    metricsDisabled:
                      description: |-
                        Whether to disable the metrics reported by Ceph. If false, the prometheus mgr module and Ceph exporter are enabled.
                        If true, the prometheus mgr module and Ceph exporter are both disabled. Default is false.
                      type: boolean
                    port:
                      description: Port is the prometheus server port
                      maximum: 65535
                      minimum: 0
                      type: integer
                  type: object
                network:
                  description: Network related configuration
                  nullable: true
                  properties:
                    addressRanges:
                      description: |-
                        AddressRanges specify a list of CIDRs that Rook will apply to Ceph's 'public_network' and/or
                        'cluster_network' configurations. This config section may be used for the "host" or "multus"
                        network providers.
                      nullable: true
                      properties:
                        cluster:
                          description: Cluster defines a list of CIDRs to use for
                            Ceph cluster network communication.
                          items:
                            description: |-
                              An IPv4 or IPv6 network CIDR.

                              This naive kubebuilder regex provides immediate feedback for some typos and for a common problem
                              case where the range spec is forgotten (e.g., /24). Rook does in-depth validation in code.
                            pattern: ^[0-9a-fA-F:.]{2,}\/[0-9]{1,3}$
                            type: string
                          type: array
                        public:
                          description: Public defines a list of CIDRs to use for Ceph
                            public network communication.
                          items:
                            description: |-
                              An IPv4 or IPv6 network CIDR.

                              This naive kubebuilder regex provides immediate feedback for some typos and for a common problem
                              case where the range spec is forgotten (e.g., /24). Rook does in-depth validation in code.
                            pattern: ^[0-9a-fA-F:.]{2,}\/[0-9]{1,3}$
                            type: string
                          type: array
                      type: object
                    connections:
                      description: |-
                        Settings for network connections such as compression and encryption across the
                        wire.
                      nullable: true
                      properties:
                        compression:
                          description: Compression settings for the network connections.
                          nullable: true
                          properties:
                            enabled:
                              description: |-
                                Whether to compress the data in transit across the wire.
                                The default is not set.
                              type: boolean
                          type: object
                        encryption:
                          description: Encryption settings for the network connections.
                          nullable: true
                          properties:
                            enabled:
                              description: |-
                                Whether to encrypt the data in transit across the wire to prevent eavesdropping
                                the data on the network. The default is not set. Even if encryption is not enabled,
                                clients still establish a strong initial authentication for the connection
                                and data integrity is still validated with a crc check. When encryption is enabled,
                                all communication between clients and Ceph daemons, or between Ceph daemons will
                                be encrypted.
                              type: boolean
                          type: object
                        requireMsgr2:
                          description: |-
                            Whether to require msgr2 (port 3300) even if compression or encryption are not enabled.
                            If true, the msgr1 port (6789) will be disabled.
                            Requires a kernel that supports msgr2 (kernel 5.11 or CentOS 8.4 or newer).
                          type: boolean
                      type: object
                    dualStack:
                      description: DualStack determines whether Ceph daemons should
                        listen on both IPv4 and IPv6
                      type: boolean
                    hostNetwork:
                      description: |-
                        HostNetwork to enable host network.
                        If host networking is enabled or disabled on a running cluster, then the operator will automatically fail over all the mons to
                        apply the new network settings.
                      type: boolean
                    ipFamily:
                      description: IPFamily is the single stack IPv6 or IPv4 protocol
                      enum:
                      - IPv4
                      - IPv6
                      nullable: true
                      type: string
                    multiClusterService:
                      description: Enable multiClusterService to export the Services
                        between peer clusters
                      properties:
                        clusterID:
                          description: |-
                            ClusterID uniquely identifies a cluster. It is used as a prefix to nslookup exported
                            services. For example: <clusterid>.<svc>.<ns>.svc.clusterset.local
                          type: string
                        enabled:
                          description: |-
                            Enable multiClusterService to export the mon and OSD services to peer cluster.
                            Ensure that peer clusters are connected using an MCS API compatible application,
                            like Globalnet Submariner.
                          type: boolean
                      type: object
                    provider:
                      description: |-
                        Provider is what provides network connectivity to the cluster e.g. "host" or "multus".
                        If the Provider is updated from being empty to "host" on a running cluster, then the operator will automatically fail over all the mons to apply the "host" network settings.
                      enum:
                      - ""
                      - host
                      - multus
                      nullable: true
                      type: string
                      x-kubernetes-validations:
                      - message: network provider must be disabled (reverted to empty
                          string) before a new provider is enabled
                        rule: self == '' || oldSelf == '' || self == oldSelf
                    selectors:
                      additionalProperties:
                        type: string
                      description: |-
                        Selectors define NetworkAttachmentDefinitions to be used for Ceph public and/or cluster
                        networks when the "multus" network provider is used. This config section is not used for
                        other network providers.

                        Valid keys are "public" and "cluster". Refer to Ceph networking documentation for more:
                        https://docs.ceph.com/en/latest/rados/configuration/network-config-ref/

                        Refer to Multus network annotation documentation for help selecting values:
                        https://github.com/k8snetworkplumbingwg/multus-cni/blob/master/docs/how-to-use.md#run-pod-with-network-annotation

                        Rook will make a best-effort attempt to automatically detect CIDR address ranges for given
                        network attachment definitions. Rook's methods are robust but may be imprecise for
                        sufficiently complicated networks. Rook's auto-detection process obtains a new IP address
                        lease for each CephCluster reconcile. If Rook fails to detect, incorrectly detects, only
                        partially detects, or if underlying networks do not support reusing old IP addresses, it is
                        best to use the 'addressRanges' config section to specify CIDR ranges for the Ceph cluster.

                        As a contrived example, one can use a theoretical Kubernetes-wide network for Ceph client
                        traffic and a theoretical Rook-only network for Ceph replication traffic as shown:
                          selectors:
                            public: "default/cluster-fast-net"
                            cluster: "rook-ceph/ceph-backend-net"
                      nullable: true
                      type: object
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                  x-kubernetes-validations:
                  - message: at least one network selector must be specified when
                      using multus
                    rule: '!has(self.provider) || (self.provider != ''multus'' ||
                      (self.provider == ''multus'' && size(self.selectors) > 0))'
                  - message: the legacy hostNetwork setting can only be set if the
                      network.provider is set to the empty string
                    rule: '!has(self.hostNetwork) || self.hostNetwork == false ||
                      !has(self.provider) || self.provider == ""'
                placement:
                  additionalProperties:
                    properties:
                      nodeAffinity:
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            items:
                              properties:
                                preference:
                                  properties:
                                    matchExpressions:
                                      items:
                                        properties:
                                          key:
                                            type: string
                                          operator:
                                            type: string
                                          values:
                                            items:
                                              type: string
                                            type: array
                                            x-kubernetes-list-type: atomic
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    matchFields:
                                      items:
                                        properties:
                                          key:
                                            type: string
                                          operator:
                                            type: string
                                          values:
                                            items:
                                              type: string
                                            type: array
                                            x-kubernetes-list-type: atomic
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                  type: object
                                  x-kubernetes-map-type: atomic
                                weight:
                                  format: int32
                                  type: integer
                              required:
                              - preference
                              - weight
                              type: object
                            type: array
                            x-kubernetes-list-type: atomic
                          requiredDuringSchedulingIgnoredDuringExecution:
                            properties:
                              nodeSelectorTerms:
                                items:
                                  properties:
                                    matchExpressions:
                                      items:
                                        properties:
                                          key:
                                            type: string
                                          operator:
                                            type: string
                                          values:
                                            items:
                                              type: string
                                            type: array
                                            x-kubernetes-list-type: atomic
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    matchFields:
                                      items:
                                        properties:
                                          key:
                                            type: string
                                          operator:
                                            type: string
                                          values:
                                            items:
                                              type: string
                                            type: array
                                            x-kubernetes-list-type: atomic
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                  type: object
                                  x-kubernetes-map-type: atomic
                                type: array
                                x-kubernetes-list-type: atomic
                            required:
                            - nodeSelectorTerms
                            type: object
                            x-kubernetes-map-type: atomic
                        type: object
                      podAffinity:
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            items:
                              properties:
                                podAffinityTerm:
                                  properties:
                                    labelSelector:
                                      properties:
                                        matchExpressions:
                                          items:
                                            properties:
                                              key:
                                                type: string
                                              operator:
                                                type: string
                                              values:
                                                items:
                                                  type: string
                                                type: array
                                                x-kubernetes-list-type: atomic
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    matchLabelKeys:
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    mismatchLabelKeys:
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    namespaceSelector:
                                      properties:
                                        matchExpressions:
                                          items:
                                            properties:
                                              key:
                                                type: string
                                              operator:
                                                type: string
                                              values:
                                                items:
                                                  type: string
                                                type: array
                                                x-kubernetes-list-type: atomic
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaces:
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    topologyKey:
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                weight:
                                  format: int32
                                  type: integer
                              required:
                              - podAffinityTerm
                              - weight
                              type: object
                            type: array
                            x-kubernetes-list-type: atomic
                          requiredDuringSchedulingIgnoredDuringExecution:
                            items:
                              properties:
                                labelSelector:
                                  properties:
                                    matchExpressions:
                                      items:
                                        properties:
                                          key:
                                            type: string
                                          operator:
                                            type: string
                                          values:
                                            items:
                                              type: string
                                            type: array
                                            x-kubernetes-list-type: atomic
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                matchLabelKeys:
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                mismatchLabelKeys:
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                namespaceSelector:
                                  properties:
                                    matchExpressions:
                                      items:
                                        properties:
                                          key:
                                            type: string
                                          operator:
                                            type: string
                                          values:
                                            items:
                                              type: string
                                            type: array
                                            x-kubernetes-list-type: atomic
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                namespaces:
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                topologyKey:
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            type: array
                            x-kubernetes-list-type: atomic
                        type: object
                      podAntiAffinity:
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            items:
                              properties:
                                podAffinityTerm:
                                  properties:
                                    labelSelector:
                                      properties:
                                        matchExpressions:
                                          items:
                                            properties:
                                              key:
                                                type: string
                                              operator:
                                                type: string
                                              values:
                                                items:
                                                  type: string
                                                type: array
                                                x-kubernetes-list-type: atomic
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    matchLabelKeys:
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    mismatchLabelKeys:
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    namespaceSelector:
                                      properties:
                                        matchExpressions:
                                          items:
                                            properties:
                                              key:
                                                type: string
                                              operator:
                                                type: string
                                              values:
                                                items:
                                                  type: string
                                                type: array
                                                x-kubernetes-list-type: atomic
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaces:
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    topologyKey:
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                weight:
                                  format: int32
                                  type: integer
                              required:
                              - podAffinityTerm
                              - weight
                              type: object
                            type: array
                            x-kubernetes-list-type: atomic
                          requiredDuringSchedulingIgnoredDuringExecution:
                            items:
                              properties:
                                labelSelector:
                                  properties:
                                    matchExpressions:
                                      items:
                                        properties:
                                          key:
                                            type: string
                                          operator:
                                            type: string
                                          values:
                                            items:
                                              type: string
                                            type: array
                                            x-kubernetes-list-type: atomic
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                matchLabelKeys:
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                mismatchLabelKeys:
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                namespaceSelector:
                                  properties:
                                    matchExpressions:
                                      items:
                                        properties:
                                          key:
                                            type: string
                                          operator:
                                            type: string
                                          values:
                                            items:
                                              type: string
                                            type: array
                                            x-kubernetes-list-type: atomic
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                namespaces:
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                topologyKey:
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            type: array
                            x-kubernetes-list-type: atomic
                        type: object
                      tolerations:
                        items:
                          properties:
                            effect:
                              type: string
                            key:
                              type: string
                            operator:
                              type: string
                            tolerationSeconds:
                              format: int64
                              type: integer
                            value:
                              type: string
                          type: object
                        type: array
                      topologySpreadConstraints:
                        items:
                          properties:
                            labelSelector:
                              properties:
                                matchExpressions:
                                  items:
                                    properties:
                                      key:
                                        type: string
                                      operator:
                                        type: string
                                      values:
                                        items:
                                          type: string
                                        type: array
                                        x-kubernetes-list-type: atomic
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                  x-kubernetes-list-type: atomic
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  type: object
                              type: object
                              x-kubernetes-map-type: atomic
                            matchLabelKeys:
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            maxSkew:
                              format: int32
                              type: integer
                            minDomains:
                              format: int32
                              type: integer
                            nodeAffinityPolicy:
                              type: string
                            nodeTaintsPolicy:
                              type: string
                            topologyKey:
                              type: string
                            whenUnsatisfiable:
                              type: string
                          required:
                          - maxSkew
                          - topologyKey
                          - whenUnsatisfiable
                          type: object
                        type: array
                    type: object
                  nullable: true
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                priorityClassNames:
                  additionalProperties:
                    type: string
                  description: PriorityClassNames sets priority classes on components
                  nullable: true
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                removeOSDsIfOutAndSafeToRemove:
                  description: Remove the OSD that is out and safe to remove only
                    if this option is true
                  type: boolean
                resources:
                  additionalProperties:
                    description: ResourceRequirements describes the compute resource
                      requirements.
                    properties:
                      claims:
                        description: |-
                          Claims lists the names of resources, defined in spec.resourceClaims,
                          that are used by this container.

                          This is an alpha field and requires enabling the
                          DynamicResourceAllocation feature gate.

                          This field is immutable. It can only be set for containers.
                        items:
                          description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                          properties:
                            name:
                              description: |-
                                Name must match the name of one entry in pod.spec.resourceClaims of
                                the Pod where this field is used. It makes that resource available
                                inside a container.
                              type: string
                            request:
                              description: |-
                                Request is the name chosen for a request in the referenced claim.
                                If empty, everything from the claim is made available, otherwise
                                only the result of this request.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - name
                        x-kubernetes-list-type: map
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: |-
                          Limits describes the maximum amount of compute resources allowed.
                          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: |-
                          Requests describes the minimum amount of compute resources required.
                          If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                          otherwise to an implementation-defined value. Requests cannot exceed Limits.
                          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                        type: object
                    type: object
                  description: Resources set resource requests and limits
                  nullable: true
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                security:
                  description: Security represents security settings
                  nullable: true
                  properties:
                    keyRotation:
                      description: KeyRotation defines options for Key Rotation.
                      nullable: true
                      properties:
                        enabled:
                          default: false
                          description: Enabled represents whether the key rotation
                            is enabled.
                          type: boolean
                        schedule:
                          description: Schedule represents the cron schedule for key
                            rotation.
                          type: string
                      type: object
                    kms:
                      description: KeyManagementService is the main Key Management
                        option
                      nullable: true
                      properties:
                        connectionDetails:
                          additionalProperties:
                            type: string
                          description: ConnectionDetails contains the KMS connection
                            details (address, port etc)
                          nullable: true
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        tokenSecretName:
                          description: TokenSecretName is the kubernetes secret containing
                            the KMS token
                          type: string
                      type: object
                  type: object
                skipUpgradeChecks:
                  description: SkipUpgradeChecks defines if an upgrade should be forced
                    even if one of the check fails
                  type: boolean
                storage:
                  description: A spec for available storage in the cluster and how
                    it should be used
                  nullable: true
                  properties:
                    allowDeviceClassUpdate:
                      description: Whether to allow updating the device class after
                        the OSD is initially provisioned
                      type: boolean
                    allowOsdCrushWeightUpdate:
                      description: |-
                        Whether Rook will resize the OSD CRUSH weight when the OSD PVC size is increased.
                        This allows cluster data to be rebalanced to make most effective use of new OSD space.
                        The default is false since data rebalancing can cause temporary cluster slowdown.
                      type: boolean
                    backfillFullRatio:
                      description: BackfillFullRatio is the ratio at which the cluster
                        is too full for backfill. Backfill will be disabled if above
                        this threshold. Default is 0.90.
                      maximum: 1
                      minimum: 0
                      nullable: true
                      type: number
                    config:
                      additionalProperties:
                        type: string
                      nullable: true
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    deviceFilter:
                      description: A regular expression to allow more fine-grained
                        selection of devices on nodes across the cluster
                      type: string
                    devicePathFilter:
                      description: A regular expression to allow more fine-grained
                        selection of devices with path names
                      type: string
                    devices:
                      description: List of devices to use as storage devices
                      items:
                        description: Device represents a disk to use in the cluster
                        properties:
                          config:
                            additionalProperties:
                              type: string
                            nullable: true
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                          fullpath:
                            type: string
                          name:
                            type: string
                        type: object
                      nullable: true
                      type: array
                      x-kubernetes-preserve-unknown-fields: true
                    flappingRestartIntervalHours:
                      description: |-
                        FlappingRestartIntervalHours defines the time for which the OSD pods, that failed with zero exit code, will sleep before restarting.
                        This is needed for OSD flapping where OSD daemons are marked down more than 5 times in 600 seconds by Ceph.
                        Preventing the OSD pods to restart immediately in such scenarios will prevent Rook from marking OSD as `up` and thus
                        peering of the PGs mapped to the OSD.
                        User needs to manually restart the OSD pod if they manage to fix the underlying OSD flapping issue before the restart interval.
                        The sleep will be disabled if this interval is set to 0.
                      type: integer
                    fullRatio:
                      description: FullRatio is the ratio at which the cluster is
                        considered full and ceph will stop accepting writes. Default
                        is 0.95.
                      maximum: 1
                      minimum: 0
                      nullable: true
                      type: number
                    migration:
                      description: Migration handles the OSD migration
                      properties:
                        confirmation:
                          description: |-
                            A user confirmation to migrate the OSDs. It destroys each OSD one at a time, cleans up the backing disk
                            and prepares OSD with same ID on that disk
                          pattern: ^$|^yes-really-migrate-osds$
                          type: string
                      type: object
                    nearFullRatio:
                      description: NearFullRatio is the ratio at which the cluster
                        is considered nearly full and will raise a ceph health warning.
                        Default is 0.85.
                      maximum: 1
                      minimum: 0
                      nullable: true
                      type: number
                    nodes:
                      items:
                        description: Node is a storage nodes
                        properties:
                          config:
                            additionalProperties:
                              type: string
                            nullable: true
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                          deviceFilter:
                            description: A regular expression to allow more fine-grained
                              selection of devices on nodes across the cluster
                            type: string
                          devicePathFilter:
                            description: A regular expression to allow more fine-grained
                              selection of devices with path names
                            type: string
                          devices:
                            description: List of devices to use as storage devices
                            items:
                              description: Device represents a disk to use in the
                                cluster
                              properties:
                                config:
                                  additionalProperties:
                                    type: string
                                  nullable: true
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                                fullpath:
                                  type: string
                                name:
                                  type: string
                              type: object
                            nullable: true
                            type: array
                            x-kubernetes-preserve-unknown-fields: true
                          name:
                            type: string
                          resources:
                            description: ResourceRequirements describes the compute
                              resource requirements.
                            nullable: true
                            properties:
                              claims:
                                description: |-
                                  Claims lists the names of resources, defined in spec.resourceClaims,
                                  that are used by this container.

                                  This is an alpha field and requires enabling the
                                  DynamicResourceAllocation feature gate.

                                  This field is immutable. It can only be set for containers.
                                items:
                                  description: ResourceClaim references one entry
                                    in PodSpec.ResourceClaims.
                                  properties:
                                    name:
                                      description: |-
                                        Name must match the name of one entry in pod.spec.resourceClaims of
                                        the Pod where this field is used. It makes that resource available
                                        inside a container.
                                      type: string
                                    request:
                                      description: |-
                                        Request is the name chosen for a request in the referenced claim.
                                        If empty, everything from the claim is made available, otherwise
                                        only the result of this request.
                                      type: string
                                  required:
                                  - name
                                  type: object
                                type: array
                                x-kubernetes-list-map-keys:
                                - name
                                x-kubernetes-list-type: map
                              limits:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: |-
                                  Limits describes the maximum amount of compute resources allowed.
                                  More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                type: object
                              requests:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: |-
                                  Requests describes the minimum amount of compute resources required.
                                  If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                  otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                  More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                type: object
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                          useAllDevices:
                            description: Whether to consume all the storage devices
                              found on a machine
                            type: boolean
                          volumeClaimTemplates:
                            description: PersistentVolumeClaims to use as storage
                            items:
                              description: VolumeClaimTemplate is a simplified version
                                of K8s corev1's PVC. It has no type meta or status.
                              properties:
                                metadata:
                                  description: |-
                                    Standard object's metadata.
                                    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                                  properties:
                                    annotations:
                                      additionalProperties:
                                        type: string
                                      type: object
                                    finalizers:
                                      items:
                                        type: string
                                      type: array
                                    labels:
                                      additionalProperties:
                                        type: string
                                      type: object
                                    name:
                                      type: string
                                    namespace:
                                      type: string
                                  type: object
                                spec:
                                  description: |-
                                    spec defines the desired characteristics of a volume requested by a pod author.
                                    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                                  properties:
                                    accessModes:
                                      description: |-
                                        accessModes contains the desired access modes the volume should have.
                                        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    dataSource:
                                      description: |-
                                        dataSource field can be used to specify either:
                                        * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                                        * An existing PVC (PersistentVolumeClaim)
                                        If the provisioner or an external controller can support the specified data source,
                                        it will create a new volume based on the contents of the specified data source.
                                        When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
                                        and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
                                        If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                                      properties:
                                        apiGroup:
                                          description: |-
                                            APIGroup is the group for the resource being referenced.
                                            If APIGroup is not specified, the specified Kind must be in the core API group.
                                            For any other third-party types, APIGroup is required.
                                          type: string
                                        kind:
                                          description: Kind is the type of resource
                                            being referenced
                                          type: string
                                        name:
                                          description: Name is the name of resource
                                            being referenced
                                          type: string
                                      required:
                                      - kind
                                      - name
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    dataSourceRef:
                                      description: |-
                                        dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
                                        volume is desired. This may be any object from a non-empty API group (non
                                        core object) or a PersistentVolumeClaim object.
                                        When this field is specified, volume binding will only succeed if the type of
                                        the specified object matches some installed volume populator or dynamic
                                        provisioner.
                                        This field will replace the functionality of the dataSource field and as such
                                        if both fields are non-empty, they must have the same value. For backwards
                                        compatibility, when namespace isn't specified in dataSourceRef,
                                        both fields (dataSource and dataSourceRef) will be set to the same
                                        value automatically if one of them is empty and the other is non-empty.
                                        When namespace is specified in dataSourceRef,
                                        dataSource isn't set to the same value and must be empty.
                                        There are three important differences between dataSource and dataSourceRef:
                                        * While dataSource only allows two specific types of objects, dataSourceRef
                                          allows any non-core object, as well as PersistentVolumeClaim objects.
                                        * While dataSource ignores disallowed values (dropping them), dataSourceRef
                                          preserves all values, and generates an error if a disallowed value is
                                          specified.
                                        * While dataSource only allows local objects, dataSourceRef allows objects
                                          in any namespaces.
                                        (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
                                        (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                      properties:
                                        apiGroup:
                                          description: |-
                                            APIGroup is the group for the resource being referenced.
                                            If APIGroup is not specified, the specified Kind must be in the core API group.
                                            For any other third-party types, APIGroup is required.
                                          type: string
                                        kind:
                                          description: Kind is the type of resource
                                            being referenced
                                          type: string
                                        name:
                                          description: Name is the name of resource
                                            being referenced
                                          type: string
                                        namespace:
                                          description: |-
                                            Namespace is the namespace of resource being referenced
                                            Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
                                            (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                          type: string
                                      required:
                                      - kind
                                      - name
                                      type: object
                                    resources:
                                      description: |-
                                        resources represents the minimum resources the volume should have.
                                        If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
                                        that are lower than previous value but must still be higher than capacity recorded in the
                                        status field of the claim.
                                        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                                      properties:
                                        limits:
                                          additionalProperties:
                                            anyOf:
                                            - type: integer
                                            - type: string
                                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                            x-kubernetes-int-or-string: true
                                          description: |-
                                            Limits describes the maximum amount of compute resources allowed.
                                            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                          type: object
                                        requests:
                                          additionalProperties:
                                            anyOf:
                                            - type: integer
                                            - type: string
                                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                            x-kubernetes-int-or-string: true
                                          description: |-
                                            Requests describes the minimum amount of compute resources required.
                                            If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                            otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                          type: object
                                      type: object
                                    selector:
                                      description: selector is a label query over
                                        volumes to consider for binding.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: |-
                                              A label selector requirement is a selector that contains values, a key, and an operator that
                                              relates the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: |-
                                                  operator represents a key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists and DoesNotExist.
                                                type: string
                                              values:
                                                description: |-
                                                  values is an array of string values. If the operator is In or NotIn,
                                                  the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                  the values array must be empty. This array is replaced during a strategic
                                                  merge patch.
                                                items:
                                                  type: string
                                                type: array
                                                x-kubernetes-list-type: atomic
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: |-
                                            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions, whose key field is "key", the
                                            operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    storageClassName:
                                      description: |-
                                        storageClassName is the name of the StorageClass required by the claim.
                                        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                                      type: string
                                    volumeAttributesClassName:
                                      description: |-
                                        volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
                                        If specified, the CSI driver will create or update the volume with the attributes defined
                                        in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
                                        it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
                                        will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
                                        If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
                                        will be set by the persistentvolume controller if it exists.
                                        If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
                                        set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
                                        exists.
                                        More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
                                        (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
                                      type: string
                                    volumeMode:
                                      description: |-
                                        volumeMode defines what type of volume is required by the claim.
                                        Value of Filesystem is implied when not included in claim spec.
                                      type: string
                                    volumeName:
                                      description: volumeName is the binding reference
                                        to the PersistentVolume backing this claim.
                                      type: string
                                  type: object
                              type: object
                            type: array
                        type: object
                      nullable: true
                      type: array
                    onlyApplyOSDPlacement:
                      type: boolean
                    scheduleAlways:
                      description: Whether to always schedule OSDs on a node even
                        if the node is not currently scheduleable or ready
                      type: boolean
                    storageClassDeviceSets:
                      items:
                        description: StorageClassDeviceSet is a storage class device
                          set
                        properties:
                          config:
                            additionalProperties:
                              type: string
                            description: Provider-specific device configuration
                            nullable: true
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                          count:
                            description: Count is the number of devices in this set
                            minimum: 1
                            type: integer
                          encrypted:
                            description: Whether to encrypt the deviceSet
                            type: boolean
                          name:
                            description: Name is a unique identifier for the set
                            type: string
                          placement:
                            nullable: true
                            properties:
                              nodeAffinity:
                                properties:
                                  preferredDuringSchedulingIgnoredDuringExecution:
                                    items:
                                      properties:
                                        preference:
                                          properties:
                                            matchExpressions:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            matchFields:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        weight:
                                          format: int32
                                          type: integer
                                      required:
                                      - preference
                                      - weight
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  requiredDuringSchedulingIgnoredDuringExecution:
                                    properties:
                                      nodeSelectorTerms:
                                        items:
                                          properties:
                                            matchExpressions:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            matchFields:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        type: array
                                        x-kubernetes-list-type: atomic
                                    required:
                                    - nodeSelectorTerms
                                    type: object
                                    x-kubernetes-map-type: atomic
                                type: object
                              podAffinity:
                                properties:
                                  preferredDuringSchedulingIgnoredDuringExecution:
                                    items:
                                      properties:
                                        podAffinityTerm:
                                          properties:
                                            labelSelector:
                                              properties:
                                                matchExpressions:
                                                  items:
                                                    properties:
                                                      key:
                                                        type: string
                                                      operator:
                                                        type: string
                                                      values:
                                                        items:
                                                          type: string
                                                        type: array
                                                        x-kubernetes-list-type: atomic
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            matchLabelKeys:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            mismatchLabelKeys:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            namespaceSelector:
                                              properties:
                                                matchExpressions:
                                                  items:
                                                    properties:
                                                      key:
                                                        type: string
                                                      operator:
                                                        type: string
                                                      values:
                                                        items:
                                                          type: string
                                                        type: array
                                                        x-kubernetes-list-type: atomic
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            namespaces:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            topologyKey:
                                              type: string
                                          required:
                                          - topologyKey
                                          type: object
                                        weight:
                                          format: int32
                                          type: integer
                                      required:
                                      - podAffinityTerm
                                      - weight
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  requiredDuringSchedulingIgnoredDuringExecution:
                                    items:
                                      properties:
                                        labelSelector:
                                          properties:
                                            matchExpressions:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        matchLabelKeys:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        mismatchLabelKeys:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        namespaceSelector:
                                          properties:
                                            matchExpressions:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaces:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        topologyKey:
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                type: object
                              podAntiAffinity:
                                properties:
                                  preferredDuringSchedulingIgnoredDuringExecution:
                                    items:
                                      properties:
                                        podAffinityTerm:
                                          properties:
                                            labelSelector:
                                              properties:
                                                matchExpressions:
                                                  items:
                                                    properties:
                                                      key:
                                                        type: string
                                                      operator:
                                                        type: string
                                                      values:
                                                        items:
                                                          type: string
                                                        type: array
                                                        x-kubernetes-list-type: atomic
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            matchLabelKeys:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            mismatchLabelKeys:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            namespaceSelector:
                                              properties:
                                                matchExpressions:
                                                  items:
                                                    properties:
                                                      key:
                                                        type: string
                                                      operator:
                                                        type: string
                                                      values:
                                                        items:
                                                          type: string
                                                        type: array
                                                        x-kubernetes-list-type: atomic
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            namespaces:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            topologyKey:
                                              type: string
                                          required:
                                          - topologyKey
                                          type: object
                                        weight:
                                          format: int32
                                          type: integer
                                      required:
                                      - podAffinityTerm
                                      - weight
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  requiredDuringSchedulingIgnoredDuringExecution:
                                    items:
                                      properties:
                                        labelSelector:
                                          properties:
                                            matchExpressions:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        matchLabelKeys:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        mismatchLabelKeys:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        namespaceSelector:
                                          properties:
                                            matchExpressions:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaces:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        topologyKey:
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                type: object
                              tolerations:
                                items:
                                  properties:
                                    effect:
                                      type: string
                                    key:
                                      type: string
                                    operator:
                                      type: string
                                    tolerationSeconds:
                                      format: int64
                                      type: integer
                                    value:
                                      type: string
                                  type: object
                                type: array
                              topologySpreadConstraints:
                                items:
                                  properties:
                                    labelSelector:
                                      properties:
                                        matchExpressions:
                                          items:
                                            properties:
                                              key:
                                                type: string
                                              operator:
                                                type: string
                                              values:
                                                items:
                                                  type: string
                                                type: array
                                                x-kubernetes-list-type: atomic
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    matchLabelKeys:
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    maxSkew:
                                      format: int32
                                      type: integer
                                    minDomains:
                                      format: int32
                                      type: integer
                                    nodeAffinityPolicy:
                                      type: string
                                    nodeTaintsPolicy:
                                      type: string
                                    topologyKey:
                                      type: string
                                    whenUnsatisfiable:
                                      type: string
                                  required:
                                  - maxSkew
                                  - topologyKey
                                  - whenUnsatisfiable
                                  type: object
                                type: array
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                          portable:
                            description: Portable represents OSD portability across
                              the hosts
                            type: boolean
                          preparePlacement:
                            nullable: true
                            properties:
                              nodeAffinity:
                                properties:
                                  preferredDuringSchedulingIgnoredDuringExecution:
                                    items:
                                      properties:
                                        preference:
                                          properties:
                                            matchExpressions:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            matchFields:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        weight:
                                          format: int32
                                          type: integer
                                      required:
                                      - preference
                                      - weight
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  requiredDuringSchedulingIgnoredDuringExecution:
                                    properties:
                                      nodeSelectorTerms:
                                        items:
                                          properties:
                                            matchExpressions:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            matchFields:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        type: array
                                        x-kubernetes-list-type: atomic
                                    required:
                                    - nodeSelectorTerms
                                    type: object
                                    x-kubernetes-map-type: atomic
                                type: object
                              podAffinity:
                                properties:
                                  preferredDuringSchedulingIgnoredDuringExecution:
                                    items:
                                      properties:
                                        podAffinityTerm:
                                          properties:
                                            labelSelector:
                                              properties:
                                                matchExpressions:
                                                  items:
                                                    properties:
                                                      key:
                                                        type: string
                                                      operator:
                                                        type: string
                                                      values:
                                                        items:
                                                          type: string
                                                        type: array
                                                        x-kubernetes-list-type: atomic
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            matchLabelKeys:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            mismatchLabelKeys:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            namespaceSelector:
                                              properties:
                                                matchExpressions:
                                                  items:
                                                    properties:
                                                      key:
                                                        type: string
                                                      operator:
                                                        type: string
                                                      values:
                                                        items:
                                                          type: string
                                                        type: array
                                                        x-kubernetes-list-type: atomic
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            namespaces:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            topologyKey:
                                              type: string
                                          required:
                                          - topologyKey
                                          type: object
                                        weight:
                                          format: int32
                                          type: integer
                                      required:
                                      - podAffinityTerm
                                      - weight
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  requiredDuringSchedulingIgnoredDuringExecution:
                                    items:
                                      properties:
                                        labelSelector:
                                          properties:
                                            matchExpressions:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        matchLabelKeys:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        mismatchLabelKeys:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        namespaceSelector:
                                          properties:
                                            matchExpressions:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaces:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        topologyKey:
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                type: object
                              podAntiAffinity:
                                properties:
                                  preferredDuringSchedulingIgnoredDuringExecution:
                                    items:
                                      properties:
                                        podAffinityTerm:
                                          properties:
                                            labelSelector:
                                              properties:
                                                matchExpressions:
                                                  items:
                                                    properties:
                                                      key:
                                                        type: string
                                                      operator:
                                                        type: string
                                                      values:
                                                        items:
                                                          type: string
                                                        type: array
                                                        x-kubernetes-list-type: atomic
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            matchLabelKeys:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            mismatchLabelKeys:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            namespaceSelector:
                                              properties:
                                                matchExpressions:
                                                  items:
                                                    properties:
                                                      key:
                                                        type: string
                                                      operator:
                                                        type: string
                                                      values:
                                                        items:
                                                          type: string
                                                        type: array
                                                        x-kubernetes-list-type: atomic
                                                    required:
                                                    - key
                                                    - operator
                                                    type: object
                                                  type: array
                                                  x-kubernetes-list-type: atomic
                                                matchLabels:
                                                  additionalProperties:
                                                    type: string
                                                  type: object
                                              type: object
                                              x-kubernetes-map-type: atomic
                                            namespaces:
                                              items:
                                                type: string
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            topologyKey:
                                              type: string
                                          required:
                                          - topologyKey
                                          type: object
                                        weight:
                                          format: int32
                                          type: integer
                                      required:
                                      - podAffinityTerm
                                      - weight
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  requiredDuringSchedulingIgnoredDuringExecution:
                                    items:
                                      properties:
                                        labelSelector:
                                          properties:
                                            matchExpressions:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        matchLabelKeys:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        mismatchLabelKeys:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        namespaceSelector:
                                          properties:
                                            matchExpressions:
                                              items:
                                                properties:
                                                  key:
                                                    type: string
                                                  operator:
                                                    type: string
                                                  values:
                                                    items:
                                                      type: string
                                                    type: array
                                                    x-kubernetes-list-type: atomic
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                              x-kubernetes-list-type: atomic
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              type: object
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        namespaces:
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        topologyKey:
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                type: object
                              tolerations:
                                items:
                                  properties:
                                    effect:
                                      type: string
                                    key:
                                      type: string
                                    operator:
                                      type: string
                                    tolerationSeconds:
                                      format: int64
                                      type: integer
                                    value:
                                      type: string
                                  type: object
                                type: array
                              topologySpreadConstraints:
                                items:
                                  properties:
                                    labelSelector:
                                      properties:
                                        matchExpressions:
                                          items:
                                            properties:
                                              key:
                                                type: string
                                              operator:
                                                type: string
                                              values:
                                                items:
                                                  type: string
                                                type: array
                                                x-kubernetes-list-type: atomic
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    matchLabelKeys:
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    maxSkew:
                                      format: int32
                                      type: integer
                                    minDomains:
                                      format: int32
                                      type: integer
                                    nodeAffinityPolicy:
                                      type: string
                                    nodeTaintsPolicy:
                                      type: string
                                    topologyKey:
                                      type: string
                                    whenUnsatisfiable:
                                      type: string
                                  required:
                                  - maxSkew
                                  - topologyKey
                                  - whenUnsatisfiable
                                  type: object
                                type: array
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                          resources:
                            description: ResourceRequirements describes the compute
                              resource requirements.
                            nullable: true
                            properties:
                              claims:
                                description: |-
                                  Claims lists the names of resources, defined in spec.resourceClaims,
                                  that are used by this container.

                                  This is an alpha field and requires enabling the
                                  DynamicResourceAllocation feature gate.

                                  This field is immutable. It can only be set for containers.
                                items:
                                  description: ResourceClaim references one entry
                                    in PodSpec.ResourceClaims.
                                  properties:
                                    name:
                                      description: |-
                                        Name must match the name of one entry in pod.spec.resourceClaims of
                                        the Pod where this field is used. It makes that resource available
                                        inside a container.
                                      type: string
                                    request:
                                      description: |-
                                        Request is the name chosen for a request in the referenced claim.
                                        If empty, everything from the claim is made available, otherwise
                                        only the result of this request.
                                      type: string
                                  required:
                                  - name
                                  type: object
                                type: array
                                x-kubernetes-list-map-keys:
                                - name
                                x-kubernetes-list-type: map
                              limits:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: |-
                                  Limits describes the maximum amount of compute resources allowed.
                                  More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                type: object
                              requests:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: |-
                                  Requests describes the minimum amount of compute resources required.
                                  If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                  otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                  More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                type: object
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                          schedulerName:
                            description: Scheduler name for OSD pod placement
                            type: string
                          tuneDeviceClass:
                            description: TuneSlowDeviceClass Tune the OSD when running
                              on a slow Device Class
                            type: boolean
                          tuneFastDeviceClass:
                            description: TuneFastDeviceClass Tune the OSD when running
                              on a fast Device Class
                            type: boolean
                          volumeClaimTemplates:
                            description: VolumeClaimTemplates is a list of PVC templates
                              for the underlying storage devices
                            items:
                              description: VolumeClaimTemplate is a simplified version
                                of K8s corev1's PVC. It has no type meta or status.
                              properties:
                                metadata:
                                  description: |-
                                    Standard object's metadata.
                                    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                                  properties:
                                    annotations:
                                      additionalProperties:
                                        type: string
                                      type: object
                                      x-kubernetes-preserve-unknown-fields: true
                                    finalizers:
                                      items:
                                        type: string
                                      type: array
                                    labels:
                                      additionalProperties:
                                        type: string
                                      type: object
                                    name:
                                      type: string
                                    namespace:
                                      type: string
                                  type: object
                                spec:
                                  description: |-
                                    spec defines the desired characteristics of a volume requested by a pod author.
                                    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                                  properties:
                                    accessModes:
                                      description: |-
                                        accessModes contains the desired access modes the volume should have.
                                        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    dataSource:
                                      description: |-
                                        dataSource field can be used to specify either:
                                        * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                                        * An existing PVC (PersistentVolumeClaim)
                                        If the provisioner or an external controller can support the specified data source,
                                        it will create a new volume based on the contents of the specified data source.
                                        When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
                                        and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
                                        If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                                      properties:
                                        apiGroup:
                                          description: |-
                                            APIGroup is the group for the resource being referenced.
                                            If APIGroup is not specified, the specified Kind must be in the core API group.
                                            For any other third-party types, APIGroup is required.
                                          type: string
                                        kind:
                                          description: Kind is the type of resource
                                            being referenced
                                          type: string
                                        name:
                                          description: Name is the name of resource
                                            being referenced
                                          type: string
                                      required:
                                      - kind
                                      - name
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    dataSourceRef:
                                      description: |-
                                        dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
                                        volume is desired. This may be any object from a non-empty API group (non
                                        core object) or a PersistentVolumeClaim object.
                                        When this field is specified, volume binding will only succeed if the type of
                                        the specified object matches some installed volume populator or dynamic
                                        provisioner.
                                        This field will replace the functionality of the dataSource field and as such
                                        if both fields are non-empty, they must have the same value. For backwards
                                        compatibility, when namespace isn't specified in dataSourceRef,
                                        both fields (dataSource and dataSourceRef) will be set to the same
                                        value automatically if one of them is empty and the other is non-empty.
                                        When namespace is specified in dataSourceRef,
                                        dataSource isn't set to the same value and must be empty.
                                        There are three important differences between dataSource and dataSourceRef:
                                        * While dataSource only allows two specific types of objects, dataSourceRef
                                          allows any non-core object, as well as PersistentVolumeClaim objects.
                                        * While dataSource ignores disallowed values (dropping them), dataSourceRef
                                          preserves all values, and generates an error if a disallowed value is
                                          specified.
                                        * While dataSource only allows local objects, dataSourceRef allows objects
                                          in any namespaces.
                                        (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
                                        (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                      properties:
                                        apiGroup:
                                          description: |-
                                            APIGroup is the group for the resource being referenced.
                                            If APIGroup is not specified, the specified Kind must be in the core API group.
                                            For any other third-party types, APIGroup is required.
                                          type: string
                                        kind:
                                          description: Kind is the type of resource
                                            being referenced
                                          type: string
                                        name:
                                          description: Name is the name of resource
                                            being referenced
                                          type: string
                                        namespace:
                                          description: |-
                                            Namespace is the namespace of resource being referenced
                                            Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
                                            (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                          type: string
                                      required:
                                      - kind
                                      - name
                                      type: object
                                    resources:
                                      description: |-
                                        resources represents the minimum resources the volume should have.
                                        If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
                                        that are lower than previous value but must still be higher than capacity recorded in the
                                        status field of the claim.
                                        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                                      properties:
                                        limits:
                                          additionalProperties:
                                            anyOf:
                                            - type: integer
                                            - type: string
                                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                            x-kubernetes-int-or-string: true
                                          description: |-
                                            Limits describes the maximum amount of compute resources allowed.
                                            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                          type: object
                                        requests:
                                          additionalProperties:
                                            anyOf:
                                            - type: integer
                                            - type: string
                                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                            x-kubernetes-int-or-string: true
                                          description: |-
                                            Requests describes the minimum amount of compute resources required.
                                            If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                            otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                          type: object
                                      type: object
                                    selector:
                                      description: selector is a label query over
                                        volumes to consider for binding.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: |-
                                              A label selector requirement is a selector that contains values, a key, and an operator that
                                              relates the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: |-
                                                  operator represents a key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists and DoesNotExist.
                                                type: string
                                              values:
                                                description: |-
                                                  values is an array of string values. If the operator is In or NotIn,
                                                  the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                                  the values array must be empty. This array is replaced during a strategic
                                                  merge patch.
                                                items:
                                                  type: string
                                                type: array
                                                x-kubernetes-list-type: atomic
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                          x-kubernetes-list-type: atomic
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: |-
                                            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions, whose key field is "key", the
                                            operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    storageClassName:
                                      description: |-
                                        storageClassName is the name of the StorageClass required by the claim.
                                        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                                      type: string
                                    volumeAttributesClassName:
                                      description: |-
                                        volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
                                        If specified, the CSI driver will create or update the volume with the attributes defined
                                        in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
                                        it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
                                        will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
                                        If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
                                        will be set by the persistentvolume controller if it exists.
                                        If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
                                        set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
                                        exists.
                                        More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
                                        (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
                                      type: string
                                    volumeMode:
                                      description: |-
                                        volumeMode defines what type of volume is required by the claim.
                                        Value of Filesystem is implied when not included in claim spec.
                                      type: string
                                    volumeName:
                                      description: volumeName is the binding reference
                                        to the PersistentVolume backing this claim.
                                      type: string
                                  type: object
                              type: object
                            type: array
                        required:
                        - count
                        - name
                        - volumeClaimTemplates
                        type: object
                      nullable: true
                      type: array
                    store:
                      description: OSDStore is the backend storage type used for creating
                        the OSDs
                      properties:
                        type:
                          description: Type of backend storage to be used while creating
                            OSDs. If empty, then bluestore will be used
                          enum:
                          - bluestore
                          - bluestore-rdr
                          type: string
                        updateStore:
                          description: |-
                            UpdateStore updates the backend store for existing OSDs. It destroys each OSD one at a time, cleans up the backing disk
                            and prepares same OSD on that disk
                          pattern: ^$|^yes-really-update-store$
                          type: string
                      type: object
                    useAllDevices:
                      description: Whether to consume all the storage devices found
                        on a machine
                      type: boolean
                    useAllNodes:
                      type: boolean
                    volumeClaimTemplates:
                      description: PersistentVolumeClaims to use as storage
                      items:
                        description: VolumeClaimTemplate is a simplified version of
                          K8s corev1's PVC. It has no type meta or status.
                        properties:
                          metadata:
                            description: |-
                              Standard object's metadata.
                              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                            properties:
                              annotations:
                                additionalProperties:
                                  type: string
                                type: object
                              finalizers:
                                items:
                                  type: string
                                type: array
                              labels:
                                additionalProperties:
                                  type: string
                                type: object
                              name:
                                type: string
                              namespace:
                                type: string
                            type: object
                          spec:
                            description: |-
                              spec defines the desired characteristics of a volume requested by a pod author.
                              More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                            properties:
                              accessModes:
                                description: |-
                                  accessModes contains the desired access modes the volume should have.
                                  More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              dataSource:
                                description: |-
                                  dataSource field can be used to specify either:
                                  * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                                  * An existing PVC (PersistentVolumeClaim)
                                  If the provisioner or an external controller can support the specified data source,
                                  it will create a new volume based on the contents of the specified data source.
                                  When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
                                  and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
                                  If the namespace is specified, then dataSourceRef will not be copied to dataSource.
                                properties:
                                  apiGroup:
                                    description: |-
                                      APIGroup is the group for the resource being referenced.
                                      If APIGroup is not specified, the specified Kind must be in the core API group.
                                      For any other third-party types, APIGroup is required.
                                    type: string
                                  kind:
                                    description: Kind is the type of resource being
                                      referenced
                                    type: string
                                  name:
                                    description: Name is the name of resource being
                                      referenced
                                    type: string
                                required:
                                - kind
                                - name
                                type: object
                                x-kubernetes-map-type: atomic
                              dataSourceRef:
                                description: |-
                                  dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
                                  volume is desired. This may be any object from a non-empty API group (non
                                  core object) or a PersistentVolumeClaim object.
                                  When this field is specified, volume binding will only succeed if the type of
                                  the specified object matches some installed volume populator or dynamic
                                  provisioner.
                                  This field will replace the functionality of the dataSource field and as such
                                  if both fields are non-empty, they must have the same value. For backwards
                                  compatibility, when namespace isn't specified in dataSourceRef,
                                  both fields (dataSource and dataSourceRef) will be set to the same
                                  value automatically if one of them is empty and the other is non-empty.
                                  When namespace is specified in dataSourceRef,
                                  dataSource isn't set to the same value and must be empty.
                                  There are three important differences between dataSource and dataSourceRef:
                                  * While dataSource only allows two specific types of objects, dataSourceRef
                                    allows any non-core object, as well as PersistentVolumeClaim objects.
                                  * While dataSource ignores disallowed values (dropping them), dataSourceRef
                                    preserves all values, and generates an error if a disallowed value is
                                    specified.
                                  * While dataSource only allows local objects, dataSourceRef allows objects
                                    in any namespaces.
                                  (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
                                  (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                properties:
                                  apiGroup:
                                    description: |-
                                      APIGroup is the group for the resource being referenced.
                                      If APIGroup is not specified, the specified Kind must be in the core API group.
                                      For any other third-party types, APIGroup is required.
                                    type: string
                                  kind:
                                    description: Kind is the type of resource being
                                      referenced
                                    type: string
                                  name:
                                    description: Name is the name of resource being
                                      referenced
                                    type: string
                                  namespace:
                                    description: |-
                                      Namespace is the namespace of resource being referenced
                                      Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
                                      (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
                                    type: string
                                required:
                                - kind
                                - name
                                type: object
                              resources:
                                description: |-
                                  resources represents the minimum resources the volume should have.
                                  If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
                                  that are lower than previous value but must still be higher than capacity recorded in the
                                  status field of the claim.
                                  More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                                properties:
                                  limits:
                                    additionalProperties:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    description: |-
                                      Limits describes the maximum amount of compute resources allowed.
                                      More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                    type: object
                                  requests:
                                    additionalProperties:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    description: |-
                                      Requests describes the minimum amount of compute resources required.
                                      If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                                      otherwise to an implementation-defined value. Requests cannot exceed Limits.
                                      More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                                    type: object
                                type: object
                              selector:
                                description: selector is a label query over volumes
                                  to consider for binding.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: |-
                                        A label selector requirement is a selector that contains values, a key, and an operator that
                                        relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: |-
                                            operator represents a key's relationship to a set of values.
                                            Valid operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: |-
                                            values is an array of string values. If the operator is In or NotIn,
                                            the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array is replaced during a strategic
                                            merge patch.
                                          items:
                                            type: string
                                          type: array
                                          x-kubernetes-list-type: atomic
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                    x-kubernetes-list-type: atomic
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: |-
                                      matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions, whose key field is "key", the
                                      operator is "In", and the values array contains only "value". The requirements are ANDed.
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              storageClassName:
                                description: |-
                                  storageClassName is the name of the StorageClass required by the claim.
                                  More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                                type: string
                              volumeAttributesClassName:
                                description: |-
                                  volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
                                  If specified, the CSI driver will create or update the volume with the attributes defined
                                  in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
                                  it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
                                  will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
                                  If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
                                  will be set by the persistentvolume controller if it exists.
                                  If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
                                  set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
                                  exists.
                                  More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
                                  (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
                                type: string
                              volumeMode:
                                description: |-
                                  volumeMode defines what type of volume is required by the claim.
                                  Value of Filesystem is implied when not included in claim spec.
                                type: string
                              volumeName:
                                description: volumeName is the binding reference to
                                  the PersistentVolume backing this claim.
                                type: string
                            type: object
                        type: object
                      type: array
                  type: object
                upgradeOSDRequiresHealthyPGs:
                  description: |-
                    UpgradeOSDRequiresHealthyPGs defines if OSD upgrade requires PGs are clean. If set to `true` OSD upgrade process won't start until PGs are healthy.
                    This configuration will be ignored if `skipUpgradeChecks` is `true`.
                    Default is false.
                  type: boolean
                waitTimeoutForHealthyOSDInMinutes:
                  description: |-
                    WaitTimeoutForHealthyOSDInMinutes defines the time the operator would wait before an OSD can be stopped for upgrade or restart.
                    If the timeout exceeds and OSD is not ok to stop, then the operator would skip upgrade for the current OSD and proceed with the next one
                    if `continueUpgradeAfterChecksEvenIfNotHealthy` is `false`. If `continueUpgradeAfterChecksEvenIfNotHealthy` is `true`, then operator would
                    continue with the upgrade of an OSD even if its not ok to stop after the timeout. This timeout won't be applied if `skipUpgradeChecks` is `true`.
                    The default wait timeout is 10 minutes.
                  format: int64
                  type: integer
              type: object
            status:
              description: ClusterStatus represents the status of a Ceph cluster
              nullable: true
              properties:
                ceph:
                  description: CephStatus is the details health of a Ceph Cluster
                  properties:
                    capacity:
                      description: Capacity is the capacity information of a Ceph
                        Cluster
                      properties:
                        bytesAvailable:
                          format: int64
                          type: integer
                        bytesTotal:
                          format: int64
                          type: integer
                        bytesUsed:
                          format: int64
                          type: integer
                        lastUpdated:
                          type: string
                      type: object
                    details:
                      additionalProperties:
                        description: CephHealthMessage represents the health message
                          of a Ceph Cluster
                        properties:
                          message:
                            type: string
                          severity:
                            type: string
                        required:
                        - message
                        - severity
                        type: object
                      type: object
                    fsid:
                      type: string
                    health:
                      type: string
                    lastChanged:
                      type: string
                    lastChecked:
                      type: string
                    previousHealth:
                      type: string
                    versions:
                      description: CephDaemonsVersions show the current ceph version
                        for different ceph daemons
                      properties:
                        cephfs-mirror:
                          additionalProperties:
                            type: integer
                          description: CephFSMirror shows CephFSMirror Ceph version
                          type: object
                        mds:
                          additionalProperties:
                            type: integer
                          description: Mds shows Mds Ceph version
                          type: object
                        mgr:
                          additionalProperties:
                            type: integer
                          description: Mgr shows Mgr Ceph version
                          type: object
                        mon:
                          additionalProperties:
                            type: integer
                          description: Mon shows Mon Ceph version
                          type: object
                        osd:
                          additionalProperties:
                            type: integer
                          description: Osd shows Osd Ceph version
                          type: object
                        overall:
                          additionalProperties:
                            type: integer
                          description: Overall shows overall Ceph version
                          type: object
                        rbd-mirror:
                          additionalProperties:
                            type: integer
                          description: RbdMirror shows RbdMirror Ceph version
                          type: object
                        rgw:
                          additionalProperties:
                            type: integer
                          description: Rgw shows Rgw Ceph version
                          type: object
                      type: object
                  type: object
                conditions:
                  items:
                    description: Condition represents a status condition on any Rook-Ceph
                      Custom Resource.
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        format: date-time
                        type: string
                      message:
                        type: string
                      reason:
                        description: ConditionReason is a reason for a condition
                        type: string
                      status:
                        type: string
                      type:
                        description: ConditionType represent a resource's status
                        type: string
                    type: object
                  type: array
                message:
                  type: string
                observedGeneration:
                  description: ObservedGeneration is the latest generation observed
                    by the controller.
                  format: int64
                  type: integer
                phase:
                  description: ConditionType represent a resource's status
                  type: string
                state:
                  description: ClusterState represents the state of a Ceph Cluster
                  type: string
                storage:
                  description: CephStorage represents flavors of Ceph Cluster Storage
                  properties:
                    deprecatedOSDs:
                      additionalProperties:
                        items:
                          type: integer
                        type: array
                      type: object
                    deviceClasses:
                      items:
                        description: DeviceClasses represents device classes of a
                          Ceph Cluster
                        properties:
                          name:
                            type: string
                        type: object
                      type: array
                    osd:
                      description: OSDStatus represents OSD status of the ceph Cluster
                      properties:
                        migrationStatus:
                          description: MigrationStatus status represents the current
                            status of any OSD migration.
                          properties:
                            pending:
                              type: integer
                          type: object
                        storeType:
                          additionalProperties:
                            type: integer
                          description: StoreType is a mapping between the OSD backend
                            stores and number of OSDs using these stores
                          type: object
                      type: object
                  type: object
                version:
                  description: ClusterVersion represents the version of a Ceph Cluster
                  properties:
                    image:
                      type: string
                    version:
                      type: string
                  type: object
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: CephCluster
      listKind: CephClusterList
      plural: cephclusters
      shortNames:
      - ceph
      singular: cephcluster
    conditions:
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:05:13Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.7.0
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.7.0"},"creationTimestamp":null,"name":"bfdprofiles.metallb.io"},"spec":{"group":"metallb.io","names":{"kind":"BFDProfile","listKind":"BFDProfileList","plural":"bfdprofiles","singular":"bfdprofile"},"scope":"Namespaced","versions":[{"name":"v1beta1","schema":{"openAPIV3Schema":{"description":"BFDProfile represents the settings of the bfd session that can be optionally associated with a BGP session.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"BFDProfileSpec defines the desired state of BFDProfile.","properties":{"detectMultiplier":{"description":"Configures the detection multiplier to determine packet loss. The remote transmission interval will be multiplied by this value to determine the connection loss detection timer.","format":"int32","maximum":255,"minimum":2,"type":"integer"},"echoInterval":{"description":"Configures the minimal echo receive transmission interval that this system is capable of handling in milliseconds. Defaults to 50ms","format":"int32","maximum":60000,"minimum":10,"type":"integer"},"echoMode":{"description":"Enables or disables the echo transmission mode. This mode is disabled by default, and not supported on multi hops setups.","type":"boolean"},"minimumTtl":{"description":"For multi hop sessions only: configure the minimum expected TTL for an incoming BFD control packet.","format":"int32","maximum":254,"minimum":1,"type":"integer"},"passiveMode":{"description":"Mark session as passive: a passive session will not attempt to start the connection and will wait for control packets from peer before it begins replying.","type":"boolean"},"receiveInterval":{"description":"The minimum interval that this system is capable of receiving control packets in milliseconds. Defaults to 300ms.","format":"int32","maximum":60000,"minimum":10,"type":"integer"},"transmitInterval":{"description":"The minimum transmission interval (less jitter) that this system wants to use to send BFD control packets in milliseconds. Defaults to 300ms","format":"int32","maximum":60000,"minimum":10,"type":"integer"}},"type":"object"},"status":{"description":"BFDProfileStatus defines the observed state of BFDProfile.","type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T03:45:55Z"
    generation: 1
    name: bfdprofiles.metallb.io
    resourceVersion: "13852"
    uid: ed5c8cde-3207-4f8f-a0d7-225755a26e6f
  spec:
    conversion:
      strategy: None
    group: metallb.io
    names:
      kind: BFDProfile
      listKind: BFDProfileList
      plural: bfdprofiles
      singular: bfdprofile
    scope: Namespaced
    versions:
    - name: v1beta1
      schema:
        openAPIV3Schema:
          description: BFDProfile represents the settings of the bfd session that
            can be optionally associated with a BGP session.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: BFDProfileSpec defines the desired state of BFDProfile.
              properties:
                detectMultiplier:
                  description: Configures the detection multiplier to determine packet
                    loss. The remote transmission interval will be multiplied by this
                    value to determine the connection loss detection timer.
                  format: int32
                  maximum: 255
                  minimum: 2
                  type: integer
                echoInterval:
                  description: Configures the minimal echo receive transmission interval
                    that this system is capable of handling in milliseconds. Defaults
                    to 50ms
                  format: int32
                  maximum: 60000
                  minimum: 10
                  type: integer
                echoMode:
                  description: Enables or disables the echo transmission mode. This
                    mode is disabled by default, and not supported on multi hops setups.
                  type: boolean
                minimumTtl:
                  description: 'For multi hop sessions only: configure the minimum
                    expected TTL for an incoming BFD control packet.'
                  format: int32
                  maximum: 254
                  minimum: 1
                  type: integer
                passiveMode:
                  description: 'Mark session as passive: a passive session will not
                    attempt to start the connection and will wait for control packets
                    from peer before it begins replying.'
                  type: boolean
                receiveInterval:
                  description: The minimum interval that this system is capable of
                    receiving control packets in milliseconds. Defaults to 300ms.
                  format: int32
                  maximum: 60000
                  minimum: 10
                  type: integer
                transmitInterval:
                  description: The minimum transmission interval (less jitter) that
                    this system wants to use to send BFD control packets in milliseconds.
                    Defaults to 300ms
                  format: int32
                  maximum: 60000
                  minimum: 10
                  type: integer
              type: object
            status:
              description: BFDProfileStatus defines the observed state of BFDProfile.
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: BFDProfile
      listKind: BFDProfileList
      plural: bfdprofiles
      singular: bfdprofile
    conditions:
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1beta1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.7.0
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.7.0"},"creationTimestamp":null,"name":"bgpadvertisements.metallb.io"},"spec":{"group":"metallb.io","names":{"kind":"BGPAdvertisement","listKind":"BGPAdvertisementList","plural":"bgpadvertisements","singular":"bgpadvertisement"},"scope":"Namespaced","versions":[{"name":"v1beta1","schema":{"openAPIV3Schema":{"description":"BGPAdvertisement allows to advertise the IPs coming from the selected IPAddressPools via BGP, setting the parameters of the BGP Advertisement.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"BGPAdvertisementSpec defines the desired state of BGPAdvertisement.","properties":{"aggregationLength":{"default":32,"description":"The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix. Defaults to 32. Works for IPv4 addresses.","format":"int32","minimum":1,"type":"integer"},"aggregationLengthV6":{"default":128,"description":"The aggregation-length advertisement option lets you “roll up” the /128s into a larger prefix. Defaults to 128. Works for IPv6 addresses.","format":"int32","type":"integer"},"communities":{"description":"The BGP communities to be associated with the announcement. Each item can be a community of the form 1234:1234 or the name of an alias defined in the Community CRD.","items":{"type":"string"},"type":"array"},"ipAddressPoolSelectors":{"description":"A selector for the IPAddressPools which would get advertised via this advertisement. If no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.","items":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"type":"array"},"ipAddressPools":{"description":"The list of IPAddressPools to advertise via this advertisement, selected by name.","items":{"type":"string"},"type":"array"},"localPref":{"description":"The BGP LOCAL_PREF attribute which is used by BGP best path algorithm, Path with higher localpref is preferred over one with lower localpref.","format":"int32","type":"integer"},"nodeSelectors":{"description":"NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.","items":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"type":"array"},"peers":{"description":"Peers limits the bgppeer to advertise the ips of the selected pools to. When empty, the loadbalancer IP is announced to all the BGPPeers configured.","items":{"type":"string"},"type":"array"}},"type":"object"},"status":{"description":"BGPAdvertisementStatus defines the observed state of BGPAdvertisement.","type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T03:45:55Z"
    generation: 1
    name: bgpadvertisements.metallb.io
    resourceVersion: "13856"
    uid: 484db062-d463-4b4f-b72f-39894d66e449
  spec:
    conversion:
      strategy: None
    group: metallb.io
    names:
      kind: BGPAdvertisement
      listKind: BGPAdvertisementList
      plural: bgpadvertisements
      singular: bgpadvertisement
    scope: Namespaced
    versions:
    - name: v1beta1
      schema:
        openAPIV3Schema:
          description: BGPAdvertisement allows to advertise the IPs coming from the
            selected IPAddressPools via BGP, setting the parameters of the BGP Advertisement.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: BGPAdvertisementSpec defines the desired state of BGPAdvertisement.
              properties:
                aggregationLength:
                  default: 32
                  description: The aggregation-length advertisement option lets you
                    “roll up” the /32s into a larger prefix. Defaults to 32. Works
                    for IPv4 addresses.
                  format: int32
                  minimum: 1
                  type: integer
                aggregationLengthV6:
                  default: 128
                  description: The aggregation-length advertisement option lets you
                    “roll up” the /128s into a larger prefix. Defaults to 128. Works
                    for IPv6 addresses.
                  format: int32
                  type: integer
                communities:
                  description: The BGP communities to be associated with the announcement.
                    Each item can be a community of the form 1234:1234 or the name
                    of an alias defined in the Community CRD.
                  items:
                    type: string
                  type: array
                ipAddressPoolSelectors:
                  description: A selector for the IPAddressPools which would get advertised
                    via this advertisement. If no IPAddressPool is selected by this
                    or by the list, the advertisement is applied to all the IPAddressPools.
                  items:
                    description: A label selector is a label query over a set of resources.
                      The result of matchLabels and matchExpressions are ANDed. An
                      empty label selector matches all objects. A null label selector
                      matches no objects.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                  type: array
                ipAddressPools:
                  description: The list of IPAddressPools to advertise via this advertisement,
                    selected by name.
                  items:
                    type: string
                  type: array
                localPref:
                  description: The BGP LOCAL_PREF attribute which is used by BGP best
                    path algorithm, Path with higher localpref is preferred over one
                    with lower localpref.
                  format: int32
                  type: integer
                nodeSelectors:
                  description: NodeSelectors allows to limit the nodes to announce
                    as next hops for the LoadBalancer IP. When empty, all the nodes
                    having  are announced as next hops.
                  items:
                    description: A label selector is a label query over a set of resources.
                      The result of matchLabels and matchExpressions are ANDed. An
                      empty label selector matches all objects. A null label selector
                      matches no objects.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                  type: array
                peers:
                  description: Peers limits the bgppeer to advertise the ips of the
                    selected pools to. When empty, the loadbalancer IP is announced
                    to all the BGPPeers configured.
                  items:
                    type: string
                  type: array
              type: object
            status:
              description: BGPAdvertisementStatus defines the observed state of BGPAdvertisement.
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: BGPAdvertisement
      listKind: BGPAdvertisementList
      plural: bgpadvertisements
      singular: bgpadvertisement
    conditions:
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1beta1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.7.0
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.7.0"},"creationTimestamp":null,"name":"communities.metallb.io"},"spec":{"group":"metallb.io","names":{"kind":"Community","listKind":"CommunityList","plural":"communities","singular":"community"},"scope":"Namespaced","versions":[{"name":"v1beta1","schema":{"openAPIV3Schema":{"description":"Community is a collection of aliases for communities. Users can define named aliases to be used in the BGPPeer CRD.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"CommunitySpec defines the desired state of Community.","properties":{"communities":{"items":{"properties":{"name":{"description":"The name of the alias for the community.","type":"string"},"value":{"description":"The BGP community value corresponding to the given name.","type":"string"}},"type":"object"},"type":"array"}},"type":"object"},"status":{"description":"CommunityStatus defines the observed state of Community.","type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T03:45:55Z"
    generation: 1
    name: communities.metallb.io
    resourceVersion: "13862"
    uid: 730f73e7-d5ca-457d-9cf0-d8a38c622a43
  spec:
    conversion:
      strategy: None
    group: metallb.io
    names:
      kind: Community
      listKind: CommunityList
      plural: communities
      singular: community
    scope: Namespaced
    versions:
    - name: v1beta1
      schema:
        openAPIV3Schema:
          description: Community is a collection of aliases for communities. Users
            can define named aliases to be used in the BGPPeer CRD.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: CommunitySpec defines the desired state of Community.
              properties:
                communities:
                  items:
                    properties:
                      name:
                        description: The name of the alias for the community.
                        type: string
                      value:
                        description: The BGP community value corresponding to the
                          given name.
                        type: string
                    type: object
                  type: array
              type: object
            status:
              description: CommunityStatus defines the observed state of Community.
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: Community
      listKind: CommunityList
      plural: communities
      singular: community
    conditions:
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1beta1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.7.0
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.7.0"},"creationTimestamp":null,"name":"ipaddresspools.metallb.io"},"spec":{"group":"metallb.io","names":{"kind":"IPAddressPool","listKind":"IPAddressPoolList","plural":"ipaddresspools","singular":"ipaddresspool"},"scope":"Namespaced","versions":[{"name":"v1beta1","schema":{"openAPIV3Schema":{"description":"IPAddressPool represents a pool of IP addresses that can be allocated to LoadBalancer services.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"IPAddressPoolSpec defines the desired state of IPAddressPool.","properties":{"addresses":{"description":"A list of IP address ranges over which MetalLB has authority. You can list multiple ranges in a single pool, they will all share the same settings. Each range can be either a CIDR prefix, or an explicit start-end range of IPs.","items":{"type":"string"},"type":"array"},"autoAssign":{"default":true,"description":"AutoAssign flag used to prevent MetallB from automatic allocation for a pool.","type":"boolean"}},"required":["addresses"],"type":"object"},"status":{"description":"IPAddressPoolStatus defines the observed state of IPAddressPool.","type":"object"}},"required":["spec"],"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T03:45:55Z"
    generation: 1
    name: ipaddresspools.metallb.io
    resourceVersion: "13864"
    uid: 45fc7884-3bbc-4508-b486-d5f45854121b
  spec:
    conversion:
      strategy: None
    group: metallb.io
    names:
      kind: IPAddressPool
      listKind: IPAddressPoolList
      plural: ipaddresspools
      singular: ipaddresspool
    scope: Namespaced
    versions:
    - name: v1beta1
      schema:
        openAPIV3Schema:
          description: IPAddressPool represents a pool of IP addresses that can be
            allocated to LoadBalancer services.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: IPAddressPoolSpec defines the desired state of IPAddressPool.
              properties:
                addresses:
                  description: A list of IP address ranges over which MetalLB has
                    authority. You can list multiple ranges in a single pool, they
                    will all share the same settings. Each range can be either a CIDR
                    prefix, or an explicit start-end range of IPs.
                  items:
                    type: string
                  type: array
                autoAssign:
                  default: true
                  description: AutoAssign flag used to prevent MetallB from automatic
                    allocation for a pool.
                  type: boolean
              required:
              - addresses
              type: object
            status:
              description: IPAddressPoolStatus defines the observed state of IPAddressPool.
              type: object
          required:
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: IPAddressPool
      listKind: IPAddressPoolList
      plural: ipaddresspools
      singular: ipaddresspool
    conditions:
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1beta1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.7.0
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.7.0"},"creationTimestamp":null,"name":"l2advertisements.metallb.io"},"spec":{"group":"metallb.io","names":{"kind":"L2Advertisement","listKind":"L2AdvertisementList","plural":"l2advertisements","singular":"l2advertisement"},"scope":"Namespaced","versions":[{"name":"v1beta1","schema":{"openAPIV3Schema":{"description":"L2Advertisement allows to advertise the LoadBalancer IPs provided by the selected pools via L2.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"L2AdvertisementSpec defines the desired state of L2Advertisement.","properties":{"ipAddressPoolSelectors":{"description":"A selector for the IPAddressPools which would get advertised via this advertisement. If no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.","items":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"type":"array"},"ipAddressPools":{"description":"The list of IPAddressPools to advertise via this advertisement, selected by name.","items":{"type":"string"},"type":"array"},"nodeSelectors":{"description":"NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.","items":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"type":"array"}},"type":"object"},"status":{"description":"L2AdvertisementStatus defines the observed state of L2Advertisement.","type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T03:45:55Z"
    generation: 1
    name: l2advertisements.metallb.io
    resourceVersion: "13865"
    uid: 55427179-e653-41ee-a051-b21afb47d2f6
  spec:
    conversion:
      strategy: None
    group: metallb.io
    names:
      kind: L2Advertisement
      listKind: L2AdvertisementList
      plural: l2advertisements
      singular: l2advertisement
    scope: Namespaced
    versions:
    - name: v1beta1
      schema:
        openAPIV3Schema:
          description: L2Advertisement allows to advertise the LoadBalancer IPs provided
            by the selected pools via L2.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: L2AdvertisementSpec defines the desired state of L2Advertisement.
              properties:
                ipAddressPoolSelectors:
                  description: A selector for the IPAddressPools which would get advertised
                    via this advertisement. If no IPAddressPool is selected by this
                    or by the list, the advertisement is applied to all the IPAddressPools.
                  items:
                    description: A label selector is a label query over a set of resources.
                      The result of matchLabels and matchExpressions are ANDed. An
                      empty label selector matches all objects. A null label selector
                      matches no objects.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                  type: array
                ipAddressPools:
                  description: The list of IPAddressPools to advertise via this advertisement,
                    selected by name.
                  items:
                    type: string
                  type: array
                nodeSelectors:
                  description: NodeSelectors allows to limit the nodes to announce
                    as next hops for the LoadBalancer IP. When empty, all the nodes
                    having  are announced as next hops.
                  items:
                    description: A label selector is a label query over a set of resources.
                      The result of matchLabels and matchExpressions are ANDed. An
                      empty label selector matches all objects. A null label selector
                      matches no objects.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                  type: array
              type: object
            status:
              description: L2AdvertisementStatus defines the observed state of L2Advertisement.
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: L2Advertisement
      listKind: L2AdvertisementList
      plural: l2advertisements
      singular: l2advertisement
    conditions:
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1beta1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.7.0
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.7.0"},"name":"addresspools.metallb.io"},"spec":{"conversion":{"strategy":"Webhook","webhook":{"clientConfig":{"caBundle":"Cg==","service":{"name":"webhook-service","namespace":"metallb-system","path":"/convert"}},"conversionReviewVersions":["v1alpha1","v1beta1"]}},"group":"metallb.io","names":{"kind":"AddressPool","listKind":"AddressPoolList","plural":"addresspools","singular":"addresspool"},"scope":"Namespaced","versions":[{"deprecated":true,"deprecationWarning":"metallb.io v1alpha1 AddressPool is deprecated","name":"v1alpha1","schema":{"openAPIV3Schema":{"description":"AddressPool is the Schema for the addresspools API.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"AddressPoolSpec defines the desired state of AddressPool.","properties":{"addresses":{"description":"A list of IP address ranges over which MetalLB has authority. You can list multiple ranges in a single pool, they will all share the same settings. Each range can be either a CIDR prefix, or an explicit start-end range of IPs.","items":{"type":"string"},"type":"array"},"autoAssign":{"default":true,"description":"AutoAssign flag used to prevent MetallB from automatic allocation for a pool.","type":"boolean"},"bgpAdvertisements":{"description":"When an IP is allocated from this pool, how should it be translated into BGP announcements?","items":{"properties":{"aggregationLength":{"default":32,"description":"The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix.","format":"int32","minimum":1,"type":"integer"},"aggregationLengthV6":{"default":128,"description":"Optional, defaults to 128 (i.e. no aggregation) if not specified.","format":"int32","type":"integer"},"communities":{"description":"BGP communities","items":{"type":"string"},"type":"array"},"localPref":{"description":"BGP LOCAL_PREF attribute which is used by BGP best path algorithm, Path with higher localpref is preferred over one with lower localpref.","format":"int32","type":"integer"}},"type":"object"},"type":"array"},"protocol":{"description":"Protocol can be used to select how the announcement is done.","enum":["layer2","bgp"],"type":"string"}},"required":["addresses","protocol"],"type":"object"},"status":{"description":"AddressPoolStatus defines the observed state of AddressPool.","type":"object"}},"required":["spec"],"type":"object"}},"served":true,"storage":false,"subresources":{"status":{}}},{"deprecated":true,"deprecationWarning":"metallb.io v1beta1 AddressPool is deprecated, consider using IPAddressPool","name":"v1beta1","schema":{"openAPIV3Schema":{"description":"AddressPool represents a pool of IP addresses that can be allocated to LoadBalancer services. AddressPool is deprecated and being replaced by IPAddressPool.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"AddressPoolSpec defines the desired state of AddressPool.","properties":{"addresses":{"description":"A list of IP address ranges over which MetalLB has authority. You can list multiple ranges in a single pool, they will all share the same settings. Each range can be either a CIDR prefix, or an explicit start-end range of IPs.","items":{"type":"string"},"type":"array"},"autoAssign":{"default":true,"description":"AutoAssign flag used to prevent MetallB from automatic allocation for a pool.","type":"boolean"},"bgpAdvertisements":{"description":"Drives how an IP allocated from this pool should translated into BGP announcements.","items":{"properties":{"aggregationLength":{"default":32,"description":"The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix.","format":"int32","minimum":1,"type":"integer"},"aggregationLengthV6":{"default":128,"description":"Optional, defaults to 128 (i.e. no aggregation) if not specified.","format":"int32","type":"integer"},"communities":{"description":"BGP communities to be associated with the given advertisement.","items":{"type":"string"},"type":"array"},"localPref":{"description":"BGP LOCAL_PREF attribute which is used by BGP best path algorithm, Path with higher localpref is preferred over one with lower localpref.","format":"int32","type":"integer"}},"type":"object"},"type":"array"},"protocol":{"description":"Protocol can be used to select how the announcement is done.","enum":["layer2","bgp"],"type":"string"}},"required":["addresses","protocol"],"type":"object"},"status":{"description":"AddressPoolStatus defines the observed state of AddressPool.","type":"object"}},"required":["spec"],"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T03:45:55Z"
    generation: 2
    name: addresspools.metallb.io
    resourceVersion: "13945"
    uid: 0c0a746c-2712-4203-b62f-9df71fce9f93
  spec:
    conversion:
      strategy: Webhook
      webhook:
        clientConfig:
          caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFoTVJBd0RnWURWUVFLRXdkdFpYUmgKYkd4aU1RMHdDd1lEVlFRREV3UmpaWEowTUI0WERUSTFNRGN6TVRBeU5EWXdORm9YRFRNMU1EY3lPVEF6TkRZdwpORm93SVRFUU1BNEdBMVVFQ2hNSGJXVjBZV3hzWWpFTk1Bc0dBMVVFQXhNRVkyVnlkRENDQVNJd0RRWUpLb1pJCmh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTVdOUjArVHdlbEVkWVlwSnNOckVsMlZGQlJxM2x4WjVmYVcKSjA0YUl5YlA3ekpmZkJlbnMxQzJGUHhjV3UwbnByWnUrTEkyckp2d1krOTVHemtRMkxHOEIvakEyZW9pSjAxVwpnaW9uanlRWkJ6WmhmUGI5eVBUN3ByN3FJVTVaNXFPRUdWRUdzcG5mTVppOXVibEJGbzVlcUNNYklPTEcyenE4CnE2OXNFa2wvbFMyMHFGRXVYaUdQMkJsOUhPd1laTkN2SjVmMFJ1MVMxUWo5WkovRlo4VWV2dytCOVFUb3lWcXkKdnplUm9oTEhEMGd4a0FjWW9jSmVabzRKK21EZlc4ampwS0V5UXlsODhxdk1uMEpucllkdDB5SWgxQVhHbzd1awpaVXNaZDVZQmtFMDhrWmFPbGxmbVMyOGZGdGRkNkpObzFFaXhxK3dMUWVXTk83WDV6Q1VDQXdFQUFhTlRNRkV3CkRnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkFxckJOTUIKNDFNZDcxUkx1VjBNb0ZwRmlUa3NNQThHQTFVZEVRUUlNQWFDQkdObGNuUXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUpaZmRzdmFvNWppRkVySXY0WmpLVGpYbWdkSHFobmUwc2VLSmcvcGFqUnRlK01mS0FtZzNzMVpRVVhjCmYrL3RQVkVjQnZnRDk1MkJJWUQ3bk9EK2UzdjdvREJOc0JlVVNmZGN2Y3ppV3NmV1Z1MGlKT09BcWFlRjUxWmsKSWphaVREWEE4dDZMRTZ5QnhJOERHalhLMkIrallVR0YrWm1qakJ3UGdLU1ZDLzlMRE9YV2J4M1prUXJ0aWpxQQoyY1RkSFBTU0pJT2RSdnNaaEVsZ2xOWW5kTXVZZzZ2bW9RSWN5TTV6R3VzT1c3eUxLMC94emlKWHltV0svWWFqCm9LWEk5OEcrQlJYYXhnU2hqSC9sQW13VWFSYTJkNE1GMUErZ05leVZvVzJtelovQm9YMWlOWENwUjRGWEQ1RVAKelhIaUVTeDJVaTdlV2ltVlcxbzJzdTE0ZVBNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
          service:
            name: webhook-service
            namespace: metallb-system
            path: /convert
            port: 443
        conversionReviewVersions:
        - v1alpha1
        - v1beta1
    group: metallb.io
    names:
      kind: AddressPool
      listKind: AddressPoolList
      plural: addresspools
      singular: addresspool
    scope: Namespaced
    versions:
    - deprecated: true
      deprecationWarning: metallb.io v1alpha1 AddressPool is deprecated
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: AddressPool is the Schema for the addresspools API.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: AddressPoolSpec defines the desired state of AddressPool.
              properties:
                addresses:
                  description: A list of IP address ranges over which MetalLB has
                    authority. You can list multiple ranges in a single pool, they
                    will all share the same settings. Each range can be either a CIDR
                    prefix, or an explicit start-end range of IPs.
                  items:
                    type: string
                  type: array
                autoAssign:
                  default: true
                  description: AutoAssign flag used to prevent MetallB from automatic
                    allocation for a pool.
                  type: boolean
                bgpAdvertisements:
                  description: When an IP is allocated from this pool, how should
                    it be translated into BGP announcements?
                  items:
                    properties:
                      aggregationLength:
                        default: 32
                        description: The aggregation-length advertisement option lets
                          you “roll up” the /32s into a larger prefix.
                        format: int32
                        minimum: 1
                        type: integer
                      aggregationLengthV6:
                        default: 128
                        description: Optional, defaults to 128 (i.e. no aggregation)
                          if not specified.
                        format: int32
                        type: integer
                      communities:
                        description: BGP communities
                        items:
                          type: string
                        type: array
                      localPref:
                        description: BGP LOCAL_PREF attribute which is used by BGP
                          best path algorithm, Path with higher localpref is preferred
                          over one with lower localpref.
                        format: int32
                        type: integer
                    type: object
                  type: array
                protocol:
                  description: Protocol can be used to select how the announcement
                    is done.
                  enum:
                  - layer2
                  - bgp
                  type: string
              required:
              - addresses
              - protocol
              type: object
            status:
              description: AddressPoolStatus defines the observed state of AddressPool.
              type: object
          required:
          - spec
          type: object
      served: true
      storage: false
      subresources:
        status: {}
    - deprecated: true
      deprecationWarning: metallb.io v1beta1 AddressPool is deprecated, consider using
        IPAddressPool
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: AddressPool represents a pool of IP addresses that can be allocated
            to LoadBalancer services. AddressPool is deprecated and being replaced
            by IPAddressPool.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: AddressPoolSpec defines the desired state of AddressPool.
              properties:
                addresses:
                  description: A list of IP address ranges over which MetalLB has
                    authority. You can list multiple ranges in a single pool, they
                    will all share the same settings. Each range can be either a CIDR
                    prefix, or an explicit start-end range of IPs.
                  items:
                    type: string
                  type: array
                autoAssign:
                  default: true
                  description: AutoAssign flag used to prevent MetallB from automatic
                    allocation for a pool.
                  type: boolean
                bgpAdvertisements:
                  description: Drives how an IP allocated from this pool should translated
                    into BGP announcements.
                  items:
                    properties:
                      aggregationLength:
                        default: 32
                        description: The aggregation-length advertisement option lets
                          you “roll up” the /32s into a larger prefix.
                        format: int32
                        minimum: 1
                        type: integer
                      aggregationLengthV6:
                        default: 128
                        description: Optional, defaults to 128 (i.e. no aggregation)
                          if not specified.
                        format: int32
                        type: integer
                      communities:
                        description: BGP communities to be associated with the given
                          advertisement.
                        items:
                          type: string
                        type: array
                      localPref:
                        description: BGP LOCAL_PREF attribute which is used by BGP
                          best path algorithm, Path with higher localpref is preferred
                          over one with lower localpref.
                        format: int32
                        type: integer
                    type: object
                  type: array
                protocol:
                  description: Protocol can be used to select how the announcement
                    is done.
                  enum:
                  - layer2
                  - bgp
                  type: string
              required:
              - addresses
              - protocol
              type: object
            status:
              description: AddressPoolStatus defines the observed state of AddressPool.
              type: object
          required:
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: AddressPool
      listKind: AddressPoolList
      plural: addresspools
      singular: addresspool
    conditions:
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1beta1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.7.0
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.7.0"},"name":"bgppeers.metallb.io"},"spec":{"conversion":{"strategy":"Webhook","webhook":{"clientConfig":{"caBundle":"Cg==","service":{"name":"webhook-service","namespace":"metallb-system","path":"/convert"}},"conversionReviewVersions":["v1beta1","v1beta2"]}},"group":"metallb.io","names":{"kind":"BGPPeer","listKind":"BGPPeerList","plural":"bgppeers","singular":"bgppeer"},"scope":"Namespaced","versions":[{"name":"v1beta1","schema":{"openAPIV3Schema":{"description":"BGPPeer is the Schema for the peers API.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"BGPPeerSpec defines the desired state of Peer.","properties":{"bfdProfile":{"type":"string"},"ebgpMultiHop":{"description":"EBGP peer is multi-hops away","type":"boolean"},"holdTime":{"description":"Requested BGP hold time, per RFC4271.","type":"string"},"keepaliveTime":{"description":"Requested BGP keepalive time, per RFC4271.","type":"string"},"myASN":{"description":"AS number to use for the local end of the session.","format":"int32","maximum":4294967295,"minimum":0,"type":"integer"},"nodeSelectors":{"description":"Only connect to this peer on nodes that match one of these selectors.","items":{"properties":{"matchExpressions":{"items":{"properties":{"key":{"type":"string"},"operator":{"type":"string"},"values":{"items":{"type":"string"},"minItems":1,"type":"array"}},"required":["key","operator","values"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"type":"object"}},"type":"object"},"type":"array"},"password":{"description":"Authentication password for routers enforcing TCP MD5 authenticated sessions","type":"string"},"peerASN":{"description":"AS number to expect from the remote end of the session.","format":"int32","maximum":4294967295,"minimum":0,"type":"integer"},"peerAddress":{"description":"Address to dial when establishing the session.","type":"string"},"peerPort":{"description":"Port to dial when establishing the session.","maximum":16384,"minimum":0,"type":"integer"},"routerID":{"description":"BGP router ID to advertise to the peer","type":"string"},"sourceAddress":{"description":"Source address to use when establishing the session.","type":"string"}},"required":["myASN","peerASN","peerAddress"],"type":"object"},"status":{"description":"BGPPeerStatus defines the observed state of Peer.","type":"object"}},"type":"object"}},"served":true,"storage":false,"subresources":{"status":{}}},{"name":"v1beta2","schema":{"openAPIV3Schema":{"description":"BGPPeer is the Schema for the peers API.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"BGPPeerSpec defines the desired state of Peer.","properties":{"bfdProfile":{"description":"The name of the BFD Profile to be used for the BFD session associated to the BGP session. If not set, the BFD session won't be set up.","type":"string"},"ebgpMultiHop":{"description":"To set if the BGPPeer is multi-hops away. Needed for FRR mode only.","type":"boolean"},"holdTime":{"description":"Requested BGP hold time, per RFC4271.","type":"string"},"keepaliveTime":{"description":"Requested BGP keepalive time, per RFC4271.","type":"string"},"myASN":{"description":"AS number to use for the local end of the session.","format":"int32","maximum":4294967295,"minimum":0,"type":"integer"},"nodeSelectors":{"description":"Only connect to this peer on nodes that match one of these selectors.","items":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"type":"array"},"password":{"description":"Authentication password for routers enforcing TCP MD5 authenticated sessions","type":"string"},"passwordSecret":{"description":"passwordSecret is name of the authentication secret for BGP Peer","properties":{"name":{"description":"name is unique within a namespace to reference a secret resource.","type":"string"},"namespace":{"description":"namespace defines the space within which the secret name must be unique.","type":"string"}},"type":"object"},"peerASN":{"description":"AS number to expect from the remote end of the session.","format":"int32","maximum":4294967295,"minimum":0,"type":"integer"},"peerAddress":{"description":"Address to dial when establishing the session.","type":"string"},"peerPort":{"default":179,"description":"Port to dial when establishing the session.","maximum":16384,"minimum":0,"type":"integer"},"routerID":{"description":"BGP router ID to advertise to the peer","type":"string"},"sourceAddress":{"description":"Source address to use when establishing the session.","type":"string"}},"required":["myASN","peerASN","peerAddress"],"type":"object"},"status":{"description":"BGPPeerStatus defines the observed state of Peer.","type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
    creationTimestamp: "2025-07-31T03:45:55Z"
    generation: 2
    name: bgppeers.metallb.io
    resourceVersion: "13948"
    uid: 2bfaba7c-fb16-4b22-9a6e-fe91be6aa21d
  spec:
    conversion:
      strategy: Webhook
      webhook:
        clientConfig:
          caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFoTVJBd0RnWURWUVFLRXdkdFpYUmgKYkd4aU1RMHdDd1lEVlFRREV3UmpaWEowTUI0WERUSTFNRGN6TVRBeU5EWXdORm9YRFRNMU1EY3lPVEF6TkRZdwpORm93SVRFUU1BNEdBMVVFQ2hNSGJXVjBZV3hzWWpFTk1Bc0dBMVVFQXhNRVkyVnlkRENDQVNJd0RRWUpLb1pJCmh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTVdOUjArVHdlbEVkWVlwSnNOckVsMlZGQlJxM2x4WjVmYVcKSjA0YUl5YlA3ekpmZkJlbnMxQzJGUHhjV3UwbnByWnUrTEkyckp2d1krOTVHemtRMkxHOEIvakEyZW9pSjAxVwpnaW9uanlRWkJ6WmhmUGI5eVBUN3ByN3FJVTVaNXFPRUdWRUdzcG5mTVppOXVibEJGbzVlcUNNYklPTEcyenE4CnE2OXNFa2wvbFMyMHFGRXVYaUdQMkJsOUhPd1laTkN2SjVmMFJ1MVMxUWo5WkovRlo4VWV2dytCOVFUb3lWcXkKdnplUm9oTEhEMGd4a0FjWW9jSmVabzRKK21EZlc4ampwS0V5UXlsODhxdk1uMEpucllkdDB5SWgxQVhHbzd1awpaVXNaZDVZQmtFMDhrWmFPbGxmbVMyOGZGdGRkNkpObzFFaXhxK3dMUWVXTk83WDV6Q1VDQXdFQUFhTlRNRkV3CkRnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkFxckJOTUIKNDFNZDcxUkx1VjBNb0ZwRmlUa3NNQThHQTFVZEVRUUlNQWFDQkdObGNuUXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUpaZmRzdmFvNWppRkVySXY0WmpLVGpYbWdkSHFobmUwc2VLSmcvcGFqUnRlK01mS0FtZzNzMVpRVVhjCmYrL3RQVkVjQnZnRDk1MkJJWUQ3bk9EK2UzdjdvREJOc0JlVVNmZGN2Y3ppV3NmV1Z1MGlKT09BcWFlRjUxWmsKSWphaVREWEE4dDZMRTZ5QnhJOERHalhLMkIrallVR0YrWm1qakJ3UGdLU1ZDLzlMRE9YV2J4M1prUXJ0aWpxQQoyY1RkSFBTU0pJT2RSdnNaaEVsZ2xOWW5kTXVZZzZ2bW9RSWN5TTV6R3VzT1c3eUxLMC94emlKWHltV0svWWFqCm9LWEk5OEcrQlJYYXhnU2hqSC9sQW13VWFSYTJkNE1GMUErZ05leVZvVzJtelovQm9YMWlOWENwUjRGWEQ1RVAKelhIaUVTeDJVaTdlV2ltVlcxbzJzdTE0ZVBNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
          service:
            name: webhook-service
            namespace: metallb-system
            path: /convert
            port: 443
        conversionReviewVersions:
        - v1beta1
        - v1beta2
    group: metallb.io
    names:
      kind: BGPPeer
      listKind: BGPPeerList
      plural: bgppeers
      singular: bgppeer
    scope: Namespaced
    versions:
    - name: v1beta1
      schema:
        openAPIV3Schema:
          description: BGPPeer is the Schema for the peers API.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: BGPPeerSpec defines the desired state of Peer.
              properties:
                bfdProfile:
                  type: string
                ebgpMultiHop:
                  description: EBGP peer is multi-hops away
                  type: boolean
                holdTime:
                  description: Requested BGP hold time, per RFC4271.
                  type: string
                keepaliveTime:
                  description: Requested BGP keepalive time, per RFC4271.
                  type: string
                myASN:
                  description: AS number to use for the local end of the session.
                  format: int32
                  maximum: 4294967295
                  minimum: 0
                  type: integer
                nodeSelectors:
                  description: Only connect to this peer on nodes that match one of
                    these selectors.
                  items:
                    properties:
                      matchExpressions:
                        items:
                          properties:
                            key:
                              type: string
                            operator:
                              type: string
                            values:
                              items:
                                type: string
                              minItems: 1
                              type: array
                          required:
                          - key
                          - operator
                          - values
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                  type: array
                password:
                  description: Authentication password for routers enforcing TCP MD5
                    authenticated sessions
                  type: string
                peerASN:
                  description: AS number to expect from the remote end of the session.
                  format: int32
                  maximum: 4294967295
                  minimum: 0
                  type: integer
                peerAddress:
                  description: Address to dial when establishing the session.
                  type: string
                peerPort:
                  description: Port to dial when establishing the session.
                  maximum: 16384
                  minimum: 0
                  type: integer
                routerID:
                  description: BGP router ID to advertise to the peer
                  type: string
                sourceAddress:
                  description: Source address to use when establishing the session.
                  type: string
              required:
              - myASN
              - peerASN
              - peerAddress
              type: object
            status:
              description: BGPPeerStatus defines the observed state of Peer.
              type: object
          type: object
      served: true
      storage: false
      subresources:
        status: {}
    - name: v1beta2
      schema:
        openAPIV3Schema:
          description: BGPPeer is the Schema for the peers API.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: BGPPeerSpec defines the desired state of Peer.
              properties:
                bfdProfile:
                  description: The name of the BFD Profile to be used for the BFD
                    session associated to the BGP session. If not set, the BFD session
                    won't be set up.
                  type: string
                ebgpMultiHop:
                  description: To set if the BGPPeer is multi-hops away. Needed for
                    FRR mode only.
                  type: boolean
                holdTime:
                  description: Requested BGP hold time, per RFC4271.
                  type: string
                keepaliveTime:
                  description: Requested BGP keepalive time, per RFC4271.
                  type: string
                myASN:
                  description: AS number to use for the local end of the session.
                  format: int32
                  maximum: 4294967295
                  minimum: 0
                  type: integer
                nodeSelectors:
                  description: Only connect to this peer on nodes that match one of
                    these selectors.
                  items:
                    description: A label selector is a label query over a set of resources.
                      The result of matchLabels and matchExpressions are ANDed. An
                      empty label selector matches all objects. A null label selector
                      matches no objects.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                  type: array
                password:
                  description: Authentication password for routers enforcing TCP MD5
                    authenticated sessions
                  type: string
                passwordSecret:
                  description: passwordSecret is name of the authentication secret
                    for BGP Peer
                  properties:
                    name:
                      description: name is unique within a namespace to reference
                        a secret resource.
                      type: string
                    namespace:
                      description: namespace defines the space within which the secret
                        name must be unique.
                      type: string
                  type: object
                peerASN:
                  description: AS number to expect from the remote end of the session.
                  format: int32
                  maximum: 4294967295
                  minimum: 0
                  type: integer
                peerAddress:
                  description: Address to dial when establishing the session.
                  type: string
                peerPort:
                  default: 179
                  description: Port to dial when establishing the session.
                  maximum: 16384
                  minimum: 0
                  type: integer
                routerID:
                  description: BGP router ID to advertise to the peer
                  type: string
                sourceAddress:
                  description: Source address to use when establishing the session.
                  type: string
              required:
              - myASN
              - peerASN
              - peerAddress
              type: object
            status:
              description: BGPPeerStatus defines the observed state of Peer.
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: BGPPeer
      listKind: BGPPeerList
      plural: bgppeers
      singular: bgppeer
    conditions:
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:45:55Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1beta2
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"labels":{"app":"cert-manager","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.8.0"},"name":"certificaterequests.cert-manager.io"},"spec":{"group":"cert-manager.io","names":{"categories":["cert-manager"],"kind":"CertificateRequest","listKind":"CertificateRequestList","plural":"certificaterequests","shortNames":["cr","crs"],"singular":"certificaterequest"},"scope":"Namespaced","versions":[{"additionalPrinterColumns":[{"jsonPath":".status.conditions[?(@.type==\"Approved\")].status","name":"Approved","type":"string"},{"jsonPath":".status.conditions[?(@.type==\"Denied\")].status","name":"Denied","type":"string"},{"jsonPath":".status.conditions[?(@.type==\"Ready\")].status","name":"Ready","type":"string"},{"jsonPath":".spec.issuerRef.name","name":"Issuer","type":"string"},{"jsonPath":".spec.username","name":"Requestor","type":"string"},{"jsonPath":".status.conditions[?(@.type==\"Ready\")].message","name":"Status","priority":1,"type":"string"},{"description":"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.","jsonPath":".metadata.creationTimestamp","name":"Age","type":"date"}],"name":"v1","schema":{"openAPIV3Schema":{"description":"A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"Desired state of the CertificateRequest resource.","properties":{"duration":{"description":"The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.","type":"string"},"extra":{"additionalProperties":{"items":{"type":"string"},"type":"array"},"description":"Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.","type":"object"},"groups":{"description":"Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.","items":{"type":"string"},"type":"array","x-kubernetes-list-type":"atomic"},"isCA":{"description":"IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.","type":"boolean"},"issuerRef":{"description":"IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.","properties":{"group":{"description":"Group of the resource being referred to.","type":"string"},"kind":{"description":"Kind of the resource being referred to.","type":"string"},"name":{"description":"Name of the resource being referred to.","type":"string"}},"required":["name"],"type":"object"},"request":{"description":"The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.","format":"byte","type":"string"},"uid":{"description":"UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.","type":"string"},"usages":{"description":"Usages is the set of x509 usages that are requested for the certificate. If usages are set they SHOULD be encoded inside the CSR spec Defaults to `digital signature` and `key encipherment` if not specified.","items":{"description":"KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"","enum":["signing","digital signature","content commitment","key encipherment","key agreement","data encipherment","cert sign","crl sign","encipher only","decipher only","any","server auth","client auth","code signing","email protection","s/mime","ipsec end system","ipsec tunnel","ipsec user","timestamping","ocsp signing","microsoft sgc","netscape sgc"],"type":"string"},"type":"array"},"username":{"description":"Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.","type":"string"}},"required":["issuerRef","request"],"type":"object"},"status":{"description":"Status of the CertificateRequest. This is set and managed automatically.","properties":{"ca":{"description":"The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.","format":"byte","type":"string"},"certificate":{"description":"The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.","format":"byte","type":"string"},"conditions":{"description":"List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.","items":{"description":"CertificateRequestCondition contains condition information for a CertificateRequest.","properties":{"lastTransitionTime":{"description":"LastTransitionTime is the timestamp corresponding to the last status change of this condition.","format":"date-time","type":"string"},"message":{"description":"Message is a human readable description of the details of the last transition, complementing reason.","type":"string"},"reason":{"description":"Reason is a brief machine readable explanation for the condition's last transition.","type":"string"},"status":{"description":"Status of the condition, one of (`True`, `False`, `Unknown`).","enum":["True","False","Unknown"],"type":"string"},"type":{"description":"Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).","type":"string"}},"required":["status","type"],"type":"object"},"type":"array","x-kubernetes-list-map-keys":["type"],"x-kubernetes-list-type":"map"},"failureTime":{"description":"FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.","format":"date-time","type":"string"}},"type":"object"}},"required":["spec"],"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]}}
    creationTimestamp: "2025-07-31T03:46:28Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.8.0
    name: certificaterequests.cert-manager.io
    resourceVersion: "14061"
    uid: 548bf38b-5ed9-4ed1-9785-9d04963b2ceb
  spec:
    conversion:
      strategy: None
    group: cert-manager.io
    names:
      categories:
      - cert-manager
      kind: CertificateRequest
      listKind: CertificateRequestList
      plural: certificaterequests
      shortNames:
      - cr
      - crs
      singular: certificaterequest
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.conditions[?(@.type=="Approved")].status
        name: Approved
        type: string
      - jsonPath: .status.conditions[?(@.type=="Denied")].status
        name: Denied
        type: string
      - jsonPath: .status.conditions[?(@.type=="Ready")].status
        name: Ready
        type: string
      - jsonPath: .spec.issuerRef.name
        name: Issuer
        type: string
      - jsonPath: .spec.username
        name: Requestor
        type: string
      - jsonPath: .status.conditions[?(@.type=="Ready")].message
        name: Status
        priority: 1
        type: string
      - description: CreationTimestamp is a timestamp representing the server time
          when this object was created. It is not guaranteed to be set in happens-before
          order across separate operations. Clients may not set this value. It is
          represented in RFC3339 form and is in UTC.
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: "A CertificateRequest is used to request a signed certificate
            from one of the configured issuers. \n All fields within the CertificateRequest's
            `spec` are immutable after creation. A CertificateRequest will either
            succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest
            is a one-shot resource, meaning it represents a single point in time request
            for a certificate and cannot be re-used."
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Desired state of the CertificateRequest resource.
              properties:
                duration:
                  description: The requested 'duration' (i.e. lifetime) of the Certificate.
                    This option may be ignored/overridden by some issuer types.
                  type: string
                extra:
                  additionalProperties:
                    items:
                      type: string
                    type: array
                  description: Extra contains extra attributes of the user that created
                    the CertificateRequest. Populated by the cert-manager webhook
                    on creation and immutable.
                  type: object
                groups:
                  description: Groups contains group membership of the user that created
                    the CertificateRequest. Populated by the cert-manager webhook
                    on creation and immutable.
                  items:
                    type: string
                  type: array
                  x-kubernetes-list-type: atomic
                isCA:
                  description: IsCA will request to mark the certificate as valid
                    for certificate signing when submitting to the issuer. This will
                    automatically add the `cert sign` usage to the list of `usages`.
                  type: boolean
                issuerRef:
                  description: IssuerRef is a reference to the issuer for this CertificateRequest.  If
                    the `kind` field is not set, or set to `Issuer`, an Issuer resource
                    with the given name in the same namespace as the CertificateRequest
                    will be used.  If the `kind` field is set to `ClusterIssuer`,
                    a ClusterIssuer with the provided name will be used. The `name`
                    field in this stanza is required at all times. The group field
                    refers to the API group of the issuer which defaults to `cert-manager.io`
                    if empty.
                  properties:
                    group:
                      description: Group of the resource being referred to.
                      type: string
                    kind:
                      description: Kind of the resource being referred to.
                      type: string
                    name:
                      description: Name of the resource being referred to.
                      type: string
                  required:
                  - name
                  type: object
                request:
                  description: The PEM-encoded x509 certificate signing request to
                    be submitted to the CA for signing.
                  format: byte
                  type: string
                uid:
                  description: UID contains the uid of the user that created the CertificateRequest.
                    Populated by the cert-manager webhook on creation and immutable.
                  type: string
                usages:
                  description: Usages is the set of x509 usages that are requested
                    for the certificate. If usages are set they SHOULD be encoded
                    inside the CSR spec Defaults to `digital signature` and `key encipherment`
                    if not specified.
                  items:
                    description: 'KeyUsage specifies valid usage contexts for keys.
                      See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
                      Valid KeyUsage values are as follows: "signing", "digital signature",
                      "content commitment", "key encipherment", "key agreement", "data
                      encipherment", "cert sign", "crl sign", "encipher only", "decipher
                      only", "any", "server auth", "client auth", "code signing",
                      "email protection", "s/mime", "ipsec end system", "ipsec tunnel",
                      "ipsec user", "timestamping", "ocsp signing", "microsoft sgc",
                      "netscape sgc"'
                    enum:
                    - signing
                    - digital signature
                    - content commitment
                    - key encipherment
                    - key agreement
                    - data encipherment
                    - cert sign
                    - crl sign
                    - encipher only
                    - decipher only
                    - any
                    - server auth
                    - client auth
                    - code signing
                    - email protection
                    - s/mime
                    - ipsec end system
                    - ipsec tunnel
                    - ipsec user
                    - timestamping
                    - ocsp signing
                    - microsoft sgc
                    - netscape sgc
                    type: string
                  type: array
                username:
                  description: Username contains the name of the user that created
                    the CertificateRequest. Populated by the cert-manager webhook
                    on creation and immutable.
                  type: string
              required:
              - issuerRef
              - request
              type: object
            status:
              description: Status of the CertificateRequest. This is set and managed
                automatically.
              properties:
                ca:
                  description: The PEM encoded x509 certificate of the signer, also
                    known as the CA (Certificate Authority). This is set on a best-effort
                    basis by different issuers. If not set, the CA is assumed to be
                    unknown/not available.
                  format: byte
                  type: string
                certificate:
                  description: The PEM encoded x509 certificate resulting from the
                    certificate signing request. If not set, the CertificateRequest
                    has either not been completed or has failed. More information
                    on failure can be found by checking the `conditions` field.
                  format: byte
                  type: string
                conditions:
                  description: List of status conditions to indicate the status of
                    a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.
                  items:
                    description: CertificateRequestCondition contains condition information
                      for a CertificateRequest.
                    properties:
                      lastTransitionTime:
                        description: LastTransitionTime is the timestamp corresponding
                          to the last status change of this condition.
                        format: date-time
                        type: string
                      message:
                        description: Message is a human readable description of the
                          details of the last transition, complementing reason.
                        type: string
                      reason:
                        description: Reason is a brief machine readable explanation
                          for the condition's last transition.
                        type: string
                      status:
                        description: Status of the condition, one of (`True`, `False`,
                          `Unknown`).
                        enum:
                        - "True"
                        - "False"
                        - Unknown
                        type: string
                      type:
                        description: Type of the condition, known values are (`Ready`,
                          `InvalidRequest`, `Approved`, `Denied`).
                        type: string
                    required:
                    - status
                    - type
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                  - type
                  x-kubernetes-list-type: map
                failureTime:
                  description: FailureTime stores the time that this CertificateRequest
                    failed. This is used to influence garbage collection and back-off.
                  format: date-time
                  type: string
              type: object
          required:
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - cert-manager
      kind: CertificateRequest
      listKind: CertificateRequestList
      plural: certificaterequests
      shortNames:
      - cr
      - crs
      singular: certificaterequest
    conditions:
    - lastTransitionTime: "2025-07-31T03:46:28Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:46:28Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"labels":{"app":"cert-manager","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.8.0"},"name":"certificates.cert-manager.io"},"spec":{"group":"cert-manager.io","names":{"categories":["cert-manager"],"kind":"Certificate","listKind":"CertificateList","plural":"certificates","shortNames":["cert","certs"],"singular":"certificate"},"scope":"Namespaced","versions":[{"additionalPrinterColumns":[{"jsonPath":".status.conditions[?(@.type==\"Ready\")].status","name":"Ready","type":"string"},{"jsonPath":".spec.secretName","name":"Secret","type":"string"},{"jsonPath":".spec.issuerRef.name","name":"Issuer","priority":1,"type":"string"},{"jsonPath":".status.conditions[?(@.type==\"Ready\")].message","name":"Status","priority":1,"type":"string"},{"description":"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.","jsonPath":".metadata.creationTimestamp","name":"Age","type":"date"}],"name":"v1","schema":{"openAPIV3Schema":{"description":"A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`. \n The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"Desired state of the Certificate resource.","properties":{"additionalOutputFormats":{"description":"AdditionalOutputFormats defines extra output formats of the private key and signed certificate chain to be written to this Certificate's target Secret. This is an Alpha Feature and is only enabled with the `--feature-gates=AdditionalCertificateOutputFormats=true` option on both the controller and webhook components.","items":{"description":"CertificateAdditionalOutputFormat defines an additional output format of a Certificate resource. These contain supplementary data formats of the signed certificate chain and paired private key.","properties":{"type":{"description":"Type is the name of the format type that should be written to the Certificate's target Secret.","enum":["DER","CombinedPEM"],"type":"string"}},"required":["type"],"type":"object"},"type":"array"},"commonName":{"description":"CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4","type":"string"},"dnsNames":{"description":"DNSNames is a list of DNS subjectAltNames to be set on the Certificate.","items":{"type":"string"},"type":"array"},"duration":{"description":"The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or `renewBefore` period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration","type":"string"},"emailAddresses":{"description":"EmailAddresses is a list of email subjectAltNames to be set on the Certificate.","items":{"type":"string"},"type":"array"},"encodeUsagesInRequest":{"description":"EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest","type":"boolean"},"ipAddresses":{"description":"IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.","items":{"type":"string"},"type":"array"},"isCA":{"description":"IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.","type":"boolean"},"issuerRef":{"description":"IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.","properties":{"group":{"description":"Group of the resource being referred to.","type":"string"},"kind":{"description":"Kind of the resource being referred to.","type":"string"},"name":{"description":"Name of the resource being referred to.","type":"string"}},"required":["name"],"type":"object"},"keystores":{"description":"Keystores configures additional keystore output formats stored in the `secretName` Secret resource.","properties":{"jks":{"description":"JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.","properties":{"create":{"description":"Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.jks` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority","type":"boolean"},"passwordSecretRef":{"description":"PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["create","passwordSecretRef"],"type":"object"},"pkcs12":{"description":"PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.","properties":{"create":{"description":"Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.p12` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority","type":"boolean"},"passwordSecretRef":{"description":"PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["create","passwordSecretRef"],"type":"object"}},"type":"object"},"privateKey":{"description":"Options to control private keys used for the Certificate.","properties":{"algorithm":{"description":"Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `RSA`,`Ed25519` or `ECDSA` If `algorithm` is specified and `size` is not provided, key size of 256 will be used for `ECDSA` key algorithm and key size of 2048 will be used for `RSA` key algorithm. key size is ignored when using the `Ed25519` key algorithm.","enum":["RSA","ECDSA","Ed25519"],"type":"string"},"encoding":{"description":"The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.","enum":["PKCS1","PKCS8"],"type":"string"},"rotationPolicy":{"description":"RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.","enum":["Never","Always"],"type":"string"},"size":{"description":"Size is the key bit size of the corresponding private key for this certificate. If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. If `algorithm` is set to `Ed25519`, Size is ignored. No other values are allowed.","type":"integer"}},"type":"object"},"renewBefore":{"description":"How long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration","type":"string"},"revisionHistoryLimit":{"description":"revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.","format":"int32","type":"integer"},"secretName":{"description":"SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.","type":"string"},"secretTemplate":{"description":"SecretTemplate defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.","properties":{"annotations":{"additionalProperties":{"type":"string"},"description":"Annotations is a key value map to be copied to the target Kubernetes Secret.","type":"object"},"labels":{"additionalProperties":{"type":"string"},"description":"Labels is a key value map to be copied to the target Kubernetes Secret.","type":"object"}},"type":"object"},"subject":{"description":"Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).","properties":{"countries":{"description":"Countries to be used on the Certificate.","items":{"type":"string"},"type":"array"},"localities":{"description":"Cities to be used on the Certificate.","items":{"type":"string"},"type":"array"},"organizationalUnits":{"description":"Organizational Units to be used on the Certificate.","items":{"type":"string"},"type":"array"},"organizations":{"description":"Organizations to be used on the Certificate.","items":{"type":"string"},"type":"array"},"postalCodes":{"description":"Postal codes to be used on the Certificate.","items":{"type":"string"},"type":"array"},"provinces":{"description":"State/Provinces to be used on the Certificate.","items":{"type":"string"},"type":"array"},"serialNumber":{"description":"Serial number to be used on the Certificate.","type":"string"},"streetAddresses":{"description":"Street addresses to be used on the Certificate.","items":{"type":"string"},"type":"array"}},"type":"object"},"uris":{"description":"URIs is a list of URI subjectAltNames to be set on the Certificate.","items":{"type":"string"},"type":"array"},"usages":{"description":"Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.","items":{"description":"KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"","enum":["signing","digital signature","content commitment","key encipherment","key agreement","data encipherment","cert sign","crl sign","encipher only","decipher only","any","server auth","client auth","code signing","email protection","s/mime","ipsec end system","ipsec tunnel","ipsec user","timestamping","ocsp signing","microsoft sgc","netscape sgc"],"type":"string"},"type":"array"}},"required":["issuerRef","secretName"],"type":"object"},"status":{"description":"Status of the Certificate. This is set and managed automatically.","properties":{"conditions":{"description":"List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.","items":{"description":"CertificateCondition contains condition information for an Certificate.","properties":{"lastTransitionTime":{"description":"LastTransitionTime is the timestamp corresponding to the last status change of this condition.","format":"date-time","type":"string"},"message":{"description":"Message is a human readable description of the details of the last transition, complementing reason.","type":"string"},"observedGeneration":{"description":"If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.","format":"int64","type":"integer"},"reason":{"description":"Reason is a brief machine readable explanation for the condition's last transition.","type":"string"},"status":{"description":"Status of the condition, one of (`True`, `False`, `Unknown`).","enum":["True","False","Unknown"],"type":"string"},"type":{"description":"Type of the condition, known values are (`Ready`, `Issuing`).","type":"string"}},"required":["status","type"],"type":"object"},"type":"array","x-kubernetes-list-map-keys":["type"],"x-kubernetes-list-type":"map"},"failedIssuanceAttempts":{"description":"The number of continuous failed issuance attempts up till now. This field gets removed (if set) on a successful issuance and gets set to 1 if unset and an issuance has failed. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1).","type":"integer"},"lastFailureTime":{"description":"LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.","format":"date-time","type":"string"},"nextPrivateKeySecretName":{"description":"The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.","type":"string"},"notAfter":{"description":"The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.","format":"date-time","type":"string"},"notBefore":{"description":"The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.","format":"date-time","type":"string"},"renewalTime":{"description":"RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.","format":"date-time","type":"string"},"revision":{"description":"The current 'revision' of the certificate as issued. \n When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. \n Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. \n Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.","type":"integer"}},"type":"object"}},"required":["spec"],"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]}}
    creationTimestamp: "2025-07-31T03:46:28Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.8.0
    name: certificates.cert-manager.io
    resourceVersion: "14064"
    uid: 1bc1eb3f-f28f-47e2-9c90-ccbfdaaa4259
  spec:
    conversion:
      strategy: None
    group: cert-manager.io
    names:
      categories:
      - cert-manager
      kind: Certificate
      listKind: CertificateList
      plural: certificates
      shortNames:
      - cert
      - certs
      singular: certificate
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.conditions[?(@.type=="Ready")].status
        name: Ready
        type: string
      - jsonPath: .spec.secretName
        name: Secret
        type: string
      - jsonPath: .spec.issuerRef.name
        name: Issuer
        priority: 1
        type: string
      - jsonPath: .status.conditions[?(@.type=="Ready")].message
        name: Status
        priority: 1
        type: string
      - description: CreationTimestamp is a timestamp representing the server time
          when this object was created. It is not guaranteed to be set in happens-before
          order across separate operations. Clients may not set this value. It is
          represented in RFC3339 form and is in UTC.
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: "A Certificate resource should be created to ensure an up to
            date and signed x509 certificate is stored in the Kubernetes Secret resource
            named in `spec.secretName`. \n The stored certificate will be renewed
            before it expires (as configured by `spec.renewBefore`)."
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Desired state of the Certificate resource.
              properties:
                additionalOutputFormats:
                  description: AdditionalOutputFormats defines extra output formats
                    of the private key and signed certificate chain to be written
                    to this Certificate's target Secret. This is an Alpha Feature
                    and is only enabled with the `--feature-gates=AdditionalCertificateOutputFormats=true`
                    option on both the controller and webhook components.
                  items:
                    description: CertificateAdditionalOutputFormat defines an additional
                      output format of a Certificate resource. These contain supplementary
                      data formats of the signed certificate chain and paired private
                      key.
                    properties:
                      type:
                        description: Type is the name of the format type that should
                          be written to the Certificate's target Secret.
                        enum:
                        - DER
                        - CombinedPEM
                        type: string
                    required:
                    - type
                    type: object
                  type: array
                commonName:
                  description: 'CommonName is a common name to be used on the Certificate.
                    The CommonName should have a length of 64 characters or fewer
                    to avoid generating invalid CSRs. This value is ignored by TLS
                    clients when any subject alt name is set. This is x509 behaviour:
                    https://tools.ietf.org/html/rfc6125#section-6.4.4'
                  type: string
                dnsNames:
                  description: DNSNames is a list of DNS subjectAltNames to be set
                    on the Certificate.
                  items:
                    type: string
                  type: array
                duration:
                  description: The requested 'duration' (i.e. lifetime) of the Certificate.
                    This option may be ignored/overridden by some issuer types. If
                    unset this defaults to 90 days. Certificate will be renewed either
                    2/3 through its duration or `renewBefore` period before its expiry,
                    whichever is later. Minimum accepted duration is 1 hour. Value
                    must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
                  type: string
                emailAddresses:
                  description: EmailAddresses is a list of email subjectAltNames to
                    be set on the Certificate.
                  items:
                    type: string
                  type: array
                encodeUsagesInRequest:
                  description: EncodeUsagesInRequest controls whether key usages should
                    be present in the CertificateRequest
                  type: boolean
                ipAddresses:
                  description: IPAddresses is a list of IP address subjectAltNames
                    to be set on the Certificate.
                  items:
                    type: string
                  type: array
                isCA:
                  description: IsCA will mark this Certificate as valid for certificate
                    signing. This will automatically add the `cert sign` usage to
                    the list of `usages`.
                  type: boolean
                issuerRef:
                  description: IssuerRef is a reference to the issuer for this certificate.
                    If the `kind` field is not set, or set to `Issuer`, an Issuer
                    resource with the given name in the same namespace as the Certificate
                    will be used. If the `kind` field is set to `ClusterIssuer`, a
                    ClusterIssuer with the provided name will be used. The `name`
                    field in this stanza is required at all times.
                  properties:
                    group:
                      description: Group of the resource being referred to.
                      type: string
                    kind:
                      description: Kind of the resource being referred to.
                      type: string
                    name:
                      description: Name of the resource being referred to.
                      type: string
                  required:
                  - name
                  type: object
                keystores:
                  description: Keystores configures additional keystore output formats
                    stored in the `secretName` Secret resource.
                  properties:
                    jks:
                      description: JKS configures options for storing a JKS keystore
                        in the `spec.secretName` Secret resource.
                      properties:
                        create:
                          description: Create enables JKS keystore creation for the
                            Certificate. If true, a file named `keystore.jks` will
                            be created in the target Secret resource, encrypted using
                            the password stored in `passwordSecretRef`. The keystore
                            file will only be updated upon re-issuance. A file named
                            `truststore.jks` will also be created in the target Secret
                            resource, encrypted using the password stored in `passwordSecretRef`
                            containing the issuing Certificate Authority
                          type: boolean
                        passwordSecretRef:
                          description: PasswordSecretRef is a reference to a key in
                            a Secret resource containing the password used to encrypt
                            the JKS keystore.
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's
                                `data` field to be used. Some instances of this field
                                may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to.
                                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                          required:
                          - name
                          type: object
                      required:
                      - create
                      - passwordSecretRef
                      type: object
                    pkcs12:
                      description: PKCS12 configures options for storing a PKCS12
                        keystore in the `spec.secretName` Secret resource.
                      properties:
                        create:
                          description: Create enables PKCS12 keystore creation for
                            the Certificate. If true, a file named `keystore.p12`
                            will be created in the target Secret resource, encrypted
                            using the password stored in `passwordSecretRef`. The
                            keystore file will only be updated upon re-issuance. A
                            file named `truststore.p12` will also be created in the
                            target Secret resource, encrypted using the password stored
                            in `passwordSecretRef` containing the issuing Certificate
                            Authority
                          type: boolean
                        passwordSecretRef:
                          description: PasswordSecretRef is a reference to a key in
                            a Secret resource containing the password used to encrypt
                            the PKCS12 keystore.
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's
                                `data` field to be used. Some instances of this field
                                may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to.
                                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                          required:
                          - name
                          type: object
                      required:
                      - create
                      - passwordSecretRef
                      type: object
                  type: object
                privateKey:
                  description: Options to control private keys used for the Certificate.
                  properties:
                    algorithm:
                      description: Algorithm is the private key algorithm of the corresponding
                        private key for this certificate. If provided, allowed values
                        are either `RSA`,`Ed25519` or `ECDSA` If `algorithm` is specified
                        and `size` is not provided, key size of 256 will be used for
                        `ECDSA` key algorithm and key size of 2048 will be used for
                        `RSA` key algorithm. key size is ignored when using the `Ed25519`
                        key algorithm.
                      enum:
                      - RSA
                      - ECDSA
                      - Ed25519
                      type: string
                    encoding:
                      description: The private key cryptography standards (PKCS) encoding
                        for this certificate's private key to be encoded in. If provided,
                        allowed values are `PKCS1` and `PKCS8` standing for PKCS#1
                        and PKCS#8, respectively. Defaults to `PKCS1` if not specified.
                      enum:
                      - PKCS1
                      - PKCS8
                      type: string
                    rotationPolicy:
                      description: RotationPolicy controls how private keys should
                        be regenerated when a re-issuance is being processed. If set
                        to Never, a private key will only be generated if one does
                        not already exist in the target `spec.secretName`. If one
                        does exists but it does not have the correct algorithm or
                        size, a warning will be raised to await user intervention.
                        If set to Always, a private key matching the specified requirements
                        will be generated whenever a re-issuance occurs. Default is
                        'Never' for backward compatibility.
                      enum:
                      - Never
                      - Always
                      type: string
                    size:
                      description: Size is the key bit size of the corresponding private
                        key for this certificate. If `algorithm` is set to `RSA`,
                        valid values are `2048`, `4096` or `8192`, and will default
                        to `2048` if not specified. If `algorithm` is set to `ECDSA`,
                        valid values are `256`, `384` or `521`, and will default to
                        `256` if not specified. If `algorithm` is set to `Ed25519`,
                        Size is ignored. No other values are allowed.
                      type: integer
                  type: object
                renewBefore:
                  description: How long before the currently issued certificate's
                    expiry cert-manager should renew the certificate. The default
                    is 2/3 of the issued certificate's duration. Minimum accepted
                    value is 5 minutes. Value must be in units accepted by Go time.ParseDuration
                    https://golang.org/pkg/time/#ParseDuration
                  type: string
                revisionHistoryLimit:
                  description: revisionHistoryLimit is the maximum number of CertificateRequest
                    revisions that are maintained in the Certificate's history. Each
                    revision represents a single `CertificateRequest` created by this
                    Certificate, either when it was created, renewed, or Spec was
                    changed. Revisions will be removed by oldest first if the number
                    of revisions exceeds this number. If set, revisionHistoryLimit
                    must be a value of `1` or greater. If unset (`nil`), revisions
                    will not be garbage collected. Default value is `nil`.
                  format: int32
                  type: integer
                secretName:
                  description: SecretName is the name of the secret resource that
                    will be automatically created and managed by this Certificate
                    resource. It will be populated with a private key and certificate,
                    signed by the denoted issuer.
                  type: string
                secretTemplate:
                  description: SecretTemplate defines annotations and labels to be
                    copied to the Certificate's Secret. Labels and annotations on
                    the Secret will be changed as they appear on the SecretTemplate
                    when added or removed. SecretTemplate annotations are added in
                    conjunction with, and cannot overwrite, the base set of annotations
                    cert-manager sets on the Certificate's Secret.
                  properties:
                    annotations:
                      additionalProperties:
                        type: string
                      description: Annotations is a key value map to be copied to
                        the target Kubernetes Secret.
                      type: object
                    labels:
                      additionalProperties:
                        type: string
                      description: Labels is a key value map to be copied to the target
                        Kubernetes Secret.
                      type: object
                  type: object
                subject:
                  description: Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
                  properties:
                    countries:
                      description: Countries to be used on the Certificate.
                      items:
                        type: string
                      type: array
                    localities:
                      description: Cities to be used on the Certificate.
                      items:
                        type: string
                      type: array
                    organizationalUnits:
                      description: Organizational Units to be used on the Certificate.
                      items:
                        type: string
                      type: array
                    organizations:
                      description: Organizations to be used on the Certificate.
                      items:
                        type: string
                      type: array
                    postalCodes:
                      description: Postal codes to be used on the Certificate.
                      items:
                        type: string
                      type: array
                    provinces:
                      description: State/Provinces to be used on the Certificate.
                      items:
                        type: string
                      type: array
                    serialNumber:
                      description: Serial number to be used on the Certificate.
                      type: string
                    streetAddresses:
                      description: Street addresses to be used on the Certificate.
                      items:
                        type: string
                      type: array
                  type: object
                uris:
                  description: URIs is a list of URI subjectAltNames to be set on
                    the Certificate.
                  items:
                    type: string
                  type: array
                usages:
                  description: Usages is the set of x509 usages that are requested
                    for the certificate. Defaults to `digital signature` and `key
                    encipherment` if not specified.
                  items:
                    description: 'KeyUsage specifies valid usage contexts for keys.
                      See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
                      Valid KeyUsage values are as follows: "signing", "digital signature",
                      "content commitment", "key encipherment", "key agreement", "data
                      encipherment", "cert sign", "crl sign", "encipher only", "decipher
                      only", "any", "server auth", "client auth", "code signing",
                      "email protection", "s/mime", "ipsec end system", "ipsec tunnel",
                      "ipsec user", "timestamping", "ocsp signing", "microsoft sgc",
                      "netscape sgc"'
                    enum:
                    - signing
                    - digital signature
                    - content commitment
                    - key encipherment
                    - key agreement
                    - data encipherment
                    - cert sign
                    - crl sign
                    - encipher only
                    - decipher only
                    - any
                    - server auth
                    - client auth
                    - code signing
                    - email protection
                    - s/mime
                    - ipsec end system
                    - ipsec tunnel
                    - ipsec user
                    - timestamping
                    - ocsp signing
                    - microsoft sgc
                    - netscape sgc
                    type: string
                  type: array
              required:
              - issuerRef
              - secretName
              type: object
            status:
              description: Status of the Certificate. This is set and managed automatically.
              properties:
                conditions:
                  description: List of status conditions to indicate the status of
                    certificates. Known condition types are `Ready` and `Issuing`.
                  items:
                    description: CertificateCondition contains condition information
                      for an Certificate.
                    properties:
                      lastTransitionTime:
                        description: LastTransitionTime is the timestamp corresponding
                          to the last status change of this condition.
                        format: date-time
                        type: string
                      message:
                        description: Message is a human readable description of the
                          details of the last transition, complementing reason.
                        type: string
                      observedGeneration:
                        description: If set, this represents the .metadata.generation
                          that the condition was set based upon. For instance, if
                          .metadata.generation is currently 12, but the .status.condition[x].observedGeneration
                          is 9, the condition is out of date with respect to the current
                          state of the Certificate.
                        format: int64
                        type: integer
                      reason:
                        description: Reason is a brief machine readable explanation
                          for the condition's last transition.
                        type: string
                      status:
                        description: Status of the condition, one of (`True`, `False`,
                          `Unknown`).
                        enum:
                        - "True"
                        - "False"
                        - Unknown
                        type: string
                      type:
                        description: Type of the condition, known values are (`Ready`,
                          `Issuing`).
                        type: string
                    required:
                    - status
                    - type
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                  - type
                  x-kubernetes-list-type: map
                failedIssuanceAttempts:
                  description: The number of continuous failed issuance attempts up
                    till now. This field gets removed (if set) on a successful issuance
                    and gets set to 1 if unset and an issuance has failed. If an issuance
                    has failed, the delay till the next issuance will be calculated
                    using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1).
                  type: integer
                lastFailureTime:
                  description: LastFailureTime is the time as recorded by the Certificate
                    controller of the most recent failure to complete a CertificateRequest
                    for this Certificate resource. If set, cert-manager will not re-request
                    another Certificate until 1 hour has elapsed from this time.
                  format: date-time
                  type: string
                nextPrivateKeySecretName:
                  description: The name of the Secret resource containing the private
                    key to be used for the next certificate iteration. The keymanager
                    controller will automatically set this field if the `Issuing`
                    condition is set to `True`. It will automatically unset this field
                    when the Issuing condition is not set or False.
                  type: string
                notAfter:
                  description: The expiration time of the certificate stored in the
                    secret named by this resource in `spec.secretName`.
                  format: date-time
                  type: string
                notBefore:
                  description: The time after which the certificate stored in the
                    secret named by this resource in spec.secretName is valid.
                  format: date-time
                  type: string
                renewalTime:
                  description: RenewalTime is the time at which the certificate will
                    be next renewed. If not set, no upcoming renewal is scheduled.
                  format: date-time
                  type: string
                revision:
                  description: "The current 'revision' of the certificate as issued.
                    \n When a CertificateRequest resource is created, it will have
                    the `cert-manager.io/certificate-revision` set to one greater
                    than the current value of this field. \n Upon issuance, this field
                    will be set to the value of the annotation on the CertificateRequest
                    resource used to issue the certificate. \n Persisting the value
                    on the CertificateRequest resource allows the certificates controller
                    to know whether a request is part of an old issuance or if it
                    is part of the ongoing revision's issuance by checking if the
                    revision value in the annotation is greater than this field."
                  type: integer
              type: object
          required:
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - cert-manager
      kind: Certificate
      listKind: CertificateList
      plural: certificates
      shortNames:
      - cert
      - certs
      singular: certificate
    conditions:
    - lastTransitionTime: "2025-07-31T03:46:28Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:46:28Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"labels":{"app":"cert-manager","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.8.0"},"name":"challenges.acme.cert-manager.io"},"spec":{"group":"acme.cert-manager.io","names":{"categories":["cert-manager","cert-manager-acme"],"kind":"Challenge","listKind":"ChallengeList","plural":"challenges","singular":"challenge"},"scope":"Namespaced","versions":[{"additionalPrinterColumns":[{"jsonPath":".status.state","name":"State","type":"string"},{"jsonPath":".spec.dnsName","name":"Domain","type":"string"},{"jsonPath":".status.reason","name":"Reason","priority":1,"type":"string"},{"description":"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.","jsonPath":".metadata.creationTimestamp","name":"Age","type":"date"}],"name":"v1","schema":{"openAPIV3Schema":{"description":"Challenge is a type to represent a Challenge request with an ACME server","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"properties":{"authorizationURL":{"description":"The URL to the ACME Authorization resource that this challenge is a part of.","type":"string"},"dnsName":{"description":"dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.","type":"string"},"issuerRef":{"description":"References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.","properties":{"group":{"description":"Group of the resource being referred to.","type":"string"},"kind":{"description":"Kind of the resource being referred to.","type":"string"},"name":{"description":"Name of the resource being referred to.","type":"string"}},"required":["name"],"type":"object"},"key":{"description":"The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `\u003cprivate key JWK thumbprint\u003e.\u003ckey from acme server for challenge\u003e`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `\u003cprivate key JWK thumbprint\u003e.\u003ckey from acme server for challenge\u003e` text that must be set as the TXT record content.","type":"string"},"solver":{"description":"Contains the domain solving configuration that should be used to solve this challenge resource.","properties":{"dns01":{"description":"Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.","properties":{"acmeDNS":{"description":"Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.","properties":{"accountSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"host":{"type":"string"}},"required":["accountSecretRef","host"],"type":"object"},"akamai":{"description":"Use the Akamai DNS zone management API to manage DNS01 challenge records.","properties":{"accessTokenSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"clientSecretSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"clientTokenSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"serviceConsumerDomain":{"type":"string"}},"required":["accessTokenSecretRef","clientSecretSecretRef","clientTokenSecretRef","serviceConsumerDomain"],"type":"object"},"azureDNS":{"description":"Use the Microsoft Azure DNS API to manage DNS01 challenge records.","properties":{"clientID":{"description":"if both this and ClientSecret are left unset MSI will be used","type":"string"},"clientSecretSecretRef":{"description":"if both this and ClientID are left unset MSI will be used","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"environment":{"description":"name of the Azure environment (default AzurePublicCloud)","enum":["AzurePublicCloud","AzureChinaCloud","AzureGermanCloud","AzureUSGovernmentCloud"],"type":"string"},"hostedZoneName":{"description":"name of the DNS zone that should be used","type":"string"},"managedIdentity":{"description":"managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID","properties":{"clientID":{"description":"client ID of the managed identity, can not be used at the same time as resourceID","type":"string"},"resourceID":{"description":"resource ID of the managed identity, can not be used at the same time as clientID","type":"string"}},"type":"object"},"resourceGroupName":{"description":"resource group the DNS zone is located in","type":"string"},"subscriptionID":{"description":"ID of the Azure subscription","type":"string"},"tenantID":{"description":"when specifying ClientID and ClientSecret then this field is also needed","type":"string"}},"required":["resourceGroupName","subscriptionID"],"type":"object"},"cloudDNS":{"description":"Use the Google Cloud DNS API to manage DNS01 challenge records.","properties":{"hostedZoneName":{"description":"HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.","type":"string"},"project":{"type":"string"},"serviceAccountSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["project"],"type":"object"},"cloudflare":{"description":"Use the Cloudflare API to manage DNS01 challenge records.","properties":{"apiKeySecretRef":{"description":"API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"apiTokenSecretRef":{"description":"API token used to authenticate with Cloudflare.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"email":{"description":"Email of the account, only required when using API key based authentication.","type":"string"}},"type":"object"},"cnameStrategy":{"description":"CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.","enum":["None","Follow"],"type":"string"},"digitalocean":{"description":"Use the DigitalOcean DNS API to manage DNS01 challenge records.","properties":{"tokenSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["tokenSecretRef"],"type":"object"},"rfc2136":{"description":"Use RFC2136 (\"Dynamic Updates in the Domain Name System\") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.","properties":{"nameserver":{"description":"The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.","type":"string"},"tsigAlgorithm":{"description":"The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.","type":"string"},"tsigKeyName":{"description":"The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.","type":"string"},"tsigSecretSecretRef":{"description":"The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["nameserver"],"type":"object"},"route53":{"description":"Use the AWS Route53 API to manage DNS01 challenge records.","properties":{"accessKeyID":{"description":"The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials","type":"string"},"hostedZoneID":{"description":"If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.","type":"string"},"region":{"description":"Always set the region when using AccessKeyID and SecretAccessKey","type":"string"},"role":{"description":"Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata","type":"string"},"secretAccessKeySecretRef":{"description":"The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["region"],"type":"object"},"webhook":{"description":"Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.","properties":{"config":{"description":"Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.","x-kubernetes-preserve-unknown-fields":true},"groupName":{"description":"The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.","type":"string"},"solverName":{"description":"The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.","type":"string"}},"required":["groupName","solverName"],"type":"object"}},"type":"object"},"http01":{"description":"Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.","properties":{"gatewayHTTPRoute":{"description":"The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.","properties":{"labels":{"additionalProperties":{"type":"string"},"description":"Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.","type":"object"},"parentRefs":{"description":"When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways","items":{"description":"ParentRef identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with \"Core\" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. \n The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. \n References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.","properties":{"group":{"default":"gateway.networking.k8s.io","description":"Group is the group of the referent. \n Support: Core","maxLength":253,"pattern":"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$","type":"string"},"kind":{"default":"Gateway","description":"Kind is kind of the referent. \n Support: Core (Gateway) Support: Custom (Other Resources)","maxLength":63,"minLength":1,"pattern":"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$","type":"string"},"name":{"description":"Name is the name of the referent. \n Support: Core","maxLength":253,"minLength":1,"type":"string"},"namespace":{"description":"Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. \n Support: Core","maxLength":63,"minLength":1,"pattern":"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$","type":"string"},"sectionName":{"description":"SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: \n * Gateway: Listener Name \n Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. \n When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \n Support: Core","maxLength":253,"minLength":1,"pattern":"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$","type":"string"}},"required":["name"],"type":"object"},"type":"array"},"serviceType":{"description":"Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.","type":"string"}},"type":"object"},"ingress":{"description":"The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.","properties":{"class":{"description":"The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.","type":"string"},"ingressTemplate":{"description":"Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.","properties":{"metadata":{"description":"ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.","properties":{"annotations":{"additionalProperties":{"type":"string"},"description":"Annotations that should be added to the created ACME HTTP01 solver ingress.","type":"object"},"labels":{"additionalProperties":{"type":"string"},"description":"Labels that should be added to the created ACME HTTP01 solver ingress.","type":"object"}},"type":"object"}},"type":"object"},"name":{"description":"The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.","type":"string"},"podTemplate":{"description":"Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.","properties":{"metadata":{"description":"ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.","properties":{"annotations":{"additionalProperties":{"type":"string"},"description":"Annotations that should be added to the create ACME HTTP01 solver pods.","type":"object"},"labels":{"additionalProperties":{"type":"string"},"description":"Labels that should be added to the created ACME HTTP01 solver pods.","type":"object"}},"type":"object"},"spec":{"description":"PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.","properties":{"affinity":{"description":"If specified, the pod's scheduling constraints","properties":{"nodeAffinity":{"description":"Describes node affinity scheduling rules for the pod.","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.","items":{"description":"An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).","properties":{"preference":{"description":"A node selector term, associated with the corresponding weight.","properties":{"matchExpressions":{"description":"A list of node selector requirements by node's labels.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchFields":{"description":"A list of node selector requirements by node's fields.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"}},"type":"object"},"weight":{"description":"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["preference","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.","properties":{"nodeSelectorTerms":{"description":"Required. A list of node selector terms. The terms are ORed.","items":{"description":"A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.","properties":{"matchExpressions":{"description":"A list of node selector requirements by node's labels.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchFields":{"description":"A list of node selector requirements by node's fields.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"}},"type":"object"},"type":"array"}},"required":["nodeSelectorTerms"],"type":"object"}},"type":"object"},"podAffinity":{"description":"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.","items":{"description":"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)","properties":{"podAffinityTerm":{"description":"Required. A pod affinity term, associated with the corresponding weight.","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"weight":{"description":"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["podAffinityTerm","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.","items":{"description":"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"type":"array"}},"type":"object"},"podAntiAffinity":{"description":"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.","items":{"description":"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)","properties":{"podAffinityTerm":{"description":"Required. A pod affinity term, associated with the corresponding weight.","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"weight":{"description":"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["podAffinityTerm","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.","items":{"description":"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"type":"array"}},"type":"object"}},"type":"object"},"nodeSelector":{"additionalProperties":{"type":"string"},"description":"NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/","type":"object"},"priorityClassName":{"description":"If specified, the pod's priorityClassName.","type":"string"},"serviceAccountName":{"description":"If specified, the pod's service account","type":"string"},"tolerations":{"description":"If specified, the pod's tolerations.","items":{"description":"The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.","properties":{"effect":{"description":"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.","type":"string"},"key":{"description":"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.","type":"string"},"operator":{"description":"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.","type":"string"},"tolerationSeconds":{"description":"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.","format":"int64","type":"integer"},"value":{"description":"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.","type":"string"}},"type":"object"},"type":"array"}},"type":"object"}},"type":"object"},"serviceType":{"description":"Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.","type":"string"}},"type":"object"}},"type":"object"},"selector":{"description":"Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.","properties":{"dnsNames":{"description":"List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.","items":{"type":"string"},"type":"array"},"dnsZones":{"description":"List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.","items":{"type":"string"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"A label selector that is used to refine the set of certificate's that this challenge solver will apply to.","type":"object"}},"type":"object"}},"type":"object"},"token":{"description":"The ACME challenge token for this challenge. This is the raw value returned from the ACME server.","type":"string"},"type":{"description":"The type of ACME challenge this resource represents. One of \"HTTP-01\" or \"DNS-01\".","enum":["HTTP-01","DNS-01"],"type":"string"},"url":{"description":"The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.","type":"string"},"wildcard":{"description":"wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.","type":"boolean"}},"required":["authorizationURL","dnsName","issuerRef","key","solver","token","type","url"],"type":"object"},"status":{"properties":{"presented":{"description":"presented will be set to true if the challenge values for this challenge are currently 'presented'. This *does not* imply the self check is passing. Only that the values have been 'submitted' for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured).","type":"boolean"},"processing":{"description":"Used to denote whether this challenge should be processed or not. This field will only be set to true by the 'scheduling' component. It will only be set to false by the 'challenges' controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.","type":"boolean"},"reason":{"description":"Contains human readable information on why the Challenge is in the current state.","type":"string"},"state":{"description":"Contains the current 'state' of the challenge. If not set, the state of the challenge is unknown.","enum":["valid","ready","pending","processing","invalid","expired","errored"],"type":"string"}},"type":"object"}},"required":["metadata","spec"],"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]}}
    creationTimestamp: "2025-07-31T03:46:28Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.8.0
    name: challenges.acme.cert-manager.io
    resourceVersion: "14069"
    uid: 922f7bf0-8923-40ff-896f-e22e1906dbcd
  spec:
    conversion:
      strategy: None
    group: acme.cert-manager.io
    names:
      categories:
      - cert-manager
      - cert-manager-acme
      kind: Challenge
      listKind: ChallengeList
      plural: challenges
      singular: challenge
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.state
        name: State
        type: string
      - jsonPath: .spec.dnsName
        name: Domain
        type: string
      - jsonPath: .status.reason
        name: Reason
        priority: 1
        type: string
      - description: CreationTimestamp is a timestamp representing the server time
          when this object was created. It is not guaranteed to be set in happens-before
          order across separate operations. Clients may not set this value. It is
          represented in RFC3339 form and is in UTC.
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: Challenge is a type to represent a Challenge request with an
            ACME server
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              properties:
                authorizationURL:
                  description: The URL to the ACME Authorization resource that this
                    challenge is a part of.
                  type: string
                dnsName:
                  description: dnsName is the identifier that this challenge is for,
                    e.g. example.com. If the requested DNSName is a 'wildcard', this
                    field MUST be set to the non-wildcard domain, e.g. for `*.example.com`,
                    it must be `example.com`.
                  type: string
                issuerRef:
                  description: References a properly configured ACME-type Issuer which
                    should be used to create this Challenge. If the Issuer does not
                    exist, processing will be retried. If the Issuer is not an 'ACME'
                    Issuer, an error will be returned and the Challenge will be marked
                    as failed.
                  properties:
                    group:
                      description: Group of the resource being referred to.
                      type: string
                    kind:
                      description: Kind of the resource being referred to.
                      type: string
                    name:
                      description: Name of the resource being referred to.
                      type: string
                  required:
                  - name
                  type: object
                key:
                  description: 'The ACME challenge key for this challenge For HTTP01
                    challenges, this is the value that must be responded with to complete
                    the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key
                    from acme server for challenge>`. For DNS01 challenges, this is
                    the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key
                    from acme server for challenge>` text that must be set as the
                    TXT record content.'
                  type: string
                solver:
                  description: Contains the domain solving configuration that should
                    be used to solve this challenge resource.
                  properties:
                    dns01:
                      description: Configures cert-manager to attempt to complete
                        authorizations by performing the DNS01 challenge flow.
                      properties:
                        acmeDNS:
                          description: Use the 'ACME DNS' (https://github.com/joohoi/acme-dns)
                            API to manage DNS01 challenge records.
                          properties:
                            accountSecretRef:
                              description: A reference to a specific 'key' within
                                a Secret resource. In some instances, `key` is a required
                                field.
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                            host:
                              type: string
                          required:
                          - accountSecretRef
                          - host
                          type: object
                        akamai:
                          description: Use the Akamai DNS zone management API to manage
                            DNS01 challenge records.
                          properties:
                            accessTokenSecretRef:
                              description: A reference to a specific 'key' within
                                a Secret resource. In some instances, `key` is a required
                                field.
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                            clientSecretSecretRef:
                              description: A reference to a specific 'key' within
                                a Secret resource. In some instances, `key` is a required
                                field.
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                            clientTokenSecretRef:
                              description: A reference to a specific 'key' within
                                a Secret resource. In some instances, `key` is a required
                                field.
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                            serviceConsumerDomain:
                              type: string
                          required:
                          - accessTokenSecretRef
                          - clientSecretSecretRef
                          - clientTokenSecretRef
                          - serviceConsumerDomain
                          type: object
                        azureDNS:
                          description: Use the Microsoft Azure DNS API to manage DNS01
                            challenge records.
                          properties:
                            clientID:
                              description: if both this and ClientSecret are left
                                unset MSI will be used
                              type: string
                            clientSecretSecretRef:
                              description: if both this and ClientID are left unset
                                MSI will be used
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                            environment:
                              description: name of the Azure environment (default
                                AzurePublicCloud)
                              enum:
                              - AzurePublicCloud
                              - AzureChinaCloud
                              - AzureGermanCloud
                              - AzureUSGovernmentCloud
                              type: string
                            hostedZoneName:
                              description: name of the DNS zone that should be used
                              type: string
                            managedIdentity:
                              description: managed identity configuration, can not
                                be used at the same time as clientID, clientSecretSecretRef
                                or tenantID
                              properties:
                                clientID:
                                  description: client ID of the managed identity,
                                    can not be used at the same time as resourceID
                                  type: string
                                resourceID:
                                  description: resource ID of the managed identity,
                                    can not be used at the same time as clientID
                                  type: string
                              type: object
                            resourceGroupName:
                              description: resource group the DNS zone is located
                                in
                              type: string
                            subscriptionID:
                              description: ID of the Azure subscription
                              type: string
                            tenantID:
                              description: when specifying ClientID and ClientSecret
                                then this field is also needed
                              type: string
                          required:
                          - resourceGroupName
                          - subscriptionID
                          type: object
                        cloudDNS:
                          description: Use the Google Cloud DNS API to manage DNS01
                            challenge records.
                          properties:
                            hostedZoneName:
                              description: HostedZoneName is an optional field that
                                tells cert-manager in which Cloud DNS zone the challenge
                                record has to be created. If left empty cert-manager
                                will automatically choose a zone.
                              type: string
                            project:
                              type: string
                            serviceAccountSecretRef:
                              description: A reference to a specific 'key' within
                                a Secret resource. In some instances, `key` is a required
                                field.
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                          required:
                          - project
                          type: object
                        cloudflare:
                          description: Use the Cloudflare API to manage DNS01 challenge
                            records.
                          properties:
                            apiKeySecretRef:
                              description: 'API key to use to authenticate with Cloudflare.
                                Note: using an API token to authenticate is now the
                                recommended method as it allows greater control of
                                permissions.'
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                            apiTokenSecretRef:
                              description: API token used to authenticate with Cloudflare.
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                            email:
                              description: Email of the account, only required when
                                using API key based authentication.
                              type: string
                          type: object
                        cnameStrategy:
                          description: CNAMEStrategy configures how the DNS01 provider
                            should handle CNAME records when found in DNS zones.
                          enum:
                          - None
                          - Follow
                          type: string
                        digitalocean:
                          description: Use the DigitalOcean DNS API to manage DNS01
                            challenge records.
                          properties:
                            tokenSecretRef:
                              description: A reference to a specific 'key' within
                                a Secret resource. In some instances, `key` is a required
                                field.
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                          required:
                          - tokenSecretRef
                          type: object
                        rfc2136:
                          description: Use RFC2136 ("Dynamic Updates in the Domain
                            Name System") (https://datatracker.ietf.org/doc/rfc2136/)
                            to manage DNS01 challenge records.
                          properties:
                            nameserver:
                              description: The IP address or hostname of an authoritative
                                DNS server supporting RFC2136 in the form host:port.
                                If the host is an IPv6 address it must be enclosed
                                in square brackets (e.g [2001:db8::1]) ; port is optional.
                                This field is required.
                              type: string
                            tsigAlgorithm:
                              description: 'The TSIG Algorithm configured in the DNS
                                supporting RFC2136. Used only when ``tsigSecretSecretRef``
                                and ``tsigKeyName`` are defined. Supported values
                                are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``,
                                ``HMACSHA256`` or ``HMACSHA512``.'
                              type: string
                            tsigKeyName:
                              description: The TSIG Key name configured in the DNS.
                                If ``tsigSecretSecretRef`` is defined, this field
                                is required.
                              type: string
                            tsigSecretSecretRef:
                              description: The name of the secret containing the TSIG
                                value. If ``tsigKeyName`` is defined, this field is
                                required.
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                          required:
                          - nameserver
                          type: object
                        route53:
                          description: Use the AWS Route53 API to manage DNS01 challenge
                            records.
                          properties:
                            accessKeyID:
                              description: 'The AccessKeyID is used for authentication.
                                If not set we fall-back to using env vars, shared
                                credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                              type: string
                            hostedZoneID:
                              description: If set, the provider will manage only this
                                zone in Route53 and will not do an lookup using the
                                route53:ListHostedZonesByName api call.
                              type: string
                            region:
                              description: Always set the region when using AccessKeyID
                                and SecretAccessKey
                              type: string
                            role:
                              description: Role is a Role ARN which the Route53 provider
                                will assume using either the explicit credentials
                                AccessKeyID/SecretAccessKey or the inferred credentials
                                from environment variables, shared credentials file
                                or AWS Instance metadata
                              type: string
                            secretAccessKeySecretRef:
                              description: The SecretAccessKey is used for authentication.
                                If not set we fall-back to using env vars, shared
                                credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                          required:
                          - region
                          type: object
                        webhook:
                          description: Configure an external webhook based DNS01 challenge
                            solver to manage DNS01 challenge records.
                          properties:
                            config:
                              description: Additional configuration that should be
                                passed to the webhook apiserver when challenges are
                                processed. This can contain arbitrary JSON data. Secret
                                values should not be specified in this stanza. If
                                secret values are needed (e.g. credentials for a DNS
                                service), you should use a SecretKeySelector to reference
                                a Secret resource. For details on the schema of this
                                field, consult the webhook provider implementation's
                                documentation.
                              x-kubernetes-preserve-unknown-fields: true
                            groupName:
                              description: The API group name that should be used
                                when POSTing ChallengePayload resources to the webhook
                                apiserver. This should be the same as the GroupName
                                specified in the webhook provider implementation.
                              type: string
                            solverName:
                              description: The name of the solver to use, as defined
                                in the webhook provider implementation. This will
                                typically be the name of the provider, e.g. 'cloudflare'.
                              type: string
                          required:
                          - groupName
                          - solverName
                          type: object
                      type: object
                    http01:
                      description: Configures cert-manager to attempt to complete
                        authorizations by performing the HTTP01 challenge flow. It
                        is not possible to obtain certificates for wildcard domain
                        names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
                      properties:
                        gatewayHTTPRoute:
                          description: The Gateway API is a sig-network community
                            API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/).
                            The Gateway solver will create HTTPRoutes with the specified
                            labels in the same namespace as the challenge. This solver
                            is experimental, and fields / behaviour may change in
                            the future.
                          properties:
                            labels:
                              additionalProperties:
                                type: string
                              description: Custom labels that will be applied to HTTPRoutes
                                created by cert-manager while solving HTTP-01 challenges.
                              type: object
                            parentRefs:
                              description: 'When solving an HTTP-01 challenge, cert-manager
                                creates an HTTPRoute. cert-manager needs to know which
                                parentRefs should be used when creating the HTTPRoute.
                                Usually, the parentRef references a Gateway. See:
                                https://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways'
                              items:
                                description: "ParentRef identifies an API object (usually
                                  a Gateway) that can be considered a parent of this
                                  resource (usually a route). The only kind of parent
                                  resource with \"Core\" support is Gateway. This
                                  API may be extended in the future to support additional
                                  kinds of parent resources, such as HTTPRoute. \n
                                  The API object must be valid in the cluster; the
                                  Group and Kind must be registered in the cluster
                                  for this reference to be valid. \n References to
                                  objects with invalid Group and Kind are not valid,
                                  and must be rejected by the implementation, with
                                  appropriate Conditions set on the containing object."
                                properties:
                                  group:
                                    default: gateway.networking.k8s.io
                                    description: "Group is the group of the referent.
                                      \n Support: Core"
                                    maxLength: 253
                                    pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                                    type: string
                                  kind:
                                    default: Gateway
                                    description: "Kind is kind of the referent. \n
                                      Support: Core (Gateway) Support: Custom (Other
                                      Resources)"
                                    maxLength: 63
                                    minLength: 1
                                    pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                                    type: string
                                  name:
                                    description: "Name is the name of the referent.
                                      \n Support: Core"
                                    maxLength: 253
                                    minLength: 1
                                    type: string
                                  namespace:
                                    description: "Namespace is the namespace of the
                                      referent. When unspecified (or empty string),
                                      this refers to the local namespace of the Route.
                                      \n Support: Core"
                                    maxLength: 63
                                    minLength: 1
                                    pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                                    type: string
                                  sectionName:
                                    description: "SectionName is the name of a section
                                      within the target resource. In the following
                                      resources, SectionName is interpreted as the
                                      following: \n * Gateway: Listener Name \n Implementations
                                      MAY choose to support attaching Routes to other
                                      resources. If that is the case, they MUST clearly
                                      document how SectionName is interpreted. \n
                                      When unspecified (empty string), this will reference
                                      the entire resource. For the purpose of status,
                                      an attachment is considered successful if at
                                      least one section in the parent resource accepts
                                      it. For example, Gateway listeners can restrict
                                      which Routes can attach to them by Route kind,
                                      namespace, or hostname. If 1 of 2 Gateway listeners
                                      accept attachment from the referencing Route,
                                      the Route MUST be considered successfully attached.
                                      If no Gateway listeners accept attachment from
                                      this Route, the Route MUST be considered detached
                                      from the Gateway. \n Support: Core"
                                    maxLength: 253
                                    minLength: 1
                                    pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                                    type: string
                                required:
                                - name
                                type: object
                              type: array
                            serviceType:
                              description: Optional service type for Kubernetes solver
                                service. Supported values are NodePort or ClusterIP.
                                If unset, defaults to NodePort.
                              type: string
                          type: object
                        ingress:
                          description: The ingress based HTTP01 challenge solver will
                            solve challenges by creating or modifying Ingress resources
                            in order to route requests for '/.well-known/acme-challenge/XYZ'
                            to 'challenge solver' pods that are provisioned by cert-manager
                            for each Challenge to be completed.
                          properties:
                            class:
                              description: The ingress class to use when creating
                                Ingress resources to solve ACME challenges that use
                                this challenge solver. Only one of 'class' or 'name'
                                may be specified.
                              type: string
                            ingressTemplate:
                              description: Optional ingress template used to configure
                                the ACME challenge solver ingress used for HTTP01
                                challenges.
                              properties:
                                metadata:
                                  description: ObjectMeta overrides for the ingress
                                    used to solve HTTP01 challenges. Only the 'labels'
                                    and 'annotations' fields may be set. If labels
                                    or annotations overlap with in-built values, the
                                    values here will override the in-built values.
                                  properties:
                                    annotations:
                                      additionalProperties:
                                        type: string
                                      description: Annotations that should be added
                                        to the created ACME HTTP01 solver ingress.
                                      type: object
                                    labels:
                                      additionalProperties:
                                        type: string
                                      description: Labels that should be added to
                                        the created ACME HTTP01 solver ingress.
                                      type: object
                                  type: object
                              type: object
                            name:
                              description: The name of the ingress resource that should
                                have ACME challenge solving routes inserted into it
                                in order to solve HTTP01 challenges. This is typically
                                used in conjunction with ingress controllers like
                                ingress-gce, which maintains a 1:1 mapping between
                                external IPs and ingress resources.
                              type: string
                            podTemplate:
                              description: Optional pod template used to configure
                                the ACME challenge solver pods used for HTTP01 challenges.
                              properties:
                                metadata:
                                  description: ObjectMeta overrides for the pod used
                                    to solve HTTP01 challenges. Only the 'labels'
                                    and 'annotations' fields may be set. If labels
                                    or annotations overlap with in-built values, the
                                    values here will override the in-built values.
                                  properties:
                                    annotations:
                                      additionalProperties:
                                        type: string
                                      description: Annotations that should be added
                                        to the create ACME HTTP01 solver pods.
                                      type: object
                                    labels:
                                      additionalProperties:
                                        type: string
                                      description: Labels that should be added to
                                        the created ACME HTTP01 solver pods.
                                      type: object
                                  type: object
                                spec:
                                  description: PodSpec defines overrides for the HTTP01
                                    challenge solver pod. Only the 'priorityClassName',
                                    'nodeSelector', 'affinity', 'serviceAccountName'
                                    and 'tolerations' fields are supported currently.
                                    All other fields will be ignored.
                                  properties:
                                    affinity:
                                      description: If specified, the pod's scheduling
                                        constraints
                                      properties:
                                        nodeAffinity:
                                          description: Describes node affinity scheduling
                                            rules for the pod.
                                          properties:
                                            preferredDuringSchedulingIgnoredDuringExecution:
                                              description: The scheduler will prefer
                                                to schedule pods to nodes that satisfy
                                                the affinity expressions specified
                                                by this field, but it may choose a
                                                node that violates one or more of
                                                the expressions. The node that is
                                                most preferred is the one with the
                                                greatest sum of weights, i.e. for
                                                each node that meets all of the scheduling
                                                requirements (resource request, requiredDuringScheduling
                                                affinity expressions, etc.), compute
                                                a sum by iterating through the elements
                                                of this field and adding "weight"
                                                to the sum if the node matches the
                                                corresponding matchExpressions; the
                                                node(s) with the highest sum are the
                                                most preferred.
                                              items:
                                                description: An empty preferred scheduling
                                                  term matches all objects with implicit
                                                  weight 0 (i.e. it's a no-op). A
                                                  null preferred scheduling term matches
                                                  no objects (i.e. is also a no-op).
                                                properties:
                                                  preference:
                                                    description: A node selector term,
                                                      associated with the corresponding
                                                      weight.
                                                    properties:
                                                      matchExpressions:
                                                        description: A list of node
                                                          selector requirements by
                                                          node's labels.
                                                        items:
                                                          description: A node selector
                                                            requirement is a selector
                                                            that contains values,
                                                            a key, and an operator
                                                            that relates the key and
                                                            values.
                                                          properties:
                                                            key:
                                                              description: The label
                                                                key that the selector
                                                                applies to.
                                                              type: string
                                                            operator:
                                                              description: Represents
                                                                a key's relationship
                                                                to a set of values.
                                                                Valid operators are
                                                                In, NotIn, Exists,
                                                                DoesNotExist. Gt,
                                                                and Lt.
                                                              type: string
                                                            values:
                                                              description: An array
                                                                of string values.
                                                                If the operator is
                                                                In or NotIn, the values
                                                                array must be non-empty.
                                                                If the operator is
                                                                Exists or DoesNotExist,
                                                                the values array must
                                                                be empty. If the operator
                                                                is Gt or Lt, the values
                                                                array must have a
                                                                single element, which
                                                                will be interpreted
                                                                as an integer. This
                                                                array is replaced
                                                                during a strategic
                                                                merge patch.
                                                              items:
                                                                type: string
                                                              type: array
                                                          required:
                                                          - key
                                                          - operator
                                                          type: object
                                                        type: array
                                                      matchFields:
                                                        description: A list of node
                                                          selector requirements by
                                                          node's fields.
                                                        items:
                                                          description: A node selector
                                                            requirement is a selector
                                                            that contains values,
                                                            a key, and an operator
                                                            that relates the key and
                                                            values.
                                                          properties:
                                                            key:
                                                              description: The label
                                                                key that the selector
                                                                applies to.
                                                              type: string
                                                            operator:
                                                              description: Represents
                                                                a key's relationship
                                                                to a set of values.
                                                                Valid operators are
                                                                In, NotIn, Exists,
                                                                DoesNotExist. Gt,
                                                                and Lt.
                                                              type: string
                                                            values:
                                                              description: An array
                                                                of string values.
                                                                If the operator is
                                                                In or NotIn, the values
                                                                array must be non-empty.
                                                                If the operator is
                                                                Exists or DoesNotExist,
                                                                the values array must
                                                                be empty. If the operator
                                                                is Gt or Lt, the values
                                                                array must have a
                                                                single element, which
                                                                will be interpreted
                                                                as an integer. This
                                                                array is replaced
                                                                during a strategic
                                                                merge patch.
                                                              items:
                                                                type: string
                                                              type: array
                                                          required:
                                                          - key
                                                          - operator
                                                          type: object
                                                        type: array
                                                    type: object
                                                  weight:
                                                    description: Weight associated
                                                      with matching the corresponding
                                                      nodeSelectorTerm, in the range
                                                      1-100.
                                                    format: int32
                                                    type: integer
                                                required:
                                                - preference
                                                - weight
                                                type: object
                                              type: array
                                            requiredDuringSchedulingIgnoredDuringExecution:
                                              description: If the affinity requirements
                                                specified by this field are not met
                                                at scheduling time, the pod will not
                                                be scheduled onto the node. If the
                                                affinity requirements specified by
                                                this field cease to be met at some
                                                point during pod execution (e.g. due
                                                to an update), the system may or may
                                                not try to eventually evict the pod
                                                from its node.
                                              properties:
                                                nodeSelectorTerms:
                                                  description: Required. A list of
                                                    node selector terms. The terms
                                                    are ORed.
                                                  items:
                                                    description: A null or empty node
                                                      selector term matches no objects.
                                                      The requirements of them are
                                                      ANDed. The TopologySelectorTerm
                                                      type implements a subset of
                                                      the NodeSelectorTerm.
                                                    properties:
                                                      matchExpressions:
                                                        description: A list of node
                                                          selector requirements by
                                                          node's labels.
                                                        items:
                                                          description: A node selector
                                                            requirement is a selector
                                                            that contains values,
                                                            a key, and an operator
                                                            that relates the key and
                                                            values.
                                                          properties:
                                                            key:
                                                              description: The label
                                                                key that the selector
                                                                applies to.
                                                              type: string
                                                            operator:
                                                              description: Represents
                                                                a key's relationship
                                                                to a set of values.
                                                                Valid operators are
                                                                In, NotIn, Exists,
                                                                DoesNotExist. Gt,
                                                                and Lt.
                                                              type: string
                                                            values:
                                                              description: An array
                                                                of string values.
                                                                If the operator is
                                                                In or NotIn, the values
                                                                array must be non-empty.
                                                                If the operator is
                                                                Exists or DoesNotExist,
                                                                the values array must
                                                                be empty. If the operator
                                                                is Gt or Lt, the values
                                                                array must have a
                                                                single element, which
                                                                will be interpreted
                                                                as an integer. This
                                                                array is replaced
                                                                during a strategic
                                                                merge patch.
                                                              items:
                                                                type: string
                                                              type: array
                                                          required:
                                                          - key
                                                          - operator
                                                          type: object
                                                        type: array
                                                      matchFields:
                                                        description: A list of node
                                                          selector requirements by
                                                          node's fields.
                                                        items:
                                                          description: A node selector
                                                            requirement is a selector
                                                            that contains values,
                                                            a key, and an operator
                                                            that relates the key and
                                                            values.
                                                          properties:
                                                            key:
                                                              description: The label
                                                                key that the selector
                                                                applies to.
                                                              type: string
                                                            operator:
                                                              description: Represents
                                                                a key's relationship
                                                                to a set of values.
                                                                Valid operators are
                                                                In, NotIn, Exists,
                                                                DoesNotExist. Gt,
                                                                and Lt.
                                                              type: string
                                                            values:
                                                              description: An array
                                                                of string values.
                                                                If the operator is
                                                                In or NotIn, the values
                                                                array must be non-empty.
                                                                If the operator is
                                                                Exists or DoesNotExist,
                                                                the values array must
                                                                be empty. If the operator
                                                                is Gt or Lt, the values
                                                                array must have a
                                                                single element, which
                                                                will be interpreted
                                                                as an integer. This
                                                                array is replaced
                                                                during a strategic
                                                                merge patch.
                                                              items:
                                                                type: string
                                                              type: array
                                                          required:
                                                          - key
                                                          - operator
                                                          type: object
                                                        type: array
                                                    type: object
                                                  type: array
                                              required:
                                              - nodeSelectorTerms
                                              type: object
                                          type: object
                                        podAffinity:
                                          description: Describes pod affinity scheduling
                                            rules (e.g. co-locate this pod in the
                                            same node, zone, etc. as some other pod(s)).
                                          properties:
                                            preferredDuringSchedulingIgnoredDuringExecution:
                                              description: The scheduler will prefer
                                                to schedule pods to nodes that satisfy
                                                the affinity expressions specified
                                                by this field, but it may choose a
                                                node that violates one or more of
                                                the expressions. The node that is
                                                most preferred is the one with the
                                                greatest sum of weights, i.e. for
                                                each node that meets all of the scheduling
                                                requirements (resource request, requiredDuringScheduling
                                                affinity expressions, etc.), compute
                                                a sum by iterating through the elements
                                                of this field and adding "weight"
                                                to the sum if the node has pods which
                                                matches the corresponding podAffinityTerm;
                                                the node(s) with the highest sum are
                                                the most preferred.
                                              items:
                                                description: The weights of all of
                                                  the matched WeightedPodAffinityTerm
                                                  fields are added per-node to find
                                                  the most preferred node(s)
                                                properties:
                                                  podAffinityTerm:
                                                    description: Required. A pod affinity
                                                      term, associated with the corresponding
                                                      weight.
                                                    properties:
                                                      labelSelector:
                                                        description: A label query
                                                          over a set of resources,
                                                          in this case pods.
                                                        properties:
                                                          matchExpressions:
                                                            description: matchExpressions
                                                              is a list of label selector
                                                              requirements. The requirements
                                                              are ANDed.
                                                            items:
                                                              description: A label
                                                                selector requirement
                                                                is a selector that
                                                                contains values, a
                                                                key, and an operator
                                                                that relates the key
                                                                and values.
                                                              properties:
                                                                key:
                                                                  description: key
                                                                    is the label key
                                                                    that the selector
                                                                    applies to.
                                                                  type: string
                                                                operator:
                                                                  description: operator
                                                                    represents a key's
                                                                    relationship to
                                                                    a set of values.
                                                                    Valid operators
                                                                    are In, NotIn,
                                                                    Exists and DoesNotExist.
                                                                  type: string
                                                                values:
                                                                  description: values
                                                                    is an array of
                                                                    string values.
                                                                    If the operator
                                                                    is In or NotIn,
                                                                    the values array
                                                                    must be non-empty.
                                                                    If the operator
                                                                    is Exists or DoesNotExist,
                                                                    the values array
                                                                    must be empty.
                                                                    This array is
                                                                    replaced during
                                                                    a strategic merge
                                                                    patch.
                                                                  items:
                                                                    type: string
                                                                  type: array
                                                              required:
                                                              - key
                                                              - operator
                                                              type: object
                                                            type: array
                                                          matchLabels:
                                                            additionalProperties:
                                                              type: string
                                                            description: matchLabels
                                                              is a map of {key,value}
                                                              pairs. A single {key,value}
                                                              in the matchLabels map
                                                              is equivalent to an
                                                              element of matchExpressions,
                                                              whose key field is "key",
                                                              the operator is "In",
                                                              and the values array
                                                              contains only "value".
                                                              The requirements are
                                                              ANDed.
                                                            type: object
                                                        type: object
                                                      namespaceSelector:
                                                        description: A label query
                                                          over the set of namespaces
                                                          that the term applies to.
                                                          The term is applied to the
                                                          union of the namespaces
                                                          selected by this field and
                                                          the ones listed in the namespaces
                                                          field. null selector and
                                                          null or empty namespaces
                                                          list means "this pod's namespace".
                                                          An empty selector ({}) matches
                                                          all namespaces. This field
                                                          is beta-level and is only
                                                          honored when PodAffinityNamespaceSelector
                                                          feature is enabled.
                                                        properties:
                                                          matchExpressions:
                                                            description: matchExpressions
                                                              is a list of label selector
                                                              requirements. The requirements
                                                              are ANDed.
                                                            items:
                                                              description: A label
                                                                selector requirement
                                                                is a selector that
                                                                contains values, a
                                                                key, and an operator
                                                                that relates the key
                                                                and values.
                                                              properties:
                                                                key:
                                                                  description: key
                                                                    is the label key
                                                                    that the selector
                                                                    applies to.
                                                                  type: string
                                                                operator:
                                                                  description: operator
                                                                    represents a key's
                                                                    relationship to
                                                                    a set of values.
                                                                    Valid operators
                                                                    are In, NotIn,
                                                                    Exists and DoesNotExist.
                                                                  type: string
                                                                values:
                                                                  description: values
                                                                    is an array of
                                                                    string values.
                                                                    If the operator
                                                                    is In or NotIn,
                                                                    the values array
                                                                    must be non-empty.
                                                                    If the operator
                                                                    is Exists or DoesNotExist,
                                                                    the values array
                                                                    must be empty.
                                                                    This array is
                                                                    replaced during
                                                                    a strategic merge
                                                                    patch.
                                                                  items:
                                                                    type: string
                                                                  type: array
                                                              required:
                                                              - key
                                                              - operator
                                                              type: object
                                                            type: array
                                                          matchLabels:
                                                            additionalProperties:
                                                              type: string
                                                            description: matchLabels
                                                              is a map of {key,value}
                                                              pairs. A single {key,value}
                                                              in the matchLabels map
                                                              is equivalent to an
                                                              element of matchExpressions,
                                                              whose key field is "key",
                                                              the operator is "In",
                                                              and the values array
                                                              contains only "value".
                                                              The requirements are
                                                              ANDed.
                                                            type: object
                                                        type: object
                                                      namespaces:
                                                        description: namespaces specifies
                                                          a static list of namespace
                                                          names that the term applies
                                                          to. The term is applied
                                                          to the union of the namespaces
                                                          listed in this field and
                                                          the ones selected by namespaceSelector.
                                                          null or empty namespaces
                                                          list and null namespaceSelector
                                                          means "this pod's namespace"
                                                        items:
                                                          type: string
                                                        type: array
                                                      topologyKey:
                                                        description: This pod should
                                                          be co-located (affinity)
                                                          or not co-located (anti-affinity)
                                                          with the pods matching the
                                                          labelSelector in the specified
                                                          namespaces, where co-located
                                                          is defined as running on
                                                          a node whose value of the
                                                          label with key topologyKey
                                                          matches that of any node
                                                          on which any of the selected
                                                          pods is running. Empty topologyKey
                                                          is not allowed.
                                                        type: string
                                                    required:
                                                    - topologyKey
                                                    type: object
                                                  weight:
                                                    description: weight associated
                                                      with matching the corresponding
                                                      podAffinityTerm, in the range
                                                      1-100.
                                                    format: int32
                                                    type: integer
                                                required:
                                                - podAffinityTerm
                                                - weight
                                                type: object
                                              type: array
                                            requiredDuringSchedulingIgnoredDuringExecution:
                                              description: If the affinity requirements
                                                specified by this field are not met
                                                at scheduling time, the pod will not
                                                be scheduled onto the node. If the
                                                affinity requirements specified by
                                                this field cease to be met at some
                                                point during pod execution (e.g. due
                                                to a pod label update), the system
                                                may or may not try to eventually evict
                                                the pod from its node. When there
                                                are multiple elements, the lists of
                                                nodes corresponding to each podAffinityTerm
                                                are intersected, i.e. all terms must
                                                be satisfied.
                                              items:
                                                description: Defines a set of pods
                                                  (namely those matching the labelSelector
                                                  relative to the given namespace(s))
                                                  that this pod should be co-located
                                                  (affinity) or not co-located (anti-affinity)
                                                  with, where co-located is defined
                                                  as running on a node whose value
                                                  of the label with key <topologyKey>
                                                  matches that of any node on which
                                                  a pod of the set of pods is running
                                                properties:
                                                  labelSelector:
                                                    description: A label query over
                                                      a set of resources, in this
                                                      case pods.
                                                    properties:
                                                      matchExpressions:
                                                        description: matchExpressions
                                                          is a list of label selector
                                                          requirements. The requirements
                                                          are ANDed.
                                                        items:
                                                          description: A label selector
                                                            requirement is a selector
                                                            that contains values,
                                                            a key, and an operator
                                                            that relates the key and
                                                            values.
                                                          properties:
                                                            key:
                                                              description: key is
                                                                the label key that
                                                                the selector applies
                                                                to.
                                                              type: string
                                                            operator:
                                                              description: operator
                                                                represents a key's
                                                                relationship to a
                                                                set of values. Valid
                                                                operators are In,
                                                                NotIn, Exists and
                                                                DoesNotExist.
                                                              type: string
                                                            values:
                                                              description: values
                                                                is an array of string
                                                                values. If the operator
                                                                is In or NotIn, the
                                                                values array must
                                                                be non-empty. If the
                                                                operator is Exists
                                                                or DoesNotExist, the
                                                                values array must
                                                                be empty. This array
                                                                is replaced during
                                                                a strategic merge
                                                                patch.
                                                              items:
                                                                type: string
                                                              type: array
                                                          required:
                                                          - key
                                                          - operator
                                                          type: object
                                                        type: array
                                                      matchLabels:
                                                        additionalProperties:
                                                          type: string
                                                        description: matchLabels is
                                                          a map of {key,value} pairs.
                                                          A single {key,value} in
                                                          the matchLabels map is equivalent
                                                          to an element of matchExpressions,
                                                          whose key field is "key",
                                                          the operator is "In", and
                                                          the values array contains
                                                          only "value". The requirements
                                                          are ANDed.
                                                        type: object
                                                    type: object
                                                  namespaceSelector:
                                                    description: A label query over
                                                      the set of namespaces that the
                                                      term applies to. The term is
                                                      applied to the union of the
                                                      namespaces selected by this
                                                      field and the ones listed in
                                                      the namespaces field. null selector
                                                      and null or empty namespaces
                                                      list means "this pod's namespace".
                                                      An empty selector ({}) matches
                                                      all namespaces. This field is
                                                      beta-level and is only honored
                                                      when PodAffinityNamespaceSelector
                                                      feature is enabled.
                                                    properties:
                                                      matchExpressions:
                                                        description: matchExpressions
                                                          is a list of label selector
                                                          requirements. The requirements
                                                          are ANDed.
                                                        items:
                                                          description: A label selector
                                                            requirement is a selector
                                                            that contains values,
                                                            a key, and an operator
                                                            that relates the key and
                                                            values.
                                                          properties:
                                                            key:
                                                              description: key is
                                                                the label key that
                                                                the selector applies
                                                                to.
                                                              type: string
                                                            operator:
                                                              description: operator
                                                                represents a key's
                                                                relationship to a
                                                                set of values. Valid
                                                                operators are In,
                                                                NotIn, Exists and
                                                                DoesNotExist.
                                                              type: string
                                                            values:
                                                              description: values
                                                                is an array of string
                                                                values. If the operator
                                                                is In or NotIn, the
                                                                values array must
                                                                be non-empty. If the
                                                                operator is Exists
                                                                or DoesNotExist, the
                                                                values array must
                                                                be empty. This array
                                                                is replaced during
                                                                a strategic merge
                                                                patch.
                                                              items:
                                                                type: string
                                                              type: array
                                                          required:
                                                          - key
                                                          - operator
                                                          type: object
                                                        type: array
                                                      matchLabels:
                                                        additionalProperties:
                                                          type: string
                                                        description: matchLabels is
                                                          a map of {key,value} pairs.
                                                          A single {key,value} in
                                                          the matchLabels map is equivalent
                                                          to an element of matchExpressions,
                                                          whose key field is "key",
                                                          the operator is "In", and
                                                          the values array contains
                                                          only "value". The requirements
                                                          are ANDed.
                                                        type: object
                                                    type: object
                                                  namespaces:
                                                    description: namespaces specifies
                                                      a static list of namespace names
                                                      that the term applies to. The
                                                      term is applied to the union
                                                      of the namespaces listed in
                                                      this field and the ones selected
                                                      by namespaceSelector. null or
                                                      empty namespaces list and null
                                                      namespaceSelector means "this
                                                      pod's namespace"
                                                    items:
                                                      type: string
                                                    type: array
                                                  topologyKey:
                                                    description: This pod should be
                                                      co-located (affinity) or not
                                                      co-located (anti-affinity) with
                                                      the pods matching the labelSelector
                                                      in the specified namespaces,
                                                      where co-located is defined
                                                      as running on a node whose value
                                                      of the label with key topologyKey
                                                      matches that of any node on
                                                      which any of the selected pods
                                                      is running. Empty topologyKey
                                                      is not allowed.
                                                    type: string
                                                required:
                                                - topologyKey
                                                type: object
                                              type: array
                                          type: object
                                        podAntiAffinity:
                                          description: Describes pod anti-affinity
                                            scheduling rules (e.g. avoid putting this
                                            pod in the same node, zone, etc. as some
                                            other pod(s)).
                                          properties:
                                            preferredDuringSchedulingIgnoredDuringExecution:
                                              description: The scheduler will prefer
                                                to schedule pods to nodes that satisfy
                                                the anti-affinity expressions specified
                                                by this field, but it may choose a
                                                node that violates one or more of
                                                the expressions. The node that is
                                                most preferred is the one with the
                                                greatest sum of weights, i.e. for
                                                each node that meets all of the scheduling
                                                requirements (resource request, requiredDuringScheduling
                                                anti-affinity expressions, etc.),
                                                compute a sum by iterating through
                                                the elements of this field and adding
                                                "weight" to the sum if the node has
                                                pods which matches the corresponding
                                                podAffinityTerm; the node(s) with
                                                the highest sum are the most preferred.
                                              items:
                                                description: The weights of all of
                                                  the matched WeightedPodAffinityTerm
                                                  fields are added per-node to find
                                                  the most preferred node(s)
                                                properties:
                                                  podAffinityTerm:
                                                    description: Required. A pod affinity
                                                      term, associated with the corresponding
                                                      weight.
                                                    properties:
                                                      labelSelector:
                                                        description: A label query
                                                          over a set of resources,
                                                          in this case pods.
                                                        properties:
                                                          matchExpressions:
                                                            description: matchExpressions
                                                              is a list of label selector
                                                              requirements. The requirements
                                                              are ANDed.
                                                            items:
                                                              description: A label
                                                                selector requirement
                                                                is a selector that
                                                                contains values, a
                                                                key, and an operator
                                                                that relates the key
                                                                and values.
                                                              properties:
                                                                key:
                                                                  description: key
                                                                    is the label key
                                                                    that the selector
                                                                    applies to.
                                                                  type: string
                                                                operator:
                                                                  description: operator
                                                                    represents a key's
                                                                    relationship to
                                                                    a set of values.
                                                                    Valid operators
                                                                    are In, NotIn,
                                                                    Exists and DoesNotExist.
                                                                  type: string
                                                                values:
                                                                  description: values
                                                                    is an array of
                                                                    string values.
                                                                    If the operator
                                                                    is In or NotIn,
                                                                    the values array
                                                                    must be non-empty.
                                                                    If the operator
                                                                    is Exists or DoesNotExist,
                                                                    the values array
                                                                    must be empty.
                                                                    This array is
                                                                    replaced during
                                                                    a strategic merge
                                                                    patch.
                                                                  items:
                                                                    type: string
                                                                  type: array
                                                              required:
                                                              - key
                                                              - operator
                                                              type: object
                                                            type: array
                                                          matchLabels:
                                                            additionalProperties:
                                                              type: string
                                                            description: matchLabels
                                                              is a map of {key,value}
                                                              pairs. A single {key,value}
                                                              in the matchLabels map
                                                              is equivalent to an
                                                              element of matchExpressions,
                                                              whose key field is "key",
                                                              the operator is "In",
                                                              and the values array
                                                              contains only "value".
                                                              The requirements are
                                                              ANDed.
                                                            type: object
                                                        type: object
                                                      namespaceSelector:
                                                        description: A label query
                                                          over the set of namespaces
                                                          that the term applies to.
                                                          The term is applied to the
                                                          union of the namespaces
                                                          selected by this field and
                                                          the ones listed in the namespaces
                                                          field. null selector and
                                                          null or empty namespaces
                                                          list means "this pod's namespace".
                                                          An empty selector ({}) matches
                                                          all namespaces. This field
                                                          is beta-level and is only
                                                          honored when PodAffinityNamespaceSelector
                                                          feature is enabled.
                                                        properties:
                                                          matchExpressions:
                                                            description: matchExpressions
                                                              is a list of label selector
                                                              requirements. The requirements
                                                              are ANDed.
                                                            items:
                                                              description: A label
                                                                selector requirement
                                                                is a selector that
                                                                contains values, a
                                                                key, and an operator
                                                                that relates the key
                                                                and values.
                                                              properties:
                                                                key:
                                                                  description: key
                                                                    is the label key
                                                                    that the selector
                                                                    applies to.
                                                                  type: string
                                                                operator:
                                                                  description: operator
                                                                    represents a key's
                                                                    relationship to
                                                                    a set of values.
                                                                    Valid operators
                                                                    are In, NotIn,
                                                                    Exists and DoesNotExist.
                                                                  type: string
                                                                values:
                                                                  description: values
                                                                    is an array of
                                                                    string values.
                                                                    If the operator
                                                                    is In or NotIn,
                                                                    the values array
                                                                    must be non-empty.
                                                                    If the operator
                                                                    is Exists or DoesNotExist,
                                                                    the values array
                                                                    must be empty.
                                                                    This array is
                                                                    replaced during
                                                                    a strategic merge
                                                                    patch.
                                                                  items:
                                                                    type: string
                                                                  type: array
                                                              required:
                                                              - key
                                                              - operator
                                                              type: object
                                                            type: array
                                                          matchLabels:
                                                            additionalProperties:
                                                              type: string
                                                            description: matchLabels
                                                              is a map of {key,value}
                                                              pairs. A single {key,value}
                                                              in the matchLabels map
                                                              is equivalent to an
                                                              element of matchExpressions,
                                                              whose key field is "key",
                                                              the operator is "In",
                                                              and the values array
                                                              contains only "value".
                                                              The requirements are
                                                              ANDed.
                                                            type: object
                                                        type: object
                                                      namespaces:
                                                        description: namespaces specifies
                                                          a static list of namespace
                                                          names that the term applies
                                                          to. The term is applied
                                                          to the union of the namespaces
                                                          listed in this field and
                                                          the ones selected by namespaceSelector.
                                                          null or empty namespaces
                                                          list and null namespaceSelector
                                                          means "this pod's namespace"
                                                        items:
                                                          type: string
                                                        type: array
                                                      topologyKey:
                                                        description: This pod should
                                                          be co-located (affinity)
                                                          or not co-located (anti-affinity)
                                                          with the pods matching the
                                                          labelSelector in the specified
                                                          namespaces, where co-located
                                                          is defined as running on
                                                          a node whose value of the
                                                          label with key topologyKey
                                                          matches that of any node
                                                          on which any of the selected
                                                          pods is running. Empty topologyKey
                                                          is not allowed.
                                                        type: string
                                                    required:
                                                    - topologyKey
                                                    type: object
                                                  weight:
                                                    description: weight associated
                                                      with matching the corresponding
                                                      podAffinityTerm, in the range
                                                      1-100.
                                                    format: int32
                                                    type: integer
                                                required:
                                                - podAffinityTerm
                                                - weight
                                                type: object
                                              type: array
                                            requiredDuringSchedulingIgnoredDuringExecution:
                                              description: If the anti-affinity requirements
                                                specified by this field are not met
                                                at scheduling time, the pod will not
                                                be scheduled onto the node. If the
                                                anti-affinity requirements specified
                                                by this field cease to be met at some
                                                point during pod execution (e.g. due
                                                to a pod label update), the system
                                                may or may not try to eventually evict
                                                the pod from its node. When there
                                                are multiple elements, the lists of
                                                nodes corresponding to each podAffinityTerm
                                                are intersected, i.e. all terms must
                                                be satisfied.
                                              items:
                                                description: Defines a set of pods
                                                  (namely those matching the labelSelector
                                                  relative to the given namespace(s))
                                                  that this pod should be co-located
                                                  (affinity) or not co-located (anti-affinity)
                                                  with, where co-located is defined
                                                  as running on a node whose value
                                                  of the label with key <topologyKey>
                                                  matches that of any node on which
                                                  a pod of the set of pods is running
                                                properties:
                                                  labelSelector:
                                                    description: A label query over
                                                      a set of resources, in this
                                                      case pods.
                                                    properties:
                                                      matchExpressions:
                                                        description: matchExpressions
                                                          is a list of label selector
                                                          requirements. The requirements
                                                          are ANDed.
                                                        items:
                                                          description: A label selector
                                                            requirement is a selector
                                                            that contains values,
                                                            a key, and an operator
                                                            that relates the key and
                                                            values.
                                                          properties:
                                                            key:
                                                              description: key is
                                                                the label key that
                                                                the selector applies
                                                                to.
                                                              type: string
                                                            operator:
                                                              description: operator
                                                                represents a key's
                                                                relationship to a
                                                                set of values. Valid
                                                                operators are In,
                                                                NotIn, Exists and
                                                                DoesNotExist.
                                                              type: string
                                                            values:
                                                              description: values
                                                                is an array of string
                                                                values. If the operator
                                                                is In or NotIn, the
                                                                values array must
                                                                be non-empty. If the
                                                                operator is Exists
                                                                or DoesNotExist, the
                                                                values array must
                                                                be empty. This array
                                                                is replaced during
                                                                a strategic merge
                                                                patch.
                                                              items:
                                                                type: string
                                                              type: array
                                                          required:
                                                          - key
                                                          - operator
                                                          type: object
                                                        type: array
                                                      matchLabels:
                                                        additionalProperties:
                                                          type: string
                                                        description: matchLabels is
                                                          a map of {key,value} pairs.
                                                          A single {key,value} in
                                                          the matchLabels map is equivalent
                                                          to an element of matchExpressions,
                                                          whose key field is "key",
                                                          the operator is "In", and
                                                          the values array contains
                                                          only "value". The requirements
                                                          are ANDed.
                                                        type: object
                                                    type: object
                                                  namespaceSelector:
                                                    description: A label query over
                                                      the set of namespaces that the
                                                      term applies to. The term is
                                                      applied to the union of the
                                                      namespaces selected by this
                                                      field and the ones listed in
                                                      the namespaces field. null selector
                                                      and null or empty namespaces
                                                      list means "this pod's namespace".
                                                      An empty selector ({}) matches
                                                      all namespaces. This field is
                                                      beta-level and is only honored
                                                      when PodAffinityNamespaceSelector
                                                      feature is enabled.
                                                    properties:
                                                      matchExpressions:
                                                        description: matchExpressions
                                                          is a list of label selector
                                                          requirements. The requirements
                                                          are ANDed.
                                                        items:
                                                          description: A label selector
                                                            requirement is a selector
                                                            that contains values,
                                                            a key, and an operator
                                                            that relates the key and
                                                            values.
                                                          properties:
                                                            key:
                                                              description: key is
                                                                the label key that
                                                                the selector applies
                                                                to.
                                                              type: string
                                                            operator:
                                                              description: operator
                                                                represents a key's
                                                                relationship to a
                                                                set of values. Valid
                                                                operators are In,
                                                                NotIn, Exists and
                                                                DoesNotExist.
                                                              type: string
                                                            values:
                                                              description: values
                                                                is an array of string
                                                                values. If the operator
                                                                is In or NotIn, the
                                                                values array must
                                                                be non-empty. If the
                                                                operator is Exists
                                                                or DoesNotExist, the
                                                                values array must
                                                                be empty. This array
                                                                is replaced during
                                                                a strategic merge
                                                                patch.
                                                              items:
                                                                type: string
                                                              type: array
                                                          required:
                                                          - key
                                                          - operator
                                                          type: object
                                                        type: array
                                                      matchLabels:
                                                        additionalProperties:
                                                          type: string
                                                        description: matchLabels is
                                                          a map of {key,value} pairs.
                                                          A single {key,value} in
                                                          the matchLabels map is equivalent
                                                          to an element of matchExpressions,
                                                          whose key field is "key",
                                                          the operator is "In", and
                                                          the values array contains
                                                          only "value". The requirements
                                                          are ANDed.
                                                        type: object
                                                    type: object
                                                  namespaces:
                                                    description: namespaces specifies
                                                      a static list of namespace names
                                                      that the term applies to. The
                                                      term is applied to the union
                                                      of the namespaces listed in
                                                      this field and the ones selected
                                                      by namespaceSelector. null or
                                                      empty namespaces list and null
                                                      namespaceSelector means "this
                                                      pod's namespace"
                                                    items:
                                                      type: string
                                                    type: array
                                                  topologyKey:
                                                    description: This pod should be
                                                      co-located (affinity) or not
                                                      co-located (anti-affinity) with
                                                      the pods matching the labelSelector
                                                      in the specified namespaces,
                                                      where co-located is defined
                                                      as running on a node whose value
                                                      of the label with key topologyKey
                                                      matches that of any node on
                                                      which any of the selected pods
                                                      is running. Empty topologyKey
                                                      is not allowed.
                                                    type: string
                                                required:
                                                - topologyKey
                                                type: object
                                              type: array
                                          type: object
                                      type: object
                                    nodeSelector:
                                      additionalProperties:
                                        type: string
                                      description: 'NodeSelector is a selector which
                                        must be true for the pod to fit on a node.
                                        Selector which must match a node''s labels
                                        for the pod to be scheduled on that node.
                                        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                                      type: object
                                    priorityClassName:
                                      description: If specified, the pod's priorityClassName.
                                      type: string
                                    serviceAccountName:
                                      description: If specified, the pod's service
                                        account
                                      type: string
                                    tolerations:
                                      description: If specified, the pod's tolerations.
                                      items:
                                        description: The pod this Toleration is attached
                                          to tolerates any taint that matches the
                                          triple <key,value,effect> using the matching
                                          operator <operator>.
                                        properties:
                                          effect:
                                            description: Effect indicates the taint
                                              effect to match. Empty means match all
                                              taint effects. When specified, allowed
                                              values are NoSchedule, PreferNoSchedule
                                              and NoExecute.
                                            type: string
                                          key:
                                            description: Key is the taint key that
                                              the toleration applies to. Empty means
                                              match all taint keys. If the key is
                                              empty, operator must be Exists; this
                                              combination means to match all values
                                              and all keys.
                                            type: string
                                          operator:
                                            description: Operator represents a key's
                                              relationship to the value. Valid operators
                                              are Exists and Equal. Defaults to Equal.
                                              Exists is equivalent to wildcard for
                                              value, so that a pod can tolerate all
                                              taints of a particular category.
                                            type: string
                                          tolerationSeconds:
                                            description: TolerationSeconds represents
                                              the period of time the toleration (which
                                              must be of effect NoExecute, otherwise
                                              this field is ignored) tolerates the
                                              taint. By default, it is not set, which
                                              means tolerate the taint forever (do
                                              not evict). Zero and negative values
                                              will be treated as 0 (evict immediately)
                                              by the system.
                                            format: int64
                                            type: integer
                                          value:
                                            description: Value is the taint value
                                              the toleration matches to. If the operator
                                              is Exists, the value should be empty,
                                              otherwise just a regular string.
                                            type: string
                                        type: object
                                      type: array
                                  type: object
                              type: object
                            serviceType:
                              description: Optional service type for Kubernetes solver
                                service. Supported values are NodePort or ClusterIP.
                                If unset, defaults to NodePort.
                              type: string
                          type: object
                      type: object
                    selector:
                      description: Selector selects a set of DNSNames on the Certificate
                        resource that should be solved using this challenge solver.
                        If not specified, the solver will be treated as the 'default'
                        solver with the lowest priority, i.e. if any other solver
                        has a more specific match, it will be used instead.
                      properties:
                        dnsNames:
                          description: List of DNSNames that this solver will be used
                            to solve. If specified and a match is found, a dnsNames
                            selector will take precedence over a dnsZones selector.
                            If multiple solvers match with the same dnsNames value,
                            the solver with the most matching labels in matchLabels
                            will be selected. If neither has more matches, the solver
                            defined earlier in the list will be selected.
                          items:
                            type: string
                          type: array
                        dnsZones:
                          description: List of DNSZones that this solver will be used
                            to solve. The most specific DNS zone match specified here
                            will take precedence over other DNS zone matches, so a
                            solver specifying sys.example.com will be selected over
                            one specifying example.com for the domain www.sys.example.com.
                            If multiple solvers match with the same dnsZones value,
                            the solver with the most matching labels in matchLabels
                            will be selected. If neither has more matches, the solver
                            defined earlier in the list will be selected.
                          items:
                            type: string
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: A label selector that is used to refine the
                            set of certificate's that this challenge solver will apply
                            to.
                          type: object
                      type: object
                  type: object
                token:
                  description: The ACME challenge token for this challenge. This is
                    the raw value returned from the ACME server.
                  type: string
                type:
                  description: The type of ACME challenge this resource represents.
                    One of "HTTP-01" or "DNS-01".
                  enum:
                  - HTTP-01
                  - DNS-01
                  type: string
                url:
                  description: The URL of the ACME Challenge resource for this challenge.
                    This can be used to lookup details about the status of this challenge.
                  type: string
                wildcard:
                  description: wildcard will be true if this challenge is for a wildcard
                    identifier, for example '*.example.com'.
                  type: boolean
              required:
              - authorizationURL
              - dnsName
              - issuerRef
              - key
              - solver
              - token
              - type
              - url
              type: object
            status:
              properties:
                presented:
                  description: presented will be set to true if the challenge values
                    for this challenge are currently 'presented'. This *does not*
                    imply the self check is passing. Only that the values have been
                    'submitted' for the appropriate challenge mechanism (i.e. the
                    DNS01 TXT record has been presented, or the HTTP01 configuration
                    has been configured).
                  type: boolean
                processing:
                  description: Used to denote whether this challenge should be processed
                    or not. This field will only be set to true by the 'scheduling'
                    component. It will only be set to false by the 'challenges' controller,
                    after the challenge has reached a final state or timed out. If
                    this field is set to false, the challenge controller will not
                    take any more action.
                  type: boolean
                reason:
                  description: Contains human readable information on why the Challenge
                    is in the current state.
                  type: string
                state:
                  description: Contains the current 'state' of the challenge. If not
                    set, the state of the challenge is unknown.
                  enum:
                  - valid
                  - ready
                  - pending
                  - processing
                  - invalid
                  - expired
                  - errored
                  type: string
              type: object
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - cert-manager
      - cert-manager-acme
      kind: Challenge
      listKind: ChallengeList
      plural: challenges
      singular: challenge
    conditions:
    - lastTransitionTime: "2025-07-31T03:46:28Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:46:28Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{},"labels":{"app":"cert-manager","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.8.0"},"name":"clusterissuers.cert-manager.io"},"spec":{"group":"cert-manager.io","names":{"categories":["cert-manager"],"kind":"ClusterIssuer","listKind":"ClusterIssuerList","plural":"clusterissuers","singular":"clusterissuer"},"scope":"Cluster","versions":[{"additionalPrinterColumns":[{"jsonPath":".status.conditions[?(@.type==\"Ready\")].status","name":"Ready","type":"string"},{"jsonPath":".status.conditions[?(@.type==\"Ready\")].message","name":"Status","priority":1,"type":"string"},{"description":"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.","jsonPath":".metadata.creationTimestamp","name":"Age","type":"date"}],"name":"v1","schema":{"openAPIV3Schema":{"description":"A ClusterIssuer represents a certificate issuing authority which can be referenced as part of `issuerRef` fields. It is similar to an Issuer, however it is cluster-scoped and therefore can be referenced by resources that exist in *any* namespace, not just the same namespace as the referent.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"Desired state of the ClusterIssuer resource.","properties":{"acme":{"description":"ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.","properties":{"disableAccountKeyGeneration":{"description":"Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.","type":"boolean"},"email":{"description":"Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.","type":"string"},"enableDurationFeature":{"description":"Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.","type":"boolean"},"externalAccountBinding":{"description":"ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.","properties":{"keyAlgorithm":{"description":"Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.","enum":["HS256","HS384","HS512"],"type":"string"},"keyID":{"description":"keyID is the ID of the CA key that the External Account is bound to.","type":"string"},"keySecretRef":{"description":"keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["keyID","keySecretRef"],"type":"object"},"preferredChain":{"description":"PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: \"DST Root CA X3\" or \"ISRG Root X1\" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN","maxLength":64,"type":"string"},"privateKeySecretRef":{"description":"PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"server":{"description":"Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: \"https://acme-staging-v02.api.letsencrypt.org/directory\". Only ACME v2 endpoints (i.e. RFC 8555) are supported.","type":"string"},"skipTLSVerify":{"description":"Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.","type":"boolean"},"solvers":{"description":"Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/","items":{"description":"An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.","properties":{"dns01":{"description":"Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.","properties":{"acmeDNS":{"description":"Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.","properties":{"accountSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"host":{"type":"string"}},"required":["accountSecretRef","host"],"type":"object"},"akamai":{"description":"Use the Akamai DNS zone management API to manage DNS01 challenge records.","properties":{"accessTokenSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"clientSecretSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"clientTokenSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"serviceConsumerDomain":{"type":"string"}},"required":["accessTokenSecretRef","clientSecretSecretRef","clientTokenSecretRef","serviceConsumerDomain"],"type":"object"},"azureDNS":{"description":"Use the Microsoft Azure DNS API to manage DNS01 challenge records.","properties":{"clientID":{"description":"if both this and ClientSecret are left unset MSI will be used","type":"string"},"clientSecretSecretRef":{"description":"if both this and ClientID are left unset MSI will be used","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"environment":{"description":"name of the Azure environment (default AzurePublicCloud)","enum":["AzurePublicCloud","AzureChinaCloud","AzureGermanCloud","AzureUSGovernmentCloud"],"type":"string"},"hostedZoneName":{"description":"name of the DNS zone that should be used","type":"string"},"managedIdentity":{"description":"managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID","properties":{"clientID":{"description":"client ID of the managed identity, can not be used at the same time as resourceID","type":"string"},"resourceID":{"description":"resource ID of the managed identity, can not be used at the same time as clientID","type":"string"}},"type":"object"},"resourceGroupName":{"description":"resource group the DNS zone is located in","type":"string"},"subscriptionID":{"description":"ID of the Azure subscription","type":"string"},"tenantID":{"description":"when specifying ClientID and ClientSecret then this field is also needed","type":"string"}},"required":["resourceGroupName","subscriptionID"],"type":"object"},"cloudDNS":{"description":"Use the Google Cloud DNS API to manage DNS01 challenge records.","properties":{"hostedZoneName":{"description":"HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.","type":"string"},"project":{"type":"string"},"serviceAccountSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["project"],"type":"object"},"cloudflare":{"description":"Use the Cloudflare API to manage DNS01 challenge records.","properties":{"apiKeySecretRef":{"description":"API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"apiTokenSecretRef":{"description":"API token used to authenticate with Cloudflare.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"email":{"description":"Email of the account, only required when using API key based authentication.","type":"string"}},"type":"object"},"cnameStrategy":{"description":"CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.","enum":["None","Follow"],"type":"string"},"digitalocean":{"description":"Use the DigitalOcean DNS API to manage DNS01 challenge records.","properties":{"tokenSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["tokenSecretRef"],"type":"object"},"rfc2136":{"description":"Use RFC2136 (\"Dynamic Updates in the Domain Name System\") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.","properties":{"nameserver":{"description":"The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.","type":"string"},"tsigAlgorithm":{"description":"The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.","type":"string"},"tsigKeyName":{"description":"The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.","type":"string"},"tsigSecretSecretRef":{"description":"The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["nameserver"],"type":"object"},"route53":{"description":"Use the AWS Route53 API to manage DNS01 challenge records.","properties":{"accessKeyID":{"description":"The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials","type":"string"},"hostedZoneID":{"description":"If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.","type":"string"},"region":{"description":"Always set the region when using AccessKeyID and SecretAccessKey","type":"string"},"role":{"description":"Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata","type":"string"},"secretAccessKeySecretRef":{"description":"The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["region"],"type":"object"},"webhook":{"description":"Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.","properties":{"config":{"description":"Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.","x-kubernetes-preserve-unknown-fields":true},"groupName":{"description":"The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.","type":"string"},"solverName":{"description":"The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.","type":"string"}},"required":["groupName","solverName"],"type":"object"}},"type":"object"},"http01":{"description":"Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.","properties":{"gatewayHTTPRoute":{"description":"The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.","properties":{"labels":{"additionalProperties":{"type":"string"},"description":"Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.","type":"object"},"parentRefs":{"description":"When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways","items":{"description":"ParentRef identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with \"Core\" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. \n The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. \n References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.","properties":{"group":{"default":"gateway.networking.k8s.io","description":"Group is the group of the referent. \n Support: Core","maxLength":253,"pattern":"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$","type":"string"},"kind":{"default":"Gateway","description":"Kind is kind of the referent. \n Support: Core (Gateway) Support: Custom (Other Resources)","maxLength":63,"minLength":1,"pattern":"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$","type":"string"},"name":{"description":"Name is the name of the referent. \n Support: Core","maxLength":253,"minLength":1,"type":"string"},"namespace":{"description":"Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. \n Support: Core","maxLength":63,"minLength":1,"pattern":"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$","type":"string"},"sectionName":{"description":"SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: \n * Gateway: Listener Name \n Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. \n When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \n Support: Core","maxLength":253,"minLength":1,"pattern":"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$","type":"string"}},"required":["name"],"type":"object"},"type":"array"},"serviceType":{"description":"Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.","type":"string"}},"type":"object"},"ingress":{"description":"The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.","properties":{"class":{"description":"The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.","type":"string"},"ingressTemplate":{"description":"Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.","properties":{"metadata":{"description":"ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.","properties":{"annotations":{"additionalProperties":{"type":"string"},"description":"Annotations that should be added to the created ACME HTTP01 solver ingress.","type":"object"},"labels":{"additionalProperties":{"type":"string"},"description":"Labels that should be added to the created ACME HTTP01 solver ingress.","type":"object"}},"type":"object"}},"type":"object"},"name":{"description":"The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.","type":"string"},"podTemplate":{"description":"Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.","properties":{"metadata":{"description":"ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.","properties":{"annotations":{"additionalProperties":{"type":"string"},"description":"Annotations that should be added to the create ACME HTTP01 solver pods.","type":"object"},"labels":{"additionalProperties":{"type":"string"},"description":"Labels that should be added to the created ACME HTTP01 solver pods.","type":"object"}},"type":"object"},"spec":{"description":"PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.","properties":{"affinity":{"description":"If specified, the pod's scheduling constraints","properties":{"nodeAffinity":{"description":"Describes node affinity scheduling rules for the pod.","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.","items":{"description":"An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).","properties":{"preference":{"description":"A node selector term, associated with the corresponding weight.","properties":{"matchExpressions":{"description":"A list of node selector requirements by node's labels.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchFields":{"description":"A list of node selector requirements by node's fields.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"}},"type":"object"},"weight":{"description":"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["preference","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.","properties":{"nodeSelectorTerms":{"description":"Required. A list of node selector terms. The terms are ORed.","items":{"description":"A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.","properties":{"matchExpressions":{"description":"A list of node selector requirements by node's labels.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchFields":{"description":"A list of node selector requirements by node's fields.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"}},"type":"object"},"type":"array"}},"required":["nodeSelectorTerms"],"type":"object"}},"type":"object"},"podAffinity":{"description":"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.","items":{"description":"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)","properties":{"podAffinityTerm":{"description":"Required. A pod affinity term, associated with the corresponding weight.","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"weight":{"description":"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["podAffinityTerm","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.","items":{"description":"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"type":"array"}},"type":"object"},"podAntiAffinity":{"description":"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.","items":{"description":"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)","properties":{"podAffinityTerm":{"description":"Required. A pod affinity term, associated with the corresponding weight.","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"weight":{"description":"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["podAffinityTerm","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.","items":{"description":"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"type":"array"}},"type":"object"}},"type":"object"},"nodeSelector":{"additionalProperties":{"type":"string"},"description":"NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/","type":"object"},"priorityClassName":{"description":"If specified, the pod's priorityClassName.","type":"string"},"serviceAccountName":{"description":"If specified, the pod's service account","type":"string"},"tolerations":{"description":"If specified, the pod's tolerations.","items":{"description":"The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.","properties":{"effect":{"description":"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.","type":"string"},"key":{"description":"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.","type":"string"},"operator":{"description":"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.","type":"string"},"tolerationSeconds":{"description":"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.","format":"int64","type":"integer"},"value":{"description":"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.","type":"string"}},"type":"object"},"type":"array"}},"type":"object"}},"type":"object"},"serviceType":{"description":"Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.","type":"string"}},"type":"object"}},"type":"object"},"selector":{"description":"Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.","properties":{"dnsNames":{"description":"List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.","items":{"type":"string"},"type":"array"},"dnsZones":{"description":"List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.","items":{"type":"string"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"A label selector that is used to refine the set of certificate's that this challenge solver will apply to.","type":"object"}},"type":"object"}},"type":"object"},"type":"array"}},"required":["privateKeySecretRef","server"],"type":"object"},"ca":{"description":"CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.","properties":{"crlDistributionPoints":{"description":"The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.","items":{"type":"string"},"type":"array"},"ocspServers":{"description":"The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be \"http://ocsp.int-x3.letsencrypt.org\".","items":{"type":"string"},"type":"array"},"secretName":{"description":"SecretName is the name of the secret used to sign Certificates issued by this Issuer.","type":"string"}},"required":["secretName"],"type":"object"},"selfSigned":{"description":"SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.","properties":{"crlDistributionPoints":{"description":"The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.","items":{"type":"string"},"type":"array"}},"type":"object"},"vault":{"description":"Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.","properties":{"auth":{"description":"Auth configures how cert-manager authenticates with the Vault server.","properties":{"appRole":{"description":"AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.","properties":{"path":{"description":"Path where the App Role authentication backend is mounted in Vault, e.g: \"approle\"","type":"string"},"roleId":{"description":"RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.","type":"string"},"secretRef":{"description":"Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["path","roleId","secretRef"],"type":"object"},"kubernetes":{"description":"Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.","properties":{"mountPath":{"description":"The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value \"/v1/auth/kubernetes\" will be used.","type":"string"},"role":{"description":"A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.","type":"string"},"secretRef":{"description":"The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["role","secretRef"],"type":"object"},"tokenSecretRef":{"description":"TokenSecretRef authenticates with Vault by presenting a token.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"type":"object"},"caBundle":{"description":"PEM-encoded CA bundle (base64-encoded) used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.","format":"byte","type":"string"},"namespace":{"description":"Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces","type":"string"},"path":{"description":"Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: \"my_pki_mount/sign/my-role-name\".","type":"string"},"server":{"description":"Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".","type":"string"}},"required":["auth","path","server"],"type":"object"},"venafi":{"description":"Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.","properties":{"cloud":{"description":"Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.","properties":{"apiTokenSecretRef":{"description":"APITokenSecretRef is a secret key selector for the Venafi Cloud API token.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"url":{"description":"URL is the base URL for Venafi Cloud. Defaults to \"https://api.venafi.cloud/v1\".","type":"string"}},"required":["apiTokenSecretRef"],"type":"object"},"tpp":{"description":"TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.","properties":{"caBundle":{"description":"CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.","format":"byte","type":"string"},"credentialsRef":{"description":"CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.","properties":{"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"url":{"description":"URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: \"https://tpp.example.com/vedsdk\".","type":"string"}},"required":["credentialsRef","url"],"type":"object"},"zone":{"description":"Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.","type":"string"}},"required":["zone"],"type":"object"}},"type":"object"},"status":{"description":"Status of the ClusterIssuer. This is set and managed automatically.","properties":{"acme":{"description":"ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.","properties":{"lastRegisteredEmail":{"description":"LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer","type":"string"},"uri":{"description":"URI is the unique account identifier, which can also be used to retrieve account details from the CA","type":"string"}},"type":"object"},"conditions":{"description":"List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.","items":{"description":"IssuerCondition contains condition information for an Issuer.","properties":{"lastTransitionTime":{"description":"LastTransitionTime is the timestamp corresponding to the last status change of this condition.","format":"date-time","type":"string"},"message":{"description":"Message is a human readable description of the details of the last transition, complementing reason.","type":"string"},"observedGeneration":{"description":"If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.","format":"int64","type":"integer"},"reason":{"description":"Reason is a brief machine readable explanation for the condition's last transition.","type":"string"},"status":{"description":"Status of the condition, one of (`True`, `False`, `Unknown`).","enum":["True","False","Unknown"],"type":"string"},"type":{"description":"Type of the condition, known values are (`Ready`).","type":"string"}},"required":["status","type"],"type":"object"},"type":"array","x-kubernetes-list-map-keys":["type"],"x-kubernetes-list-type":"map"}},"type":"object"}},"required":["spec"],"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]}}
    creationTimestamp: "2025-07-31T03:46:28Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.8.0
    name: clusterissuers.cert-manager.io
    resourceVersion: "14074"
    uid: c2012225-bbf5-45a8-83bb-a08b4e834fdc
  spec:
    conversion:
      strategy: None
    group: cert-manager.io
    names:
      categories:
      - cert-manager
      kind: ClusterIssuer
      listKind: ClusterIssuerList
      plural: clusterissuers
      singular: clusterissuer
    scope: Cluster
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.conditions[?(@.type=="Ready")].status
        name: Ready
        type: string
      - jsonPath: .status.conditions[?(@.type=="Ready")].message
        name: Status
        priority: 1
        type: string
      - description: CreationTimestamp is a timestamp representing the server time
          when this object was created. It is not guaranteed to be set in happens-before
          order across separate operations. Clients may not set this value. It is
          represented in RFC3339 form and is in UTC.
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: A ClusterIssuer represents a certificate issuing authority
            which can be referenced as part of `issuerRef` fields. It is similar to
            an Issuer, however it is cluster-scoped and therefore can be referenced
            by resources that exist in *any* namespace, not just the same namespace
            as the referent.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Desired state of the ClusterIssuer resource.
              properties:
                acme:
                  description: ACME configures this issuer to communicate with a RFC8555
                    (ACME) server to obtain signed x509 certificates.
                  properties:
                    disableAccountKeyGeneration:
                      description: Enables or disables generating a new ACME account
                        key. If true, the Issuer resource will *not* request a new
                        account but will expect the account key to be supplied via
                        an existing secret. If false, the cert-manager system will
                        generate a new ACME account key for the Issuer. Defaults to
                        false.
                      type: boolean
                    email:
                      description: Email is the email address to be associated with
                        the ACME account. This field is optional, but it is strongly
                        recommended to be set. It will be used to contact you in case
                        of issues with your account or certificates, including expiry
                        notification emails. This field may be updated after the account
                        is initially registered.
                      type: string
                    enableDurationFeature:
                      description: Enables requesting a Not After date on certificates
                        that matches the duration of the certificate. This is not
                        supported by all ACME servers like Let's Encrypt. If set to
                        true when the ACME server does not support it it will create
                        an error on the Order. Defaults to false.
                      type: boolean
                    externalAccountBinding:
                      description: ExternalAccountBinding is a reference to a CA external
                        account of the ACME server. If set, upon registration cert-manager
                        will attempt to associate the given external account credentials
                        with the registered ACME account.
                      properties:
                        keyAlgorithm:
                          description: 'Deprecated: keyAlgorithm field exists for
                            historical compatibility reasons and should not be used.
                            The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.'
                          enum:
                          - HS256
                          - HS384
                          - HS512
                          type: string
                        keyID:
                          description: keyID is the ID of the CA key that the External
                            Account is bound to.
                          type: string
                        keySecretRef:
                          description: keySecretRef is a Secret Key Selector referencing
                            a data item in a Kubernetes Secret which holds the symmetric
                            MAC key of the External Account Binding. The `key` is
                            the index string that is paired with the key data in the
                            Secret and should not be confused with the key data itself,
                            or indeed with the External Account Binding keyID above.
                            The secret key stored in the Secret **must** be un-padded,
                            base64 URL encoded data.
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's
                                `data` field to be used. Some instances of this field
                                may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to.
                                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                          required:
                          - name
                          type: object
                      required:
                      - keyID
                      - keySecretRef
                      type: object
                    preferredChain:
                      description: 'PreferredChain is the chain to use if the ACME
                        server outputs multiple. PreferredChain is no guarantee that
                        this one gets delivered by the ACME endpoint. For example,
                        for Let''s Encrypt''s DST crosssign you would use: "DST Root
                        CA X3" or "ISRG Root X1" for the newer Let''s Encrypt root
                        CA. This value picks the first certificate bundle in the ACME
                        alternative chains that has a certificate with this value
                        as its issuer''s CN'
                      maxLength: 64
                      type: string
                    privateKeySecretRef:
                      description: PrivateKey is the name of a Kubernetes Secret resource
                        that will be used to store the automatically generated ACME
                        account private key. Optionally, a `key` may be specified
                        to select a specific entry within the named Secret resource.
                        If `key` is not specified, a default of `tls.key` will be
                        used.
                      properties:
                        key:
                          description: The key of the entry in the Secret resource's
                            `data` field to be used. Some instances of this field
                            may be defaulted, in others it may be required.
                          type: string
                        name:
                          description: 'Name of the resource being referred to. More
                            info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                      required:
                      - name
                      type: object
                    server:
                      description: 'Server is the URL used to access the ACME server''s
                        ''directory'' endpoint. For example, for Let''s Encrypt''s
                        staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory".
                        Only ACME v2 endpoints (i.e. RFC 8555) are supported.'
                      type: string
                    skipTLSVerify:
                      description: Enables or disables validation of the ACME server
                        TLS certificate. If true, requests to the ACME server will
                        not have their TLS certificate validated (i.e. insecure connections
                        will be allowed). Only enable this option in development environments.
                        The cert-manager system installed roots will be used to verify
                        connections to the ACME server if this is false. Defaults
                        to false.
                      type: boolean
                    solvers:
                      description: 'Solvers is a list of challenge solvers that will
                        be used to solve ACME challenges for the matching domains.
                        Solver configurations must be provided in order to obtain
                        certificates from an ACME server. For more information, see:
                        https://cert-manager.io/docs/configuration/acme/'
                      items:
                        description: An ACMEChallengeSolver describes how to solve
                          ACME challenges for the issuer it is part of. A selector
                          may be provided to use different solving strategies for
                          different DNS names. Only one of HTTP01 or DNS01 must be
                          provided.
                        properties:
                          dns01:
                            description: Configures cert-manager to attempt to complete
                              authorizations by performing the DNS01 challenge flow.
                            properties:
                              acmeDNS:
                                description: Use the 'ACME DNS' (https://github.com/joohoi/acme-dns)
                                  API to manage DNS01 challenge records.
                                properties:
                                  accountSecretRef:
                                    description: A reference to a specific 'key' within
                                      a Secret resource. In some instances, `key`
                                      is a required field.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  host:
                                    type: string
                                required:
                                - accountSecretRef
                                - host
                                type: object
                              akamai:
                                description: Use the Akamai DNS zone management API
                                  to manage DNS01 challenge records.
                                properties:
                                  accessTokenSecretRef:
                                    description: A reference to a specific 'key' within
                                      a Secret resource. In some instances, `key`
                                      is a required field.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  clientSecretSecretRef:
                                    description: A reference to a specific 'key' within
                                      a Secret resource. In some instances, `key`
                                      is a required field.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  clientTokenSecretRef:
                                    description: A reference to a specific 'key' within
                                      a Secret resource. In some instances, `key`
                                      is a required field.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  serviceConsumerDomain:
                                    type: string
                                required:
                                - accessTokenSecretRef
                                - clientSecretSecretRef
                                - clientTokenSecretRef
                                - serviceConsumerDomain
                                type: object
                              azureDNS:
                                description: Use the Microsoft Azure DNS API to manage
                                  DNS01 challenge records.
                                properties:
                                  clientID:
                                    description: if both this and ClientSecret are
                                      left unset MSI will be used
                                    type: string
                                  clientSecretSecretRef:
                                    description: if both this and ClientID are left
                                      unset MSI will be used
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  environment:
                                    description: name of the Azure environment (default
                                      AzurePublicCloud)
                                    enum:
                                    - AzurePublicCloud
                                    - AzureChinaCloud
                                    - AzureGermanCloud
                                    - AzureUSGovernmentCloud
                                    type: string
                                  hostedZoneName:
                                    description: name of the DNS zone that should
                                      be used
                                    type: string
                                  managedIdentity:
                                    description: managed identity configuration, can
                                      not be used at the same time as clientID, clientSecretSecretRef
                                      or tenantID
                                    properties:
                                      clientID:
                                        description: client ID of the managed identity,
                                          can not be used at the same time as resourceID
                                        type: string
                                      resourceID:
                                        description: resource ID of the managed identity,
                                          can not be used at the same time as clientID
                                        type: string
                                    type: object
                                  resourceGroupName:
                                    description: resource group the DNS zone is located
                                      in
                                    type: string
                                  subscriptionID:
                                    description: ID of the Azure subscription
                                    type: string
                                  tenantID:
                                    description: when specifying ClientID and ClientSecret
                                      then this field is also needed
                                    type: string
                                required:
                                - resourceGroupName
                                - subscriptionID
                                type: object
                              cloudDNS:
                                description: Use the Google Cloud DNS API to manage
                                  DNS01 challenge records.
                                properties:
                                  hostedZoneName:
                                    description: HostedZoneName is an optional field
                                      that tells cert-manager in which Cloud DNS zone
                                      the challenge record has to be created. If left
                                      empty cert-manager will automatically choose
                                      a zone.
                                    type: string
                                  project:
                                    type: string
                                  serviceAccountSecretRef:
                                    description: A reference to a specific 'key' within
                                      a Secret resource. In some instances, `key`
                                      is a required field.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                required:
                                - project
                                type: object
                              cloudflare:
                                description: Use the Cloudflare API to manage DNS01
                                  challenge records.
                                properties:
                                  apiKeySecretRef:
                                    description: 'API key to use to authenticate with
                                      Cloudflare. Note: using an API token to authenticate
                                      is now the recommended method as it allows greater
                                      control of permissions.'
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  apiTokenSecretRef:
                                    description: API token used to authenticate with
                                      Cloudflare.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  email:
                                    description: Email of the account, only required
                                      when using API key based authentication.
                                    type: string
                                type: object
                              cnameStrategy:
                                description: CNAMEStrategy configures how the DNS01
                                  provider should handle CNAME records when found
                                  in DNS zones.
                                enum:
                                - None
                                - Follow
                                type: string
                              digitalocean:
                                description: Use the DigitalOcean DNS API to manage
                                  DNS01 challenge records.
                                properties:
                                  tokenSecretRef:
                                    description: A reference to a specific 'key' within
                                      a Secret resource. In some instances, `key`
                                      is a required field.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                required:
                                - tokenSecretRef
                                type: object
                              rfc2136:
                                description: Use RFC2136 ("Dynamic Updates in the
                                  Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
                                  to manage DNS01 challenge records.
                                properties:
                                  nameserver:
                                    description: The IP address or hostname of an
                                      authoritative DNS server supporting RFC2136
                                      in the form host:port. If the host is an IPv6
                                      address it must be enclosed in square brackets
                                      (e.g [2001:db8::1]) ; port is optional. This
                                      field is required.
                                    type: string
                                  tsigAlgorithm:
                                    description: 'The TSIG Algorithm configured in
                                      the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef``
                                      and ``tsigKeyName`` are defined. Supported values
                                      are (case-insensitive): ``HMACMD5`` (default),
                                      ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.'
                                    type: string
                                  tsigKeyName:
                                    description: The TSIG Key name configured in the
                                      DNS. If ``tsigSecretSecretRef`` is defined,
                                      this field is required.
                                    type: string
                                  tsigSecretSecretRef:
                                    description: The name of the secret containing
                                      the TSIG value. If ``tsigKeyName`` is defined,
                                      this field is required.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                required:
                                - nameserver
                                type: object
                              route53:
                                description: Use the AWS Route53 API to manage DNS01
                                  challenge records.
                                properties:
                                  accessKeyID:
                                    description: 'The AccessKeyID is used for authentication.
                                      If not set we fall-back to using env vars, shared
                                      credentials file or AWS Instance metadata see:
                                      https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                                    type: string
                                  hostedZoneID:
                                    description: If set, the provider will manage
                                      only this zone in Route53 and will not do an
                                      lookup using the route53:ListHostedZonesByName
                                      api call.
                                    type: string
                                  region:
                                    description: Always set the region when using
                                      AccessKeyID and SecretAccessKey
                                    type: string
                                  role:
                                    description: Role is a Role ARN which the Route53
                                      provider will assume using either the explicit
                                      credentials AccessKeyID/SecretAccessKey or the
                                      inferred credentials from environment variables,
                                      shared credentials file or AWS Instance metadata
                                    type: string
                                  secretAccessKeySecretRef:
                                    description: The SecretAccessKey is used for authentication.
                                      If not set we fall-back to using env vars, shared
                                      credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                required:
                                - region
                                type: object
                              webhook:
                                description: Configure an external webhook based DNS01
                                  challenge solver to manage DNS01 challenge records.
                                properties:
                                  config:
                                    description: Additional configuration that should
                                      be passed to the webhook apiserver when challenges
                                      are processed. This can contain arbitrary JSON
                                      data. Secret values should not be specified
                                      in this stanza. If secret values are needed
                                      (e.g. credentials for a DNS service), you should
                                      use a SecretKeySelector to reference a Secret
                                      resource. For details on the schema of this
                                      field, consult the webhook provider implementation's
                                      documentation.
                                    x-kubernetes-preserve-unknown-fields: true
                                  groupName:
                                    description: The API group name that should be
                                      used when POSTing ChallengePayload resources
                                      to the webhook apiserver. This should be the
                                      same as the GroupName specified in the webhook
                                      provider implementation.
                                    type: string
                                  solverName:
                                    description: The name of the solver to use, as
                                      defined in the webhook provider implementation.
                                      This will typically be the name of the provider,
                                      e.g. 'cloudflare'.
                                    type: string
                                required:
                                - groupName
                                - solverName
                                type: object
                            type: object
                          http01:
                            description: Configures cert-manager to attempt to complete
                              authorizations by performing the HTTP01 challenge flow.
                              It is not possible to obtain certificates for wildcard
                              domain names (e.g. `*.example.com`) using the HTTP01
                              challenge mechanism.
                            properties:
                              gatewayHTTPRoute:
                                description: The Gateway API is a sig-network community
                                  API that models service networking in Kubernetes
                                  (https://gateway-api.sigs.k8s.io/). The Gateway
                                  solver will create HTTPRoutes with the specified
                                  labels in the same namespace as the challenge. This
                                  solver is experimental, and fields / behaviour may
                                  change in the future.
                                properties:
                                  labels:
                                    additionalProperties:
                                      type: string
                                    description: Custom labels that will be applied
                                      to HTTPRoutes created by cert-manager while
                                      solving HTTP-01 challenges.
                                    type: object
                                  parentRefs:
                                    description: 'When solving an HTTP-01 challenge,
                                      cert-manager creates an HTTPRoute. cert-manager
                                      needs to know which parentRefs should be used
                                      when creating the HTTPRoute. Usually, the parentRef
                                      references a Gateway. See: https://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways'
                                    items:
                                      description: "ParentRef identifies an API object
                                        (usually a Gateway) that can be considered
                                        a parent of this resource (usually a route).
                                        The only kind of parent resource with \"Core\"
                                        support is Gateway. This API may be extended
                                        in the future to support additional kinds
                                        of parent resources, such as HTTPRoute. \n
                                        The API object must be valid in the cluster;
                                        the Group and Kind must be registered in the
                                        cluster for this reference to be valid. \n
                                        References to objects with invalid Group and
                                        Kind are not valid, and must be rejected by
                                        the implementation, with appropriate Conditions
                                        set on the containing object."
                                      properties:
                                        group:
                                          default: gateway.networking.k8s.io
                                          description: "Group is the group of the
                                            referent. \n Support: Core"
                                          maxLength: 253
                                          pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                                          type: string
                                        kind:
                                          default: Gateway
                                          description: "Kind is kind of the referent.
                                            \n Support: Core (Gateway) Support: Custom
                                            (Other Resources)"
                                          maxLength: 63
                                          minLength: 1
                                          pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                                          type: string
                                        name:
                                          description: "Name is the name of the referent.
                                            \n Support: Core"
                                          maxLength: 253
                                          minLength: 1
                                          type: string
                                        namespace:
                                          description: "Namespace is the namespace
                                            of the referent. When unspecified (or
                                            empty string), this refers to the local
                                            namespace of the Route. \n Support: Core"
                                          maxLength: 63
                                          minLength: 1
                                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                                          type: string
                                        sectionName:
                                          description: "SectionName is the name of
                                            a section within the target resource.
                                            In the following resources, SectionName
                                            is interpreted as the following: \n *
                                            Gateway: Listener Name \n Implementations
                                            MAY choose to support attaching Routes
                                            to other resources. If that is the case,
                                            they MUST clearly document how SectionName
                                            is interpreted. \n When unspecified (empty
                                            string), this will reference the entire
                                            resource. For the purpose of status, an
                                            attachment is considered successful if
                                            at least one section in the parent resource
                                            accepts it. For example, Gateway listeners
                                            can restrict which Routes can attach to
                                            them by Route kind, namespace, or hostname.
                                            If 1 of 2 Gateway listeners accept attachment
                                            from the referencing Route, the Route
                                            MUST be considered successfully attached.
                                            If no Gateway listeners accept attachment
                                            from this Route, the Route MUST be considered
                                            detached from the Gateway. \n Support:
                                            Core"
                                          maxLength: 253
                                          minLength: 1
                                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    type: array
                                  serviceType:
                                    description: Optional service type for Kubernetes
                                      solver service. Supported values are NodePort
                                      or ClusterIP. If unset, defaults to NodePort.
                                    type: string
                                type: object
                              ingress:
                                description: The ingress based HTTP01 challenge solver
                                  will solve challenges by creating or modifying Ingress
                                  resources in order to route requests for '/.well-known/acme-challenge/XYZ'
                                  to 'challenge solver' pods that are provisioned
                                  by cert-manager for each Challenge to be completed.
                                properties:
                                  class:
                                    description: The ingress class to use when creating
                                      Ingress resources to solve ACME challenges that
                                      use this challenge solver. Only one of 'class'
                                      or 'name' may be specified.
                                    type: string
                                  ingressTemplate:
                                    description: Optional ingress template used to
                                      configure the ACME challenge solver ingress
                                      used for HTTP01 challenges.
                                    properties:
                                      metadata:
                                        description: ObjectMeta overrides for the
                                          ingress used to solve HTTP01 challenges.
                                          Only the 'labels' and 'annotations' fields
                                          may be set. If labels or annotations overlap
                                          with in-built values, the values here will
                                          override the in-built values.
                                        properties:
                                          annotations:
                                            additionalProperties:
                                              type: string
                                            description: Annotations that should be
                                              added to the created ACME HTTP01 solver
                                              ingress.
                                            type: object
                                          labels:
                                            additionalProperties:
                                              type: string
                                            description: Labels that should be added
                                              to the created ACME HTTP01 solver ingress.
                                            type: object
                                        type: object
                                    type: object
                                  name:
                                    description: The name of the ingress resource
                                      that should have ACME challenge solving routes
                                      inserted into it in order to solve HTTP01 challenges.
                                      This is typically used in conjunction with ingress
                                      controllers like ingress-gce, which maintains
                                      a 1:1 mapping between external IPs and ingress
                                      resources.
                                    type: string
                                  podTemplate:
                                    description: Optional pod template used to configure
                                      the ACME challenge solver pods used for HTTP01
                                      challenges.
                                    properties:
                                      metadata:
                                        description: ObjectMeta overrides for the
                                          pod used to solve HTTP01 challenges. Only
                                          the 'labels' and 'annotations' fields may
                                          be set. If labels or annotations overlap
                                          with in-built values, the values here will
                                          override the in-built values.
                                        properties:
                                          annotations:
                                            additionalProperties:
                                              type: string
                                            description: Annotations that should be
                                              added to the create ACME HTTP01 solver
                                              pods.
                                            type: object
                                          labels:
                                            additionalProperties:
                                              type: string
                                            description: Labels that should be added
                                              to the created ACME HTTP01 solver pods.
                                            type: object
                                        type: object
                                      spec:
                                        description: PodSpec defines overrides for
                                          the HTTP01 challenge solver pod. Only the
                                          'priorityClassName', 'nodeSelector', 'affinity',
                                          'serviceAccountName' and 'tolerations' fields
                                          are supported currently. All other fields
                                          will be ignored.
                                        properties:
                                          affinity:
                                            description: If specified, the pod's scheduling
                                              constraints
                                            properties:
                                              nodeAffinity:
                                                description: Describes node affinity
                                                  scheduling rules for the pod.
                                                properties:
                                                  preferredDuringSchedulingIgnoredDuringExecution:
                                                    description: The scheduler will
                                                      prefer to schedule pods to nodes
                                                      that satisfy the affinity expressions
                                                      specified by this field, but
                                                      it may choose a node that violates
                                                      one or more of the expressions.
                                                      The node that is most preferred
                                                      is the one with the greatest
                                                      sum of weights, i.e. for each
                                                      node that meets all of the scheduling
                                                      requirements (resource request,
                                                      requiredDuringScheduling affinity
                                                      expressions, etc.), compute
                                                      a sum by iterating through the
                                                      elements of this field and adding
                                                      "weight" to the sum if the node
                                                      matches the corresponding matchExpressions;
                                                      the node(s) with the highest
                                                      sum are the most preferred.
                                                    items:
                                                      description: An empty preferred
                                                        scheduling term matches all
                                                        objects with implicit weight
                                                        0 (i.e. it's a no-op). A null
                                                        preferred scheduling term
                                                        matches no objects (i.e. is
                                                        also a no-op).
                                                      properties:
                                                        preference:
                                                          description: A node selector
                                                            term, associated with
                                                            the corresponding weight.
                                                          properties:
                                                            matchExpressions:
                                                              description: A list
                                                                of node selector requirements
                                                                by node's labels.
                                                              items:
                                                                description: A node
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: The
                                                                      label key that
                                                                      the selector
                                                                      applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents
                                                                      a key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists,
                                                                      DoesNotExist.
                                                                      Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An
                                                                      array of string
                                                                      values. If the
                                                                      operator is
                                                                      In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      If the operator
                                                                      is Gt or Lt,
                                                                      the values array
                                                                      must have a
                                                                      single element,
                                                                      which will be
                                                                      interpreted
                                                                      as an integer.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                            matchFields:
                                                              description: A list
                                                                of node selector requirements
                                                                by node's fields.
                                                              items:
                                                                description: A node
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: The
                                                                      label key that
                                                                      the selector
                                                                      applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents
                                                                      a key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists,
                                                                      DoesNotExist.
                                                                      Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An
                                                                      array of string
                                                                      values. If the
                                                                      operator is
                                                                      In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      If the operator
                                                                      is Gt or Lt,
                                                                      the values array
                                                                      must have a
                                                                      single element,
                                                                      which will be
                                                                      interpreted
                                                                      as an integer.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                          type: object
                                                        weight:
                                                          description: Weight associated
                                                            with matching the corresponding
                                                            nodeSelectorTerm, in the
                                                            range 1-100.
                                                          format: int32
                                                          type: integer
                                                      required:
                                                      - preference
                                                      - weight
                                                      type: object
                                                    type: array
                                                  requiredDuringSchedulingIgnoredDuringExecution:
                                                    description: If the affinity requirements
                                                      specified by this field are
                                                      not met at scheduling time,
                                                      the pod will not be scheduled
                                                      onto the node. If the affinity
                                                      requirements specified by this
                                                      field cease to be met at some
                                                      point during pod execution (e.g.
                                                      due to an update), the system
                                                      may or may not try to eventually
                                                      evict the pod from its node.
                                                    properties:
                                                      nodeSelectorTerms:
                                                        description: Required. A list
                                                          of node selector terms.
                                                          The terms are ORed.
                                                        items:
                                                          description: A null or empty
                                                            node selector term matches
                                                            no objects. The requirements
                                                            of them are ANDed. The
                                                            TopologySelectorTerm type
                                                            implements a subset of
                                                            the NodeSelectorTerm.
                                                          properties:
                                                            matchExpressions:
                                                              description: A list
                                                                of node selector requirements
                                                                by node's labels.
                                                              items:
                                                                description: A node
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: The
                                                                      label key that
                                                                      the selector
                                                                      applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents
                                                                      a key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists,
                                                                      DoesNotExist.
                                                                      Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An
                                                                      array of string
                                                                      values. If the
                                                                      operator is
                                                                      In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      If the operator
                                                                      is Gt or Lt,
                                                                      the values array
                                                                      must have a
                                                                      single element,
                                                                      which will be
                                                                      interpreted
                                                                      as an integer.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                            matchFields:
                                                              description: A list
                                                                of node selector requirements
                                                                by node's fields.
                                                              items:
                                                                description: A node
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: The
                                                                      label key that
                                                                      the selector
                                                                      applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents
                                                                      a key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists,
                                                                      DoesNotExist.
                                                                      Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An
                                                                      array of string
                                                                      values. If the
                                                                      operator is
                                                                      In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      If the operator
                                                                      is Gt or Lt,
                                                                      the values array
                                                                      must have a
                                                                      single element,
                                                                      which will be
                                                                      interpreted
                                                                      as an integer.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                          type: object
                                                        type: array
                                                    required:
                                                    - nodeSelectorTerms
                                                    type: object
                                                type: object
                                              podAffinity:
                                                description: Describes pod affinity
                                                  scheduling rules (e.g. co-locate
                                                  this pod in the same node, zone,
                                                  etc. as some other pod(s)).
                                                properties:
                                                  preferredDuringSchedulingIgnoredDuringExecution:
                                                    description: The scheduler will
                                                      prefer to schedule pods to nodes
                                                      that satisfy the affinity expressions
                                                      specified by this field, but
                                                      it may choose a node that violates
                                                      one or more of the expressions.
                                                      The node that is most preferred
                                                      is the one with the greatest
                                                      sum of weights, i.e. for each
                                                      node that meets all of the scheduling
                                                      requirements (resource request,
                                                      requiredDuringScheduling affinity
                                                      expressions, etc.), compute
                                                      a sum by iterating through the
                                                      elements of this field and adding
                                                      "weight" to the sum if the node
                                                      has pods which matches the corresponding
                                                      podAffinityTerm; the node(s)
                                                      with the highest sum are the
                                                      most preferred.
                                                    items:
                                                      description: The weights of
                                                        all of the matched WeightedPodAffinityTerm
                                                        fields are added per-node
                                                        to find the most preferred
                                                        node(s)
                                                      properties:
                                                        podAffinityTerm:
                                                          description: Required. A
                                                            pod affinity term, associated
                                                            with the corresponding
                                                            weight.
                                                          properties:
                                                            labelSelector:
                                                              description: A label
                                                                query over a set of
                                                                resources, in this
                                                                case pods.
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions
                                                                    is a list of label
                                                                    selector requirements.
                                                                    The requirements
                                                                    are ANDed.
                                                                  items:
                                                                    description: A
                                                                      label selector
                                                                      requirement
                                                                      is a selector
                                                                      that contains
                                                                      values, a key,
                                                                      and an operator
                                                                      that relates
                                                                      the key and
                                                                      values.
                                                                    properties:
                                                                      key:
                                                                        description: key
                                                                          is the label
                                                                          key that
                                                                          the selector
                                                                          applies
                                                                          to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator
                                                                          represents
                                                                          a key's
                                                                          relationship
                                                                          to a set
                                                                          of values.
                                                                          Valid operators
                                                                          are In,
                                                                          NotIn, Exists
                                                                          and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values
                                                                          is an array
                                                                          of string
                                                                          values.
                                                                          If the operator
                                                                          is In or
                                                                          NotIn, the
                                                                          values array
                                                                          must be
                                                                          non-empty.
                                                                          If the operator
                                                                          is Exists
                                                                          or DoesNotExist,
                                                                          the values
                                                                          array must
                                                                          be empty.
                                                                          This array
                                                                          is replaced
                                                                          during a
                                                                          strategic
                                                                          merge patch.
                                                                        items:
                                                                          type: string
                                                                        type: array
                                                                    required:
                                                                    - key
                                                                    - operator
                                                                    type: object
                                                                  type: array
                                                                matchLabels:
                                                                  additionalProperties:
                                                                    type: string
                                                                  description: matchLabels
                                                                    is a map of {key,value}
                                                                    pairs. A single
                                                                    {key,value} in
                                                                    the matchLabels
                                                                    map is equivalent
                                                                    to an element
                                                                    of matchExpressions,
                                                                    whose key field
                                                                    is "key", the
                                                                    operator is "In",
                                                                    and the values
                                                                    array contains
                                                                    only "value".
                                                                    The requirements
                                                                    are ANDed.
                                                                  type: object
                                                              type: object
                                                            namespaceSelector:
                                                              description: A label
                                                                query over the set
                                                                of namespaces that
                                                                the term applies to.
                                                                The term is applied
                                                                to the union of the
                                                                namespaces selected
                                                                by this field and
                                                                the ones listed in
                                                                the namespaces field.
                                                                null selector and
                                                                null or empty namespaces
                                                                list means "this pod's
                                                                namespace". An empty
                                                                selector ({}) matches
                                                                all namespaces. This
                                                                field is beta-level
                                                                and is only honored
                                                                when PodAffinityNamespaceSelector
                                                                feature is enabled.
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions
                                                                    is a list of label
                                                                    selector requirements.
                                                                    The requirements
                                                                    are ANDed.
                                                                  items:
                                                                    description: A
                                                                      label selector
                                                                      requirement
                                                                      is a selector
                                                                      that contains
                                                                      values, a key,
                                                                      and an operator
                                                                      that relates
                                                                      the key and
                                                                      values.
                                                                    properties:
                                                                      key:
                                                                        description: key
                                                                          is the label
                                                                          key that
                                                                          the selector
                                                                          applies
                                                                          to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator
                                                                          represents
                                                                          a key's
                                                                          relationship
                                                                          to a set
                                                                          of values.
                                                                          Valid operators
                                                                          are In,
                                                                          NotIn, Exists
                                                                          and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values
                                                                          is an array
                                                                          of string
                                                                          values.
                                                                          If the operator
                                                                          is In or
                                                                          NotIn, the
                                                                          values array
                                                                          must be
                                                                          non-empty.
                                                                          If the operator
                                                                          is Exists
                                                                          or DoesNotExist,
                                                                          the values
                                                                          array must
                                                                          be empty.
                                                                          This array
                                                                          is replaced
                                                                          during a
                                                                          strategic
                                                                          merge patch.
                                                                        items:
                                                                          type: string
                                                                        type: array
                                                                    required:
                                                                    - key
                                                                    - operator
                                                                    type: object
                                                                  type: array
                                                                matchLabels:
                                                                  additionalProperties:
                                                                    type: string
                                                                  description: matchLabels
                                                                    is a map of {key,value}
                                                                    pairs. A single
                                                                    {key,value} in
                                                                    the matchLabels
                                                                    map is equivalent
                                                                    to an element
                                                                    of matchExpressions,
                                                                    whose key field
                                                                    is "key", the
                                                                    operator is "In",
                                                                    and the values
                                                                    array contains
                                                                    only "value".
                                                                    The requirements
                                                                    are ANDed.
                                                                  type: object
                                                              type: object
                                                            namespaces:
                                                              description: namespaces
                                                                specifies a static
                                                                list of namespace
                                                                names that the term
                                                                applies to. The term
                                                                is applied to the
                                                                union of the namespaces
                                                                listed in this field
                                                                and the ones selected
                                                                by namespaceSelector.
                                                                null or empty namespaces
                                                                list and null namespaceSelector
                                                                means "this pod's
                                                                namespace"
                                                              items:
                                                                type: string
                                                              type: array
                                                            topologyKey:
                                                              description: This pod
                                                                should be co-located
                                                                (affinity) or not
                                                                co-located (anti-affinity)
                                                                with the pods matching
                                                                the labelSelector
                                                                in the specified namespaces,
                                                                where co-located is
                                                                defined as running
                                                                on a node whose value
                                                                of the label with
                                                                key topologyKey matches
                                                                that of any node on
                                                                which any of the selected
                                                                pods is running. Empty
                                                                topologyKey is not
                                                                allowed.
                                                              type: string
                                                          required:
                                                          - topologyKey
                                                          type: object
                                                        weight:
                                                          description: weight associated
                                                            with matching the corresponding
                                                            podAffinityTerm, in the
                                                            range 1-100.
                                                          format: int32
                                                          type: integer
                                                      required:
                                                      - podAffinityTerm
                                                      - weight
                                                      type: object
                                                    type: array
                                                  requiredDuringSchedulingIgnoredDuringExecution:
                                                    description: If the affinity requirements
                                                      specified by this field are
                                                      not met at scheduling time,
                                                      the pod will not be scheduled
                                                      onto the node. If the affinity
                                                      requirements specified by this
                                                      field cease to be met at some
                                                      point during pod execution (e.g.
                                                      due to a pod label update),
                                                      the system may or may not try
                                                      to eventually evict the pod
                                                      from its node. When there are
                                                      multiple elements, the lists
                                                      of nodes corresponding to each
                                                      podAffinityTerm are intersected,
                                                      i.e. all terms must be satisfied.
                                                    items:
                                                      description: Defines a set of
                                                        pods (namely those matching
                                                        the labelSelector relative
                                                        to the given namespace(s))
                                                        that this pod should be co-located
                                                        (affinity) or not co-located
                                                        (anti-affinity) with, where
                                                        co-located is defined as running
                                                        on a node whose value of the
                                                        label with key <topologyKey>
                                                        matches that of any node on
                                                        which a pod of the set of
                                                        pods is running
                                                      properties:
                                                        labelSelector:
                                                          description: A label query
                                                            over a set of resources,
                                                            in this case pods.
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions
                                                                is a list of label
                                                                selector requirements.
                                                                The requirements are
                                                                ANDed.
                                                              items:
                                                                description: A label
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: key
                                                                      is the label
                                                                      key that the
                                                                      selector applies
                                                                      to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator
                                                                      represents a
                                                                      key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists
                                                                      and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values
                                                                      is an array
                                                                      of string values.
                                                                      If the operator
                                                                      is In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                            matchLabels:
                                                              additionalProperties:
                                                                type: string
                                                              description: matchLabels
                                                                is a map of {key,value}
                                                                pairs. A single {key,value}
                                                                in the matchLabels
                                                                map is equivalent
                                                                to an element of matchExpressions,
                                                                whose key field is
                                                                "key", the operator
                                                                is "In", and the values
                                                                array contains only
                                                                "value". The requirements
                                                                are ANDed.
                                                              type: object
                                                          type: object
                                                        namespaceSelector:
                                                          description: A label query
                                                            over the set of namespaces
                                                            that the term applies
                                                            to. The term is applied
                                                            to the union of the namespaces
                                                            selected by this field
                                                            and the ones listed in
                                                            the namespaces field.
                                                            null selector and null
                                                            or empty namespaces list
                                                            means "this pod's namespace".
                                                            An empty selector ({})
                                                            matches all namespaces.
                                                            This field is beta-level
                                                            and is only honored when
                                                            PodAffinityNamespaceSelector
                                                            feature is enabled.
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions
                                                                is a list of label
                                                                selector requirements.
                                                                The requirements are
                                                                ANDed.
                                                              items:
                                                                description: A label
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: key
                                                                      is the label
                                                                      key that the
                                                                      selector applies
                                                                      to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator
                                                                      represents a
                                                                      key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists
                                                                      and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values
                                                                      is an array
                                                                      of string values.
                                                                      If the operator
                                                                      is In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                            matchLabels:
                                                              additionalProperties:
                                                                type: string
                                                              description: matchLabels
                                                                is a map of {key,value}
                                                                pairs. A single {key,value}
                                                                in the matchLabels
                                                                map is equivalent
                                                                to an element of matchExpressions,
                                                                whose key field is
                                                                "key", the operator
                                                                is "In", and the values
                                                                array contains only
                                                                "value". The requirements
                                                                are ANDed.
                                                              type: object
                                                          type: object
                                                        namespaces:
                                                          description: namespaces
                                                            specifies a static list
                                                            of namespace names that
                                                            the term applies to. The
                                                            term is applied to the
                                                            union of the namespaces
                                                            listed in this field and
                                                            the ones selected by namespaceSelector.
                                                            null or empty namespaces
                                                            list and null namespaceSelector
                                                            means "this pod's namespace"
                                                          items:
                                                            type: string
                                                          type: array
                                                        topologyKey:
                                                          description: This pod should
                                                            be co-located (affinity)
                                                            or not co-located (anti-affinity)
                                                            with the pods matching
                                                            the labelSelector in the
                                                            specified namespaces,
                                                            where co-located is defined
                                                            as running on a node whose
                                                            value of the label with
                                                            key topologyKey matches
                                                            that of any node on which
                                                            any of the selected pods
                                                            is running. Empty topologyKey
                                                            is not allowed.
                                                          type: string
                                                      required:
                                                      - topologyKey
                                                      type: object
                                                    type: array
                                                type: object
                                              podAntiAffinity:
                                                description: Describes pod anti-affinity
                                                  scheduling rules (e.g. avoid putting
                                                  this pod in the same node, zone,
                                                  etc. as some other pod(s)).
                                                properties:
                                                  preferredDuringSchedulingIgnoredDuringExecution:
                                                    description: The scheduler will
                                                      prefer to schedule pods to nodes
                                                      that satisfy the anti-affinity
                                                      expressions specified by this
                                                      field, but it may choose a node
                                                      that violates one or more of
                                                      the expressions. The node that
                                                      is most preferred is the one
                                                      with the greatest sum of weights,
                                                      i.e. for each node that meets
                                                      all of the scheduling requirements
                                                      (resource request, requiredDuringScheduling
                                                      anti-affinity expressions, etc.),
                                                      compute a sum by iterating through
                                                      the elements of this field and
                                                      adding "weight" to the sum if
                                                      the node has pods which matches
                                                      the corresponding podAffinityTerm;
                                                      the node(s) with the highest
                                                      sum are the most preferred.
                                                    items:
                                                      description: The weights of
                                                        all of the matched WeightedPodAffinityTerm
                                                        fields are added per-node
                                                        to find the most preferred
                                                        node(s)
                                                      properties:
                                                        podAffinityTerm:
                                                          description: Required. A
                                                            pod affinity term, associated
                                                            with the corresponding
                                                            weight.
                                                          properties:
                                                            labelSelector:
                                                              description: A label
                                                                query over a set of
                                                                resources, in this
                                                                case pods.
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions
                                                                    is a list of label
                                                                    selector requirements.
                                                                    The requirements
                                                                    are ANDed.
                                                                  items:
                                                                    description: A
                                                                      label selector
                                                                      requirement
                                                                      is a selector
                                                                      that contains
                                                                      values, a key,
                                                                      and an operator
                                                                      that relates
                                                                      the key and
                                                                      values.
                                                                    properties:
                                                                      key:
                                                                        description: key
                                                                          is the label
                                                                          key that
                                                                          the selector
                                                                          applies
                                                                          to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator
                                                                          represents
                                                                          a key's
                                                                          relationship
                                                                          to a set
                                                                          of values.
                                                                          Valid operators
                                                                          are In,
                                                                          NotIn, Exists
                                                                          and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values
                                                                          is an array
                                                                          of string
                                                                          values.
                                                                          If the operator
                                                                          is In or
                                                                          NotIn, the
                                                                          values array
                                                                          must be
                                                                          non-empty.
                                                                          If the operator
                                                                          is Exists
                                                                          or DoesNotExist,
                                                                          the values
                                                                          array must
                                                                          be empty.
                                                                          This array
                                                                          is replaced
                                                                          during a
                                                                          strategic
                                                                          merge patch.
                                                                        items:
                                                                          type: string
                                                                        type: array
                                                                    required:
                                                                    - key
                                                                    - operator
                                                                    type: object
                                                                  type: array
                                                                matchLabels:
                                                                  additionalProperties:
                                                                    type: string
                                                                  description: matchLabels
                                                                    is a map of {key,value}
                                                                    pairs. A single
                                                                    {key,value} in
                                                                    the matchLabels
                                                                    map is equivalent
                                                                    to an element
                                                                    of matchExpressions,
                                                                    whose key field
                                                                    is "key", the
                                                                    operator is "In",
                                                                    and the values
                                                                    array contains
                                                                    only "value".
                                                                    The requirements
                                                                    are ANDed.
                                                                  type: object
                                                              type: object
                                                            namespaceSelector:
                                                              description: A label
                                                                query over the set
                                                                of namespaces that
                                                                the term applies to.
                                                                The term is applied
                                                                to the union of the
                                                                namespaces selected
                                                                by this field and
                                                                the ones listed in
                                                                the namespaces field.
                                                                null selector and
                                                                null or empty namespaces
                                                                list means "this pod's
                                                                namespace". An empty
                                                                selector ({}) matches
                                                                all namespaces. This
                                                                field is beta-level
                                                                and is only honored
                                                                when PodAffinityNamespaceSelector
                                                                feature is enabled.
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions
                                                                    is a list of label
                                                                    selector requirements.
                                                                    The requirements
                                                                    are ANDed.
                                                                  items:
                                                                    description: A
                                                                      label selector
                                                                      requirement
                                                                      is a selector
                                                                      that contains
                                                                      values, a key,
                                                                      and an operator
                                                                      that relates
                                                                      the key and
                                                                      values.
                                                                    properties:
                                                                      key:
                                                                        description: key
                                                                          is the label
                                                                          key that
                                                                          the selector
                                                                          applies
                                                                          to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator
                                                                          represents
                                                                          a key's
                                                                          relationship
                                                                          to a set
                                                                          of values.
                                                                          Valid operators
                                                                          are In,
                                                                          NotIn, Exists
                                                                          and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values
                                                                          is an array
                                                                          of string
                                                                          values.
                                                                          If the operator
                                                                          is In or
                                                                          NotIn, the
                                                                          values array
                                                                          must be
                                                                          non-empty.
                                                                          If the operator
                                                                          is Exists
                                                                          or DoesNotExist,
                                                                          the values
                                                                          array must
                                                                          be empty.
                                                                          This array
                                                                          is replaced
                                                                          during a
                                                                          strategic
                                                                          merge patch.
                                                                        items:
                                                                          type: string
                                                                        type: array
                                                                    required:
                                                                    - key
                                                                    - operator
                                                                    type: object
                                                                  type: array
                                                                matchLabels:
                                                                  additionalProperties:
                                                                    type: string
                                                                  description: matchLabels
                                                                    is a map of {key,value}
                                                                    pairs. A single
                                                                    {key,value} in
                                                                    the matchLabels
                                                                    map is equivalent
                                                                    to an element
                                                                    of matchExpressions,
                                                                    whose key field
                                                                    is "key", the
                                                                    operator is "In",
                                                                    and the values
                                                                    array contains
                                                                    only "value".
                                                                    The requirements
                                                                    are ANDed.
                                                                  type: object
                                                              type: object
                                                            namespaces:
                                                              description: namespaces
                                                                specifies a static
                                                                list of namespace
                                                                names that the term
                                                                applies to. The term
                                                                is applied to the
                                                                union of the namespaces
                                                                listed in this field
                                                                and the ones selected
                                                                by namespaceSelector.
                                                                null or empty namespaces
                                                                list and null namespaceSelector
                                                                means "this pod's
                                                                namespace"
                                                              items:
                                                                type: string
                                                              type: array
                                                            topologyKey:
                                                              description: This pod
                                                                should be co-located
                                                                (affinity) or not
                                                                co-located (anti-affinity)
                                                                with the pods matching
                                                                the labelSelector
                                                                in the specified namespaces,
                                                                where co-located is
                                                                defined as running
                                                                on a node whose value
                                                                of the label with
                                                                key topologyKey matches
                                                                that of any node on
                                                                which any of the selected
                                                                pods is running. Empty
                                                                topologyKey is not
                                                                allowed.
                                                              type: string
                                                          required:
                                                          - topologyKey
                                                          type: object
                                                        weight:
                                                          description: weight associated
                                                            with matching the corresponding
                                                            podAffinityTerm, in the
                                                            range 1-100.
                                                          format: int32
                                                          type: integer
                                                      required:
                                                      - podAffinityTerm
                                                      - weight
                                                      type: object
                                                    type: array
                                                  requiredDuringSchedulingIgnoredDuringExecution:
                                                    description: If the anti-affinity
                                                      requirements specified by this
                                                      field are not met at scheduling
                                                      time, the pod will not be scheduled
                                                      onto the node. If the anti-affinity
                                                      requirements specified by this
                                                      field cease to be met at some
                                                      point during pod execution (e.g.
                                                      due to a pod label update),
                                                      the system may or may not try
                                                      to eventually evict the pod
                                                      from its node. When there are
                                                      multiple elements, the lists
                                                      of nodes corresponding to each
                                                      podAffinityTerm are intersected,
                                                      i.e. all terms must be satisfied.
                                                    items:
                                                      description: Defines a set of
                                                        pods (namely those matching
                                                        the labelSelector relative
                                                        to the given namespace(s))
                                                        that this pod should be co-located
                                                        (affinity) or not co-located
                                                        (anti-affinity) with, where
                                                        co-located is defined as running
                                                        on a node whose value of the
                                                        label with key <topologyKey>
                                                        matches that of any node on
                                                        which a pod of the set of
                                                        pods is running
                                                      properties:
                                                        labelSelector:
                                                          description: A label query
                                                            over a set of resources,
                                                            in this case pods.
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions
                                                                is a list of label
                                                                selector requirements.
                                                                The requirements are
                                                                ANDed.
                                                              items:
                                                                description: A label
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: key
                                                                      is the label
                                                                      key that the
                                                                      selector applies
                                                                      to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator
                                                                      represents a
                                                                      key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists
                                                                      and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values
                                                                      is an array
                                                                      of string values.
                                                                      If the operator
                                                                      is In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                            matchLabels:
                                                              additionalProperties:
                                                                type: string
                                                              description: matchLabels
                                                                is a map of {key,value}
                                                                pairs. A single {key,value}
                                                                in the matchLabels
                                                                map is equivalent
                                                                to an element of matchExpressions,
                                                                whose key field is
                                                                "key", the operator
                                                                is "In", and the values
                                                                array contains only
                                                                "value". The requirements
                                                                are ANDed.
                                                              type: object
                                                          type: object
                                                        namespaceSelector:
                                                          description: A label query
                                                            over the set of namespaces
                                                            that the term applies
                                                            to. The term is applied
                                                            to the union of the namespaces
                                                            selected by this field
                                                            and the ones listed in
                                                            the namespaces field.
                                                            null selector and null
                                                            or empty namespaces list
                                                            means "this pod's namespace".
                                                            An empty selector ({})
                                                            matches all namespaces.
                                                            This field is beta-level
                                                            and is only honored when
                                                            PodAffinityNamespaceSelector
                                                            feature is enabled.
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions
                                                                is a list of label
                                                                selector requirements.
                                                                The requirements are
                                                                ANDed.
                                                              items:
                                                                description: A label
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: key
                                                                      is the label
                                                                      key that the
                                                                      selector applies
                                                                      to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator
                                                                      represents a
                                                                      key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists
                                                                      and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values
                                                                      is an array
                                                                      of string values.
                                                                      If the operator
                                                                      is In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                            matchLabels:
                                                              additionalProperties:
                                                                type: string
                                                              description: matchLabels
                                                                is a map of {key,value}
                                                                pairs. A single {key,value}
                                                                in the matchLabels
                                                                map is equivalent
                                                                to an element of matchExpressions,
                                                                whose key field is
                                                                "key", the operator
                                                                is "In", and the values
                                                                array contains only
                                                                "value". The requirements
                                                                are ANDed.
                                                              type: object
                                                          type: object
                                                        namespaces:
                                                          description: namespaces
                                                            specifies a static list
                                                            of namespace names that
                                                            the term applies to. The
                                                            term is applied to the
                                                            union of the namespaces
                                                            listed in this field and
                                                            the ones selected by namespaceSelector.
                                                            null or empty namespaces
                                                            list and null namespaceSelector
                                                            means "this pod's namespace"
                                                          items:
                                                            type: string
                                                          type: array
                                                        topologyKey:
                                                          description: This pod should
                                                            be co-located (affinity)
                                                            or not co-located (anti-affinity)
                                                            with the pods matching
                                                            the labelSelector in the
                                                            specified namespaces,
                                                            where co-located is defined
                                                            as running on a node whose
                                                            value of the label with
                                                            key topologyKey matches
                                                            that of any node on which
                                                            any of the selected pods
                                                            is running. Empty topologyKey
                                                            is not allowed.
                                                          type: string
                                                      required:
                                                      - topologyKey
                                                      type: object
                                                    type: array
                                                type: object
                                            type: object
                                          nodeSelector:
                                            additionalProperties:
                                              type: string
                                            description: 'NodeSelector is a selector
                                              which must be true for the pod to fit
                                              on a node. Selector which must match
                                              a node''s labels for the pod to be scheduled
                                              on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                                            type: object
                                          priorityClassName:
                                            description: If specified, the pod's priorityClassName.
                                            type: string
                                          serviceAccountName:
                                            description: If specified, the pod's service
                                              account
                                            type: string
                                          tolerations:
                                            description: If specified, the pod's tolerations.
                                            items:
                                              description: The pod this Toleration
                                                is attached to tolerates any taint
                                                that matches the triple <key,value,effect>
                                                using the matching operator <operator>.
                                              properties:
                                                effect:
                                                  description: Effect indicates the
                                                    taint effect to match. Empty means
                                                    match all taint effects. When
                                                    specified, allowed values are
                                                    NoSchedule, PreferNoSchedule and
                                                    NoExecute.
                                                  type: string
                                                key:
                                                  description: Key is the taint key
                                                    that the toleration applies to.
                                                    Empty means match all taint keys.
                                                    If the key is empty, operator
                                                    must be Exists; this combination
                                                    means to match all values and
                                                    all keys.
                                                  type: string
                                                operator:
                                                  description: Operator represents
                                                    a key's relationship to the value.
                                                    Valid operators are Exists and
                                                    Equal. Defaults to Equal. Exists
                                                    is equivalent to wildcard for
                                                    value, so that a pod can tolerate
                                                    all taints of a particular category.
                                                  type: string
                                                tolerationSeconds:
                                                  description: TolerationSeconds represents
                                                    the period of time the toleration
                                                    (which must be of effect NoExecute,
                                                    otherwise this field is ignored)
                                                    tolerates the taint. By default,
                                                    it is not set, which means tolerate
                                                    the taint forever (do not evict).
                                                    Zero and negative values will
                                                    be treated as 0 (evict immediately)
                                                    by the system.
                                                  format: int64
                                                  type: integer
                                                value:
                                                  description: Value is the taint
                                                    value the toleration matches to.
                                                    If the operator is Exists, the
                                                    value should be empty, otherwise
                                                    just a regular string.
                                                  type: string
                                              type: object
                                            type: array
                                        type: object
                                    type: object
                                  serviceType:
                                    description: Optional service type for Kubernetes
                                      solver service. Supported values are NodePort
                                      or ClusterIP. If unset, defaults to NodePort.
                                    type: string
                                type: object
                            type: object
                          selector:
                            description: Selector selects a set of DNSNames on the
                              Certificate resource that should be solved using this
                              challenge solver. If not specified, the solver will
                              be treated as the 'default' solver with the lowest priority,
                              i.e. if any other solver has a more specific match,
                              it will be used instead.
                            properties:
                              dnsNames:
                                description: List of DNSNames that this solver will
                                  be used to solve. If specified and a match is found,
                                  a dnsNames selector will take precedence over a
                                  dnsZones selector. If multiple solvers match with
                                  the same dnsNames value, the solver with the most
                                  matching labels in matchLabels will be selected.
                                  If neither has more matches, the solver defined
                                  earlier in the list will be selected.
                                items:
                                  type: string
                                type: array
                              dnsZones:
                                description: List of DNSZones that this solver will
                                  be used to solve. The most specific DNS zone match
                                  specified here will take precedence over other DNS
                                  zone matches, so a solver specifying sys.example.com
                                  will be selected over one specifying example.com
                                  for the domain www.sys.example.com. If multiple
                                  solvers match with the same dnsZones value, the
                                  solver with the most matching labels in matchLabels
                                  will be selected. If neither has more matches, the
                                  solver defined earlier in the list will be selected.
                                items:
                                  type: string
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: A label selector that is used to refine
                                  the set of certificate's that this challenge solver
                                  will apply to.
                                type: object
                            type: object
                        type: object
                      type: array
                  required:
                  - privateKeySecretRef
                  - server
                  type: object
                ca:
                  description: CA configures this issuer to sign certificates using
                    a signing CA keypair stored in a Secret resource. This is used
                    to build internal PKIs that are managed by cert-manager.
                  properties:
                    crlDistributionPoints:
                      description: The CRL distribution points is an X.509 v3 certificate
                        extension which identifies the location of the CRL from which
                        the revocation of this certificate can be checked. If not
                        set, certificates will be issued without distribution points
                        set.
                      items:
                        type: string
                      type: array
                    ocspServers:
                      description: The OCSP server list is an X.509 v3 extension that
                        defines a list of URLs of OCSP responders. The OCSP responders
                        can be queried for the revocation status of an issued certificate.
                        If not set, the certificate will be issued with no OCSP servers
                        set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
                      items:
                        type: string
                      type: array
                    secretName:
                      description: SecretName is the name of the secret used to sign
                        Certificates issued by this Issuer.
                      type: string
                  required:
                  - secretName
                  type: object
                selfSigned:
                  description: SelfSigned configures this issuer to 'self sign' certificates
                    using the private key used to create the CertificateRequest object.
                  properties:
                    crlDistributionPoints:
                      description: The CRL distribution points is an X.509 v3 certificate
                        extension which identifies the location of the CRL from which
                        the revocation of this certificate can be checked. If not
                        set certificate will be issued without CDP. Values are strings.
                      items:
                        type: string
                      type: array
                  type: object
                vault:
                  description: Vault configures this issuer to sign certificates using
                    a HashiCorp Vault PKI backend.
                  properties:
                    auth:
                      description: Auth configures how cert-manager authenticates
                        with the Vault server.
                      properties:
                        appRole:
                          description: AppRole authenticates with Vault using the
                            App Role auth mechanism, with the role and secret stored
                            in a Kubernetes Secret resource.
                          properties:
                            path:
                              description: 'Path where the App Role authentication
                                backend is mounted in Vault, e.g: "approle"'
                              type: string
                            roleId:
                              description: RoleID configured in the App Role authentication
                                backend when setting up the authentication backend
                                in Vault.
                              type: string
                            secretRef:
                              description: Reference to a key in a Secret that contains
                                the App Role secret used to authenticate with Vault.
                                The `key` field must be specified and denotes which
                                entry within the Secret resource is used as the app
                                role secret.
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                          required:
                          - path
                          - roleId
                          - secretRef
                          type: object
                        kubernetes:
                          description: Kubernetes authenticates with Vault by passing
                            the ServiceAccount token stored in the named Secret resource
                            to the Vault server.
                          properties:
                            mountPath:
                              description: The Vault mountPath here is the mount path
                                to use when authenticating with Vault. For example,
                                setting a value to `/v1/auth/foo`, will use the path
                                `/v1/auth/foo/login` to authenticate with Vault. If
                                unspecified, the default value "/v1/auth/kubernetes"
                                will be used.
                              type: string
                            role:
                              description: A required field containing the Vault Role
                                to assume. A Role binds a Kubernetes ServiceAccount
                                with a set of Vault policies.
                              type: string
                            secretRef:
                              description: The required Secret field containing a
                                Kubernetes ServiceAccount JWT used for authenticating
                                with Vault. Use of 'ambient credentials' is not supported.
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                          required:
                          - role
                          - secretRef
                          type: object
                        tokenSecretRef:
                          description: TokenSecretRef authenticates with Vault by
                            presenting a token.
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's
                                `data` field to be used. Some instances of this field
                                may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to.
                                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                          required:
                          - name
                          type: object
                      type: object
                    caBundle:
                      description: PEM-encoded CA bundle (base64-encoded) used to
                        validate Vault server certificate. Only used if the Server
                        URL is using HTTPS protocol. This parameter is ignored for
                        plain HTTP protocol connection. If not set the system root
                        certificates are used to validate the TLS connection.
                      format: byte
                      type: string
                    namespace:
                      description: 'Name of the vault namespace. Namespaces is a set
                        of features within Vault Enterprise that allows Vault environments
                        to support Secure Multi-tenancy. e.g: "ns1" More about namespaces
                        can be found here https://www.vaultproject.io/docs/enterprise/namespaces'
                      type: string
                    path:
                      description: 'Path is the mount path of the Vault PKI backend''s
                        `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".'
                      type: string
                    server:
                      description: 'Server is the connection address for the Vault
                        server, e.g: "https://vault.example.com:8200".'
                      type: string
                  required:
                  - auth
                  - path
                  - server
                  type: object
                venafi:
                  description: Venafi configures this issuer to sign certificates
                    using a Venafi TPP or Venafi Cloud policy zone.
                  properties:
                    cloud:
                      description: Cloud specifies the Venafi cloud configuration
                        settings. Only one of TPP or Cloud may be specified.
                      properties:
                        apiTokenSecretRef:
                          description: APITokenSecretRef is a secret key selector
                            for the Venafi Cloud API token.
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's
                                `data` field to be used. Some instances of this field
                                may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to.
                                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                          required:
                          - name
                          type: object
                        url:
                          description: URL is the base URL for Venafi Cloud. Defaults
                            to "https://api.venafi.cloud/v1".
                          type: string
                      required:
                      - apiTokenSecretRef
                      type: object
                    tpp:
                      description: TPP specifies Trust Protection Platform configuration
                        settings. Only one of TPP or Cloud may be specified.
                      properties:
                        caBundle:
                          description: CABundle is a PEM encoded TLS certificate to
                            use to verify connections to the TPP instance. If specified,
                            system roots will not be used and the issuing CA for the
                            TPP instance must be verifiable using the provided root.
                            If not specified, the connection will be verified using
                            the cert-manager system root certificates.
                          format: byte
                          type: string
                        credentialsRef:
                          description: CredentialsRef is a reference to a Secret containing
                            the username and password for the TPP server. The secret
                            must contain two keys, 'username' and 'password'.
                          properties:
                            name:
                              description: 'Name of the resource being referred to.
                                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                          required:
                          - name
                          type: object
                        url:
                          description: 'URL is the base URL for the vedsdk endpoint
                            of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".'
                          type: string
                      required:
                      - credentialsRef
                      - url
                      type: object
                    zone:
                      description: Zone is the Venafi Policy Zone to use for this
                        issuer. All requests made to the Venafi platform will be restricted
                        by the named zone policy. This field is required.
                      type: string
                  required:
                  - zone
                  type: object
              type: object
            status:
              description: Status of the ClusterIssuer. This is set and managed automatically.
              properties:
                acme:
                  description: ACME specific status options. This field should only
                    be set if the Issuer is configured to use an ACME server to issue
                    certificates.
                  properties:
                    lastRegisteredEmail:
                      description: LastRegisteredEmail is the email associated with
                        the latest registered ACME account, in order to track changes
                        made to registered account associated with the  Issuer
                      type: string
                    uri:
                      description: URI is the unique account identifier, which can
                        also be used to retrieve account details from the CA
                      type: string
                  type: object
                conditions:
                  description: List of status conditions to indicate the status of
                    a CertificateRequest. Known condition types are `Ready`.
                  items:
                    description: IssuerCondition contains condition information for
                      an Issuer.
                    properties:
                      lastTransitionTime:
                        description: LastTransitionTime is the timestamp corresponding
                          to the last status change of this condition.
                        format: date-time
                        type: string
                      message:
                        description: Message is a human readable description of the
                          details of the last transition, complementing reason.
                        type: string
                      observedGeneration:
                        description: If set, this represents the .metadata.generation
                          that the condition was set based upon. For instance, if
                          .metadata.generation is currently 12, but the .status.condition[x].observedGeneration
                          is 9, the condition is out of date with respect to the current
                          state of the Issuer.
                        format: int64
                        type: integer
                      reason:
                        description: Reason is a brief machine readable explanation
                          for the condition's last transition.
                        type: string
                      status:
                        description: Status of the condition, one of (`True`, `False`,
                          `Unknown`).
                        enum:
                        - "True"
                        - "False"
                        - Unknown
                        type: string
                      type:
                        description: Type of the condition, known values are (`Ready`).
                        type: string
                    required:
                    - status
                    - type
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                  - type
                  x-kubernetes-list-type: map
              type: object
          required:
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - cert-manager
      kind: ClusterIssuer
      listKind: ClusterIssuerList
      plural: clusterissuers
      singular: clusterissuer
    conditions:
    - lastTransitionTime: "2025-07-31T03:46:28Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:46:28Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      cert-manager.io/inject-ca-from-secret: cert-manager/cert-manager-webhook-ca
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"cert-manager.io/inject-ca-from-secret":"cert-manager/cert-manager-webhook-ca"},"labels":{"app":"cert-manager","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.8.0"},"name":"issuers.cert-manager.io"},"spec":{"group":"cert-manager.io","names":{"categories":["cert-manager"],"kind":"Issuer","listKind":"IssuerList","plural":"issuers","singular":"issuer"},"scope":"Namespaced","versions":[{"additionalPrinterColumns":[{"jsonPath":".status.conditions[?(@.type==\"Ready\")].status","name":"Ready","type":"string"},{"jsonPath":".status.conditions[?(@.type==\"Ready\")].message","name":"Status","priority":1,"type":"string"},{"description":"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.","jsonPath":".metadata.creationTimestamp","name":"Age","type":"date"}],"name":"v1","schema":{"openAPIV3Schema":{"description":"An Issuer represents a certificate issuing authority which can be referenced as part of `issuerRef` fields. It is scoped to a single namespace and can therefore only be referenced by resources within the same namespace.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"Desired state of the Issuer resource.","properties":{"acme":{"description":"ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.","properties":{"disableAccountKeyGeneration":{"description":"Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.","type":"boolean"},"email":{"description":"Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.","type":"string"},"enableDurationFeature":{"description":"Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.","type":"boolean"},"externalAccountBinding":{"description":"ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.","properties":{"keyAlgorithm":{"description":"Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.","enum":["HS256","HS384","HS512"],"type":"string"},"keyID":{"description":"keyID is the ID of the CA key that the External Account is bound to.","type":"string"},"keySecretRef":{"description":"keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["keyID","keySecretRef"],"type":"object"},"preferredChain":{"description":"PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: \"DST Root CA X3\" or \"ISRG Root X1\" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN","maxLength":64,"type":"string"},"privateKeySecretRef":{"description":"PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"server":{"description":"Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: \"https://acme-staging-v02.api.letsencrypt.org/directory\". Only ACME v2 endpoints (i.e. RFC 8555) are supported.","type":"string"},"skipTLSVerify":{"description":"Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.","type":"boolean"},"solvers":{"description":"Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/","items":{"description":"An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.","properties":{"dns01":{"description":"Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.","properties":{"acmeDNS":{"description":"Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.","properties":{"accountSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"host":{"type":"string"}},"required":["accountSecretRef","host"],"type":"object"},"akamai":{"description":"Use the Akamai DNS zone management API to manage DNS01 challenge records.","properties":{"accessTokenSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"clientSecretSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"clientTokenSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"serviceConsumerDomain":{"type":"string"}},"required":["accessTokenSecretRef","clientSecretSecretRef","clientTokenSecretRef","serviceConsumerDomain"],"type":"object"},"azureDNS":{"description":"Use the Microsoft Azure DNS API to manage DNS01 challenge records.","properties":{"clientID":{"description":"if both this and ClientSecret are left unset MSI will be used","type":"string"},"clientSecretSecretRef":{"description":"if both this and ClientID are left unset MSI will be used","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"environment":{"description":"name of the Azure environment (default AzurePublicCloud)","enum":["AzurePublicCloud","AzureChinaCloud","AzureGermanCloud","AzureUSGovernmentCloud"],"type":"string"},"hostedZoneName":{"description":"name of the DNS zone that should be used","type":"string"},"managedIdentity":{"description":"managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID","properties":{"clientID":{"description":"client ID of the managed identity, can not be used at the same time as resourceID","type":"string"},"resourceID":{"description":"resource ID of the managed identity, can not be used at the same time as clientID","type":"string"}},"type":"object"},"resourceGroupName":{"description":"resource group the DNS zone is located in","type":"string"},"subscriptionID":{"description":"ID of the Azure subscription","type":"string"},"tenantID":{"description":"when specifying ClientID and ClientSecret then this field is also needed","type":"string"}},"required":["resourceGroupName","subscriptionID"],"type":"object"},"cloudDNS":{"description":"Use the Google Cloud DNS API to manage DNS01 challenge records.","properties":{"hostedZoneName":{"description":"HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.","type":"string"},"project":{"type":"string"},"serviceAccountSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["project"],"type":"object"},"cloudflare":{"description":"Use the Cloudflare API to manage DNS01 challenge records.","properties":{"apiKeySecretRef":{"description":"API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"apiTokenSecretRef":{"description":"API token used to authenticate with Cloudflare.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"email":{"description":"Email of the account, only required when using API key based authentication.","type":"string"}},"type":"object"},"cnameStrategy":{"description":"CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.","enum":["None","Follow"],"type":"string"},"digitalocean":{"description":"Use the DigitalOcean DNS API to manage DNS01 challenge records.","properties":{"tokenSecretRef":{"description":"A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["tokenSecretRef"],"type":"object"},"rfc2136":{"description":"Use RFC2136 (\"Dynamic Updates in the Domain Name System\") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.","properties":{"nameserver":{"description":"The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.","type":"string"},"tsigAlgorithm":{"description":"The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.","type":"string"},"tsigKeyName":{"description":"The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.","type":"string"},"tsigSecretSecretRef":{"description":"The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["nameserver"],"type":"object"},"route53":{"description":"Use the AWS Route53 API to manage DNS01 challenge records.","properties":{"accessKeyID":{"description":"The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials","type":"string"},"hostedZoneID":{"description":"If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.","type":"string"},"region":{"description":"Always set the region when using AccessKeyID and SecretAccessKey","type":"string"},"role":{"description":"Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata","type":"string"},"secretAccessKeySecretRef":{"description":"The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["region"],"type":"object"},"webhook":{"description":"Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.","properties":{"config":{"description":"Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.","x-kubernetes-preserve-unknown-fields":true},"groupName":{"description":"The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.","type":"string"},"solverName":{"description":"The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.","type":"string"}},"required":["groupName","solverName"],"type":"object"}},"type":"object"},"http01":{"description":"Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.","properties":{"gatewayHTTPRoute":{"description":"The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.","properties":{"labels":{"additionalProperties":{"type":"string"},"description":"Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.","type":"object"},"parentRefs":{"description":"When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways","items":{"description":"ParentRef identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with \"Core\" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. \n The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. \n References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.","properties":{"group":{"default":"gateway.networking.k8s.io","description":"Group is the group of the referent. \n Support: Core","maxLength":253,"pattern":"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$","type":"string"},"kind":{"default":"Gateway","description":"Kind is kind of the referent. \n Support: Core (Gateway) Support: Custom (Other Resources)","maxLength":63,"minLength":1,"pattern":"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$","type":"string"},"name":{"description":"Name is the name of the referent. \n Support: Core","maxLength":253,"minLength":1,"type":"string"},"namespace":{"description":"Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. \n Support: Core","maxLength":63,"minLength":1,"pattern":"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$","type":"string"},"sectionName":{"description":"SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: \n * Gateway: Listener Name \n Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. \n When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \n Support: Core","maxLength":253,"minLength":1,"pattern":"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$","type":"string"}},"required":["name"],"type":"object"},"type":"array"},"serviceType":{"description":"Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.","type":"string"}},"type":"object"},"ingress":{"description":"The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.","properties":{"class":{"description":"The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.","type":"string"},"ingressTemplate":{"description":"Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.","properties":{"metadata":{"description":"ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.","properties":{"annotations":{"additionalProperties":{"type":"string"},"description":"Annotations that should be added to the created ACME HTTP01 solver ingress.","type":"object"},"labels":{"additionalProperties":{"type":"string"},"description":"Labels that should be added to the created ACME HTTP01 solver ingress.","type":"object"}},"type":"object"}},"type":"object"},"name":{"description":"The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.","type":"string"},"podTemplate":{"description":"Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.","properties":{"metadata":{"description":"ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.","properties":{"annotations":{"additionalProperties":{"type":"string"},"description":"Annotations that should be added to the create ACME HTTP01 solver pods.","type":"object"},"labels":{"additionalProperties":{"type":"string"},"description":"Labels that should be added to the created ACME HTTP01 solver pods.","type":"object"}},"type":"object"},"spec":{"description":"PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.","properties":{"affinity":{"description":"If specified, the pod's scheduling constraints","properties":{"nodeAffinity":{"description":"Describes node affinity scheduling rules for the pod.","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.","items":{"description":"An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).","properties":{"preference":{"description":"A node selector term, associated with the corresponding weight.","properties":{"matchExpressions":{"description":"A list of node selector requirements by node's labels.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchFields":{"description":"A list of node selector requirements by node's fields.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"}},"type":"object"},"weight":{"description":"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["preference","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.","properties":{"nodeSelectorTerms":{"description":"Required. A list of node selector terms. The terms are ORed.","items":{"description":"A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.","properties":{"matchExpressions":{"description":"A list of node selector requirements by node's labels.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchFields":{"description":"A list of node selector requirements by node's fields.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"}},"type":"object"},"type":"array"}},"required":["nodeSelectorTerms"],"type":"object"}},"type":"object"},"podAffinity":{"description":"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.","items":{"description":"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)","properties":{"podAffinityTerm":{"description":"Required. A pod affinity term, associated with the corresponding weight.","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"weight":{"description":"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["podAffinityTerm","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.","items":{"description":"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"type":"array"}},"type":"object"},"podAntiAffinity":{"description":"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.","items":{"description":"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)","properties":{"podAffinityTerm":{"description":"Required. A pod affinity term, associated with the corresponding weight.","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"weight":{"description":"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["podAffinityTerm","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.","items":{"description":"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"type":"array"}},"type":"object"}},"type":"object"},"nodeSelector":{"additionalProperties":{"type":"string"},"description":"NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/","type":"object"},"priorityClassName":{"description":"If specified, the pod's priorityClassName.","type":"string"},"serviceAccountName":{"description":"If specified, the pod's service account","type":"string"},"tolerations":{"description":"If specified, the pod's tolerations.","items":{"description":"The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.","properties":{"effect":{"description":"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.","type":"string"},"key":{"description":"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.","type":"string"},"operator":{"description":"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.","type":"string"},"tolerationSeconds":{"description":"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.","format":"int64","type":"integer"},"value":{"description":"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.","type":"string"}},"type":"object"},"type":"array"}},"type":"object"}},"type":"object"},"serviceType":{"description":"Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.","type":"string"}},"type":"object"}},"type":"object"},"selector":{"description":"Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.","properties":{"dnsNames":{"description":"List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.","items":{"type":"string"},"type":"array"},"dnsZones":{"description":"List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.","items":{"type":"string"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"A label selector that is used to refine the set of certificate's that this challenge solver will apply to.","type":"object"}},"type":"object"}},"type":"object"},"type":"array"}},"required":["privateKeySecretRef","server"],"type":"object"},"ca":{"description":"CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.","properties":{"crlDistributionPoints":{"description":"The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.","items":{"type":"string"},"type":"array"},"ocspServers":{"description":"The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be \"http://ocsp.int-x3.letsencrypt.org\".","items":{"type":"string"},"type":"array"},"secretName":{"description":"SecretName is the name of the secret used to sign Certificates issued by this Issuer.","type":"string"}},"required":["secretName"],"type":"object"},"selfSigned":{"description":"SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.","properties":{"crlDistributionPoints":{"description":"The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.","items":{"type":"string"},"type":"array"}},"type":"object"},"vault":{"description":"Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.","properties":{"auth":{"description":"Auth configures how cert-manager authenticates with the Vault server.","properties":{"appRole":{"description":"AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.","properties":{"path":{"description":"Path where the App Role authentication backend is mounted in Vault, e.g: \"approle\"","type":"string"},"roleId":{"description":"RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.","type":"string"},"secretRef":{"description":"Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["path","roleId","secretRef"],"type":"object"},"kubernetes":{"description":"Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.","properties":{"mountPath":{"description":"The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value \"/v1/auth/kubernetes\" will be used.","type":"string"},"role":{"description":"A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.","type":"string"},"secretRef":{"description":"The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"required":["role","secretRef"],"type":"object"},"tokenSecretRef":{"description":"TokenSecretRef authenticates with Vault by presenting a token.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"}},"type":"object"},"caBundle":{"description":"PEM-encoded CA bundle (base64-encoded) used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.","format":"byte","type":"string"},"namespace":{"description":"Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces","type":"string"},"path":{"description":"Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: \"my_pki_mount/sign/my-role-name\".","type":"string"},"server":{"description":"Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".","type":"string"}},"required":["auth","path","server"],"type":"object"},"venafi":{"description":"Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.","properties":{"cloud":{"description":"Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.","properties":{"apiTokenSecretRef":{"description":"APITokenSecretRef is a secret key selector for the Venafi Cloud API token.","properties":{"key":{"description":"The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.","type":"string"},"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"url":{"description":"URL is the base URL for Venafi Cloud. Defaults to \"https://api.venafi.cloud/v1\".","type":"string"}},"required":["apiTokenSecretRef"],"type":"object"},"tpp":{"description":"TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.","properties":{"caBundle":{"description":"CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.","format":"byte","type":"string"},"credentialsRef":{"description":"CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.","properties":{"name":{"description":"Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}},"required":["name"],"type":"object"},"url":{"description":"URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: \"https://tpp.example.com/vedsdk\".","type":"string"}},"required":["credentialsRef","url"],"type":"object"},"zone":{"description":"Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.","type":"string"}},"required":["zone"],"type":"object"}},"type":"object"},"status":{"description":"Status of the Issuer. This is set and managed automatically.","properties":{"acme":{"description":"ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.","properties":{"lastRegisteredEmail":{"description":"LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer","type":"string"},"uri":{"description":"URI is the unique account identifier, which can also be used to retrieve account details from the CA","type":"string"}},"type":"object"},"conditions":{"description":"List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.","items":{"description":"IssuerCondition contains condition information for an Issuer.","properties":{"lastTransitionTime":{"description":"LastTransitionTime is the timestamp corresponding to the last status change of this condition.","format":"date-time","type":"string"},"message":{"description":"Message is a human readable description of the details of the last transition, complementing reason.","type":"string"},"observedGeneration":{"description":"If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.","format":"int64","type":"integer"},"reason":{"description":"Reason is a brief machine readable explanation for the condition's last transition.","type":"string"},"status":{"description":"Status of the condition, one of (`True`, `False`, `Unknown`).","enum":["True","False","Unknown"],"type":"string"},"type":{"description":"Type of the condition, known values are (`Ready`).","type":"string"}},"required":["status","type"],"type":"object"},"type":"array","x-kubernetes-list-map-keys":["type"],"x-kubernetes-list-type":"map"}},"type":"object"}},"required":["spec"],"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]}}
    creationTimestamp: "2025-07-31T03:46:28Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.8.0
    name: issuers.cert-manager.io
    resourceVersion: "14080"
    uid: 04a04312-7755-4749-82f8-fae54d77f3b0
  spec:
    conversion:
      strategy: None
    group: cert-manager.io
    names:
      categories:
      - cert-manager
      kind: Issuer
      listKind: IssuerList
      plural: issuers
      singular: issuer
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.conditions[?(@.type=="Ready")].status
        name: Ready
        type: string
      - jsonPath: .status.conditions[?(@.type=="Ready")].message
        name: Status
        priority: 1
        type: string
      - description: CreationTimestamp is a timestamp representing the server time
          when this object was created. It is not guaranteed to be set in happens-before
          order across separate operations. Clients may not set this value. It is
          represented in RFC3339 form and is in UTC.
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: An Issuer represents a certificate issuing authority which
            can be referenced as part of `issuerRef` fields. It is scoped to a single
            namespace and can therefore only be referenced by resources within the
            same namespace.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Desired state of the Issuer resource.
              properties:
                acme:
                  description: ACME configures this issuer to communicate with a RFC8555
                    (ACME) server to obtain signed x509 certificates.
                  properties:
                    disableAccountKeyGeneration:
                      description: Enables or disables generating a new ACME account
                        key. If true, the Issuer resource will *not* request a new
                        account but will expect the account key to be supplied via
                        an existing secret. If false, the cert-manager system will
                        generate a new ACME account key for the Issuer. Defaults to
                        false.
                      type: boolean
                    email:
                      description: Email is the email address to be associated with
                        the ACME account. This field is optional, but it is strongly
                        recommended to be set. It will be used to contact you in case
                        of issues with your account or certificates, including expiry
                        notification emails. This field may be updated after the account
                        is initially registered.
                      type: string
                    enableDurationFeature:
                      description: Enables requesting a Not After date on certificates
                        that matches the duration of the certificate. This is not
                        supported by all ACME servers like Let's Encrypt. If set to
                        true when the ACME server does not support it it will create
                        an error on the Order. Defaults to false.
                      type: boolean
                    externalAccountBinding:
                      description: ExternalAccountBinding is a reference to a CA external
                        account of the ACME server. If set, upon registration cert-manager
                        will attempt to associate the given external account credentials
                        with the registered ACME account.
                      properties:
                        keyAlgorithm:
                          description: 'Deprecated: keyAlgorithm field exists for
                            historical compatibility reasons and should not be used.
                            The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.'
                          enum:
                          - HS256
                          - HS384
                          - HS512
                          type: string
                        keyID:
                          description: keyID is the ID of the CA key that the External
                            Account is bound to.
                          type: string
                        keySecretRef:
                          description: keySecretRef is a Secret Key Selector referencing
                            a data item in a Kubernetes Secret which holds the symmetric
                            MAC key of the External Account Binding. The `key` is
                            the index string that is paired with the key data in the
                            Secret and should not be confused with the key data itself,
                            or indeed with the External Account Binding keyID above.
                            The secret key stored in the Secret **must** be un-padded,
                            base64 URL encoded data.
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's
                                `data` field to be used. Some instances of this field
                                may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to.
                                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                          required:
                          - name
                          type: object
                      required:
                      - keyID
                      - keySecretRef
                      type: object
                    preferredChain:
                      description: 'PreferredChain is the chain to use if the ACME
                        server outputs multiple. PreferredChain is no guarantee that
                        this one gets delivered by the ACME endpoint. For example,
                        for Let''s Encrypt''s DST crosssign you would use: "DST Root
                        CA X3" or "ISRG Root X1" for the newer Let''s Encrypt root
                        CA. This value picks the first certificate bundle in the ACME
                        alternative chains that has a certificate with this value
                        as its issuer''s CN'
                      maxLength: 64
                      type: string
                    privateKeySecretRef:
                      description: PrivateKey is the name of a Kubernetes Secret resource
                        that will be used to store the automatically generated ACME
                        account private key. Optionally, a `key` may be specified
                        to select a specific entry within the named Secret resource.
                        If `key` is not specified, a default of `tls.key` will be
                        used.
                      properties:
                        key:
                          description: The key of the entry in the Secret resource's
                            `data` field to be used. Some instances of this field
                            may be defaulted, in others it may be required.
                          type: string
                        name:
                          description: 'Name of the resource being referred to. More
                            info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                      required:
                      - name
                      type: object
                    server:
                      description: 'Server is the URL used to access the ACME server''s
                        ''directory'' endpoint. For example, for Let''s Encrypt''s
                        staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory".
                        Only ACME v2 endpoints (i.e. RFC 8555) are supported.'
                      type: string
                    skipTLSVerify:
                      description: Enables or disables validation of the ACME server
                        TLS certificate. If true, requests to the ACME server will
                        not have their TLS certificate validated (i.e. insecure connections
                        will be allowed). Only enable this option in development environments.
                        The cert-manager system installed roots will be used to verify
                        connections to the ACME server if this is false. Defaults
                        to false.
                      type: boolean
                    solvers:
                      description: 'Solvers is a list of challenge solvers that will
                        be used to solve ACME challenges for the matching domains.
                        Solver configurations must be provided in order to obtain
                        certificates from an ACME server. For more information, see:
                        https://cert-manager.io/docs/configuration/acme/'
                      items:
                        description: An ACMEChallengeSolver describes how to solve
                          ACME challenges for the issuer it is part of. A selector
                          may be provided to use different solving strategies for
                          different DNS names. Only one of HTTP01 or DNS01 must be
                          provided.
                        properties:
                          dns01:
                            description: Configures cert-manager to attempt to complete
                              authorizations by performing the DNS01 challenge flow.
                            properties:
                              acmeDNS:
                                description: Use the 'ACME DNS' (https://github.com/joohoi/acme-dns)
                                  API to manage DNS01 challenge records.
                                properties:
                                  accountSecretRef:
                                    description: A reference to a specific 'key' within
                                      a Secret resource. In some instances, `key`
                                      is a required field.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  host:
                                    type: string
                                required:
                                - accountSecretRef
                                - host
                                type: object
                              akamai:
                                description: Use the Akamai DNS zone management API
                                  to manage DNS01 challenge records.
                                properties:
                                  accessTokenSecretRef:
                                    description: A reference to a specific 'key' within
                                      a Secret resource. In some instances, `key`
                                      is a required field.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  clientSecretSecretRef:
                                    description: A reference to a specific 'key' within
                                      a Secret resource. In some instances, `key`
                                      is a required field.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  clientTokenSecretRef:
                                    description: A reference to a specific 'key' within
                                      a Secret resource. In some instances, `key`
                                      is a required field.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  serviceConsumerDomain:
                                    type: string
                                required:
                                - accessTokenSecretRef
                                - clientSecretSecretRef
                                - clientTokenSecretRef
                                - serviceConsumerDomain
                                type: object
                              azureDNS:
                                description: Use the Microsoft Azure DNS API to manage
                                  DNS01 challenge records.
                                properties:
                                  clientID:
                                    description: if both this and ClientSecret are
                                      left unset MSI will be used
                                    type: string
                                  clientSecretSecretRef:
                                    description: if both this and ClientID are left
                                      unset MSI will be used
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  environment:
                                    description: name of the Azure environment (default
                                      AzurePublicCloud)
                                    enum:
                                    - AzurePublicCloud
                                    - AzureChinaCloud
                                    - AzureGermanCloud
                                    - AzureUSGovernmentCloud
                                    type: string
                                  hostedZoneName:
                                    description: name of the DNS zone that should
                                      be used
                                    type: string
                                  managedIdentity:
                                    description: managed identity configuration, can
                                      not be used at the same time as clientID, clientSecretSecretRef
                                      or tenantID
                                    properties:
                                      clientID:
                                        description: client ID of the managed identity,
                                          can not be used at the same time as resourceID
                                        type: string
                                      resourceID:
                                        description: resource ID of the managed identity,
                                          can not be used at the same time as clientID
                                        type: string
                                    type: object
                                  resourceGroupName:
                                    description: resource group the DNS zone is located
                                      in
                                    type: string
                                  subscriptionID:
                                    description: ID of the Azure subscription
                                    type: string
                                  tenantID:
                                    description: when specifying ClientID and ClientSecret
                                      then this field is also needed
                                    type: string
                                required:
                                - resourceGroupName
                                - subscriptionID
                                type: object
                              cloudDNS:
                                description: Use the Google Cloud DNS API to manage
                                  DNS01 challenge records.
                                properties:
                                  hostedZoneName:
                                    description: HostedZoneName is an optional field
                                      that tells cert-manager in which Cloud DNS zone
                                      the challenge record has to be created. If left
                                      empty cert-manager will automatically choose
                                      a zone.
                                    type: string
                                  project:
                                    type: string
                                  serviceAccountSecretRef:
                                    description: A reference to a specific 'key' within
                                      a Secret resource. In some instances, `key`
                                      is a required field.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                required:
                                - project
                                type: object
                              cloudflare:
                                description: Use the Cloudflare API to manage DNS01
                                  challenge records.
                                properties:
                                  apiKeySecretRef:
                                    description: 'API key to use to authenticate with
                                      Cloudflare. Note: using an API token to authenticate
                                      is now the recommended method as it allows greater
                                      control of permissions.'
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  apiTokenSecretRef:
                                    description: API token used to authenticate with
                                      Cloudflare.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  email:
                                    description: Email of the account, only required
                                      when using API key based authentication.
                                    type: string
                                type: object
                              cnameStrategy:
                                description: CNAMEStrategy configures how the DNS01
                                  provider should handle CNAME records when found
                                  in DNS zones.
                                enum:
                                - None
                                - Follow
                                type: string
                              digitalocean:
                                description: Use the DigitalOcean DNS API to manage
                                  DNS01 challenge records.
                                properties:
                                  tokenSecretRef:
                                    description: A reference to a specific 'key' within
                                      a Secret resource. In some instances, `key`
                                      is a required field.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                required:
                                - tokenSecretRef
                                type: object
                              rfc2136:
                                description: Use RFC2136 ("Dynamic Updates in the
                                  Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
                                  to manage DNS01 challenge records.
                                properties:
                                  nameserver:
                                    description: The IP address or hostname of an
                                      authoritative DNS server supporting RFC2136
                                      in the form host:port. If the host is an IPv6
                                      address it must be enclosed in square brackets
                                      (e.g [2001:db8::1]) ; port is optional. This
                                      field is required.
                                    type: string
                                  tsigAlgorithm:
                                    description: 'The TSIG Algorithm configured in
                                      the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef``
                                      and ``tsigKeyName`` are defined. Supported values
                                      are (case-insensitive): ``HMACMD5`` (default),
                                      ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.'
                                    type: string
                                  tsigKeyName:
                                    description: The TSIG Key name configured in the
                                      DNS. If ``tsigSecretSecretRef`` is defined,
                                      this field is required.
                                    type: string
                                  tsigSecretSecretRef:
                                    description: The name of the secret containing
                                      the TSIG value. If ``tsigKeyName`` is defined,
                                      this field is required.
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                required:
                                - nameserver
                                type: object
                              route53:
                                description: Use the AWS Route53 API to manage DNS01
                                  challenge records.
                                properties:
                                  accessKeyID:
                                    description: 'The AccessKeyID is used for authentication.
                                      If not set we fall-back to using env vars, shared
                                      credentials file or AWS Instance metadata see:
                                      https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                                    type: string
                                  hostedZoneID:
                                    description: If set, the provider will manage
                                      only this zone in Route53 and will not do an
                                      lookup using the route53:ListHostedZonesByName
                                      api call.
                                    type: string
                                  region:
                                    description: Always set the region when using
                                      AccessKeyID and SecretAccessKey
                                    type: string
                                  role:
                                    description: Role is a Role ARN which the Route53
                                      provider will assume using either the explicit
                                      credentials AccessKeyID/SecretAccessKey or the
                                      inferred credentials from environment variables,
                                      shared credentials file or AWS Instance metadata
                                    type: string
                                  secretAccessKeySecretRef:
                                    description: The SecretAccessKey is used for authentication.
                                      If not set we fall-back to using env vars, shared
                                      credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret
                                          resource's `data` field to be used. Some
                                          instances of this field may be defaulted,
                                          in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred
                                          to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                    required:
                                    - name
                                    type: object
                                required:
                                - region
                                type: object
                              webhook:
                                description: Configure an external webhook based DNS01
                                  challenge solver to manage DNS01 challenge records.
                                properties:
                                  config:
                                    description: Additional configuration that should
                                      be passed to the webhook apiserver when challenges
                                      are processed. This can contain arbitrary JSON
                                      data. Secret values should not be specified
                                      in this stanza. If secret values are needed
                                      (e.g. credentials for a DNS service), you should
                                      use a SecretKeySelector to reference a Secret
                                      resource. For details on the schema of this
                                      field, consult the webhook provider implementation's
                                      documentation.
                                    x-kubernetes-preserve-unknown-fields: true
                                  groupName:
                                    description: The API group name that should be
                                      used when POSTing ChallengePayload resources
                                      to the webhook apiserver. This should be the
                                      same as the GroupName specified in the webhook
                                      provider implementation.
                                    type: string
                                  solverName:
                                    description: The name of the solver to use, as
                                      defined in the webhook provider implementation.
                                      This will typically be the name of the provider,
                                      e.g. 'cloudflare'.
                                    type: string
                                required:
                                - groupName
                                - solverName
                                type: object
                            type: object
                          http01:
                            description: Configures cert-manager to attempt to complete
                              authorizations by performing the HTTP01 challenge flow.
                              It is not possible to obtain certificates for wildcard
                              domain names (e.g. `*.example.com`) using the HTTP01
                              challenge mechanism.
                            properties:
                              gatewayHTTPRoute:
                                description: The Gateway API is a sig-network community
                                  API that models service networking in Kubernetes
                                  (https://gateway-api.sigs.k8s.io/). The Gateway
                                  solver will create HTTPRoutes with the specified
                                  labels in the same namespace as the challenge. This
                                  solver is experimental, and fields / behaviour may
                                  change in the future.
                                properties:
                                  labels:
                                    additionalProperties:
                                      type: string
                                    description: Custom labels that will be applied
                                      to HTTPRoutes created by cert-manager while
                                      solving HTTP-01 challenges.
                                    type: object
                                  parentRefs:
                                    description: 'When solving an HTTP-01 challenge,
                                      cert-manager creates an HTTPRoute. cert-manager
                                      needs to know which parentRefs should be used
                                      when creating the HTTPRoute. Usually, the parentRef
                                      references a Gateway. See: https://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways'
                                    items:
                                      description: "ParentRef identifies an API object
                                        (usually a Gateway) that can be considered
                                        a parent of this resource (usually a route).
                                        The only kind of parent resource with \"Core\"
                                        support is Gateway. This API may be extended
                                        in the future to support additional kinds
                                        of parent resources, such as HTTPRoute. \n
                                        The API object must be valid in the cluster;
                                        the Group and Kind must be registered in the
                                        cluster for this reference to be valid. \n
                                        References to objects with invalid Group and
                                        Kind are not valid, and must be rejected by
                                        the implementation, with appropriate Conditions
                                        set on the containing object."
                                      properties:
                                        group:
                                          default: gateway.networking.k8s.io
                                          description: "Group is the group of the
                                            referent. \n Support: Core"
                                          maxLength: 253
                                          pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                                          type: string
                                        kind:
                                          default: Gateway
                                          description: "Kind is kind of the referent.
                                            \n Support: Core (Gateway) Support: Custom
                                            (Other Resources)"
                                          maxLength: 63
                                          minLength: 1
                                          pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                                          type: string
                                        name:
                                          description: "Name is the name of the referent.
                                            \n Support: Core"
                                          maxLength: 253
                                          minLength: 1
                                          type: string
                                        namespace:
                                          description: "Namespace is the namespace
                                            of the referent. When unspecified (or
                                            empty string), this refers to the local
                                            namespace of the Route. \n Support: Core"
                                          maxLength: 63
                                          minLength: 1
                                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                                          type: string
                                        sectionName:
                                          description: "SectionName is the name of
                                            a section within the target resource.
                                            In the following resources, SectionName
                                            is interpreted as the following: \n *
                                            Gateway: Listener Name \n Implementations
                                            MAY choose to support attaching Routes
                                            to other resources. If that is the case,
                                            they MUST clearly document how SectionName
                                            is interpreted. \n When unspecified (empty
                                            string), this will reference the entire
                                            resource. For the purpose of status, an
                                            attachment is considered successful if
                                            at least one section in the parent resource
                                            accepts it. For example, Gateway listeners
                                            can restrict which Routes can attach to
                                            them by Route kind, namespace, or hostname.
                                            If 1 of 2 Gateway listeners accept attachment
                                            from the referencing Route, the Route
                                            MUST be considered successfully attached.
                                            If no Gateway listeners accept attachment
                                            from this Route, the Route MUST be considered
                                            detached from the Gateway. \n Support:
                                            Core"
                                          maxLength: 253
                                          minLength: 1
                                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    type: array
                                  serviceType:
                                    description: Optional service type for Kubernetes
                                      solver service. Supported values are NodePort
                                      or ClusterIP. If unset, defaults to NodePort.
                                    type: string
                                type: object
                              ingress:
                                description: The ingress based HTTP01 challenge solver
                                  will solve challenges by creating or modifying Ingress
                                  resources in order to route requests for '/.well-known/acme-challenge/XYZ'
                                  to 'challenge solver' pods that are provisioned
                                  by cert-manager for each Challenge to be completed.
                                properties:
                                  class:
                                    description: The ingress class to use when creating
                                      Ingress resources to solve ACME challenges that
                                      use this challenge solver. Only one of 'class'
                                      or 'name' may be specified.
                                    type: string
                                  ingressTemplate:
                                    description: Optional ingress template used to
                                      configure the ACME challenge solver ingress
                                      used for HTTP01 challenges.
                                    properties:
                                      metadata:
                                        description: ObjectMeta overrides for the
                                          ingress used to solve HTTP01 challenges.
                                          Only the 'labels' and 'annotations' fields
                                          may be set. If labels or annotations overlap
                                          with in-built values, the values here will
                                          override the in-built values.
                                        properties:
                                          annotations:
                                            additionalProperties:
                                              type: string
                                            description: Annotations that should be
                                              added to the created ACME HTTP01 solver
                                              ingress.
                                            type: object
                                          labels:
                                            additionalProperties:
                                              type: string
                                            description: Labels that should be added
                                              to the created ACME HTTP01 solver ingress.
                                            type: object
                                        type: object
                                    type: object
                                  name:
                                    description: The name of the ingress resource
                                      that should have ACME challenge solving routes
                                      inserted into it in order to solve HTTP01 challenges.
                                      This is typically used in conjunction with ingress
                                      controllers like ingress-gce, which maintains
                                      a 1:1 mapping between external IPs and ingress
                                      resources.
                                    type: string
                                  podTemplate:
                                    description: Optional pod template used to configure
                                      the ACME challenge solver pods used for HTTP01
                                      challenges.
                                    properties:
                                      metadata:
                                        description: ObjectMeta overrides for the
                                          pod used to solve HTTP01 challenges. Only
                                          the 'labels' and 'annotations' fields may
                                          be set. If labels or annotations overlap
                                          with in-built values, the values here will
                                          override the in-built values.
                                        properties:
                                          annotations:
                                            additionalProperties:
                                              type: string
                                            description: Annotations that should be
                                              added to the create ACME HTTP01 solver
                                              pods.
                                            type: object
                                          labels:
                                            additionalProperties:
                                              type: string
                                            description: Labels that should be added
                                              to the created ACME HTTP01 solver pods.
                                            type: object
                                        type: object
                                      spec:
                                        description: PodSpec defines overrides for
                                          the HTTP01 challenge solver pod. Only the
                                          'priorityClassName', 'nodeSelector', 'affinity',
                                          'serviceAccountName' and 'tolerations' fields
                                          are supported currently. All other fields
                                          will be ignored.
                                        properties:
                                          affinity:
                                            description: If specified, the pod's scheduling
                                              constraints
                                            properties:
                                              nodeAffinity:
                                                description: Describes node affinity
                                                  scheduling rules for the pod.
                                                properties:
                                                  preferredDuringSchedulingIgnoredDuringExecution:
                                                    description: The scheduler will
                                                      prefer to schedule pods to nodes
                                                      that satisfy the affinity expressions
                                                      specified by this field, but
                                                      it may choose a node that violates
                                                      one or more of the expressions.
                                                      The node that is most preferred
                                                      is the one with the greatest
                                                      sum of weights, i.e. for each
                                                      node that meets all of the scheduling
                                                      requirements (resource request,
                                                      requiredDuringScheduling affinity
                                                      expressions, etc.), compute
                                                      a sum by iterating through the
                                                      elements of this field and adding
                                                      "weight" to the sum if the node
                                                      matches the corresponding matchExpressions;
                                                      the node(s) with the highest
                                                      sum are the most preferred.
                                                    items:
                                                      description: An empty preferred
                                                        scheduling term matches all
                                                        objects with implicit weight
                                                        0 (i.e. it's a no-op). A null
                                                        preferred scheduling term
                                                        matches no objects (i.e. is
                                                        also a no-op).
                                                      properties:
                                                        preference:
                                                          description: A node selector
                                                            term, associated with
                                                            the corresponding weight.
                                                          properties:
                                                            matchExpressions:
                                                              description: A list
                                                                of node selector requirements
                                                                by node's labels.
                                                              items:
                                                                description: A node
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: The
                                                                      label key that
                                                                      the selector
                                                                      applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents
                                                                      a key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists,
                                                                      DoesNotExist.
                                                                      Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An
                                                                      array of string
                                                                      values. If the
                                                                      operator is
                                                                      In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      If the operator
                                                                      is Gt or Lt,
                                                                      the values array
                                                                      must have a
                                                                      single element,
                                                                      which will be
                                                                      interpreted
                                                                      as an integer.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                            matchFields:
                                                              description: A list
                                                                of node selector requirements
                                                                by node's fields.
                                                              items:
                                                                description: A node
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: The
                                                                      label key that
                                                                      the selector
                                                                      applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents
                                                                      a key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists,
                                                                      DoesNotExist.
                                                                      Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An
                                                                      array of string
                                                                      values. If the
                                                                      operator is
                                                                      In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      If the operator
                                                                      is Gt or Lt,
                                                                      the values array
                                                                      must have a
                                                                      single element,
                                                                      which will be
                                                                      interpreted
                                                                      as an integer.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                          type: object
                                                        weight:
                                                          description: Weight associated
                                                            with matching the corresponding
                                                            nodeSelectorTerm, in the
                                                            range 1-100.
                                                          format: int32
                                                          type: integer
                                                      required:
                                                      - preference
                                                      - weight
                                                      type: object
                                                    type: array
                                                  requiredDuringSchedulingIgnoredDuringExecution:
                                                    description: If the affinity requirements
                                                      specified by this field are
                                                      not met at scheduling time,
                                                      the pod will not be scheduled
                                                      onto the node. If the affinity
                                                      requirements specified by this
                                                      field cease to be met at some
                                                      point during pod execution (e.g.
                                                      due to an update), the system
                                                      may or may not try to eventually
                                                      evict the pod from its node.
                                                    properties:
                                                      nodeSelectorTerms:
                                                        description: Required. A list
                                                          of node selector terms.
                                                          The terms are ORed.
                                                        items:
                                                          description: A null or empty
                                                            node selector term matches
                                                            no objects. The requirements
                                                            of them are ANDed. The
                                                            TopologySelectorTerm type
                                                            implements a subset of
                                                            the NodeSelectorTerm.
                                                          properties:
                                                            matchExpressions:
                                                              description: A list
                                                                of node selector requirements
                                                                by node's labels.
                                                              items:
                                                                description: A node
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: The
                                                                      label key that
                                                                      the selector
                                                                      applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents
                                                                      a key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists,
                                                                      DoesNotExist.
                                                                      Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An
                                                                      array of string
                                                                      values. If the
                                                                      operator is
                                                                      In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      If the operator
                                                                      is Gt or Lt,
                                                                      the values array
                                                                      must have a
                                                                      single element,
                                                                      which will be
                                                                      interpreted
                                                                      as an integer.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                            matchFields:
                                                              description: A list
                                                                of node selector requirements
                                                                by node's fields.
                                                              items:
                                                                description: A node
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: The
                                                                      label key that
                                                                      the selector
                                                                      applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents
                                                                      a key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists,
                                                                      DoesNotExist.
                                                                      Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An
                                                                      array of string
                                                                      values. If the
                                                                      operator is
                                                                      In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      If the operator
                                                                      is Gt or Lt,
                                                                      the values array
                                                                      must have a
                                                                      single element,
                                                                      which will be
                                                                      interpreted
                                                                      as an integer.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                          type: object
                                                        type: array
                                                    required:
                                                    - nodeSelectorTerms
                                                    type: object
                                                type: object
                                              podAffinity:
                                                description: Describes pod affinity
                                                  scheduling rules (e.g. co-locate
                                                  this pod in the same node, zone,
                                                  etc. as some other pod(s)).
                                                properties:
                                                  preferredDuringSchedulingIgnoredDuringExecution:
                                                    description: The scheduler will
                                                      prefer to schedule pods to nodes
                                                      that satisfy the affinity expressions
                                                      specified by this field, but
                                                      it may choose a node that violates
                                                      one or more of the expressions.
                                                      The node that is most preferred
                                                      is the one with the greatest
                                                      sum of weights, i.e. for each
                                                      node that meets all of the scheduling
                                                      requirements (resource request,
                                                      requiredDuringScheduling affinity
                                                      expressions, etc.), compute
                                                      a sum by iterating through the
                                                      elements of this field and adding
                                                      "weight" to the sum if the node
                                                      has pods which matches the corresponding
                                                      podAffinityTerm; the node(s)
                                                      with the highest sum are the
                                                      most preferred.
                                                    items:
                                                      description: The weights of
                                                        all of the matched WeightedPodAffinityTerm
                                                        fields are added per-node
                                                        to find the most preferred
                                                        node(s)
                                                      properties:
                                                        podAffinityTerm:
                                                          description: Required. A
                                                            pod affinity term, associated
                                                            with the corresponding
                                                            weight.
                                                          properties:
                                                            labelSelector:
                                                              description: A label
                                                                query over a set of
                                                                resources, in this
                                                                case pods.
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions
                                                                    is a list of label
                                                                    selector requirements.
                                                                    The requirements
                                                                    are ANDed.
                                                                  items:
                                                                    description: A
                                                                      label selector
                                                                      requirement
                                                                      is a selector
                                                                      that contains
                                                                      values, a key,
                                                                      and an operator
                                                                      that relates
                                                                      the key and
                                                                      values.
                                                                    properties:
                                                                      key:
                                                                        description: key
                                                                          is the label
                                                                          key that
                                                                          the selector
                                                                          applies
                                                                          to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator
                                                                          represents
                                                                          a key's
                                                                          relationship
                                                                          to a set
                                                                          of values.
                                                                          Valid operators
                                                                          are In,
                                                                          NotIn, Exists
                                                                          and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values
                                                                          is an array
                                                                          of string
                                                                          values.
                                                                          If the operator
                                                                          is In or
                                                                          NotIn, the
                                                                          values array
                                                                          must be
                                                                          non-empty.
                                                                          If the operator
                                                                          is Exists
                                                                          or DoesNotExist,
                                                                          the values
                                                                          array must
                                                                          be empty.
                                                                          This array
                                                                          is replaced
                                                                          during a
                                                                          strategic
                                                                          merge patch.
                                                                        items:
                                                                          type: string
                                                                        type: array
                                                                    required:
                                                                    - key
                                                                    - operator
                                                                    type: object
                                                                  type: array
                                                                matchLabels:
                                                                  additionalProperties:
                                                                    type: string
                                                                  description: matchLabels
                                                                    is a map of {key,value}
                                                                    pairs. A single
                                                                    {key,value} in
                                                                    the matchLabels
                                                                    map is equivalent
                                                                    to an element
                                                                    of matchExpressions,
                                                                    whose key field
                                                                    is "key", the
                                                                    operator is "In",
                                                                    and the values
                                                                    array contains
                                                                    only "value".
                                                                    The requirements
                                                                    are ANDed.
                                                                  type: object
                                                              type: object
                                                            namespaceSelector:
                                                              description: A label
                                                                query over the set
                                                                of namespaces that
                                                                the term applies to.
                                                                The term is applied
                                                                to the union of the
                                                                namespaces selected
                                                                by this field and
                                                                the ones listed in
                                                                the namespaces field.
                                                                null selector and
                                                                null or empty namespaces
                                                                list means "this pod's
                                                                namespace". An empty
                                                                selector ({}) matches
                                                                all namespaces. This
                                                                field is beta-level
                                                                and is only honored
                                                                when PodAffinityNamespaceSelector
                                                                feature is enabled.
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions
                                                                    is a list of label
                                                                    selector requirements.
                                                                    The requirements
                                                                    are ANDed.
                                                                  items:
                                                                    description: A
                                                                      label selector
                                                                      requirement
                                                                      is a selector
                                                                      that contains
                                                                      values, a key,
                                                                      and an operator
                                                                      that relates
                                                                      the key and
                                                                      values.
                                                                    properties:
                                                                      key:
                                                                        description: key
                                                                          is the label
                                                                          key that
                                                                          the selector
                                                                          applies
                                                                          to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator
                                                                          represents
                                                                          a key's
                                                                          relationship
                                                                          to a set
                                                                          of values.
                                                                          Valid operators
                                                                          are In,
                                                                          NotIn, Exists
                                                                          and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values
                                                                          is an array
                                                                          of string
                                                                          values.
                                                                          If the operator
                                                                          is In or
                                                                          NotIn, the
                                                                          values array
                                                                          must be
                                                                          non-empty.
                                                                          If the operator
                                                                          is Exists
                                                                          or DoesNotExist,
                                                                          the values
                                                                          array must
                                                                          be empty.
                                                                          This array
                                                                          is replaced
                                                                          during a
                                                                          strategic
                                                                          merge patch.
                                                                        items:
                                                                          type: string
                                                                        type: array
                                                                    required:
                                                                    - key
                                                                    - operator
                                                                    type: object
                                                                  type: array
                                                                matchLabels:
                                                                  additionalProperties:
                                                                    type: string
                                                                  description: matchLabels
                                                                    is a map of {key,value}
                                                                    pairs. A single
                                                                    {key,value} in
                                                                    the matchLabels
                                                                    map is equivalent
                                                                    to an element
                                                                    of matchExpressions,
                                                                    whose key field
                                                                    is "key", the
                                                                    operator is "In",
                                                                    and the values
                                                                    array contains
                                                                    only "value".
                                                                    The requirements
                                                                    are ANDed.
                                                                  type: object
                                                              type: object
                                                            namespaces:
                                                              description: namespaces
                                                                specifies a static
                                                                list of namespace
                                                                names that the term
                                                                applies to. The term
                                                                is applied to the
                                                                union of the namespaces
                                                                listed in this field
                                                                and the ones selected
                                                                by namespaceSelector.
                                                                null or empty namespaces
                                                                list and null namespaceSelector
                                                                means "this pod's
                                                                namespace"
                                                              items:
                                                                type: string
                                                              type: array
                                                            topologyKey:
                                                              description: This pod
                                                                should be co-located
                                                                (affinity) or not
                                                                co-located (anti-affinity)
                                                                with the pods matching
                                                                the labelSelector
                                                                in the specified namespaces,
                                                                where co-located is
                                                                defined as running
                                                                on a node whose value
                                                                of the label with
                                                                key topologyKey matches
                                                                that of any node on
                                                                which any of the selected
                                                                pods is running. Empty
                                                                topologyKey is not
                                                                allowed.
                                                              type: string
                                                          required:
                                                          - topologyKey
                                                          type: object
                                                        weight:
                                                          description: weight associated
                                                            with matching the corresponding
                                                            podAffinityTerm, in the
                                                            range 1-100.
                                                          format: int32
                                                          type: integer
                                                      required:
                                                      - podAffinityTerm
                                                      - weight
                                                      type: object
                                                    type: array
                                                  requiredDuringSchedulingIgnoredDuringExecution:
                                                    description: If the affinity requirements
                                                      specified by this field are
                                                      not met at scheduling time,
                                                      the pod will not be scheduled
                                                      onto the node. If the affinity
                                                      requirements specified by this
                                                      field cease to be met at some
                                                      point during pod execution (e.g.
                                                      due to a pod label update),
                                                      the system may or may not try
                                                      to eventually evict the pod
                                                      from its node. When there are
                                                      multiple elements, the lists
                                                      of nodes corresponding to each
                                                      podAffinityTerm are intersected,
                                                      i.e. all terms must be satisfied.
                                                    items:
                                                      description: Defines a set of
                                                        pods (namely those matching
                                                        the labelSelector relative
                                                        to the given namespace(s))
                                                        that this pod should be co-located
                                                        (affinity) or not co-located
                                                        (anti-affinity) with, where
                                                        co-located is defined as running
                                                        on a node whose value of the
                                                        label with key <topologyKey>
                                                        matches that of any node on
                                                        which a pod of the set of
                                                        pods is running
                                                      properties:
                                                        labelSelector:
                                                          description: A label query
                                                            over a set of resources,
                                                            in this case pods.
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions
                                                                is a list of label
                                                                selector requirements.
                                                                The requirements are
                                                                ANDed.
                                                              items:
                                                                description: A label
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: key
                                                                      is the label
                                                                      key that the
                                                                      selector applies
                                                                      to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator
                                                                      represents a
                                                                      key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists
                                                                      and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values
                                                                      is an array
                                                                      of string values.
                                                                      If the operator
                                                                      is In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                            matchLabels:
                                                              additionalProperties:
                                                                type: string
                                                              description: matchLabels
                                                                is a map of {key,value}
                                                                pairs. A single {key,value}
                                                                in the matchLabels
                                                                map is equivalent
                                                                to an element of matchExpressions,
                                                                whose key field is
                                                                "key", the operator
                                                                is "In", and the values
                                                                array contains only
                                                                "value". The requirements
                                                                are ANDed.
                                                              type: object
                                                          type: object
                                                        namespaceSelector:
                                                          description: A label query
                                                            over the set of namespaces
                                                            that the term applies
                                                            to. The term is applied
                                                            to the union of the namespaces
                                                            selected by this field
                                                            and the ones listed in
                                                            the namespaces field.
                                                            null selector and null
                                                            or empty namespaces list
                                                            means "this pod's namespace".
                                                            An empty selector ({})
                                                            matches all namespaces.
                                                            This field is beta-level
                                                            and is only honored when
                                                            PodAffinityNamespaceSelector
                                                            feature is enabled.
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions
                                                                is a list of label
                                                                selector requirements.
                                                                The requirements are
                                                                ANDed.
                                                              items:
                                                                description: A label
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: key
                                                                      is the label
                                                                      key that the
                                                                      selector applies
                                                                      to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator
                                                                      represents a
                                                                      key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists
                                                                      and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values
                                                                      is an array
                                                                      of string values.
                                                                      If the operator
                                                                      is In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                            matchLabels:
                                                              additionalProperties:
                                                                type: string
                                                              description: matchLabels
                                                                is a map of {key,value}
                                                                pairs. A single {key,value}
                                                                in the matchLabels
                                                                map is equivalent
                                                                to an element of matchExpressions,
                                                                whose key field is
                                                                "key", the operator
                                                                is "In", and the values
                                                                array contains only
                                                                "value". The requirements
                                                                are ANDed.
                                                              type: object
                                                          type: object
                                                        namespaces:
                                                          description: namespaces
                                                            specifies a static list
                                                            of namespace names that
                                                            the term applies to. The
                                                            term is applied to the
                                                            union of the namespaces
                                                            listed in this field and
                                                            the ones selected by namespaceSelector.
                                                            null or empty namespaces
                                                            list and null namespaceSelector
                                                            means "this pod's namespace"
                                                          items:
                                                            type: string
                                                          type: array
                                                        topologyKey:
                                                          description: This pod should
                                                            be co-located (affinity)
                                                            or not co-located (anti-affinity)
                                                            with the pods matching
                                                            the labelSelector in the
                                                            specified namespaces,
                                                            where co-located is defined
                                                            as running on a node whose
                                                            value of the label with
                                                            key topologyKey matches
                                                            that of any node on which
                                                            any of the selected pods
                                                            is running. Empty topologyKey
                                                            is not allowed.
                                                          type: string
                                                      required:
                                                      - topologyKey
                                                      type: object
                                                    type: array
                                                type: object
                                              podAntiAffinity:
                                                description: Describes pod anti-affinity
                                                  scheduling rules (e.g. avoid putting
                                                  this pod in the same node, zone,
                                                  etc. as some other pod(s)).
                                                properties:
                                                  preferredDuringSchedulingIgnoredDuringExecution:
                                                    description: The scheduler will
                                                      prefer to schedule pods to nodes
                                                      that satisfy the anti-affinity
                                                      expressions specified by this
                                                      field, but it may choose a node
                                                      that violates one or more of
                                                      the expressions. The node that
                                                      is most preferred is the one
                                                      with the greatest sum of weights,
                                                      i.e. for each node that meets
                                                      all of the scheduling requirements
                                                      (resource request, requiredDuringScheduling
                                                      anti-affinity expressions, etc.),
                                                      compute a sum by iterating through
                                                      the elements of this field and
                                                      adding "weight" to the sum if
                                                      the node has pods which matches
                                                      the corresponding podAffinityTerm;
                                                      the node(s) with the highest
                                                      sum are the most preferred.
                                                    items:
                                                      description: The weights of
                                                        all of the matched WeightedPodAffinityTerm
                                                        fields are added per-node
                                                        to find the most preferred
                                                        node(s)
                                                      properties:
                                                        podAffinityTerm:
                                                          description: Required. A
                                                            pod affinity term, associated
                                                            with the corresponding
                                                            weight.
                                                          properties:
                                                            labelSelector:
                                                              description: A label
                                                                query over a set of
                                                                resources, in this
                                                                case pods.
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions
                                                                    is a list of label
                                                                    selector requirements.
                                                                    The requirements
                                                                    are ANDed.
                                                                  items:
                                                                    description: A
                                                                      label selector
                                                                      requirement
                                                                      is a selector
                                                                      that contains
                                                                      values, a key,
                                                                      and an operator
                                                                      that relates
                                                                      the key and
                                                                      values.
                                                                    properties:
                                                                      key:
                                                                        description: key
                                                                          is the label
                                                                          key that
                                                                          the selector
                                                                          applies
                                                                          to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator
                                                                          represents
                                                                          a key's
                                                                          relationship
                                                                          to a set
                                                                          of values.
                                                                          Valid operators
                                                                          are In,
                                                                          NotIn, Exists
                                                                          and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values
                                                                          is an array
                                                                          of string
                                                                          values.
                                                                          If the operator
                                                                          is In or
                                                                          NotIn, the
                                                                          values array
                                                                          must be
                                                                          non-empty.
                                                                          If the operator
                                                                          is Exists
                                                                          or DoesNotExist,
                                                                          the values
                                                                          array must
                                                                          be empty.
                                                                          This array
                                                                          is replaced
                                                                          during a
                                                                          strategic
                                                                          merge patch.
                                                                        items:
                                                                          type: string
                                                                        type: array
                                                                    required:
                                                                    - key
                                                                    - operator
                                                                    type: object
                                                                  type: array
                                                                matchLabels:
                                                                  additionalProperties:
                                                                    type: string
                                                                  description: matchLabels
                                                                    is a map of {key,value}
                                                                    pairs. A single
                                                                    {key,value} in
                                                                    the matchLabels
                                                                    map is equivalent
                                                                    to an element
                                                                    of matchExpressions,
                                                                    whose key field
                                                                    is "key", the
                                                                    operator is "In",
                                                                    and the values
                                                                    array contains
                                                                    only "value".
                                                                    The requirements
                                                                    are ANDed.
                                                                  type: object
                                                              type: object
                                                            namespaceSelector:
                                                              description: A label
                                                                query over the set
                                                                of namespaces that
                                                                the term applies to.
                                                                The term is applied
                                                                to the union of the
                                                                namespaces selected
                                                                by this field and
                                                                the ones listed in
                                                                the namespaces field.
                                                                null selector and
                                                                null or empty namespaces
                                                                list means "this pod's
                                                                namespace". An empty
                                                                selector ({}) matches
                                                                all namespaces. This
                                                                field is beta-level
                                                                and is only honored
                                                                when PodAffinityNamespaceSelector
                                                                feature is enabled.
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions
                                                                    is a list of label
                                                                    selector requirements.
                                                                    The requirements
                                                                    are ANDed.
                                                                  items:
                                                                    description: A
                                                                      label selector
                                                                      requirement
                                                                      is a selector
                                                                      that contains
                                                                      values, a key,
                                                                      and an operator
                                                                      that relates
                                                                      the key and
                                                                      values.
                                                                    properties:
                                                                      key:
                                                                        description: key
                                                                          is the label
                                                                          key that
                                                                          the selector
                                                                          applies
                                                                          to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator
                                                                          represents
                                                                          a key's
                                                                          relationship
                                                                          to a set
                                                                          of values.
                                                                          Valid operators
                                                                          are In,
                                                                          NotIn, Exists
                                                                          and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values
                                                                          is an array
                                                                          of string
                                                                          values.
                                                                          If the operator
                                                                          is In or
                                                                          NotIn, the
                                                                          values array
                                                                          must be
                                                                          non-empty.
                                                                          If the operator
                                                                          is Exists
                                                                          or DoesNotExist,
                                                                          the values
                                                                          array must
                                                                          be empty.
                                                                          This array
                                                                          is replaced
                                                                          during a
                                                                          strategic
                                                                          merge patch.
                                                                        items:
                                                                          type: string
                                                                        type: array
                                                                    required:
                                                                    - key
                                                                    - operator
                                                                    type: object
                                                                  type: array
                                                                matchLabels:
                                                                  additionalProperties:
                                                                    type: string
                                                                  description: matchLabels
                                                                    is a map of {key,value}
                                                                    pairs. A single
                                                                    {key,value} in
                                                                    the matchLabels
                                                                    map is equivalent
                                                                    to an element
                                                                    of matchExpressions,
                                                                    whose key field
                                                                    is "key", the
                                                                    operator is "In",
                                                                    and the values
                                                                    array contains
                                                                    only "value".
                                                                    The requirements
                                                                    are ANDed.
                                                                  type: object
                                                              type: object
                                                            namespaces:
                                                              description: namespaces
                                                                specifies a static
                                                                list of namespace
                                                                names that the term
                                                                applies to. The term
                                                                is applied to the
                                                                union of the namespaces
                                                                listed in this field
                                                                and the ones selected
                                                                by namespaceSelector.
                                                                null or empty namespaces
                                                                list and null namespaceSelector
                                                                means "this pod's
                                                                namespace"
                                                              items:
                                                                type: string
                                                              type: array
                                                            topologyKey:
                                                              description: This pod
                                                                should be co-located
                                                                (affinity) or not
                                                                co-located (anti-affinity)
                                                                with the pods matching
                                                                the labelSelector
                                                                in the specified namespaces,
                                                                where co-located is
                                                                defined as running
                                                                on a node whose value
                                                                of the label with
                                                                key topologyKey matches
                                                                that of any node on
                                                                which any of the selected
                                                                pods is running. Empty
                                                                topologyKey is not
                                                                allowed.
                                                              type: string
                                                          required:
                                                          - topologyKey
                                                          type: object
                                                        weight:
                                                          description: weight associated
                                                            with matching the corresponding
                                                            podAffinityTerm, in the
                                                            range 1-100.
                                                          format: int32
                                                          type: integer
                                                      required:
                                                      - podAffinityTerm
                                                      - weight
                                                      type: object
                                                    type: array
                                                  requiredDuringSchedulingIgnoredDuringExecution:
                                                    description: If the anti-affinity
                                                      requirements specified by this
                                                      field are not met at scheduling
                                                      time, the pod will not be scheduled
                                                      onto the node. If the anti-affinity
                                                      requirements specified by this
                                                      field cease to be met at some
                                                      point during pod execution (e.g.
                                                      due to a pod label update),
                                                      the system may or may not try
                                                      to eventually evict the pod
                                                      from its node. When there are
                                                      multiple elements, the lists
                                                      of nodes corresponding to each
                                                      podAffinityTerm are intersected,
                                                      i.e. all terms must be satisfied.
                                                    items:
                                                      description: Defines a set of
                                                        pods (namely those matching
                                                        the labelSelector relative
                                                        to the given namespace(s))
                                                        that this pod should be co-located
                                                        (affinity) or not co-located
                                                        (anti-affinity) with, where
                                                        co-located is defined as running
                                                        on a node whose value of the
                                                        label with key <topologyKey>
                                                        matches that of any node on
                                                        which a pod of the set of
                                                        pods is running
                                                      properties:
                                                        labelSelector:
                                                          description: A label query
                                                            over a set of resources,
                                                            in this case pods.
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions
                                                                is a list of label
                                                                selector requirements.
                                                                The requirements are
                                                                ANDed.
                                                              items:
                                                                description: A label
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: key
                                                                      is the label
                                                                      key that the
                                                                      selector applies
                                                                      to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator
                                                                      represents a
                                                                      key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists
                                                                      and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values
                                                                      is an array
                                                                      of string values.
                                                                      If the operator
                                                                      is In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                            matchLabels:
                                                              additionalProperties:
                                                                type: string
                                                              description: matchLabels
                                                                is a map of {key,value}
                                                                pairs. A single {key,value}
                                                                in the matchLabels
                                                                map is equivalent
                                                                to an element of matchExpressions,
                                                                whose key field is
                                                                "key", the operator
                                                                is "In", and the values
                                                                array contains only
                                                                "value". The requirements
                                                                are ANDed.
                                                              type: object
                                                          type: object
                                                        namespaceSelector:
                                                          description: A label query
                                                            over the set of namespaces
                                                            that the term applies
                                                            to. The term is applied
                                                            to the union of the namespaces
                                                            selected by this field
                                                            and the ones listed in
                                                            the namespaces field.
                                                            null selector and null
                                                            or empty namespaces list
                                                            means "this pod's namespace".
                                                            An empty selector ({})
                                                            matches all namespaces.
                                                            This field is beta-level
                                                            and is only honored when
                                                            PodAffinityNamespaceSelector
                                                            feature is enabled.
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions
                                                                is a list of label
                                                                selector requirements.
                                                                The requirements are
                                                                ANDed.
                                                              items:
                                                                description: A label
                                                                  selector requirement
                                                                  is a selector that
                                                                  contains values,
                                                                  a key, and an operator
                                                                  that relates the
                                                                  key and values.
                                                                properties:
                                                                  key:
                                                                    description: key
                                                                      is the label
                                                                      key that the
                                                                      selector applies
                                                                      to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator
                                                                      represents a
                                                                      key's relationship
                                                                      to a set of
                                                                      values. Valid
                                                                      operators are
                                                                      In, NotIn, Exists
                                                                      and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values
                                                                      is an array
                                                                      of string values.
                                                                      If the operator
                                                                      is In or NotIn,
                                                                      the values array
                                                                      must be non-empty.
                                                                      If the operator
                                                                      is Exists or
                                                                      DoesNotExist,
                                                                      the values array
                                                                      must be empty.
                                                                      This array is
                                                                      replaced during
                                                                      a strategic
                                                                      merge patch.
                                                                    items:
                                                                      type: string
                                                                    type: array
                                                                required:
                                                                - key
                                                                - operator
                                                                type: object
                                                              type: array
                                                            matchLabels:
                                                              additionalProperties:
                                                                type: string
                                                              description: matchLabels
                                                                is a map of {key,value}
                                                                pairs. A single {key,value}
                                                                in the matchLabels
                                                                map is equivalent
                                                                to an element of matchExpressions,
                                                                whose key field is
                                                                "key", the operator
                                                                is "In", and the values
                                                                array contains only
                                                                "value". The requirements
                                                                are ANDed.
                                                              type: object
                                                          type: object
                                                        namespaces:
                                                          description: namespaces
                                                            specifies a static list
                                                            of namespace names that
                                                            the term applies to. The
                                                            term is applied to the
                                                            union of the namespaces
                                                            listed in this field and
                                                            the ones selected by namespaceSelector.
                                                            null or empty namespaces
                                                            list and null namespaceSelector
                                                            means "this pod's namespace"
                                                          items:
                                                            type: string
                                                          type: array
                                                        topologyKey:
                                                          description: This pod should
                                                            be co-located (affinity)
                                                            or not co-located (anti-affinity)
                                                            with the pods matching
                                                            the labelSelector in the
                                                            specified namespaces,
                                                            where co-located is defined
                                                            as running on a node whose
                                                            value of the label with
                                                            key topologyKey matches
                                                            that of any node on which
                                                            any of the selected pods
                                                            is running. Empty topologyKey
                                                            is not allowed.
                                                          type: string
                                                      required:
                                                      - topologyKey
                                                      type: object
                                                    type: array
                                                type: object
                                            type: object
                                          nodeSelector:
                                            additionalProperties:
                                              type: string
                                            description: 'NodeSelector is a selector
                                              which must be true for the pod to fit
                                              on a node. Selector which must match
                                              a node''s labels for the pod to be scheduled
                                              on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                                            type: object
                                          priorityClassName:
                                            description: If specified, the pod's priorityClassName.
                                            type: string
                                          serviceAccountName:
                                            description: If specified, the pod's service
                                              account
                                            type: string
                                          tolerations:
                                            description: If specified, the pod's tolerations.
                                            items:
                                              description: The pod this Toleration
                                                is attached to tolerates any taint
                                                that matches the triple <key,value,effect>
                                                using the matching operator <operator>.
                                              properties:
                                                effect:
                                                  description: Effect indicates the
                                                    taint effect to match. Empty means
                                                    match all taint effects. When
                                                    specified, allowed values are
                                                    NoSchedule, PreferNoSchedule and
                                                    NoExecute.
                                                  type: string
                                                key:
                                                  description: Key is the taint key
                                                    that the toleration applies to.
                                                    Empty means match all taint keys.
                                                    If the key is empty, operator
                                                    must be Exists; this combination
                                                    means to match all values and
                                                    all keys.
                                                  type: string
                                                operator:
                                                  description: Operator represents
                                                    a key's relationship to the value.
                                                    Valid operators are Exists and
                                                    Equal. Defaults to Equal. Exists
                                                    is equivalent to wildcard for
                                                    value, so that a pod can tolerate
                                                    all taints of a particular category.
                                                  type: string
                                                tolerationSeconds:
                                                  description: TolerationSeconds represents
                                                    the period of time the toleration
                                                    (which must be of effect NoExecute,
                                                    otherwise this field is ignored)
                                                    tolerates the taint. By default,
                                                    it is not set, which means tolerate
                                                    the taint forever (do not evict).
                                                    Zero and negative values will
                                                    be treated as 0 (evict immediately)
                                                    by the system.
                                                  format: int64
                                                  type: integer
                                                value:
                                                  description: Value is the taint
                                                    value the toleration matches to.
                                                    If the operator is Exists, the
                                                    value should be empty, otherwise
                                                    just a regular string.
                                                  type: string
                                              type: object
                                            type: array
                                        type: object
                                    type: object
                                  serviceType:
                                    description: Optional service type for Kubernetes
                                      solver service. Supported values are NodePort
                                      or ClusterIP. If unset, defaults to NodePort.
                                    type: string
                                type: object
                            type: object
                          selector:
                            description: Selector selects a set of DNSNames on the
                              Certificate resource that should be solved using this
                              challenge solver. If not specified, the solver will
                              be treated as the 'default' solver with the lowest priority,
                              i.e. if any other solver has a more specific match,
                              it will be used instead.
                            properties:
                              dnsNames:
                                description: List of DNSNames that this solver will
                                  be used to solve. If specified and a match is found,
                                  a dnsNames selector will take precedence over a
                                  dnsZones selector. If multiple solvers match with
                                  the same dnsNames value, the solver with the most
                                  matching labels in matchLabels will be selected.
                                  If neither has more matches, the solver defined
                                  earlier in the list will be selected.
                                items:
                                  type: string
                                type: array
                              dnsZones:
                                description: List of DNSZones that this solver will
                                  be used to solve. The most specific DNS zone match
                                  specified here will take precedence over other DNS
                                  zone matches, so a solver specifying sys.example.com
                                  will be selected over one specifying example.com
                                  for the domain www.sys.example.com. If multiple
                                  solvers match with the same dnsZones value, the
                                  solver with the most matching labels in matchLabels
                                  will be selected. If neither has more matches, the
                                  solver defined earlier in the list will be selected.
                                items:
                                  type: string
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: A label selector that is used to refine
                                  the set of certificate's that this challenge solver
                                  will apply to.
                                type: object
                            type: object
                        type: object
                      type: array
                  required:
                  - privateKeySecretRef
                  - server
                  type: object
                ca:
                  description: CA configures this issuer to sign certificates using
                    a signing CA keypair stored in a Secret resource. This is used
                    to build internal PKIs that are managed by cert-manager.
                  properties:
                    crlDistributionPoints:
                      description: The CRL distribution points is an X.509 v3 certificate
                        extension which identifies the location of the CRL from which
                        the revocation of this certificate can be checked. If not
                        set, certificates will be issued without distribution points
                        set.
                      items:
                        type: string
                      type: array
                    ocspServers:
                      description: The OCSP server list is an X.509 v3 extension that
                        defines a list of URLs of OCSP responders. The OCSP responders
                        can be queried for the revocation status of an issued certificate.
                        If not set, the certificate will be issued with no OCSP servers
                        set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
                      items:
                        type: string
                      type: array
                    secretName:
                      description: SecretName is the name of the secret used to sign
                        Certificates issued by this Issuer.
                      type: string
                  required:
                  - secretName
                  type: object
                selfSigned:
                  description: SelfSigned configures this issuer to 'self sign' certificates
                    using the private key used to create the CertificateRequest object.
                  properties:
                    crlDistributionPoints:
                      description: The CRL distribution points is an X.509 v3 certificate
                        extension which identifies the location of the CRL from which
                        the revocation of this certificate can be checked. If not
                        set certificate will be issued without CDP. Values are strings.
                      items:
                        type: string
                      type: array
                  type: object
                vault:
                  description: Vault configures this issuer to sign certificates using
                    a HashiCorp Vault PKI backend.
                  properties:
                    auth:
                      description: Auth configures how cert-manager authenticates
                        with the Vault server.
                      properties:
                        appRole:
                          description: AppRole authenticates with Vault using the
                            App Role auth mechanism, with the role and secret stored
                            in a Kubernetes Secret resource.
                          properties:
                            path:
                              description: 'Path where the App Role authentication
                                backend is mounted in Vault, e.g: "approle"'
                              type: string
                            roleId:
                              description: RoleID configured in the App Role authentication
                                backend when setting up the authentication backend
                                in Vault.
                              type: string
                            secretRef:
                              description: Reference to a key in a Secret that contains
                                the App Role secret used to authenticate with Vault.
                                The `key` field must be specified and denotes which
                                entry within the Secret resource is used as the app
                                role secret.
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                          required:
                          - path
                          - roleId
                          - secretRef
                          type: object
                        kubernetes:
                          description: Kubernetes authenticates with Vault by passing
                            the ServiceAccount token stored in the named Secret resource
                            to the Vault server.
                          properties:
                            mountPath:
                              description: The Vault mountPath here is the mount path
                                to use when authenticating with Vault. For example,
                                setting a value to `/v1/auth/foo`, will use the path
                                `/v1/auth/foo/login` to authenticate with Vault. If
                                unspecified, the default value "/v1/auth/kubernetes"
                                will be used.
                              type: string
                            role:
                              description: A required field containing the Vault Role
                                to assume. A Role binds a Kubernetes ServiceAccount
                                with a set of Vault policies.
                              type: string
                            secretRef:
                              description: The required Secret field containing a
                                Kubernetes ServiceAccount JWT used for authenticating
                                with Vault. Use of 'ambient credentials' is not supported.
                              properties:
                                key:
                                  description: The key of the entry in the Secret
                                    resource's `data` field to be used. Some instances
                                    of this field may be defaulted, in others it may
                                    be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred
                                    to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                              required:
                              - name
                              type: object
                          required:
                          - role
                          - secretRef
                          type: object
                        tokenSecretRef:
                          description: TokenSecretRef authenticates with Vault by
                            presenting a token.
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's
                                `data` field to be used. Some instances of this field
                                may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to.
                                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                          required:
                          - name
                          type: object
                      type: object
                    caBundle:
                      description: PEM-encoded CA bundle (base64-encoded) used to
                        validate Vault server certificate. Only used if the Server
                        URL is using HTTPS protocol. This parameter is ignored for
                        plain HTTP protocol connection. If not set the system root
                        certificates are used to validate the TLS connection.
                      format: byte
                      type: string
                    namespace:
                      description: 'Name of the vault namespace. Namespaces is a set
                        of features within Vault Enterprise that allows Vault environments
                        to support Secure Multi-tenancy. e.g: "ns1" More about namespaces
                        can be found here https://www.vaultproject.io/docs/enterprise/namespaces'
                      type: string
                    path:
                      description: 'Path is the mount path of the Vault PKI backend''s
                        `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".'
                      type: string
                    server:
                      description: 'Server is the connection address for the Vault
                        server, e.g: "https://vault.example.com:8200".'
                      type: string
                  required:
                  - auth
                  - path
                  - server
                  type: object
                venafi:
                  description: Venafi configures this issuer to sign certificates
                    using a Venafi TPP or Venafi Cloud policy zone.
                  properties:
                    cloud:
                      description: Cloud specifies the Venafi cloud configuration
                        settings. Only one of TPP or Cloud may be specified.
                      properties:
                        apiTokenSecretRef:
                          description: APITokenSecretRef is a secret key selector
                            for the Venafi Cloud API token.
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's
                                `data` field to be used. Some instances of this field
                                may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to.
                                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                          required:
                          - name
                          type: object
                        url:
                          description: URL is the base URL for Venafi Cloud. Defaults
                            to "https://api.venafi.cloud/v1".
                          type: string
                      required:
                      - apiTokenSecretRef
                      type: object
                    tpp:
                      description: TPP specifies Trust Protection Platform configuration
                        settings. Only one of TPP or Cloud may be specified.
                      properties:
                        caBundle:
                          description: CABundle is a PEM encoded TLS certificate to
                            use to verify connections to the TPP instance. If specified,
                            system roots will not be used and the issuing CA for the
                            TPP instance must be verifiable using the provided root.
                            If not specified, the connection will be verified using
                            the cert-manager system root certificates.
                          format: byte
                          type: string
                        credentialsRef:
                          description: CredentialsRef is a reference to a Secret containing
                            the username and password for the TPP server. The secret
                            must contain two keys, 'username' and 'password'.
                          properties:
                            name:
                              description: 'Name of the resource being referred to.
                                More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                          required:
                          - name
                          type: object
                        url:
                          description: 'URL is the base URL for the vedsdk endpoint
                            of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".'
                          type: string
                      required:
                      - credentialsRef
                      - url
                      type: object
                    zone:
                      description: Zone is the Venafi Policy Zone to use for this
                        issuer. All requests made to the Venafi platform will be restricted
                        by the named zone policy. This field is required.
                      type: string
                  required:
                  - zone
                  type: object
              type: object
            status:
              description: Status of the Issuer. This is set and managed automatically.
              properties:
                acme:
                  description: ACME specific status options. This field should only
                    be set if the Issuer is configured to use an ACME server to issue
                    certificates.
                  properties:
                    lastRegisteredEmail:
                      description: LastRegisteredEmail is the email associated with
                        the latest registered ACME account, in order to track changes
                        made to registered account associated with the  Issuer
                      type: string
                    uri:
                      description: URI is the unique account identifier, which can
                        also be used to retrieve account details from the CA
                      type: string
                  type: object
                conditions:
                  description: List of status conditions to indicate the status of
                    a CertificateRequest. Known condition types are `Ready`.
                  items:
                    description: IssuerCondition contains condition information for
                      an Issuer.
                    properties:
                      lastTransitionTime:
                        description: LastTransitionTime is the timestamp corresponding
                          to the last status change of this condition.
                        format: date-time
                        type: string
                      message:
                        description: Message is a human readable description of the
                          details of the last transition, complementing reason.
                        type: string
                      observedGeneration:
                        description: If set, this represents the .metadata.generation
                          that the condition was set based upon. For instance, if
                          .metadata.generation is currently 12, but the .status.condition[x].observedGeneration
                          is 9, the condition is out of date with respect to the current
                          state of the Issuer.
                        format: int64
                        type: integer
                      reason:
                        description: Reason is a brief machine readable explanation
                          for the condition's last transition.
                        type: string
                      status:
                        description: Status of the condition, one of (`True`, `False`,
                          `Unknown`).
                        enum:
                        - "True"
                        - "False"
                        - Unknown
                        type: string
                      type:
                        description: Type of the condition, known values are (`Ready`).
                        type: string
                    required:
                    - status
                    - type
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                  - type
                  x-kubernetes-list-type: map
              type: object
          required:
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - cert-manager
      kind: Issuer
      listKind: IssuerList
      plural: issuers
      singular: issuer
    conditions:
    - lastTransitionTime: "2025-07-31T03:46:28Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:46:28Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      cert-manager.io/inject-ca-from-secret: cert-manager/cert-manager-webhook-ca
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"cert-manager.io/inject-ca-from-secret":"cert-manager/cert-manager-webhook-ca"},"labels":{"app":"cert-manager","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.8.0"},"name":"orders.acme.cert-manager.io"},"spec":{"group":"acme.cert-manager.io","names":{"categories":["cert-manager","cert-manager-acme"],"kind":"Order","listKind":"OrderList","plural":"orders","singular":"order"},"scope":"Namespaced","versions":[{"additionalPrinterColumns":[{"jsonPath":".status.state","name":"State","type":"string"},{"jsonPath":".spec.issuerRef.name","name":"Issuer","priority":1,"type":"string"},{"jsonPath":".status.reason","name":"Reason","priority":1,"type":"string"},{"description":"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.","jsonPath":".metadata.creationTimestamp","name":"Age","type":"date"}],"name":"v1","schema":{"openAPIV3Schema":{"description":"Order is a type to represent an Order with an ACME server","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"properties":{"commonName":{"description":"CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.","type":"string"},"dnsNames":{"description":"DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.","items":{"type":"string"},"type":"array"},"duration":{"description":"Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.","type":"string"},"ipAddresses":{"description":"IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.","items":{"type":"string"},"type":"array"},"issuerRef":{"description":"IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.","properties":{"group":{"description":"Group of the resource being referred to.","type":"string"},"kind":{"description":"Kind of the resource being referred to.","type":"string"},"name":{"description":"Name of the resource being referred to.","type":"string"}},"required":["name"],"type":"object"},"request":{"description":"Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.","format":"byte","type":"string"}},"required":["issuerRef","request"],"type":"object"},"status":{"properties":{"authorizations":{"description":"Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.","items":{"description":"ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.","properties":{"challenges":{"description":"Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.","items":{"description":"Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.","properties":{"token":{"description":"Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.","type":"string"},"type":{"description":"Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.","type":"string"},"url":{"description":"URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.","type":"string"}},"required":["token","type","url"],"type":"object"},"type":"array"},"identifier":{"description":"Identifier is the DNS name to be validated as part of this authorization","type":"string"},"initialState":{"description":"InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.","enum":["valid","ready","pending","processing","invalid","expired","errored"],"type":"string"},"url":{"description":"URL is the URL of the Authorization that must be completed","type":"string"},"wildcard":{"description":"Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.","type":"boolean"}},"required":["url"],"type":"object"},"type":"array"},"certificate":{"description":"Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.","format":"byte","type":"string"},"failureTime":{"description":"FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.","format":"date-time","type":"string"},"finalizeURL":{"description":"FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.","type":"string"},"reason":{"description":"Reason optionally provides more information about a why the order is in the current state.","type":"string"},"state":{"description":"State contains the current state of this Order resource. States 'success' and 'expired' are 'final'","enum":["valid","ready","pending","processing","invalid","expired","errored"],"type":"string"},"url":{"description":"URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.","type":"string"}},"type":"object"}},"required":["metadata","spec"],"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]}}
    creationTimestamp: "2025-07-31T03:46:28Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.8.0
    name: orders.acme.cert-manager.io
    resourceVersion: "14083"
    uid: 8885efa3-61eb-4ff6-bbcb-72ef8b4dde50
  spec:
    conversion:
      strategy: None
    group: acme.cert-manager.io
    names:
      categories:
      - cert-manager
      - cert-manager-acme
      kind: Order
      listKind: OrderList
      plural: orders
      singular: order
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - jsonPath: .status.state
        name: State
        type: string
      - jsonPath: .spec.issuerRef.name
        name: Issuer
        priority: 1
        type: string
      - jsonPath: .status.reason
        name: Reason
        priority: 1
        type: string
      - description: CreationTimestamp is a timestamp representing the server time
          when this object was created. It is not guaranteed to be set in happens-before
          order across separate operations. Clients may not set this value. It is
          represented in RFC3339 form and is in UTC.
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: Order is a type to represent an Order with an ACME server
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              properties:
                commonName:
                  description: CommonName is the common name as specified on the DER
                    encoded CSR. If specified, this value must also be present in
                    `dnsNames` or `ipAddresses`. This field must match the corresponding
                    field on the DER encoded CSR.
                  type: string
                dnsNames:
                  description: DNSNames is a list of DNS names that should be included
                    as part of the Order validation process. This field must match
                    the corresponding field on the DER encoded CSR.
                  items:
                    type: string
                  type: array
                duration:
                  description: Duration is the duration for the not after date for
                    the requested certificate. this is set on order creation as pe
                    the ACME spec.
                  type: string
                ipAddresses:
                  description: IPAddresses is a list of IP addresses that should be
                    included as part of the Order validation process. This field must
                    match the corresponding field on the DER encoded CSR.
                  items:
                    type: string
                  type: array
                issuerRef:
                  description: IssuerRef references a properly configured ACME-type
                    Issuer which should be used to create this Order. If the Issuer
                    does not exist, processing will be retried. If the Issuer is not
                    an 'ACME' Issuer, an error will be returned and the Order will
                    be marked as failed.
                  properties:
                    group:
                      description: Group of the resource being referred to.
                      type: string
                    kind:
                      description: Kind of the resource being referred to.
                      type: string
                    name:
                      description: Name of the resource being referred to.
                      type: string
                  required:
                  - name
                  type: object
                request:
                  description: Certificate signing request bytes in DER encoding.
                    This will be used when finalizing the order. This field must be
                    set on the order.
                  format: byte
                  type: string
              required:
              - issuerRef
              - request
              type: object
            status:
              properties:
                authorizations:
                  description: Authorizations contains data returned from the ACME
                    server on what authorizations must be completed in order to validate
                    the DNS names specified on the Order.
                  items:
                    description: ACMEAuthorization contains data returned from the
                      ACME server on an authorization that must be completed in order
                      validate a DNS name on an ACME Order resource.
                    properties:
                      challenges:
                        description: Challenges specifies the challenge types offered
                          by the ACME server. One of these challenge types will be
                          selected when validating the DNS name and an appropriate
                          Challenge resource will be created to perform the ACME challenge
                          process.
                        items:
                          description: Challenge specifies a challenge offered by
                            the ACME server for an Order. An appropriate Challenge
                            resource can be created to perform the ACME challenge
                            process.
                          properties:
                            token:
                              description: Token is the token that must be presented
                                for this challenge. This is used to compute the 'key'
                                that must also be presented.
                              type: string
                            type:
                              description: Type is the type of challenge being offered,
                                e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This
                                is the raw value retrieved from the ACME server. Only
                                'http-01' and 'dns-01' are supported by cert-manager,
                                other values will be ignored.
                              type: string
                            url:
                              description: URL is the URL of this challenge. It can
                                be used to retrieve additional metadata about the
                                Challenge from the ACME server.
                              type: string
                          required:
                          - token
                          - type
                          - url
                          type: object
                        type: array
                      identifier:
                        description: Identifier is the DNS name to be validated as
                          part of this authorization
                        type: string
                      initialState:
                        description: InitialState is the initial state of the ACME
                          authorization when first fetched from the ACME server. If
                          an Authorization is already 'valid', the Order controller
                          will not create a Challenge resource for the authorization.
                          This will occur when working with an ACME server that enables
                          'authz reuse' (such as Let's Encrypt's production endpoint).
                          If not set and 'identifier' is set, the state is assumed
                          to be pending and a Challenge will be created.
                        enum:
                        - valid
                        - ready
                        - pending
                        - processing
                        - invalid
                        - expired
                        - errored
                        type: string
                      url:
                        description: URL is the URL of the Authorization that must
                          be completed
                        type: string
                      wildcard:
                        description: Wildcard will be true if this authorization is
                          for a wildcard DNS name. If this is true, the identifier
                          will be the *non-wildcard* version of the DNS name. For
                          example, if '*.example.com' is the DNS name being validated,
                          this field will be 'true' and the 'identifier' field will
                          be 'example.com'.
                        type: boolean
                    required:
                    - url
                    type: object
                  type: array
                certificate:
                  description: Certificate is a copy of the PEM encoded certificate
                    for this Order. This field will be populated after the order has
                    been successfully finalized with the ACME server, and the order
                    has transitioned to the 'valid' state.
                  format: byte
                  type: string
                failureTime:
                  description: FailureTime stores the time that this order failed.
                    This is used to influence garbage collection and back-off.
                  format: date-time
                  type: string
                finalizeURL:
                  description: FinalizeURL of the Order. This is used to obtain certificates
                    for this order once it has been completed.
                  type: string
                reason:
                  description: Reason optionally provides more information about a
                    why the order is in the current state.
                  type: string
                state:
                  description: State contains the current state of this Order resource.
                    States 'success' and 'expired' are 'final'
                  enum:
                  - valid
                  - ready
                  - pending
                  - processing
                  - invalid
                  - expired
                  - errored
                  type: string
                url:
                  description: URL of the Order. This will initially be empty when
                    the resource is first created. The Order controller will populate
                    this field when the Order is first processed. This field will
                    be immutable after it is initially set.
                  type: string
              type: object
          required:
          - metadata
          - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - cert-manager
      - cert-manager-acme
      kind: Order
      listKind: OrderList
      plural: orders
      singular: order
    conditions:
    - lastTransitionTime: "2025-07-31T03:46:28Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:46:28Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubernetes-configuration.konghq.com/channels: ingress-controller
      kubernetes-configuration.konghq.com/version: v1.5.2
    creationTimestamp: "2025-07-31T03:49:06Z"
    generation: 1
    name: ingressclassparameterses.configuration.konghq.com
    resourceVersion: "14565"
    uid: 38bd81a9-8ec2-4815-9463-4a782e33918c
  spec:
    conversion:
      strategy: None
    group: configuration.konghq.com
    names:
      kind: IngressClassParameters
      listKind: IngressClassParametersList
      plural: ingressclassparameterses
      singular: ingressclassparameters
    scope: Namespaced
    versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: IngressClassParameters is the Schema for the IngressClassParameters
            API.
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: Spec is the IngressClassParameters specification.
              properties:
                enableLegacyRegexDetection:
                  default: false
                  description: |-
                    EnableLegacyRegexDetection automatically detects if ImplementationSpecific Ingress paths are regular expression
                    paths using the legacy 2.x heuristic. The controller adds the "~" prefix to those paths if the Kong version is
                    3.0 or higher.
                  type: boolean
                serviceUpstream:
                  default: false
                  description: Offload load-balancing to kube-proxy or sidecar.
                  type: boolean
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: IngressClassParameters
      listKind: IngressClassParametersList
      plural: ingressclassparameterses
      singular: ingressclassparameters
    conditions:
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubernetes-configuration.konghq.com/channels: ingress-controller
      kubernetes-configuration.konghq.com/version: v1.5.2
    creationTimestamp: "2025-07-31T03:49:06Z"
    generation: 1
    name: udpingresses.configuration.konghq.com
    resourceVersion: "14567"
    uid: d4e9c65a-0eff-46fc-90e4-2da74df348a8
  spec:
    conversion:
      strategy: None
    group: configuration.konghq.com
    names:
      categories:
      - kong-ingress-controller
      - kong
      kind: UDPIngress
      listKind: UDPIngressList
      plural: udpingresses
      singular: udpingress
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - description: Address of the load balancer
        jsonPath: .status.loadBalancer.ingress[*].ip
        name: Address
        type: string
      - description: Age
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      deprecated: true
      deprecationWarning: configuration.konghq.com/v1beta1 UDPIngress is deprecated
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: |-
            UDPIngress is the Schema for the udpingresses API.
            Deprecated: Use Gateway API instead. See https://developer.konghq.com/kubernetes-ingress-controller/migrate/ingress-to-gateway/
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: Spec is the UDPIngress specification.
              properties:
                rules:
                  description: A list of rules used to configure the Ingress.
                  items:
                    description: |-
                      UDPIngressRule represents a rule to apply against incoming requests
                      wherein no Host matching is available for request routing, only the port
                      is used to match requests.
                    properties:
                      backend:
                        description: |-
                          Backend defines the Kubernetes service which accepts traffic from the
                          listening Port defined above.
                        properties:
                          serviceName:
                            description: Specifies the name of the referenced service.
                            minLength: 1
                            type: string
                          servicePort:
                            description: Specifies the port of the referenced service.
                            format: int32
                            maximum: 65535
                            minimum: 1
                            type: integer
                        required:
                        - serviceName
                        - servicePort
                        type: object
                      port:
                        description: |-
                          Port indicates the port for the Kong proxy to accept incoming traffic
                          on, which will then be routed to the service Backend.
                        format: int32
                        maximum: 65535
                        minimum: 1
                        type: integer
                    required:
                    - backend
                    - port
                    type: object
                  type: array
              type: object
            status:
              description: UDPIngressStatus defines the observed state of UDPIngress.
              properties:
                loadBalancer:
                  description: LoadBalancer contains the current status of the load-balancer.
                  properties:
                    ingress:
                      description: |-
                        Ingress is a list containing ingress points for the load-balancer.
                        Traffic intended for the service should be sent to these ingress points.
                      items:
                        description: |-
                          LoadBalancerIngress represents the status of a load-balancer ingress point:
                          traffic intended for the service should be sent to an ingress point.
                        properties:
                          hostname:
                            description: |-
                              Hostname is set for load-balancer ingress points that are DNS based
                              (typically AWS load-balancers)
                            type: string
                          ip:
                            description: |-
                              IP is set for load-balancer ingress points that are IP based
                              (typically GCE or OpenStack load-balancers)
                            type: string
                          ipMode:
                            description: |-
                              IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified.
                              Setting this to "VIP" indicates that traffic is delivered to the node with
                              the destination set to the load-balancer's IP and port.
                              Setting this to "Proxy" indicates that traffic is delivered to the node or pod with
                              the destination set to the node's IP and node port or the pod's IP and port.
                              Service implementations may use this information to adjust traffic routing.
                            type: string
                          ports:
                            description: |-
                              Ports is a list of records of service ports
                              If used, every port defined in the service should have an entry in it
                            items:
                              description: PortStatus represents the error condition
                                of a service port
                              properties:
                                error:
                                  description: |-
                                    Error is to record the problem with the service port
                                    The format of the error shall comply with the following rules:
                                    - built-in error values shall be specified in this file and those shall use
                                      CamelCase names
                                    - cloud provider specific error values must have names that comply with the
                                      format foo.example.com/CamelCase.
                                  maxLength: 316
                                  pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                  type: string
                                port:
                                  description: Port is the port number of the service
                                    port of which status is recorded here
                                  format: int32
                                  type: integer
                                protocol:
                                  description: |-
                                    Protocol is the protocol of the service port of which status is recorded here
                                    The supported values are: "TCP", "UDP", "SCTP"
                                  type: string
                              required:
                              - error
                              - port
                              - protocol
                              type: object
                            type: array
                            x-kubernetes-list-type: atomic
                        type: object
                      type: array
                      x-kubernetes-list-type: atomic
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - kong-ingress-controller
      - kong
      kind: UDPIngress
      listKind: UDPIngressList
      plural: udpingresses
      singular: udpingress
    conditions:
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1beta1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubernetes-configuration.konghq.com/channels: ingress-controller,gateway-operator
      kubernetes-configuration.konghq.com/version: v1.5.2
    creationTimestamp: "2025-07-31T03:49:06Z"
    generation: 1
    name: konglicenses.configuration.konghq.com
    resourceVersion: "14569"
    uid: 7bd537c9-dfab-4715-8657-a2927e3dafc0
  spec:
    conversion:
      strategy: None
    group: configuration.konghq.com
    names:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongLicense
      listKind: KongLicenseList
      plural: konglicenses
      shortNames:
      - kl
      singular: konglicense
    scope: Cluster
    versions:
    - additionalPrinterColumns:
      - description: Age
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      - description: Enabled to configure on Kong gateway instances
        jsonPath: .enabled
        name: Enabled
        type: boolean
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: KongLicense stores a Kong enterprise license to apply to managed
            Kong gateway instances.
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            enabled:
              default: true
              description: |-
                Enabled is set to true to let controllers (like KIC or KGO) to reconcile it.
                Default value is true to apply the license by default.
              type: boolean
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            rawLicenseString:
              description: RawLicenseString is a string with the raw content of the
                license.
              type: string
            status:
              description: Status is the status of the KongLicense being processed
                by controllers.
              properties:
                controllers:
                  items:
                    description: |-
                      KongLicenseControllerStatus is the status of owning KongLicense being processed
                      identified by the controllerName field.
                    properties:
                      conditions:
                        default:
                        - lastTransitionTime: "1970-01-01T00:00:00Z"
                          message: Waiting for controller
                          reason: Pending
                          status: Unknown
                          type: Programmed
                        description: Conditions describe the current conditions of
                          the KongLicense on the controller.
                        items:
                          description: Condition contains details for one aspect of
                            the current state of this API Resource.
                          properties:
                            lastTransitionTime:
                              description: |-
                                lastTransitionTime is the last time the condition transitioned from one status to another.
                                This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: |-
                                message is a human readable message indicating details about the transition.
                                This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: |-
                                observedGeneration represents the .metadata.generation that the condition was set based upon.
                                For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                                with respect to the current state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: |-
                                reason contains a programmatic identifier indicating the reason for the condition's last transition.
                                Producers of specific condition types may define expected values and meanings for this field,
                                and whether the values are considered a guaranteed API.
                                The value should be a CamelCase string.
                                This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False,
                                Unknown.
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          type: object
                        maxItems: 8
                        type: array
                        x-kubernetes-list-map-keys:
                        - type
                        x-kubernetes-list-type: map
                      controllerName:
                        description: |-
                          ControllerName is an identifier of the controller to reconcile this KongLicense.
                          Should be unique in the list of controller statuses.
                        type: string
                      controllerRef:
                        description: |-
                          ControllerRef is the reference of the controller to reconcile this KongLicense.
                          It is usually the name of (KIC/KGO) pod that reconciles it.
                        properties:
                          group:
                            description: |-
                              Group is the group of referent.
                              It should be empty if the referent is in "core" group (like pod).
                            maxLength: 253
                            pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                            type: string
                          kind:
                            description: |-
                              Kind is the kind of the referent.
                              By default the nil kind means kind Pod.
                            maxLength: 63
                            minLength: 1
                            pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                            type: string
                          name:
                            description: Name is the name of the referent.
                            maxLength: 253
                            minLength: 1
                            type: string
                          namespace:
                            description: |-
                              Namespace is the namespace of the referent.
                              It should be empty if the referent is cluster scoped.
                            maxLength: 63
                            minLength: 1
                            pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                            type: string
                        required:
                        - name
                        type: object
                    required:
                    - controllerName
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                  - controllerName
                  x-kubernetes-list-type: map
              type: object
          required:
          - enabled
          - rawLicenseString
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongLicense
      listKind: KongLicenseList
      plural: konglicenses
      shortNames:
      - kl
      singular: konglicense
    conditions:
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubernetes-configuration.konghq.com/channels: ingress-controller
      kubernetes-configuration.konghq.com/version: v1.5.2
    creationTimestamp: "2025-07-31T03:49:06Z"
    generation: 1
    name: tcpingresses.configuration.konghq.com
    resourceVersion: "14571"
    uid: 7afb3652-e2dc-4069-8c9c-0cc167867246
  spec:
    conversion:
      strategy: None
    group: configuration.konghq.com
    names:
      categories:
      - kong-ingress-controller
      - kong
      kind: TCPIngress
      listKind: TCPIngressList
      plural: tcpingresses
      singular: tcpingress
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - description: Address of the load balancer
        jsonPath: .status.loadBalancer.ingress[*].ip
        name: Address
        type: string
      - description: Age
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      deprecated: true
      deprecationWarning: configuration.konghq.com/v1beta1 TCPIngress is deprecated
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: |-
            TCPIngress is the Schema for the tcpingresses API.
            Deprecated: Use Gateway API instead. See https://developer.konghq.com/kubernetes-ingress-controller/migrate/ingress-to-gateway/
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: Spec is the TCPIngress specification.
              properties:
                rules:
                  description: A list of rules used to configure the Ingress.
                  items:
                    description: |-
                      IngressRule represents a rule to apply against incoming requests.
                      Matching is performed based on an (optional) SNI and port.
                    properties:
                      backend:
                        description: |-
                          Backend defines the referenced service endpoint to which the traffic
                          will be forwarded to.
                        properties:
                          serviceName:
                            description: Specifies the name of the referenced service.
                            minLength: 1
                            type: string
                          servicePort:
                            description: Specifies the port of the referenced service.
                            format: int32
                            maximum: 65535
                            minimum: 1
                            type: integer
                        required:
                        - serviceName
                        - servicePort
                        type: object
                      host:
                        description: |-
                          Host is the fully qualified domain name of a network host, as defined
                          by RFC 3986.
                          If a Host is not specified, then port-based TCP routing is performed. Kong
                          doesn't care about the content of the TCP stream in this case.
                          If a Host is specified, the protocol must be TLS over TCP.
                          A plain-text TCP request cannot be routed based on Host. It can only
                          be routed based on Port.
                        type: string
                      port:
                        description: |-
                          Port is the port on which to accept TCP or TLS over TCP sessions and
                          route. It is a required field. If a Host is not specified, the requested
                          are routed based only on Port.
                        format: int32
                        maximum: 65535
                        minimum: 1
                        type: integer
                    required:
                    - backend
                    - port
                    type: object
                  type: array
                tls:
                  description: |-
                    TLS configuration. This is similar to the `tls` section in the
                    Ingress resource in networking.v1beta1 group.
                    The mapping of SNIs to TLS cert-key pair defined here will be
                    used for HTTP Ingress rules as well. Once can define the mapping in
                    this resource or the original Ingress resource, both have the same
                    effect.
                  items:
                    description: IngressTLS describes the transport layer security.
                    properties:
                      hosts:
                        description: |-
                          Hosts are a list of hosts included in the TLS certificate. The values in
                          this list must match the name/s used in the tlsSecret. Defaults to the
                          wildcard host setting for the loadbalancer controller fulfilling this
                          Ingress, if left unspecified.
                        items:
                          type: string
                        type: array
                      secretName:
                        description: SecretName is the name of the secret used to
                          terminate SSL traffic.
                        type: string
                    type: object
                  type: array
              type: object
            status:
              description: TCPIngressStatus defines the observed state of TCPIngress.
              properties:
                loadBalancer:
                  description: LoadBalancer contains the current status of the load-balancer.
                  properties:
                    ingress:
                      description: |-
                        Ingress is a list containing ingress points for the load-balancer.
                        Traffic intended for the service should be sent to these ingress points.
                      items:
                        description: |-
                          LoadBalancerIngress represents the status of a load-balancer ingress point:
                          traffic intended for the service should be sent to an ingress point.
                        properties:
                          hostname:
                            description: |-
                              Hostname is set for load-balancer ingress points that are DNS based
                              (typically AWS load-balancers)
                            type: string
                          ip:
                            description: |-
                              IP is set for load-balancer ingress points that are IP based
                              (typically GCE or OpenStack load-balancers)
                            type: string
                          ipMode:
                            description: |-
                              IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified.
                              Setting this to "VIP" indicates that traffic is delivered to the node with
                              the destination set to the load-balancer's IP and port.
                              Setting this to "Proxy" indicates that traffic is delivered to the node or pod with
                              the destination set to the node's IP and node port or the pod's IP and port.
                              Service implementations may use this information to adjust traffic routing.
                            type: string
                          ports:
                            description: |-
                              Ports is a list of records of service ports
                              If used, every port defined in the service should have an entry in it
                            items:
                              description: PortStatus represents the error condition
                                of a service port
                              properties:
                                error:
                                  description: |-
                                    Error is to record the problem with the service port
                                    The format of the error shall comply with the following rules:
                                    - built-in error values shall be specified in this file and those shall use
                                      CamelCase names
                                    - cloud provider specific error values must have names that comply with the
                                      format foo.example.com/CamelCase.
                                  maxLength: 316
                                  pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                  type: string
                                port:
                                  description: Port is the port number of the service
                                    port of which status is recorded here
                                  format: int32
                                  type: integer
                                protocol:
                                  description: |-
                                    Protocol is the protocol of the service port of which status is recorded here
                                    The supported values are: "TCP", "UDP", "SCTP"
                                  type: string
                              required:
                              - error
                              - port
                              - protocol
                              type: object
                            type: array
                            x-kubernetes-list-type: atomic
                        type: object
                      type: array
                      x-kubernetes-list-type: atomic
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - kong-ingress-controller
      - kong
      kind: TCPIngress
      listKind: TCPIngressList
      plural: tcpingresses
      singular: tcpingress
    conditions:
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1beta1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubernetes-configuration.konghq.com/channels: ingress-controller
      kubernetes-configuration.konghq.com/version: v1.5.2
    creationTimestamp: "2025-07-31T03:49:06Z"
    generation: 1
    name: kongcustomentities.configuration.konghq.com
    resourceVersion: "14573"
    uid: e34a1fb8-0bc9-425c-a8ce-b3fbf331a62b
  spec:
    conversion:
      strategy: None
    group: configuration.konghq.com
    names:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongCustomEntity
      listKind: KongCustomEntityList
      plural: kongcustomentities
      shortNames:
      - kce
      singular: kongcustomentity
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - description: type of the Kong entity
        jsonPath: .spec.type
        name: Entity Type
        type: string
      - description: Age
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      - jsonPath: .status.conditions[?(@.type=="Programmed")].status
        name: Programmed
        type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: KongCustomEntity defines a "custom" Kong entity that KIC cannot
            support the entity type directly.
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: KongCustomEntitySpec defines the specification of the KongCustomEntity.
              properties:
                controllerName:
                  description: ControllerName specifies the controller that should
                    reconcile it, like ingress class.
                  type: string
                fields:
                  description: Fields defines the fields of the Kong entity itself.
                  x-kubernetes-preserve-unknown-fields: true
                parentRef:
                  description: |-
                    ParentRef references the kubernetes resource it attached to when its scope is "attached".
                    Currently only KongPlugin/KongClusterPlugin allowed. This will make the custom entity to be attached
                    to the entity(service/route/consumer) where the plugin is attached.
                  properties:
                    group:
                      description: Group defines the API group of the referred object.
                      type: string
                    kind:
                      description: Kind defines the kind of the referred object.
                      enum:
                      - KongPlugin
                      - KongClusterPlugin
                      type: string
                    name:
                      description: Name defines the name of the referred object.
                      type: string
                    namespace:
                      description: Empty namespace means the same namespace of the
                        owning object.
                      type: string
                  required:
                  - name
                  type: object
                type:
                  description: EntityType is the type of the Kong entity. The type
                    is used in generating declarative configuration.
                  type: string
              required:
              - controllerName
              - fields
              - type
              type: object
              x-kubernetes-validations:
              - message: The type field cannot be one of the known Kong entity types
                rule: '!(self.type in [''services'',''routes'',''upstreams'',''targets'',''plugins'',''consumers'',''consumer_groups''])'
            status:
              description: Status stores the reconciling status of the resource.
              properties:
                conditions:
                  default:
                  - lastTransitionTime: "1970-01-01T00:00:00Z"
                    message: Waiting for controller
                    reason: Pending
                    status: Unknown
                    type: Programmed
                  description: |-
                    Conditions describe the current conditions of the KongCustomEntityStatus.

                    Known condition types are:

                    * "Programmed"
                  items:
                    description: Condition contains details for one aspect of the
                      current state of this API Resource.
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False,
                          Unknown.
                        enum:
                        - "True"
                        - "False"
                        - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                    - lastTransitionTime
                    - message
                    - reason
                    - status
                    - type
                    type: object
                  maxItems: 8
                  type: array
                  x-kubernetes-list-map-keys:
                  - type
                  x-kubernetes-list-type: map
              required:
              - conditions
              type: object
          required:
          - spec
          type: object
          x-kubernetes-validations:
          - message: The spec.type field is immutable
            rule: self.spec.type == oldSelf.spec.type
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongCustomEntity
      listKind: KongCustomEntityList
      plural: kongcustomentities
      shortNames:
      - kce
      singular: kongcustomentity
    conditions:
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubernetes-configuration.konghq.com/channels: ingress-controller
      kubernetes-configuration.konghq.com/version: v1.5.2
    creationTimestamp: "2025-07-31T03:49:06Z"
    generation: 1
    name: kongclusterplugins.configuration.konghq.com
    resourceVersion: "14575"
    uid: 5668079a-a342-405d-94a2-922412302711
  spec:
    conversion:
      strategy: None
    group: configuration.konghq.com
    names:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongClusterPlugin
      listKind: KongClusterPluginList
      plural: kongclusterplugins
      shortNames:
      - kcp
      singular: kongclusterplugin
    scope: Cluster
    versions:
    - additionalPrinterColumns:
      - description: Name of the plugin
        jsonPath: .plugin
        name: Plugin-Type
        type: string
      - description: Age
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      - description: Indicates if the plugin is disabled
        jsonPath: .disabled
        name: Disabled
        priority: 1
        type: boolean
      - description: Configuration of the plugin
        jsonPath: .config
        name: Config
        priority: 1
        type: string
      - jsonPath: .status.conditions[?(@.type=="Programmed")].status
        name: Programmed
        type: string
      name: v1
      schema:
        openAPIV3Schema:
          description: KongClusterPlugin is the Schema for the kongclusterplugins
            API.
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            config:
              description: |-
                Config contains the plugin configuration. It's a list of keys and values
                required to configure the plugin.
                Please read the documentation of the plugin being configured to set values
                in here. For any plugin in Kong, anything that goes in the `config` JSON
                key in the Admin API request, goes into this property.
                Only one of `config` or `configFrom` may be used in a KongClusterPlugin, not both at once.
              type: object
              x-kubernetes-preserve-unknown-fields: true
            configFrom:
              description: |-
                ConfigFrom references a secret containing the plugin configuration.
                This should be used when the plugin configuration contains sensitive information,
                such as AWS credentials in the Lambda plugin or the client secret in the OIDC plugin.
                Only one of `config` or `configFrom` may be used in a KongClusterPlugin, not both at once.
              properties:
                secretKeyRef:
                  description: Specifies a name, a namespace, and a key of a secret
                    to refer to.
                  properties:
                    key:
                      description: The key containing the value.
                      type: string
                    name:
                      description: The secret containing the key.
                      type: string
                    namespace:
                      description: The namespace containing the secret.
                      type: string
                  required:
                  - key
                  - name
                  - namespace
                  type: object
              required:
              - secretKeyRef
              type: object
            configPatches:
              description: |-
                ConfigPatches represents JSON patches to the configuration of the plugin.
                Each item means a JSON patch to add something in the configuration,
                where path is specified in `path` and value is in `valueFrom` referencing
                a key in a secret.
                When Config is specified, patches will be applied to the configuration in Config.
                Otherwise, patches will be applied to an empty object.
              items:
                description: |-
                  NamespacedConfigPatch is a JSON patch to add values from secrets to KongClusterPlugin
                  to the generated configuration of plugin in Kong.
                properties:
                  path:
                    description: Path is the JSON path to add the patch.
                    type: string
                  valueFrom:
                    description: ValueFrom is the reference to a key of a secret where
                      the patched value comes from.
                    properties:
                      secretKeyRef:
                        description: Specifies a name, a namespace, and a key of a
                          secret to refer to.
                        properties:
                          key:
                            description: The key containing the value.
                            type: string
                          name:
                            description: The secret containing the key.
                            type: string
                          namespace:
                            description: The namespace containing the secret.
                            type: string
                        required:
                        - key
                        - name
                        - namespace
                        type: object
                    required:
                    - secretKeyRef
                    type: object
                required:
                - path
                - valueFrom
                type: object
              type: array
            consumerRef:
              description: ConsumerRef is a reference to a particular consumer.
              type: string
            disabled:
              description: Disabled set if the plugin is disabled or not.
              type: boolean
            instance_name:
              description: |-
                InstanceName is an optional custom name to identify an instance of the plugin. This is useful when running the
                same plugin in multiple contexts, for example, on multiple services.
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            ordering:
              description: |-
                Ordering overrides the normal plugin execution order. It's only available on Kong Enterprise.
                `<phase>` is a request processing phase (for example, `access` or `body_filter`) and
                `<plugin>` is the name of the plugin that will run before or after the KongPlugin.
                For example, a KongPlugin with `plugin: rate-limiting` and `before.access: ["key-auth"]`
                will create a rate limiting plugin that limits requests _before_ they are authenticated.
              properties:
                after:
                  additionalProperties:
                    items:
                      type: string
                    type: array
                  description: PluginOrderingPhase indicates which plugins in a phase
                    should affect the target plugin's order
                  type: object
                before:
                  additionalProperties:
                    items:
                      type: string
                    type: array
                  description: PluginOrderingPhase indicates which plugins in a phase
                    should affect the target plugin's order
                  type: object
              type: object
            plugin:
              description: PluginName is the name of the plugin to which to apply
                the config.
              type: string
            protocols:
              description: |-
                Protocols configures plugin to run on requests received on specific
                protocols.
              items:
                description: |-
                  KongProtocol is a valid Kong protocol.
                  This alias is necessary to deal with https://github.com/kubernetes-sigs/controller-tools/issues/342
                enum:
                - http
                - https
                - grpc
                - grpcs
                - tcp
                - tls
                - udp
                type: string
              type: array
            run_on:
              description: |-
                RunOn configures the plugin to run on the first or the second or both
                nodes in case of a service mesh deployment.
              enum:
              - first
              - second
              - all
              type: string
            status:
              description: Status represents the current status of the KongClusterPlugin
                resource.
              properties:
                conditions:
                  default:
                  - lastTransitionTime: "1970-01-01T00:00:00Z"
                    message: Waiting for controller
                    reason: Pending
                    status: Unknown
                    type: Programmed
                  description: |-
                    Conditions describe the current conditions of the KongClusterPluginStatus.

                    Known condition types are:

                    * "Programmed"
                  items:
                    description: Condition contains details for one aspect of the
                      current state of this API Resource.
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False,
                          Unknown.
                        enum:
                        - "True"
                        - "False"
                        - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                    - lastTransitionTime
                    - message
                    - reason
                    - status
                    - type
                    type: object
                  maxItems: 8
                  type: array
                  x-kubernetes-list-map-keys:
                  - type
                  x-kubernetes-list-type: map
              type: object
          required:
          - plugin
          type: object
          x-kubernetes-validations:
          - message: Using both config and configFrom fields is not allowed.
            rule: '!(has(self.config) && has(self.configFrom))'
          - message: Using both configFrom and configPatches fields is not allowed.
            rule: '!(has(self.configFrom) && has(self.configPatches))'
          - message: The plugin field is immutable
            rule: self.plugin == oldSelf.plugin
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongClusterPlugin
      listKind: KongClusterPluginList
      plural: kongclusterplugins
      shortNames:
      - kcp
      singular: kongclusterplugin
    conditions:
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubernetes-configuration.konghq.com/channels: ingress-controller,gateway-operator
      kubernetes-configuration.konghq.com/version: v1.5.2
    creationTimestamp: "2025-07-31T03:49:06Z"
    generation: 1
    name: kongplugins.configuration.konghq.com
    resourceVersion: "14577"
    uid: 077bde4a-6c7b-4727-86bf-178565f86a69
  spec:
    conversion:
      strategy: None
    group: configuration.konghq.com
    names:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongPlugin
      listKind: KongPluginList
      plural: kongplugins
      shortNames:
      - kp
      singular: kongplugin
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - description: Name of the plugin
        jsonPath: .plugin
        name: Plugin-Type
        type: string
      - description: Age
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      - description: Indicates if the plugin is disabled
        jsonPath: .disabled
        name: Disabled
        priority: 1
        type: boolean
      - description: Configuration of the plugin
        jsonPath: .config
        name: Config
        priority: 1
        type: string
      - jsonPath: .status.conditions[?(@.type=="Programmed")].status
        name: Programmed
        type: string
      name: v1
      schema:
        openAPIV3Schema:
          description: KongPlugin is the Schema for the kongplugins API.
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            config:
              description: |-
                Config contains the plugin configuration. It's a list of keys and values
                required to configure the plugin.
                Please read the documentation of the plugin being configured to set values
                in here. For any plugin in Kong, anything that goes in the `config` JSON
                key in the Admin API request, goes into this property.
                Only one of `config` or `configFrom` may be used in a KongPlugin, not both at once.
              type: object
              x-kubernetes-preserve-unknown-fields: true
            configFrom:
              description: |-
                ConfigFrom references a secret containing the plugin configuration.
                This should be used when the plugin configuration contains sensitive information,
                such as AWS credentials in the Lambda plugin or the client secret in the OIDC plugin.
                Only one of `config` or `configFrom` may be used in a KongPlugin, not both at once.
              properties:
                secretKeyRef:
                  description: Specifies a name and a key of a secret to refer to.
                    The namespace is implicitly set to the one of referring object.
                  properties:
                    key:
                      description: The key containing the value.
                      type: string
                    name:
                      description: The secret containing the key.
                      type: string
                  required:
                  - key
                  - name
                  type: object
              required:
              - secretKeyRef
              type: object
            configPatches:
              description: |-
                ConfigPatches represents JSON patches to the configuration of the plugin.
                Each item means a JSON patch to add something in the configuration,
                where path is specified in `path` and value is in `valueFrom` referencing
                a key in a secret.
                When Config is specified, patches will be applied to the configuration in Config.
                Otherwise, patches will be applied to an empty object.
              items:
                description: |-
                  ConfigPatch is a JSON patch (RFC6902) to add values from Secret to the generated configuration.
                  It is an equivalent of the following patch:
                  `{"op": "add", "path": {.Path}, "value": {.ComputedValueFrom}}`.
                properties:
                  path:
                    description: Path is the JSON-Pointer value (RFC6901) that references
                      a location within the target configuration.
                    type: string
                  valueFrom:
                    description: ValueFrom is the reference to a key of a secret where
                      the patched value comes from.
                    properties:
                      secretKeyRef:
                        description: Specifies a name and a key of a secret to refer
                          to. The namespace is implicitly set to the one of referring
                          object.
                        properties:
                          key:
                            description: The key containing the value.
                            type: string
                          name:
                            description: The secret containing the key.
                            type: string
                        required:
                        - key
                        - name
                        type: object
                    required:
                    - secretKeyRef
                    type: object
                required:
                - path
                - valueFrom
                type: object
              type: array
            consumerRef:
              description: ConsumerRef is a reference to a particular consumer.
              type: string
            disabled:
              description: Disabled set if the plugin is disabled or not.
              type: boolean
            instance_name:
              description: |-
                InstanceName is an optional custom name to identify an instance of the plugin. This is useful when running the
                same plugin in multiple contexts, for example, on multiple services.
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            ordering:
              description: |-
                Ordering overrides the normal plugin execution order. It's only available on Kong Enterprise.
                `<phase>` is a request processing phase (for example, `access` or `body_filter`) and
                `<plugin>` is the name of the plugin that will run before or after the KongPlugin.
                For example, a KongPlugin with `plugin: rate-limiting` and `before.access: ["key-auth"]`
                will create a rate limiting plugin that limits requests _before_ they are authenticated.
              properties:
                after:
                  additionalProperties:
                    items:
                      type: string
                    type: array
                  description: PluginOrderingPhase indicates which plugins in a phase
                    should affect the target plugin's order
                  type: object
                before:
                  additionalProperties:
                    items:
                      type: string
                    type: array
                  description: PluginOrderingPhase indicates which plugins in a phase
                    should affect the target plugin's order
                  type: object
              type: object
            plugin:
              description: PluginName is the name of the plugin to which to apply
                the config.
              type: string
            protocols:
              description: |-
                Protocols configures plugin to run on requests received on specific
                protocols.
              items:
                description: |-
                  KongProtocol is a valid Kong protocol.
                  This alias is necessary to deal with https://github.com/kubernetes-sigs/controller-tools/issues/342
                enum:
                - http
                - https
                - grpc
                - grpcs
                - tcp
                - tls
                - udp
                type: string
              type: array
            run_on:
              description: |-
                RunOn configures the plugin to run on the first or the second or both
                nodes in case of a service mesh deployment.
              enum:
              - first
              - second
              - all
              type: string
            status:
              description: Status represents the current status of the KongPlugin
                resource.
              properties:
                conditions:
                  default:
                  - lastTransitionTime: "1970-01-01T00:00:00Z"
                    message: Waiting for controller
                    reason: Pending
                    status: Unknown
                    type: Programmed
                  description: |-
                    Conditions describe the current conditions of the KongPluginStatus.

                    Known condition types are:

                    * "Programmed"
                  items:
                    description: Condition contains details for one aspect of the
                      current state of this API Resource.
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False,
                          Unknown.
                        enum:
                        - "True"
                        - "False"
                        - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                    - lastTransitionTime
                    - message
                    - reason
                    - status
                    - type
                    type: object
                  maxItems: 8
                  type: array
                  x-kubernetes-list-map-keys:
                  - type
                  x-kubernetes-list-type: map
              type: object
          required:
          - plugin
          type: object
          x-kubernetes-validations:
          - message: Using both config and configFrom fields is not allowed.
            rule: '!(has(self.config) && has(self.configFrom))'
          - message: Using both configFrom and configPatches fields is not allowed.
            rule: '!(has(self.configFrom) && has(self.configPatches))'
          - message: The plugin field is immutable
            rule: self.plugin == oldSelf.plugin
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongPlugin
      listKind: KongPluginList
      plural: kongplugins
      shortNames:
      - kp
      singular: kongplugin
    conditions:
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubernetes-configuration.konghq.com/channels: ingress-controller
      kubernetes-configuration.konghq.com/version: v1.5.2
    creationTimestamp: "2025-07-31T03:49:06Z"
    generation: 1
    name: kongingresses.configuration.konghq.com
    resourceVersion: "14579"
    uid: 4cceb14b-a74d-419e-bd30-107c68a465a3
  spec:
    conversion:
      strategy: None
    group: configuration.konghq.com
    names:
      categories:
      - kong-ingress-controller
      kind: KongIngress
      listKind: KongIngressList
      plural: kongingresses
      shortNames:
      - ki
      singular: kongingress
    scope: Namespaced
    versions:
    - deprecated: true
      deprecationWarning: configuration.konghq.com/v1 KongIngress is deprecated
      name: v1
      schema:
        openAPIV3Schema:
          description: |-
            KongIngress is the Schema for the kongingresses API.
            Deprecated: Use annotations and KongUpstreamPolicy instead. See https://developer.konghq.com/kubernetes-ingress-controller/migrate/kongingress/
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            proxy:
              description: |-
                Proxy defines additional connection options for the routes to be configured in the
                Kong Gateway, e.g. `connection_timeout`, `retries`, etc.
              properties:
                connect_timeout:
                  description: "The timeout in milliseconds for\testablishing a connection
                    to the upstream server.\nDeprecated: use Service's \"konghq.com/connect-timeout\"
                    annotation instead."
                  minimum: 0
                  type: integer
                path:
                  description: |-
                    (optional) The path to be used in requests to the upstream server.
                    Deprecated: use Service's "konghq.com/path" annotation instead.
                  pattern: ^/.*$
                  type: string
                protocol:
                  description: |-
                    The protocol used to communicate with the upstream.
                    Deprecated: use Service's "konghq.com/protocol" annotation instead.
                  enum:
                  - http
                  - https
                  - grpc
                  - grpcs
                  - tcp
                  - tls
                  - udp
                  type: string
                read_timeout:
                  description: |-
                    The timeout in milliseconds between two successive read operations
                    for transmitting a request to the upstream server.
                    Deprecated: use Service's "konghq.com/read-timeout" annotation instead.
                  minimum: 0
                  type: integer
                retries:
                  description: |-
                    The number of retries to execute upon failure to proxy.
                    Deprecated: use Service's "konghq.com/retries" annotation instead.
                  minimum: 0
                  type: integer
                write_timeout:
                  description: |-
                    The timeout in milliseconds between two successive write operations
                    for transmitting a request to the upstream server.
                    Deprecated: use Service's "konghq.com/write-timeout" annotation instead.
                  minimum: 0
                  type: integer
              type: object
            route:
              description: |-
                Route define rules to match client requests.
                Each Route is associated with a Service,
                and a Service may have multiple Routes associated to it.
              properties:
                headers:
                  additionalProperties:
                    items:
                      type: string
                    type: array
                  description: |-
                    Headers contains one or more lists of values indexed by header name
                    that will cause this Route to match if present in the request.
                    The Host header cannot be used with this attribute.
                    Deprecated: use Ingress' "konghq.com/headers" annotation instead.
                  type: object
                https_redirect_status_code:
                  description: |-
                    HTTPSRedirectStatusCode is the status code Kong responds with
                    when all properties of a Route match except the protocol.
                    Deprecated: use Ingress' "ingress.kubernetes.io/force-ssl-redirect" or
                    "konghq.com/https-redirect-status-code" annotations instead.
                  type: integer
                methods:
                  description: |-
                    Methods is a list of HTTP methods that match this Route.
                    Deprecated: use Ingress' "konghq.com/methods" annotation instead.
                  items:
                    type: string
                  type: array
                path_handling:
                  description: |-
                    PathHandling controls how the Service path, Route path and requested path
                    are combined when sending a request to the upstream.
                    Deprecated: use Ingress' "konghq.com/path-handling" annotation instead.
                  enum:
                  - v0
                  - v1
                  type: string
                preserve_host:
                  description: |-
                    PreserveHost sets When matching a Route via one of the hosts domain names,
                    use the request Host header in the upstream request headers.
                    If set to false, the upstream Host header will be that of the Service’s host.
                    Deprecated: use Ingress' "konghq.com/preserve-host" annotation instead.
                  type: boolean
                protocols:
                  description: |-
                    Protocols is an array of the protocols this Route should allow.
                    Deprecated: use Ingress' "konghq.com/protocols" annotation instead.
                  items:
                    description: |-
                      KongProtocol is a valid Kong protocol.
                      This alias is necessary to deal with https://github.com/kubernetes-sigs/controller-tools/issues/342
                    enum:
                    - http
                    - https
                    - grpc
                    - grpcs
                    - tcp
                    - tls
                    - udp
                    type: string
                  type: array
                regex_priority:
                  description: |-
                    RegexPriority is a number used to choose which route resolves a given request
                    when several routes match it using regexes simultaneously.
                    Deprecated: use Ingress' "konghq.com/regex-priority" annotation instead.
                  type: integer
                request_buffering:
                  description: |-
                    RequestBuffering sets whether to enable request body buffering or not.
                    Deprecated: use Ingress' "konghq.com/request-buffering" annotation instead.
                  type: boolean
                response_buffering:
                  description: |-
                    ResponseBuffering sets whether to enable response body buffering or not.
                    Deprecated: use Ingress' "konghq.com/response-buffering" annotation instead.
                  type: boolean
                snis:
                  description: |-
                    SNIs is a list of SNIs that match this Route when using stream routing.
                    Deprecated: use Ingress' "konghq.com/snis" annotation instead.
                  items:
                    type: string
                  type: array
                strip_path:
                  description: |-
                    StripPath sets When matching a Route via one of the paths
                    strip the matching prefix from the upstream request URL.
                    Deprecated: use Ingress' "konghq.com/strip-path" annotation instead.
                  type: boolean
              type: object
            upstream:
              description: |-
                Upstream represents a virtual hostname and can be used to loadbalance
                incoming requests over multiple targets (e.g. Kubernetes `Services` can
                be a target, OR `Endpoints` can be targets).
              properties:
                algorithm:
                  description: |-
                    Algorithm is the load balancing algorithm to use.
                    Accepted values are: "round-robin", "consistent-hashing", "least-connections", "latency".
                  enum:
                  - round-robin
                  - consistent-hashing
                  - least-connections
                  - latency
                  type: string
                hash_fallback:
                  description: |-
                    HashFallback defines What to use as hashing input
                    if the primary hash_on does not return a hash.
                    Accepted values are: "none", "consumer", "ip", "header", "cookie".
                  type: string
                hash_fallback_header:
                  description: |-
                    HashFallbackHeader is the header name to take the value from as hash input.
                    Only required when "hash_fallback" is set to "header".
                  type: string
                hash_fallback_query_arg:
                  description: HashFallbackQueryArg is the "hash_fallback" version
                    of HashOnQueryArg.
                  type: string
                hash_fallback_uri_capture:
                  description: HashFallbackURICapture is the "hash_fallback" version
                    of HashOnURICapture.
                  type: string
                hash_on:
                  description: |-
                    HashOn defines what to use as hashing input.
                    Accepted values are: "none", "consumer", "ip", "header", "cookie", "path", "query_arg", "uri_capture".
                  type: string
                hash_on_cookie:
                  description: |-
                    The cookie name to take the value from as hash input.
                    Only required when "hash_on" or "hash_fallback" is set to "cookie".
                  type: string
                hash_on_cookie_path:
                  description: |-
                    The cookie path to set in the response headers.
                    Only required when "hash_on" or "hash_fallback" is set to "cookie".
                  type: string
                hash_on_header:
                  description: |-
                    HashOnHeader defines the header name to take the value from as hash input.
                    Only required when "hash_on" is set to "header".
                  type: string
                hash_on_query_arg:
                  description: HashOnQueryArg is the query string parameter whose
                    value is the hash input when "hash_on" is set to "query_arg".
                  type: string
                hash_on_uri_capture:
                  description: |-
                    HashOnURICapture is the name of the capture group whose value is the hash input when "hash_on" is set to
                    "uri_capture".
                  type: string
                healthchecks:
                  description: Healthchecks defines the health check configurations
                    in Kong.
                  properties:
                    active:
                      description: ActiveHealthcheck configures active health check
                        probing.
                      properties:
                        concurrency:
                          minimum: 1
                          type: integer
                        headers:
                          additionalProperties:
                            items:
                              type: string
                            type: array
                          type: object
                        healthy:
                          description: |-
                            Healthy configures thresholds and HTTP status codes
                            to mark targets healthy for an upstream.
                          properties:
                            http_statuses:
                              items:
                                type: integer
                              type: array
                            interval:
                              minimum: 0
                              type: integer
                            successes:
                              minimum: 0
                              type: integer
                          type: object
                        http_path:
                          pattern: ^/.*$
                          type: string
                        https_sni:
                          type: string
                        https_verify_certificate:
                          type: boolean
                        timeout:
                          minimum: 0
                          type: integer
                        type:
                          type: string
                        unhealthy:
                          description: |-
                            Unhealthy configures thresholds and HTTP status codes
                            to mark targets unhealthy.
                          properties:
                            http_failures:
                              minimum: 0
                              type: integer
                            http_statuses:
                              items:
                                type: integer
                              type: array
                            interval:
                              minimum: 0
                              type: integer
                            tcp_failures:
                              minimum: 0
                              type: integer
                            timeouts:
                              minimum: 0
                              type: integer
                          type: object
                      type: object
                    passive:
                      description: |-
                        PassiveHealthcheck configures passive checks around
                        passive health checks.
                      properties:
                        healthy:
                          description: |-
                            Healthy configures thresholds and HTTP status codes
                            to mark targets healthy for an upstream.
                          properties:
                            http_statuses:
                              items:
                                type: integer
                              type: array
                            interval:
                              minimum: 0
                              type: integer
                            successes:
                              minimum: 0
                              type: integer
                          type: object
                        type:
                          type: string
                        unhealthy:
                          description: |-
                            Unhealthy configures thresholds and HTTP status codes
                            to mark targets unhealthy.
                          properties:
                            http_failures:
                              minimum: 0
                              type: integer
                            http_statuses:
                              items:
                                type: integer
                              type: array
                            interval:
                              minimum: 0
                              type: integer
                            tcp_failures:
                              minimum: 0
                              type: integer
                            timeouts:
                              minimum: 0
                              type: integer
                          type: object
                      type: object
                    threshold:
                      type: number
                  type: object
                host_header:
                  description: |-
                    HostHeader is The hostname to be used as Host header
                    when proxying requests through Kong.
                  type: string
                slots:
                  description: Slots is the number of slots in the load balancer algorithm.
                  minimum: 10
                  type: integer
              type: object
          type: object
          x-kubernetes-validations:
          - message: '''proxy'' field is no longer supported, use Service''s annotations
              instead'
            rule: '!has(self.proxy)'
          - message: '''route'' field is no longer supported, use Ingress'' annotations
              instead'
            rule: '!has(self.route)'
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - kong-ingress-controller
      kind: KongIngress
      listKind: KongIngressList
      plural: kongingresses
      shortNames:
      - ki
      singular: kongingress
    conditions:
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubernetes-configuration.konghq.com/channels: ingress-controller,gateway-operator
      kubernetes-configuration.konghq.com/version: v1.5.2
    creationTimestamp: "2025-07-31T03:49:06Z"
    generation: 1
    name: kongvaults.configuration.konghq.com
    resourceVersion: "14581"
    uid: f0980a6f-61e3-4561-9214-ccfbdf90b712
  spec:
    conversion:
      strategy: None
    group: configuration.konghq.com
    names:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongVault
      listKind: KongVaultList
      plural: kongvaults
      shortNames:
      - kv
      singular: kongvault
    scope: Cluster
    versions:
    - additionalPrinterColumns:
      - description: Name of the backend of the vault
        jsonPath: .spec.backend
        name: Backend Type
        type: string
      - description: Prefix of vault URI to reference the values in the vault
        jsonPath: .spec.prefix
        name: Prefix
        type: string
      - description: Age
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      - description: Description
        jsonPath: .spec.description
        name: Description
        priority: 1
        type: string
      - jsonPath: .status.conditions[?(@.type=="Programmed")].status
        name: Programmed
        type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: |-
            KongVault is the schema for kongvaults API which defines a custom Kong vault.
            A Kong vault is a storage to store sensitive data, where the values can be referenced in configuration of plugins.
            See: https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: KongVaultSpec defines specification of a custom Kong vault.
              properties:
                backend:
                  description: |-
                    Backend is the type of the backend storing the secrets in the vault.
                    The supported backends of Kong is listed here:
                    https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/backends/
                  minLength: 1
                  type: string
                config:
                  description: Config is the configuration of the vault. Varies for
                    different backends.
                  x-kubernetes-preserve-unknown-fields: true
                controlPlaneRef:
                  description: ControlPlaneRef is a reference to a Konnect ControlPlane
                    this KongVault is associated with.
                  properties:
                    konnectID:
                      description: |-
                        KonnectID is the schema for the KonnectID type.
                        This field is required when the Type is konnectID.
                      pattern: ^[0-9a-f]{8}(?:\-[0-9a-f]{4}){3}-[0-9a-f]{12}$
                      type: string
                    konnectNamespacedRef:
                      description: |-
                        KonnectNamespacedRef is a reference to a Konnect Control Plane entity inside the cluster.
                        It contains the name of the Konnect Control Plane.
                        This field is required when the Type is konnectNamespacedRef.
                      properties:
                        name:
                          description: Name is the name of the Konnect Control Plane.
                          type: string
                        namespace:
                          description: |-
                            Namespace is the namespace where the Konnect Control Plane is in.
                            Currently only cluster scoped resources (KongVault) are allowed to set `konnectNamespacedRef.namespace`.
                          type: string
                      required:
                      - name
                      type: object
                    type:
                      default: kic
                      description: |-
                        Type indicates the type of the control plane being referenced. Allowed values:
                        - konnectID
                        - konnectNamespacedRef
                        - kic

                        The default is kic, which implies that the Control Plane is KIC.
                      enum:
                      - konnectID
                      - konnectNamespacedRef
                      - kic
                      type: string
                  type: object
                  x-kubernetes-validations:
                  - message: '''konnectID'' type is not supported'
                    rule: self.type != 'konnectID'
                  - message: when type is konnectNamespacedRef, konnectNamespacedRef
                      must be set
                    rule: '(has(self.type) && self.type == ''konnectNamespacedRef'')
                      ? has(self.konnectNamespacedRef) : true'
                  - message: when type is konnectNamespacedRef, konnectID must not
                      be set
                    rule: '(has(self.type) && self.type == ''konnectNamespacedRef'')
                      ? !has(self.konnectID) : true'
                  - message: when type is konnectID, konnectID must be set
                    rule: '(has(self.type) && self.type == ''konnectID'') ? has(self.konnectID)
                      : true'
                  - message: when type is konnectID, konnectNamespacedRef must not
                      be set
                    rule: '(has(self.type) && self.type == ''konnectID'') ? !has(self.konnectNamespacedRef)
                      : true'
                  - message: when type is kic, konnectID must not be set
                    rule: '(has(self.type) && self.type == ''kic'') ? !has(self.konnectID)
                      : true'
                  - message: when type is kic, konnectNamespacedRef must not be set
                    rule: '(has(self.type) && self.type == ''kic'') ? !has(self.konnectNamespacedRef)
                      : true'
                  - message: when type is unset, konnectID must not be set
                    rule: '!has(self.type) ? !has(self.konnectID) : true'
                  - message: when type is unset, konnectNamespacedRef must not be
                      set
                    rule: '!has(self.type) ? !has(self.konnectNamespacedRef) : true'
                description:
                  description: Description is the additional information about the
                    vault.
                  type: string
                prefix:
                  description: |-
                    Prefix is the prefix of vault URI for referencing values in the vault.
                    It is immutable after created.
                  minLength: 1
                  type: string
                tags:
                  description: Tags are the tags associated to the vault for grouping
                    and filtering.
                  items:
                    type: string
                  maxItems: 20
                  type: array
                  x-kubernetes-validations:
                  - message: tags entries must not be longer than 128 characters
                    rule: self.all(tag, size(tag) >= 1 && size(tag) <= 128)
              required:
              - backend
              - prefix
              type: object
            status:
              description: KongVaultStatus represents the current status of the KongVault
                resource.
              properties:
                conditions:
                  default:
                  - lastTransitionTime: "1970-01-01T00:00:00Z"
                    message: Waiting for controller
                    reason: Pending
                    status: Unknown
                    type: Programmed
                  description: |-
                    Conditions describe the current conditions of the KongVaultStatus.

                    Known condition types are:

                    * "Programmed"
                  items:
                    description: Condition contains details for one aspect of the
                      current state of this API Resource.
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False,
                          Unknown.
                        enum:
                        - "True"
                        - "False"
                        - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                    - lastTransitionTime
                    - message
                    - reason
                    - status
                    - type
                    type: object
                  maxItems: 8
                  type: array
                  x-kubernetes-list-map-keys:
                  - type
                  x-kubernetes-list-type: map
                konnect:
                  description: Konnect contains the Konnect entity status.
                  properties:
                    controlPlaneID:
                      description: ControlPlaneID is the Konnect ID of the ControlPlane
                        this Route is associated with.
                      type: string
                    id:
                      description: |-
                        ID is the unique identifier of the Konnect entity as assigned by Konnect API.
                        If it's unset (empty string), it means the Konnect entity hasn't been created yet.
                      type: string
                    organizationID:
                      description: OrgID is ID of Konnect Org that this entity has
                        been created in.
                      type: string
                    serverURL:
                      description: ServerURL is the URL of the Konnect server in which
                        the entity exists.
                      type: string
                  type: object
              required:
              - conditions
              type: object
          required:
          - spec
          type: object
          x-kubernetes-validations:
          - message: The spec.prefix field is immutable
            rule: self.spec.prefix == oldSelf.spec.prefix
          - message: controlPlaneRef is required once set
            rule: '!has(oldSelf.spec.controlPlaneRef) || has(self.spec.controlPlaneRef)'
          - message: spec.controlPlaneRef is immutable when an entity is already Programmed
            rule: '(!has(self.status) || !self.status.conditions.exists(c, c.type
              == ''Programmed'' && c.status == ''True'') || !has(self.spec.controlPlaneRef))
              ? true : oldSelf.spec.controlPlaneRef == self.spec.controlPlaneRef'
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongVault
      listKind: KongVaultList
      plural: kongvaults
      shortNames:
      - kv
      singular: kongvault
    conditions:
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubernetes-configuration.konghq.com/channels: ingress-controller,gateway-operator
      kubernetes-configuration.konghq.com/version: v1.5.2
    creationTimestamp: "2025-07-31T03:49:06Z"
    generation: 1
    name: kongconsumers.configuration.konghq.com
    resourceVersion: "14583"
    uid: b1a953f0-a40f-4589-aca4-41ca287b3fd9
  spec:
    conversion:
      strategy: None
    group: configuration.konghq.com
    names:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongConsumer
      listKind: KongConsumerList
      plural: kongconsumers
      shortNames:
      - kc
      singular: kongconsumer
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - description: Username of a Kong Consumer
        jsonPath: .username
        name: Username
        type: string
      - description: Age
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      - jsonPath: .status.conditions[?(@.type=="Programmed")].status
        name: Programmed
        type: string
      name: v1
      schema:
        openAPIV3Schema:
          description: KongConsumer is the Schema for the kongconsumers API.
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            consumerGroups:
              description: |-
                ConsumerGroups are references to consumer groups (that consumer wants to be part of)
                provisioned in Kong.
              items:
                type: string
              type: array
              x-kubernetes-list-type: set
            credentials:
              description: |-
                Credentials are references to secrets containing a credential to be
                provisioned in Kong.
              items:
                type: string
              type: array
              x-kubernetes-list-type: set
            custom_id:
              description: |-
                CustomID is a Kong cluster-unique existing ID for the consumer - useful for mapping
                Kong with users in your existing database.
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: KongConsumerSpec defines the specification of the KongConsumer.
              properties:
                controlPlaneRef:
                  description: ControlPlaneRef is a reference to a ControlPlane this
                    Consumer is associated with.
                  properties:
                    konnectID:
                      description: |-
                        KonnectID is the schema for the KonnectID type.
                        This field is required when the Type is konnectID.
                      pattern: ^[0-9a-f]{8}(?:\-[0-9a-f]{4}){3}-[0-9a-f]{12}$
                      type: string
                    konnectNamespacedRef:
                      description: |-
                        KonnectNamespacedRef is a reference to a Konnect Control Plane entity inside the cluster.
                        It contains the name of the Konnect Control Plane.
                        This field is required when the Type is konnectNamespacedRef.
                      properties:
                        name:
                          description: Name is the name of the Konnect Control Plane.
                          type: string
                        namespace:
                          description: |-
                            Namespace is the namespace where the Konnect Control Plane is in.
                            Currently only cluster scoped resources (KongVault) are allowed to set `konnectNamespacedRef.namespace`.
                          type: string
                      required:
                      - name
                      type: object
                    type:
                      default: kic
                      description: |-
                        Type indicates the type of the control plane being referenced. Allowed values:
                        - konnectID
                        - konnectNamespacedRef
                        - kic

                        The default is kic, which implies that the Control Plane is KIC.
                      enum:
                      - konnectID
                      - konnectNamespacedRef
                      - kic
                      type: string
                  type: object
                  x-kubernetes-validations:
                  - message: '''konnectID'' type is not supported'
                    rule: self.type != 'konnectID'
                  - message: when type is konnectNamespacedRef, konnectNamespacedRef
                      must be set
                    rule: '(has(self.type) && self.type == ''konnectNamespacedRef'')
                      ? has(self.konnectNamespacedRef) : true'
                  - message: when type is konnectNamespacedRef, konnectID must not
                      be set
                    rule: '(has(self.type) && self.type == ''konnectNamespacedRef'')
                      ? !has(self.konnectID) : true'
                  - message: when type is konnectID, konnectID must be set
                    rule: '(has(self.type) && self.type == ''konnectID'') ? has(self.konnectID)
                      : true'
                  - message: when type is konnectID, konnectNamespacedRef must not
                      be set
                    rule: '(has(self.type) && self.type == ''konnectID'') ? !has(self.konnectNamespacedRef)
                      : true'
                  - message: when type is kic, konnectID must not be set
                    rule: '(has(self.type) && self.type == ''kic'') ? !has(self.konnectID)
                      : true'
                  - message: when type is kic, konnectNamespacedRef must not be set
                    rule: '(has(self.type) && self.type == ''kic'') ? !has(self.konnectNamespacedRef)
                      : true'
                  - message: when type is unset, konnectID must not be set
                    rule: '!has(self.type) ? !has(self.konnectID) : true'
                  - message: when type is unset, konnectNamespacedRef must not be
                      set
                    rule: '!has(self.type) ? !has(self.konnectNamespacedRef) : true'
                tags:
                  description: Tags is an optional set of tags applied to the consumer.
                  items:
                    type: string
                  maxItems: 20
                  type: array
                  x-kubernetes-validations:
                  - message: tags entries must not be longer than 128 characters
                    rule: self.all(tag, size(tag) >= 1 && size(tag) <= 128)
              type: object
            status:
              default:
                conditions:
                - lastTransitionTime: "1970-01-01T00:00:00Z"
                  message: Waiting for controller
                  reason: Pending
                  status: Unknown
                  type: Programmed
              description: Status represents the current status of the KongConsumer
                resource.
              properties:
                conditions:
                  description: |-
                    Conditions describe the current conditions of the KongConsumer.

                    Known condition types are:

                    * "Programmed"
                  items:
                    description: Condition contains details for one aspect of the
                      current state of this API Resource.
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False,
                          Unknown.
                        enum:
                        - "True"
                        - "False"
                        - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                    - lastTransitionTime
                    - message
                    - reason
                    - status
                    - type
                    type: object
                  maxItems: 8
                  type: array
                  x-kubernetes-list-map-keys:
                  - type
                  x-kubernetes-list-type: map
                konnect:
                  description: Konnect contains the Konnect entity status.
                  properties:
                    controlPlaneID:
                      description: ControlPlaneID is the Konnect ID of the ControlPlane
                        this Route is associated with.
                      type: string
                    id:
                      description: |-
                        ID is the unique identifier of the Konnect entity as assigned by Konnect API.
                        If it's unset (empty string), it means the Konnect entity hasn't been created yet.
                      type: string
                    organizationID:
                      description: OrgID is ID of Konnect Org that this entity has
                        been created in.
                      type: string
                    serverURL:
                      description: ServerURL is the URL of the Konnect server in which
                        the entity exists.
                      type: string
                  type: object
              type: object
            username:
              description: Username is a Kong cluster-unique username of the consumer.
              type: string
          type: object
          x-kubernetes-validations:
          - message: Need to provide either username or custom_id
            rule: has(self.username) || has(self.custom_id)
          - message: controlPlaneRef is required once set
            rule: (!has(oldSelf.spec) || !has(oldSelf.spec.controlPlaneRef)) || has(self.spec.controlPlaneRef)
          - message: spec.controlPlaneRef cannot specify namespace for namespaced
              resource
            rule: '(!has(self.spec) || !has(self.spec.controlPlaneRef) || !has(self.spec.controlPlaneRef.konnectNamespacedRef))
              ? true : !has(self.spec.controlPlaneRef.konnectNamespacedRef.__namespace__)'
          - message: spec.controlPlaneRef is immutable when an entity is already Programmed
            rule: '(!has(self.spec) || !has(self.spec.controlPlaneRef)) ? true : (!has(self.status)
              || !self.status.conditions.exists(c, c.type == ''Programmed'' && c.status
              == ''True'')) ? true : oldSelf.spec.controlPlaneRef == self.spec.controlPlaneRef'
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongConsumer
      listKind: KongConsumerList
      plural: kongconsumers
      shortNames:
      - kc
      singular: kongconsumer
    conditions:
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubernetes-configuration.konghq.com/channels: ingress-controller,gateway-operator
      kubernetes-configuration.konghq.com/version: v1.5.2
    creationTimestamp: "2025-07-31T03:49:06Z"
    generation: 1
    name: kongconsumergroups.configuration.konghq.com
    resourceVersion: "14585"
    uid: d5686691-fb60-49db-be8a-d412b9a70cc6
  spec:
    conversion:
      strategy: None
    group: configuration.konghq.com
    names:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongConsumerGroup
      listKind: KongConsumerGroupList
      plural: kongconsumergroups
      shortNames:
      - kcg
      singular: kongconsumergroup
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - description: Age
        jsonPath: .metadata.creationTimestamp
        name: Age
        type: date
      - jsonPath: .status.conditions[?(@.type=="Programmed")].status
        name: Programmed
        type: string
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: KongConsumerGroup is the Schema for the kongconsumergroups
            API.
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: KongConsumerGroupSpec defines the desired state of KongConsumerGroup.
              properties:
                controlPlaneRef:
                  description: ControlPlaneRef is a reference to a ControlPlane this
                    ConsumerGroup is associated with.
                  properties:
                    konnectID:
                      description: |-
                        KonnectID is the schema for the KonnectID type.
                        This field is required when the Type is konnectID.
                      pattern: ^[0-9a-f]{8}(?:\-[0-9a-f]{4}){3}-[0-9a-f]{12}$
                      type: string
                    konnectNamespacedRef:
                      description: |-
                        KonnectNamespacedRef is a reference to a Konnect Control Plane entity inside the cluster.
                        It contains the name of the Konnect Control Plane.
                        This field is required when the Type is konnectNamespacedRef.
                      properties:
                        name:
                          description: Name is the name of the Konnect Control Plane.
                          type: string
                        namespace:
                          description: |-
                            Namespace is the namespace where the Konnect Control Plane is in.
                            Currently only cluster scoped resources (KongVault) are allowed to set `konnectNamespacedRef.namespace`.
                          type: string
                      required:
                      - name
                      type: object
                    type:
                      default: kic
                      description: |-
                        Type indicates the type of the control plane being referenced. Allowed values:
                        - konnectID
                        - konnectNamespacedRef
                        - kic

                        The default is kic, which implies that the Control Plane is KIC.
                      enum:
                      - konnectID
                      - konnectNamespacedRef
                      - kic
                      type: string
                  type: object
                  x-kubernetes-validations:
                  - message: '''konnectID'' type is not supported'
                    rule: self.type != 'konnectID'
                  - message: when type is konnectNamespacedRef, konnectNamespacedRef
                      must be set
                    rule: '(has(self.type) && self.type == ''konnectNamespacedRef'')
                      ? has(self.konnectNamespacedRef) : true'
                  - message: when type is konnectNamespacedRef, konnectID must not
                      be set
                    rule: '(has(self.type) && self.type == ''konnectNamespacedRef'')
                      ? !has(self.konnectID) : true'
                  - message: when type is konnectID, konnectID must be set
                    rule: '(has(self.type) && self.type == ''konnectID'') ? has(self.konnectID)
                      : true'
                  - message: when type is konnectID, konnectNamespacedRef must not
                      be set
                    rule: '(has(self.type) && self.type == ''konnectID'') ? !has(self.konnectNamespacedRef)
                      : true'
                  - message: when type is kic, konnectID must not be set
                    rule: '(has(self.type) && self.type == ''kic'') ? !has(self.konnectID)
                      : true'
                  - message: when type is kic, konnectNamespacedRef must not be set
                    rule: '(has(self.type) && self.type == ''kic'') ? !has(self.konnectNamespacedRef)
                      : true'
                  - message: when type is unset, konnectID must not be set
                    rule: '!has(self.type) ? !has(self.konnectID) : true'
                  - message: when type is unset, konnectNamespacedRef must not be
                      set
                    rule: '!has(self.type) ? !has(self.konnectNamespacedRef) : true'
                name:
                  description: Name is the name of the ConsumerGroup in Kong.
                  type: string
                tags:
                  description: Tags is an optional set of tags applied to the ConsumerGroup.
                  items:
                    type: string
                  maxItems: 20
                  type: array
                  x-kubernetes-validations:
                  - message: tags entries must not be longer than 128 characters
                    rule: self.all(tag, size(tag) >= 1 && size(tag) <= 128)
              type: object
            status:
              default:
                conditions:
                - lastTransitionTime: "1970-01-01T00:00:00Z"
                  message: Waiting for controller
                  reason: Pending
                  status: Unknown
                  type: Programmed
              description: Status represents the current status of the KongConsumerGroup
                resource.
              properties:
                conditions:
                  description: |-
                    Conditions describe the current conditions of the KongConsumerGroup.

                    Known condition types are:

                    * "Programmed"
                  items:
                    description: Condition contains details for one aspect of the
                      current state of this API Resource.
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False,
                          Unknown.
                        enum:
                        - "True"
                        - "False"
                        - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                    - lastTransitionTime
                    - message
                    - reason
                    - status
                    - type
                    type: object
                  maxItems: 8
                  type: array
                  x-kubernetes-list-map-keys:
                  - type
                  x-kubernetes-list-type: map
                konnect:
                  description: Konnect contains the Konnect entity status.
                  properties:
                    controlPlaneID:
                      description: ControlPlaneID is the Konnect ID of the ControlPlane
                        this Route is associated with.
                      type: string
                    id:
                      description: |-
                        ID is the unique identifier of the Konnect entity as assigned by Konnect API.
                        If it's unset (empty string), it means the Konnect entity hasn't been created yet.
                      type: string
                    organizationID:
                      description: OrgID is ID of Konnect Org that this entity has
                        been created in.
                      type: string
                    serverURL:
                      description: ServerURL is the URL of the Konnect server in which
                        the entity exists.
                      type: string
                  type: object
              type: object
          type: object
          x-kubernetes-validations:
          - message: controlPlaneRef is required once set
            rule: (!has(oldSelf.spec) || !has(oldSelf.spec.controlPlaneRef)) || has(self.spec.controlPlaneRef)
          - message: spec.controlPlaneRef cannot specify namespace for namespaced
              resource
            rule: '(!has(self.spec) || !has(self.spec.controlPlaneRef) || !has(self.spec.controlPlaneRef.konnectNamespacedRef))
              ? true : !has(self.spec.controlPlaneRef.konnectNamespacedRef.__namespace__)'
          - message: spec.controlPlaneRef is immutable when an entity is already Programmed
            rule: '(!has(oldSelf.spec) || !has(oldSelf.spec.controlPlaneRef)) ? true
              : (!has(self.status) || !self.status.conditions.exists(c, c.type ==
              ''Programmed'' && c.status == ''True'')) ? true : oldSelf.spec.controlPlaneRef
              == self.spec.controlPlaneRef'
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongConsumerGroup
      listKind: KongConsumerGroupList
      plural: kongconsumergroups
      shortNames:
      - kcg
      singular: kongconsumergroup
    conditions:
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1beta1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      kubernetes-configuration.konghq.com/channels: ingress-controller
      kubernetes-configuration.konghq.com/version: v1.5.2
    creationTimestamp: "2025-07-31T03:49:06Z"
    generation: 1
    labels:
      gateway.networking.k8s.io/policy: direct
    name: kongupstreampolicies.configuration.konghq.com
    resourceVersion: "14586"
    uid: 756e2412-16cd-4cef-8833-6f4bd85fb224
  spec:
    conversion:
      strategy: None
    group: configuration.konghq.com
    names:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongUpstreamPolicy
      listKind: KongUpstreamPolicyList
      plural: kongupstreampolicies
      shortNames:
      - kup
      singular: kongupstreampolicy
    scope: Namespaced
    versions:
    - name: v1beta1
      schema:
        openAPIV3Schema:
          description: |-
            KongUpstreamPolicy allows configuring algorithm that should be used for load balancing traffic between Kong
            Upstream's Targets. It also allows configuring health checks for Kong Upstream's Targets.

            Its configuration is similar to Kong Upstream object (https://docs.konghq.com/gateway/latest/admin-api/#upstream-object),
            and it is applied to Kong Upstream objects created by the controller.

            It can be attached to Services. To attach it to a Service, it has to be annotated with
            `konghq.com/upstream-policy: <name>`, where `<name>` is the name of the KongUpstreamPolicy
            object in the same namespace as the Service.

            When attached to a Service, it will affect all Kong Upstreams created for the Service.

            When attached to a Service used in a Gateway API *Route rule with multiple BackendRefs, all of its Services MUST
            be configured with the same KongUpstreamPolicy. Otherwise, the controller will *ignore* the KongUpstreamPolicy.

            Note: KongUpstreamPolicy doesn't implement Gateway API's GEP-713 strictly.
            In particular, it doesn't use the TargetRef for attaching to Services and Gateway API *Routes - annotations are
            used instead. This is to allow reusing the same KongUpstreamPolicy for multiple Services and Gateway API *Routes.
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: Spec contains the configuration of the Kong upstream.
              properties:
                algorithm:
                  description: |-
                    Algorithm is the load balancing algorithm to use.
                    Accepted values are: "round-robin", "consistent-hashing", "least-connections", "latency", "sticky-sessions"
                  enum:
                  - round-robin
                  - consistent-hashing
                  - least-connections
                  - latency
                  - sticky-sessions
                  type: string
                hashOn:
                  description: |-
                    HashOn defines how to calculate hash for consistent-hashing or sticky-sessions load balancing algorithm.
                    Algorithm must be set to "consistent-hashing" or "sticky-sessions" for this field to have effect.
                  properties:
                    cookie:
                      description: Cookie is the name of the cookie to use as hash
                        input.
                      type: string
                    cookiePath:
                      description: CookiePath is cookie path to set in the response
                        headers.
                      type: string
                    header:
                      description: Header is the name of the header to use as hash
                        input.
                      type: string
                    input:
                      description: |-
                        Input allows using one of the predefined inputs (ip, consumer, path, none).
                        Set this to `none` if you want to use sticky sessions.
                        For other parameterized inputs, use one of the fields below.
                      enum:
                      - ip
                      - consumer
                      - path
                      - none
                      type: string
                    queryArg:
                      description: QueryArg is the name of the query argument to use
                        as hash input.
                      type: string
                    uriCapture:
                      description: URICapture is the name of the URI capture group
                        to use as hash input.
                      type: string
                  type: object
                hashOnFallback:
                  description: |-
                    HashOnFallback defines how to calculate hash for consistent-hashing load balancing algorithm if the primary hash
                    function fails.
                    Algorithm must be set to "consistent-hashing" for this field to have effect.
                  properties:
                    cookie:
                      description: Cookie is the name of the cookie to use as hash
                        input.
                      type: string
                    cookiePath:
                      description: CookiePath is cookie path to set in the response
                        headers.
                      type: string
                    header:
                      description: Header is the name of the header to use as hash
                        input.
                      type: string
                    input:
                      description: |-
                        Input allows using one of the predefined inputs (ip, consumer, path, none).
                        Set this to `none` if you want to use sticky sessions.
                        For other parameterized inputs, use one of the fields below.
                      enum:
                      - ip
                      - consumer
                      - path
                      - none
                      type: string
                    queryArg:
                      description: QueryArg is the name of the query argument to use
                        as hash input.
                      type: string
                    uriCapture:
                      description: URICapture is the name of the URI capture group
                        to use as hash input.
                      type: string
                  type: object
                healthchecks:
                  description: Healthchecks defines the health check configurations
                    in Kong.
                  properties:
                    active:
                      description: Active configures active health check probing.
                      properties:
                        concurrency:
                          description: Concurrency is the number of targets to check
                            concurrently.
                          minimum: 1
                          type: integer
                        headers:
                          additionalProperties:
                            items:
                              type: string
                            type: array
                          description: Headers is a list of HTTP headers to add to
                            the probe request.
                          type: object
                        healthy:
                          description: Healthy configures thresholds and HTTP status
                            codes to mark targets healthy for an upstream.
                          properties:
                            httpStatuses:
                              description: HTTPStatuses is a list of HTTP status codes
                                that Kong considers a success.
                              items:
                                description: HTTPStatus is an HTTP status code.
                                maximum: 599
                                minimum: 100
                                type: integer
                              type: array
                            interval:
                              description: Interval is the interval between active
                                health checks for an upstream in seconds when in a
                                healthy state.
                              minimum: 0
                              type: integer
                            successes:
                              description: Successes is the number of successes to
                                consider a target healthy.
                              minimum: 0
                              type: integer
                          type: object
                        httpPath:
                          description: HTTPPath is the path to use in GET HTTP request
                            to run as a probe.
                          pattern: ^/.*$
                          type: string
                        httpsSni:
                          description: HTTPSSNI is the SNI to use in GET HTTPS request
                            to run as a probe.
                          type: string
                        httpsVerifyCertificate:
                          description: HTTPSVerifyCertificate is a boolean value that
                            indicates if the certificate should be verified.
                          type: boolean
                        timeout:
                          description: Timeout is the probe timeout in seconds.
                          minimum: 0
                          type: integer
                        type:
                          description: |-
                            Type determines whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection.
                            Accepted values are "http", "https", "tcp", "grpc", "grpcs".
                          enum:
                          - http
                          - https
                          - tcp
                          - grpc
                          - grpcs
                          type: string
                        unhealthy:
                          description: Unhealthy configures thresholds and HTTP status
                            codes to mark targets unhealthy for an upstream.
                          properties:
                            httpFailures:
                              description: HTTPFailures is the number of failures
                                to consider a target unhealthy.
                              minimum: 0
                              type: integer
                            httpStatuses:
                              description: HTTPStatuses is a list of HTTP status codes
                                that Kong considers a failure.
                              items:
                                description: HTTPStatus is an HTTP status code.
                                maximum: 599
                                minimum: 100
                                type: integer
                              type: array
                            interval:
                              description: Interval is the interval between active
                                health checks for an upstream in seconds when in an
                                unhealthy state.
                              minimum: 0
                              type: integer
                            tcpFailures:
                              description: TCPFailures is the number of TCP failures
                                in a row to consider a target unhealthy.
                              minimum: 0
                              type: integer
                            timeouts:
                              description: Timeouts is the number of timeouts in a
                                row to consider a target unhealthy.
                              minimum: 0
                              type: integer
                          type: object
                      type: object
                    passive:
                      description: Passive configures passive health check probing.
                      properties:
                        healthy:
                          description: Healthy configures thresholds and HTTP status
                            codes to mark targets healthy for an upstream.
                          properties:
                            httpStatuses:
                              description: HTTPStatuses is a list of HTTP status codes
                                that Kong considers a success.
                              items:
                                description: HTTPStatus is an HTTP status code.
                                maximum: 599
                                minimum: 100
                                type: integer
                              type: array
                            interval:
                              description: Interval is the interval between active
                                health checks for an upstream in seconds when in a
                                healthy state.
                              minimum: 0
                              type: integer
                            successes:
                              description: Successes is the number of successes to
                                consider a target healthy.
                              minimum: 0
                              type: integer
                          type: object
                        type:
                          description: |-
                            Type determines whether to perform passive health checks interpreting HTTP/HTTPS statuses,
                            or just check for TCP connection success.
                            Accepted values are "http", "https", "tcp", "grpc", "grpcs".
                          enum:
                          - http
                          - https
                          - tcp
                          - grpc
                          - grpcs
                          type: string
                        unhealthy:
                          description: Unhealthy configures thresholds and HTTP status
                            codes to mark targets unhealthy.
                          properties:
                            httpFailures:
                              description: HTTPFailures is the number of failures
                                to consider a target unhealthy.
                              minimum: 0
                              type: integer
                            httpStatuses:
                              description: HTTPStatuses is a list of HTTP status codes
                                that Kong considers a failure.
                              items:
                                description: HTTPStatus is an HTTP status code.
                                maximum: 599
                                minimum: 100
                                type: integer
                              type: array
                            interval:
                              description: Interval is the interval between active
                                health checks for an upstream in seconds when in an
                                unhealthy state.
                              minimum: 0
                              type: integer
                            tcpFailures:
                              description: TCPFailures is the number of TCP failures
                                in a row to consider a target unhealthy.
                              minimum: 0
                              type: integer
                            timeouts:
                              description: Timeouts is the number of timeouts in a
                                row to consider a target unhealthy.
                              minimum: 0
                              type: integer
                          type: object
                      type: object
                    threshold:
                      description: |-
                        Threshold is the minimum percentage of the upstream’s targets’ weight that must be available for the whole
                        upstream to be considered healthy.
                      type: integer
                  type: object
                slots:
                  description: |-
                    Slots is the number of slots in the load balancer algorithm.
                    If not set, the default value in Kong for the algorithm is used.
                  maximum: 65536
                  minimum: 10
                  type: integer
                stickySessions:
                  description: |-
                    StickySessions defines the sticky session configuration for the upstream.
                    When enabled, clients will be routed to the same backend target based on a cookie.
                    This requires Kong Enterprise Gateway and setting `hash_on` to `none`.
                  properties:
                    cookie:
                      description: |-
                        Cookie is the name of the cookie to use for sticky sessions.
                        Kong will generate this cookie if it doesn't exist in the request.
                      minLength: 1
                      type: string
                    cookiePath:
                      default: /
                      description: CookiePath is the path to set in the cookie.
                      type: string
                  required:
                  - cookie
                  type: object
              type: object
            status:
              description: Status defines the current state of KongUpstreamPolicy
              properties:
                ancestors:
                  description: |-
                    Ancestors is a list of ancestor resources (usually Gateways) that are
                    associated with the policy, and the status of the policy with respect to
                    each ancestor. When this policy attaches to a parent, the controller that
                    manages the parent and the ancestors MUST add an entry to this list when
                    the controller first sees the policy and SHOULD update the entry as
                    appropriate when the relevant ancestor is modified.

                    Note that choosing the relevant ancestor is left to the Policy designers;
                    an important part of Policy design is designing the right object level at
                    which to namespace this status.

                    Note also that implementations MUST ONLY populate ancestor status for
                    the Ancestor resources they are responsible for. Implementations MUST
                    use the ControllerName field to uniquely identify the entries in this list
                    that they are responsible for.

                    Note that to achieve this, the list of PolicyAncestorStatus structs
                    MUST be treated as a map with a composite key, made up of the AncestorRef
                    and ControllerName fields combined.

                    A maximum of 16 ancestors will be represented in this list. An empty list
                    means the Policy is not relevant for any ancestors.

                    If this slice is full, implementations MUST NOT add further entries.
                    Instead they MUST consider the policy unimplementable and signal that
                    on any related resources such as the ancestor that would be referenced
                    here. For example, if this list was full on BackendTLSPolicy, no
                    additional Gateways would be able to reference the Service targeted by
                    the BackendTLSPolicy.
                  items:
                    description: |-
                      PolicyAncestorStatus describes the status of a route with respect to an
                      associated Ancestor.

                      Ancestors refer to objects that are either the Target of a policy or above it
                      in terms of object hierarchy. For example, if a policy targets a Service, the
                      Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
                      the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
                      useful object to place Policy status on, so we recommend that implementations
                      SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
                      have a _very_ good reason otherwise.

                      In the context of policy attachment, the Ancestor is used to distinguish which
                      resource results in a distinct application of this policy. For example, if a policy
                      targets a Service, it may have a distinct result per attached Gateway.

                      Policies targeting the same resource may have different effects depending on the
                      ancestors of those resources. For example, different Gateways targeting the same
                      Service may have different capabilities, especially if they have different underlying
                      implementations.

                      For example, in BackendTLSPolicy, the Policy attaches to a Service that is
                      used as a backend in a HTTPRoute that is itself attached to a Gateway.
                      In this case, the relevant object for status is the Gateway, and that is the
                      ancestor object referred to in this status.

                      Note that a parent is also an ancestor, so for objects where the parent is the
                      relevant object for status, this struct SHOULD still be used.

                      This struct is intended to be used in a slice that's effectively a map,
                      with a composite key made up of the AncestorRef and the ControllerName.
                    properties:
                      ancestorRef:
                        description: |-
                          AncestorRef corresponds with a ParentRef in the spec that this
                          PolicyAncestorStatus struct describes the status of.
                        properties:
                          group:
                            default: gateway.networking.k8s.io
                            description: |-
                              Group is the group of the referent.
                              When unspecified, "gateway.networking.k8s.io" is inferred.
                              To set the core API group (such as for a "Service" kind referent),
                              Group must be explicitly set to "" (empty string).

                              Support: Core
                            maxLength: 253
                            pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                            type: string
                          kind:
                            default: Gateway
                            description: |-
                              Kind is kind of the referent.

                              There are two kinds of parent resources with "Core" support:

                              * Gateway (Gateway conformance profile)
                              * Service (Mesh conformance profile, ClusterIP Services only)

                              Support for other resources is Implementation-Specific.
                            maxLength: 63
                            minLength: 1
                            pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                            type: string
                          name:
                            description: |-
                              Name is the name of the referent.

                              Support: Core
                            maxLength: 253
                            minLength: 1
                            type: string
                          namespace:
                            description: |-
                              Namespace is the namespace of the referent. When unspecified, this refers
                              to the local namespace of the Route.

                              Note that there are specific rules for ParentRefs which cross namespace
                              boundaries. Cross-namespace references are only valid if they are explicitly
                              allowed by something in the namespace they are referring to. For example:
                              Gateway has the AllowedRoutes field, and ReferenceGrant provides a
                              generic way to enable any other kind of cross-namespace reference.

                              <gateway:experimental:description>
                              ParentRefs from a Route to a Service in the same namespace are "producer"
                              routes, which apply default routing rules to inbound connections from
                              any namespace to the Service.

                              ParentRefs from a Route to a Service in a different namespace are
                              "consumer" routes, and these routing rules are only applied to outbound
                              connections originating from the same namespace as the Route, for which
                              the intended destination of the connections are a Service targeted as a
                              ParentRef of the Route.
                              </gateway:experimental:description>

                              Support: Core
                            maxLength: 63
                            minLength: 1
                            pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                            type: string
                          port:
                            description: |-
                              Port is the network port this Route targets. It can be interpreted
                              differently based on the type of parent resource.

                              When the parent resource is a Gateway, this targets all listeners
                              listening on the specified port that also support this kind of Route(and
                              select this Route). It's not recommended to set `Port` unless the
                              networking behaviors specified in a Route must apply to a specific port
                              as opposed to a listener(s) whose port(s) may be changed. When both Port
                              and SectionName are specified, the name and port of the selected listener
                              must match both specified values.

                              <gateway:experimental:description>
                              When the parent resource is a Service, this targets a specific port in the
                              Service spec. When both Port (experimental) and SectionName are specified,
                              the name and port of the selected port must match both specified values.
                              </gateway:experimental:description>

                              Implementations MAY choose to support other parent resources.
                              Implementations supporting other types of parent resources MUST clearly
                              document how/if Port is interpreted.

                              For the purpose of status, an attachment is considered successful as
                              long as the parent resource accepts it partially. For example, Gateway
                              listeners can restrict which Routes can attach to them by Route kind,
                              namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
                              from the referencing Route, the Route MUST be considered successfully
                              attached. If no Gateway listeners accept attachment from this Route,
                              the Route MUST be considered detached from the Gateway.

                              Support: Extended
                            format: int32
                            maximum: 65535
                            minimum: 1
                            type: integer
                          sectionName:
                            description: |-
                              SectionName is the name of a section within the target resource. In the
                              following resources, SectionName is interpreted as the following:

                              * Gateway: Listener name. When both Port (experimental) and SectionName
                              are specified, the name and port of the selected listener must match
                              both specified values.
                              * Service: Port name. When both Port (experimental) and SectionName
                              are specified, the name and port of the selected listener must match
                              both specified values.

                              Implementations MAY choose to support attaching Routes to other resources.
                              If that is the case, they MUST clearly document how SectionName is
                              interpreted.

                              When unspecified (empty string), this will reference the entire resource.
                              For the purpose of status, an attachment is considered successful if at
                              least one section in the parent resource accepts it. For example, Gateway
                              listeners can restrict which Routes can attach to them by Route kind,
                              namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
                              the referencing Route, the Route MUST be considered successfully
                              attached. If no Gateway listeners accept attachment from this Route, the
                              Route MUST be considered detached from the Gateway.

                              Support: Core
                            maxLength: 253
                            minLength: 1
                            pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                            type: string
                        required:
                        - name
                        type: object
                      conditions:
                        description: Conditions describes the status of the Policy
                          with respect to the given Ancestor.
                        items:
                          description: Condition contains details for one aspect of
                            the current state of this API Resource.
                          properties:
                            lastTransitionTime:
                              description: |-
                                lastTransitionTime is the last time the condition transitioned from one status to another.
                                This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: |-
                                message is a human readable message indicating details about the transition.
                                This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: |-
                                observedGeneration represents the .metadata.generation that the condition was set based upon.
                                For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                                with respect to the current state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: |-
                                reason contains a programmatic identifier indicating the reason for the condition's last transition.
                                Producers of specific condition types may define expected values and meanings for this field,
                                and whether the values are considered a guaranteed API.
                                The value should be a CamelCase string.
                                This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False,
                                Unknown.
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase.
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          type: object
                        maxItems: 8
                        minItems: 1
                        type: array
                        x-kubernetes-list-map-keys:
                        - type
                        x-kubernetes-list-type: map
                      controllerName:
                        description: |-
                          ControllerName is a domain/path string that indicates the name of the
                          controller that wrote this status. This corresponds with the
                          controllerName field on GatewayClass.

                          Example: "example.net/gateway-controller".

                          The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
                          valid Kubernetes names
                          (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).

                          Controllers MUST populate this field when writing status. Controllers should ensure that
                          entries to status populated with their ControllerName are cleaned up when they are no
                          longer necessary.
                        maxLength: 253
                        minLength: 1
                        pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\/[A-Za-z0-9\/\-._~%!$&'()*+,;=:]+$
                        type: string
                    required:
                    - ancestorRef
                    - controllerName
                    type: object
                  maxItems: 16
                  type: array
              required:
              - ancestors
              type: object
          type: object
          x-kubernetes-validations:
          - message: Only one of spec.hashOn.(input|cookie|header|uriCapture|queryArg)
              can be set.
            rule: 'has(self.spec.hashOn) ? [has(self.spec.hashOn.input), has(self.spec.hashOn.cookie),
              has(self.spec.hashOn.header), has(self.spec.hashOn.uriCapture), has(self.spec.hashOn.queryArg)].filter(fieldSet,
              fieldSet == true).size() <= 1 : true'
          - message: When spec.hashOn.cookie is set, spec.hashOn.cookiePath is required.
            rule: 'has(self.spec.hashOn) && has(self.spec.hashOn.cookie) ? has(self.spec.hashOn.cookiePath)
              : true'
          - message: When spec.hashOn.cookiePath is set, spec.hashOn.cookie is required.
            rule: 'has(self.spec.hashOn) && has(self.spec.hashOn.cookiePath) ? has(self.spec.hashOn.cookie)
              : true'
          - message: spec.algorithm must be set to either 'consistent-hashing' or
              'sticky-sessions' when spec.hashOn is set.
            rule: 'has(self.spec.hashOn) ? has(self.spec.algorithm) && (self.spec.algorithm
              == "consistent-hashing" || self.spec.algorithm == "sticky-sessions")
              : true'
          - message: Only one of spec.hashOnFallback.(input|header|uriCapture|queryArg)
              can be set.
            rule: 'has(self.spec.hashOnFallback) ? [has(self.spec.hashOnFallback.input),
              has(self.spec.hashOnFallback.header), has(self.spec.hashOnFallback.uriCapture),
              has(self.spec.hashOnFallback.queryArg)].filter(fieldSet, fieldSet ==
              true).size() <= 1 : true'
          - message: spec.algorithm must be set to "consistent-hashing" when spec.hashOnFallback
              is set.
            rule: 'has(self.spec.hashOnFallback) ? has(self.spec.algorithm) && self.spec.algorithm
              == "consistent-hashing" : true'
          - message: spec.hashOnFallback must not be set when spec.hashOn.cookie is
              set.
            rule: 'has(self.spec.hashOn) && has(self.spec.hashOn.cookie) ? !has(self.spec.hashOnFallback)
              : true'
          - message: spec.healthchecks.passive.healthy.interval must not be set.
            rule: 'has(self.spec.healthchecks) && has(self.spec.healthchecks.passive)
              && has(self.spec.healthchecks.passive.healthy) ? !has(self.spec.healthchecks.passive.healthy.interval)
              : true'
          - message: spec.healthchecks.passive.unhealthy.interval must not be set.
            rule: 'has(self.spec.healthchecks) && has(self.spec.healthchecks.passive)
              && has(self.spec.healthchecks.passive.unhealthy) ? !has(self.spec.healthchecks.passive.unhealthy.interval)
              : true'
          - message: When spec.stickySessions is set, spec.hashOn.input must be set
              to 'none' (no other hash_on fields allowed).
            rule: 'has(self.spec.stickySessions) ? (has(self.spec.hashOn) && has(self.spec.hashOn.input)
              && self.spec.hashOn.input == ''none'' && !has(self.spec.hashOn.cookie)
              && !has(self.spec.hashOn.cookiePath) && !has(self.spec.hashOn.header)
              && !has(self.spec.hashOn.uriCapture) && !has(self.spec.hashOn.queryArg))
              : true'
          - message: spec.stickySessions.cookie is required when spec.stickySessions
              is set.
            rule: 'has(self.spec.stickySessions) ? has(self.spec.stickySessions.cookie)
              : true'
          - message: spec.algorithm must be set to 'sticky-sessions' when spec.stickySessions
              is set.
            rule: 'has(self.spec.stickySessions) ? (has(self.spec.algorithm) && self.spec.algorithm
              == "sticky-sessions") : true'
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      categories:
      - kong-ingress-controller
      - kong
      kind: KongUpstreamPolicy
      listKind: KongUpstreamPolicyList
      plural: kongupstreampolicies
      shortNames:
      - kup
      singular: kongupstreampolicy
    conditions:
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2025-07-31T03:49:06Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1beta1
kind: List
metadata:
  resourceVersion: ""
