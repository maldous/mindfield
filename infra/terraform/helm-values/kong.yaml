# Kong Gateway Configuration
image:
  repository: mindfield/kong-oidc
  tag: "latest"
  pullPolicy: Always

# Deployment configuration
deployment:
  kong:
    enabled: true
  
# Environment variables
env:
  # Database
  database: "off"
  
  # Proxy configuration
  proxy_access_log: /dev/stdout
  admin_access_log: /dev/stdout
  admin_gui_access_log: /dev/stdout
  portal_api_access_log: /dev/stdout
  proxy_error_log: /dev/stderr
  admin_error_log: /dev/stderr
  admin_gui_error_log: /dev/stderr
  portal_api_error_log: /dev/stderr
  
  # Enable plugins
  plugins: "bundled,oidcify,rate-limiting"
  
  # Gateway API
  router_flavor: traditional
  
# Proxy service configuration
proxy:
  enabled: true
  type: LoadBalancer
  loadBalancerIP: "192.168.1.251"
  http:
    enabled: true
    servicePort: 80
    containerPort: 8000
  tls:
    enabled: true
    servicePort: 443
    containerPort: 8443
    parameters:
    - http2

# Admin API
admin:
  enabled: true
  type: ClusterIP
  http:
    enabled: true
    servicePort: 8001
    containerPort: 8001

# Manager (Admin GUI)
manager:
  enabled: false

# Portal
portal:
  enabled: false

# Enterprise features
enterprise:
  enabled: false

# Ingress Controller
ingressController:
  enabled: true
  gatewayDiscovery:
    enabled: false
  env:
    kong_admin_token: ""
    publish_service: gateway/kong-proxy
    kong_admin_tls_skip_verify: true
  
# Resources
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Security context
securityContext:
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true
  readOnlyRootFilesystem: true

# Pod security context
podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true
  fsGroup: 1000

# Service account
serviceAccount:
  create: true
  name: kong

# Autoscaling
autoscaling:
  enabled: false

# Pod disruption budget
podDisruptionBudget:
  enabled: false

# Update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Readiness probe
readinessProbe:
  httpGet:
    path: "/status/ready"
    port: status
    scheme: HTTP
  initialDelaySeconds: 5
  timeoutSeconds: 5
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3

# Liveness probe
livenessProbe:
  httpGet:
    path: "/status"
    port: status
    scheme: HTTP
  initialDelaySeconds: 5
  timeoutSeconds: 5
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3
